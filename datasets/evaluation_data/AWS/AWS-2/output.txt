chris@fedora:~/Documents/Projects/ArchAi/Training_Data/data/generated_configurations/AWS/2$ terraform apply -var="customer_gateway_ip=203.0.113.12"

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # aws_customer_gateway.main will be created
  + resource "aws_customer_gateway" "main" {
      + arn        = (known after apply)
      + bgp_asn    = "100"
      + id         = (known after apply)
      + ip_address = "203.0.113.12"
      + tags       = {
          + "Name" = "ert"
        }
      + tags_all   = {
          + "Name" = "ert"
        }
      + type       = "ipsec.1"
    }

  # aws_vpc.main will be created
  + resource "aws_vpc" "main" {
      + arn                                  = (known after apply)
      + cidr_block                           = "172.31.0.0/16"
      + default_network_acl_id               = (known after apply)
      + default_route_table_id               = (known after apply)
      + default_security_group_id            = (known after apply)
      + dhcp_options_id                      = (known after apply)
      + enable_dns_hostnames                 = true
      + enable_dns_support                   = true
      + enable_network_address_usage_metrics = (known after apply)
      + id                                   = (known after apply)
      + instance_tenancy                     = "default"
      + ipv6_association_id                  = (known after apply)
      + ipv6_cidr_block                      = (known after apply)
      + ipv6_cidr_block_network_border_group = (known after apply)
      + main_route_table_id                  = (known after apply)
      + owner_id                             = (known after apply)
      + tags                                 = {
          + "Name" = "vpc-vpgw-vpc-private"
        }
      + tags_all                             = {
          + "Name" = "vpc-vpgw-vpc-private"
        }
    }

  # aws_vpn_connection.main will be created
  + resource "aws_vpn_connection" "main" {
      + arn                            = (known after apply)
      + core_network_arn               = (known after apply)
      + core_network_attachment_arn    = (known after apply)
      + customer_gateway_configuration = (sensitive value)
      + customer_gateway_id            = (known after apply)
      + enable_acceleration            = (known after apply)
      + id                             = (known after apply)
      + local_ipv4_network_cidr        = (known after apply)
      + local_ipv6_network_cidr        = (known after apply)
      + outside_ip_address_type        = (known after apply)
      + remote_ipv4_network_cidr       = (known after apply)
      + remote_ipv6_network_cidr       = (known after apply)
      + routes                         = (known after apply)
      + static_routes_only             = (known after apply)
      + tags                           = {
          + "Name" = "vpc-vpgw-vpgw-private"
        }
      + tags_all                       = {
          + "Name" = "vpc-vpgw-vpgw-private"
        }
      + transit_gateway_attachment_id  = (known after apply)
      + tunnel1_address                = (known after apply)
      + tunnel1_bgp_asn                = (known after apply)
      + tunnel1_bgp_holdtime           = (known after apply)
      + tunnel1_cgw_inside_address     = (known after apply)
      + tunnel1_inside_cidr            = (known after apply)
      + tunnel1_inside_ipv6_cidr       = (known after apply)
      + tunnel1_preshared_key          = (sensitive value)
      + tunnel1_vgw_inside_address     = (known after apply)
      + tunnel2_address                = (known after apply)
      + tunnel2_bgp_asn                = (known after apply)
      + tunnel2_bgp_holdtime           = (known after apply)
      + tunnel2_cgw_inside_address     = (known after apply)
      + tunnel2_inside_cidr            = (known after apply)
      + tunnel2_inside_ipv6_cidr       = (known after apply)
      + tunnel2_preshared_key          = (sensitive value)
      + tunnel2_vgw_inside_address     = (known after apply)
      + tunnel_inside_ip_version       = (known after apply)
      + type                           = "ipsec.1"
      + vgw_telemetry                  = (known after apply)
      + vpn_gateway_id                 = (known after apply)

      + tunnel1_log_options (known after apply)

      + tunnel2_log_options (known after apply)
    }

  # aws_vpn_gateway.main will be created
  + resource "aws_vpn_gateway" "main" {
      + amazon_side_asn = "64512"
      + arn             = (known after apply)
      + id              = (known after apply)
      + tags            = {
          + "Name" = "vpc-vpgw-vpgw-private"
        }
      + tags_all        = {
          + "Name" = "vpc-vpgw-vpgw-private"
        }
      + vpc_id          = (known after apply)
    }

Plan: 4 to add, 0 to change, 0 to destroy.

Changes to Outputs:
  + vpc_id         = (known after apply)
  + vpn_gateway_id = (known after apply)

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

aws_customer_gateway.main: Creating...
aws_vpc.main: Creating...
aws_customer_gateway.main: Still creating... [00m10s elapsed]
aws_vpc.main: Still creating... [00m10s elapsed]
aws_customer_gateway.main: Creation complete after 11s [id=cgw-048fd227185455613]
aws_vpc.main: Creation complete after 13s [id=vpc-052546603acb7f593]
aws_vpn_gateway.main: Creating...
aws_vpn_gateway.main: Still creating... [00m10s elapsed]
aws_vpn_gateway.main: Still creating... [00m20s elapsed]
aws_vpn_gateway.main: Still creating... [00m30s elapsed]
aws_vpn_gateway.main: Still creating... [00m40s elapsed]
aws_vpn_gateway.main: Creation complete after 44s [id=vgw-03e64d2cc77bbfced]
aws_vpn_connection.main: Creating...
aws_vpn_connection.main: Still creating... [00m10s elapsed]
aws_vpn_connection.main: Still creating... [00m20s elapsed]
aws_vpn_connection.main: Still creating... [00m30s elapsed]
aws_vpn_connection.main: Still creating... [00m40s elapsed]
aws_vpn_connection.main: Still creating... [00m50s elapsed]
aws_vpn_connection.main: Still creating... [01m00s elapsed]
aws_vpn_connection.main: Still creating... [01m10s elapsed]
aws_vpn_connection.main: Still creating... [01m20s elapsed]
aws_vpn_connection.main: Still creating... [01m30s elapsed]
aws_vpn_connection.main: Still creating... [01m40s elapsed]
aws_vpn_connection.main: Still creating... [01m50s elapsed]
aws_vpn_connection.main: Still creating... [02m00s elapsed]
aws_vpn_connection.main: Still creating... [02m10s elapsed]
aws_vpn_connection.main: Still creating... [02m20s elapsed]
aws_vpn_connection.main: Still creating... [02m30s elapsed]
aws_vpn_connection.main: Still creating... [02m40s elapsed]
aws_vpn_connection.main: Still creating... [02m50s elapsed]
aws_vpn_connection.main: Still creating... [03m00s elapsed]
aws_vpn_connection.main: Creation complete after 3m5s [id=vpn-06c309bd427f98cbf]

Apply complete! Resources: 4 added, 0 changed, 0 destroyed.

Outputs:

vpc_id = "vpc-052546603acb7f593"
vpn_gateway_id = "vgw-03e64d2cc77bbfced"
chris@fedora:~/Documents/Projects/ArchAi/Training_Data/data/generated_configurations/AWS/2$ 