{"messages": [{"role":"system","content":"You are a Terraform expert. Respond only with valid Terraform code and inline comments. Do not include any extra text, explanation, or markdown formatting."},{"role":"user","content":"Create a VPC with a public subnet, two private subnet with nat gateway, internet access and a webserver for aws."},{"role":"assistant","content":"provider \"aws\" {\r\n  region = \"us-east-1\"\r\n}\r\n\r\n# Create VPC\r\nresource \"aws_vpc\" \"main\" {\r\n  cidr_block           = \"10.0.0.0/16\"\r\n  enable_dns_support   = true\r\n  enable_dns_hostnames = true\r\n  tags = {\r\n    Name = \"main-vpc\"\r\n  }\r\n}\r\n\r\n# Create Internet Gateway\r\nresource \"aws_internet_gateway\" \"igw\" {\r\n  vpc_id = aws_vpc.main.id\r\n  tags = {\r\n    Name = \"main-igw\"\r\n  }\r\n}\r\n\r\n# Create Public Subnet\r\nresource \"aws_subnet\" \"public\" {\r\n  vpc_id                  = aws_vpc.main.id\r\n  cidr_block              = \"10.0.1.0/24\"\r\n  availability_zone       = \"us-east-1a\"\r\n  map_public_ip_on_launch = true\r\n  tags = {\r\n    Name = \"public-subnet\"\r\n  }\r\n}\r\n\r\n# Create Route Table for Public Subnet\r\nresource \"aws_route_table\" \"public\" {\r\n  vpc_id = aws_vpc.main.id\r\n  tags = {\r\n    Name = \"public-rt\"\r\n  }\r\n}\r\n\r\n# Associate Route Table with Public Subnet\r\nresource \"aws_route_table_association\" \"public\" {\r\n  subnet_id      = aws_subnet.public.id\r\n  route_table_id = aws_route_table.public.id\r\n}\r\n\r\n# Add route to Internet Gateway in Public Route Table\r\nresource \"aws_route\" \"internet_access\" {\r\n  route_table_id         = aws_route_table.public.id\r\n  destination_cidr_block = \"0.0.0.0/0\"\r\n  gateway_id             = aws_internet_gateway.igw.id\r\n}\r\n\r\n# Create two Private Subnets\r\nresource \"aws_subnet\" \"private1\" {\r\n  vpc_id            = aws_vpc.main.id\r\n  cidr_block        = \"10.0.2.0/24\"\r\n  availability_zone = \"us-east-1a\"\r\n  tags = {\r\n    Name = \"private-subnet-1\"\r\n  }\r\n}\r\n\r\nresource \"aws_subnet\" \"private2\" {\r\n  vpc_id            = aws_vpc.main.id\r\n  cidr_block        = \"10.0.3.0/24\"\r\n  availability_zone = \"us-east-1b\"\r\n  tags = {\r\n    Name = \"private-subnet-2\"\r\n  }\r\n}\r\n\r\n# Create Elastic IP for NAT Gateway with explicit dependency on Internet Gateway\r\nresource \"aws_eip\" \"nat\" {\r\n  domain     = \"vpc\"\r\n  depends_on = [aws_internet_gateway.igw] # Ensures IGW exists before EIP allocation\r\n}\r\n\r\n# Create NAT Gateway in Public Subnet\r\nresource \"aws_nat_gateway\" \"nat\" {\r\n  allocation_id = aws_eip.nat.id\r\n  subnet_id     = aws_subnet.public.id\r\n  tags = {\r\n    Name = \"nat-gateway\"\r\n  }\r\n}\r\n\r\n# Create Private Route Table\r\nresource \"aws_route_table\" \"private\" {\r\n  vpc_id = aws_vpc.main.id\r\n  tags = {\r\n    Name = \"private-rt\"\r\n  }\r\n}\r\n\r\n# Add route to NAT Gateway in Private Route Table\r\nresource \"aws_route\" \"nat_route\" {\r\n  route_table_id         = aws_route_table.private.id\r\n  destination_cidr_block = \"0.0.0.0/0\"\r\n  nat_gateway_id         = aws_nat_gateway.nat.id\r\n}\r\n\r\n# Associate Private Subnets with Private Route Table\r\nresource \"aws_route_table_association\" \"private1\" {\r\n  subnet_id      = aws_subnet.private1.id\r\n  route_table_id = aws_route_table.private.id\r\n}\r\n\r\nresource \"aws_route_table_association\" \"private2\" {\r\n  subnet_id      = aws_subnet.private2.id\r\n  route_table_id = aws_route_table.private.id\r\n}\r\n\r\n# Create Security Group for Webserver\r\nresource \"aws_security_group\" \"web_sg\" {\r\n  name        = \"web-sg\"\r\n  description = \"Allow HTTP and SSH\"\r\n  vpc_id      = aws_vpc.main.id\r\n\r\n  ingress {\r\n    from_port   = 80\r\n    to_port     = 80\r\n    protocol    = \"tcp\"\r\n    cidr_blocks = [\"0.0.0.0/0\"]\r\n  }\r\n\r\n  ingress {\r\n    from_port   = 22\r\n    to_port     = 22\r\n    protocol    = \"tcp\"\r\n    cidr_blocks = [\"0.0.0.0/0\"]\r\n  }\r\n\r\n  egress {\r\n    from_port   = 0\r\n    to_port     = 0\r\n    protocol    = \"-1\"\r\n    cidr_blocks = [\"0.0.0.0/0\"]\r\n  }\r\n\r\n  tags = {\r\n    Name = \"web-sg\"\r\n  }\r\n}\r\n\r\n# Launch Webserver in Public Subnet\r\nresource \"aws_instance\" \"web\" {\r\n  ami                    = \"ami-0c94855ba95c71c99\" # Amazon Linux 2 AMI\r\n  instance_type          = \"t2.micro\"\r\n  subnet_id              = aws_subnet.public.id\r\n  associate_public_ip_address = true\r\n  security_groups        = [aws_security_group.web_sg.name]\r\n\r\n  tags = {\r\n    Name = \"web-server\"\r\n  }\r\n\r\n  user_data = <<-EOF\r\n              #!/bin/bash\r\n              yum update -y\r\n              yum install -y httpd\r\n              systemctl start httpd\r\n              systemctl enable httpd\r\n              echo \"Hello from Web Server\" > /var/www/html/index.html\r\n              EOF\r\n}\r\n"}]}
{"messages": [{"role":"user","content":"Provide an Amazon Aurora PostgreSQL RDS Cluster within a custom VPC setup, define networking (VPC, subnets, security groups), securely store the DB password in AWS Secrets Manager, and set up automated backups using AWS Backup."},{"role":"assistant","content":"provider \"aws\" {\r\n}\r\n\r\nresource \"aws_vpc\" \"main\" {\r\n  cidr_block = \"10.0.0.0/16\"\r\n}\r\n\r\nresource \"aws_subnet\" \"main\" {\r\n  vpc_id     = aws_vpc.main.id\r\n  cidr_block = \"10.0.1.0/24\"\r\n  availability_zone = \"us-west-2a\"\r\n}\r\n\r\nresource \"aws_subnet\" \"secondary\" {\r\n  vpc_id     = aws_vpc.main.id\r\n  cidr_block = \"10.0.2.0/24\"\r\n  availability_zone = \"us-west-2b\"\r\n}\r\n\r\nresource \"aws_security_group\" \"example\" {\r\n  name        = \"example\"\r\n  description = \"Example security group\"\r\n  vpc_id      = aws_vpc.main.id\r\n\r\n  ingress {\r\n    description = \"TLS from VPC\"\r\n    from_port   = 0\r\n    to_port     = 0\r\n    protocol    = \"-1\"\r\n    cidr_blocks = [\"10.0.0.0/16\"]\r\n  }\r\n}\r\n\r\nresource \"aws_rds_cluster\" \"example\" {\r\n  cluster_identifier      = \"aurora-cluster-demo\"\r\n  engine                  = \"aurora-postgresql\"\r\n  engine_version          = \"13.7\"\r\n  availability_zones      = [\"us-west-2a\", \"us-west-2b\"]\r\n  database_name           = \"postgres\"\r\n  master_username         = \"postgres\"\r\n  master_password         = aws_secretsmanager_secret_version.db_password.secret_string \r\n  preferred_backup_window = \"07:00-09:00\"\r\n  vpc_security_group_ids  = [aws_security_group.example.id]\r\n  db_subnet_group_name    = aws_db_subnet_group.example.name\r\n}\r\n\r\nresource \"aws_db_subnet_group\" \"example\" {\r\n  name       = \"main\"\r\n  subnet_ids = [aws_subnet.main.id, aws_subnet.secondary.id]\r\n\r\n  tags = {\r\n    Name = \"My database subnet group\"\r\n  }\r\n}\r\n\r\nresource \"aws_rds_cluster_instance\" \"cluster_instances\" {\r\n  count              = 2\r\n  identifier         = \"aurora-cluster-demo-${count.index}\"\r\n  cluster_identifier = aws_rds_cluster.example.id\r\n  instance_class     = \"db.r4.large\"\r\n  engine             = \"aurora-postgresql\"\r\n  engine_version     = \"13.7\"\r\n  publicly_accessible = false\r\n}\r\n\r\nresource \"aws_secretsmanager_secret\" \"db_password\" {\r\n  name        = \"DB_PASSWORD\"\r\n}\r\n\r\nresource \"aws_secretsmanager_secret_version\" \"db_password\" {\r\n  secret_id     = aws_secretsmanager_secret.db_password.id\r\n  secret_string = var.db_password\r\n}\r\n\r\nresource \"aws_backup_vault\" \"example\" {\r\n  name = \"my-backup-vault\"\r\n}\r\n\r\nresource \"aws_backup_plan\" \"example\" {\r\n  name = \"automated-backup-plan\"\r\n\r\n  rule {\r\n    rule_name         = \"rds-rule\"\r\n    target_vault_name = aws_backup_vault.example.name\r\n    schedule          = \"cron(0 12 * * ? *)\"\r\n  }\r\n}\r\n\r\nresource \"aws_backup_selection\" \"example\" {\r\n  name         = \"automated-backup-selection\"\r\n  iam_role_arn = aws_iam_role.example.arn\r\n  plan_id      = aws_backup_plan.example.id\r\n  resources    = [aws_rds_cluster.example.arn]\r\n}\r\n\r\nresource \"aws_iam_role\" \"example\" {\r\n  name = \"backup-service-role\"\r\n\r\n  assume_role_policy = <<EOF\r\n{\r\n  \"Version\": \"2012-10-17\",\r\n  \"Statement\": [\r\n    {\r\n      \"Effect\": \"Allow\",\r\n      \"Principal\": {\r\n        \"Service\": \"backup.amazonaws.com\"\r\n      },\r\n      \"Action\": \"sts:AssumeRole\"\r\n    }\r\n  ]\r\n}\r\nEOF\r\n}\r\n\r\nresource \"aws_iam_role_policy_attachment\" \"example\" {\r\n  role       = aws_iam_role.example.name\r\n  policy_arn = \"arn:aws:iam::aws:policy/service-role/AWSBackupServiceRolePolicyForBackup\"\r\n}\r\nvariable \"db_password\" {\r\n  description = \"The master password for the RDS instance\"\r\n  type        = string\r\n}\r\n"}]}
{"messages": [{"role": "user", "content": "Create a Google Cloud VPC Network using the specified `vpc_network_name`. Launch a VM Instance with the given parameters such as `vm_instance_name`, `machine_type`, and `boot_disk`. Set up firewall rules to allow SSH, HTTP, and custom port access. Reserve a static IP address for the VM and create a DNS record pointing to the VM's external IP. Output the internal and external IP addresses of the VM after provisioning."}, {"role": "assistant", "content": "\n#File: main.tf\nterraform {\n  required_providers {\n    google = {\n      source  = \"hashicorp/google\"\n      version = \"4.51.0\"\n    }\n  }\n}\n\nprovider \"google\" {\n  project = var.project\n  region  = var.region\n  zone    = var.zone\n}\n\n# Create VPC Network\nresource \"google_compute_network\" \"vpc_network\" {\n  name = var.vpc_network_name\n}\n\n# Create VM Instance\nresource \"google_compute_instance\" \"vm_instance\" {\n  name         = var.vm_instance_name\n  machine_type = var.machine_type\n  zone         = var.zone\n  tags = [\n    \"allow-ssh-rule\",\n    \"allow-http-rule\",\n    \"allow-3000-rule\"\n  ]\n\n  # Add ssh keys\n  metadata = {\n    ssh-keys = \"${var.ssh_username}:${var.ssh_pub_key}\"\n  }\n\n  # Operating System\n  boot_disk {\n    initialize_params {\n      image = var.boot_disk\n    }\n  }\n\n  # Network setting\n  network_interface {\n    network = google_compute_network.vpc_network.name\n    access_config {\n      nat_ip = google_compute_address.static.address\n    }\n  }\n\n  # metadata_startup_script = file(var.script_path)\n}\n\n# Create Firewall Rules\nresource \"google_compute_firewall\" \"ssh-rule\" {\n  name    = \"allow-ssh\"\n  network = google_compute_network.vpc_network.name\n  allow {\n    protocol = \"tcp\"\n    ports    = [\"22\"]\n  }\n  target_tags   = [\"allow-ssh-rule\"]\n  source_ranges = [\"0.0.0.0/0\"]\n}\nresource \"google_compute_firewall\" \"allow-http\" {\n  name    = \"allow-http\"\n  network = google_compute_network.vpc_network.name\n  allow {\n    protocol = \"tcp\"\n    ports    = [\"80\"]\n  }\n  target_tags   = [\"allow-http-rule\"]\n  source_ranges = [\"0.0.0.0/0\"]\n}\nresource \"google_compute_firewall\" \"allow-3000\" {\n  name    = \"allow-3000\"\n  network = google_compute_network.vpc_network.name\n  allow {\n    protocol = \"tcp\"\n    ports    = [\"3000\"]\n  }\n  target_tags   = [\"allow-3000-rule\"]\n  source_ranges = [\"0.0.0.0/0\"]\n}\n\n# Reserve Static IP Address\nresource \"google_compute_address\" \"static\" {\n  name = \"ipv4-address\"\n}\n\n# Create DNS Record\nresource \"google_dns_record_set\" \"terraform-learn\" {\n  name = \"${var.dns_record_name}.${var.domain_name}\"\n  type = \"A\"\n  ttl  = 300\n\n  managed_zone = var.managed_zone_name\n\n  rrdatas = [google_compute_instance.vm_instance.network_interface[0].access_config[0].nat_ip]\n}\n#File: outputs.tf\noutput \"vm_internal_ip\" {\n  value = google_compute_instance.vm_instance.network_interface.0.network_ip\n}\n\noutput \"vm_external_ip\" {\n  value = google_compute_instance.vm_instance.network_interface.0.access_config.0.nat_ip\n}\n#File: variables.tf\nvariable \"project\" {\n  type = string\n}\n\nvariable \"vm_instance_name\" {\n  type    = string\n  default = \"terraform-instance\"\n}\n\nvariable \"region\" {\n  type    = string\n  default = \"us-central1\"\n}\n\nvariable \"zone\" {\n  type    = string\n  default = \"us-central1-c\"\n}\n\nvariable \"machine_type\" {\n  type    = string\n  default = \"f1-micro\"\n}\n\nvariable \"vpc_network_name\" {\n  type    = string\n  default = \"terraform-network\"\n}\n\nvariable \"ssh_pub_key\" {\n  type = string\n}\n\nvariable \"ssh_username\" {\n  type = string\n}\n\nvariable \"boot_disk\" {\n  type    = string\n  default = \"cos-cloud/cos-113-lts\"\n}\n\nvariable \"domain_name\" {\n  type = string\n}\n\nvariable \"dns_record_name\" {\n  type = string\n}\n\nvariable \"managed_zone_name\" {\n  type = string\n}\n\nvariable \"script_path\" {\n  type    = string\n  default = \"./script.sh\"\n}"}]}
{"messages": [{"role": "user", "content": "Create a Google Cloud provider configuration in Terraform. Define a nested Ubuntu Jammy image sourced from the official Google repository. Set up a VPC with a specified subnet using a Terraform module. Configure firewall rules to allow all inbound and outbound traffic. Finally, launch a Google Compute Engine instance with the specified machine type and disk size, while outputting the instance's IP address and name."}, {"role": "assistant", "content": "\n#File: main.tf\nterraform {\n  required_providers {\n    google = {\n      source  = \"hashicorp/google\"\n      version = \"5.29.1\"\n    }\n  }\n}\n\nprovider \"google\" {\n  project = var.project\n  region  = var.region\n}\n\nresource \"google_compute_image\" \"this\" {\n  name = \"nested-ubuntu-jammy\"\n\n  source_image = \"https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/images/ubuntu-2204-jammy-v20240515\"\n  licenses = [\n    \"https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/licenses/ubuntu-2204-lts\",\n    \"https://www.googleapis.com/compute/v1/projects/vm-options/global/licenses/enable-vmx\"\n  ]\n}\n\nmodule \"vpc\" {\n  source  = \"terraform-google-modules/network/google\"\n  version = \"9.1.0\"\n\n  project_id   = var.project\n  network_name = \"${var.name}-vpc\"\n\n  subnets = [\n    {\n      subnet_name   = \"${var.name}-${var.region}-subnet\"\n      subnet_ip     = \"10.10.10.0/24\"\n      subnet_region = var.region\n    }\n  ]\n\n}\n\nresource \"google_compute_firewall\" \"allow-in\" {\n  name    = \"${var.name}-all-in\"\n  network = module.vpc.network_id\n\n  allow {\n    protocol = \"all\"\n  }\n\n  priority  = 1000\n  direction = \"INGRESS\"\n\n  source_ranges = [\"0.0.0.0/0\"]\n}\n\nresource \"google_compute_firewall\" \"allow-out\" {\n  name    = \"${var.name}-all-out\"\n  network = module.vpc.network_id\n\n  allow {\n    protocol = \"all\"\n  }\n\n  priority  = 1000\n  direction = \"EGRESS\"\n\n  source_ranges = [\"0.0.0.0/0\"]\n}\n\nresource \"google_compute_instance\" \"this\" {\n  name         = \"${var.name}-instance\"\n  machine_type = var.machine_type\n  zone         = var.zone\n\n  boot_disk {\n    initialize_params {\n      size  = var.disk_size\n      type  = \"pd-balanced\"\n      image = google_compute_image.this.self_link\n    }\n  }\n\n  network_interface {\n    subnetwork         = module.vpc.subnets_names[0]\n    subnetwork_project = var.project\n\n    access_config {\n\n    }\n  }\n\n  depends_on = [google_compute_image.this]\n}\n\noutput \"ip\" {\n  value = google_compute_instance.this.network_interface[0].access_config[0].nat_ip\n}\n\noutput \"instance_name\" {\n  value = google_compute_instance.this.name\n}\n#File: variables.tf\nvariable \"project\" {\n  type = string\n}\n\nvariable \"region\" {\n  type    = string\n  default = \"europe-central2\"\n}\n\nvariable \"zone\" {\n  type    = string\n  default = \"europe-central2-a\"\n}\n\nvariable \"name\" {\n  type    = string\n  default = \"eve-ng\"\n}\n\nvariable \"machine_type\" {\n  type    = string\n  default = \"n2-standard-2\"\n}\n\nvariable \"disk_size\" {\n  type    = number\n  default = 20\n}"}]}
{"messages": [{"role": "user", "content": "Create an Azure resource group named \"kestra-rg\" in the \"westus2\" location. Create a virtual network named \"kestra-network\" with an address space of \"10.0.0.0/16\" within that resource group. Create a subnet named \"kestra-subnet\" with an address prefix of \"10.0.1.0/24\" in the virtual network. Create a static public IP address named \"kestra-public-ip\" in the same resource group. Finally, create a virtual machine named \"kestra-vm\" with an Ubuntu image, associating it with the network interface you will define within the same configurations."}, {"role": "assistant", "content": "\n#File: host.tf\n# Configure the Azure provider\nterraform {\n  required_providers {\n    azurerm = {\n      source  = \"hashicorp/azurerm\"\n      version = \"~> 3.0.2\"\n    }\n  }\n\n  required_version = \">= 1.1.0\"\n}\n\nprovider \"azurerm\" {\n  features {}\n}\n\nresource \"azurerm_resource_group\" \"kestra\" {\n  name     = \"kestra-rg\"\n  location = \"westus2\"\n}\n\nresource \"azurerm_virtual_network\" \"kestra\" {\n  name                = \"kestra-network\"\n  address_space       = [\"10.0.0.0/16\"]\n  location            = azurerm_resource_group.kestra.location\n  resource_group_name = azurerm_resource_group.kestra.name\n}\n\nresource \"azurerm_subnet\" \"kestra\" {\n  name                 = \"kestra-subnet\"\n  resource_group_name  = azurerm_resource_group.kestra.name\n  virtual_network_name = azurerm_virtual_network.kestra.name\n  address_prefixes     = [\"10.0.1.0/24\"]\n}\n\nresource \"azurerm_public_ip\" \"kestra\" {\n  name                = \"kestra-public-ip\"\n  location            = azurerm_resource_group.kestra.location\n  resource_group_name = azurerm_resource_group.kestra.name\n  allocation_method   = \"Static\"\n}\n\nresource \"azurerm_network_interface\" \"kestra\" {\n  name                = \"kestra-nic\"\n  location            = azurerm_resource_group.kestra.location\n  resource_group_name = azurerm_resource_group.kestra.name\n\n  ip_configuration {\n    name                          = \"internal\"\n    subnet_id                     = azurerm_subnet.kestra.id\n    private_ip_address_allocation = \"Dynamic\"\n  }\n}\n\nresource \"azurerm_virtual_machine\" \"kestra\" {\n  name                  = \"kestra-vm\"\n  location              = azurerm_resource_group.kestra.location\n  resource_group_name   = azurerm_resource_group.kestra.name\n  network_interface_ids = [azurerm_network_interface.kestra.id]\n  vm_size               = \"Standard_DS1_v2\"\n\n  storage_image_reference {\n    publisher = \"Canonical\"\n    offer     = \"0001-com-ubuntu-server-jammy\"\n    sku       = \"22_04-lts\"\n    version   = \"latest\"\n  }\n\n  storage_os_disk {\n    name              = \"kestra-osdisk\"\n    caching           = \"ReadWrite\"\n    create_option     = \"FromImage\"\n    managed_disk_type = \"Standard_LRS\"\n  }\n\n  os_profile {\n    computer_name  = \"hostname\"\n    admin_username = \"adminuser\"\n    admin_password = \"P@ssw0rd!\"\n  }\n\n  os_profile_linux_config {\n    disable_password_authentication = false\n  }\n}\n"}]}
{"messages": [{"role":"user","content":"Create a user called backup-user and give it read-only access to S3. This is for limited access use cases. Don't create access keys in this step"},{"role":"assistant","content":"provider \"aws\" {\r\n  region = \"us-east-1\"\r\n}\r\n\r\nresource \"aws_iam_user\" \"backup\" {\r\n  name = \"backup-user\"\r\n}\r\n\r\nresource \"aws_iam_user_policy_attachment\" \"attach\" {\r\n  user       = aws_iam_user.backup.name\r\n  policy_arn = \"arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess\"\r\n}\r\n"}]}
{"messages": [{"role":"user","content":"Set up a complete AWS infrastructure for automated build and deployment of a Go application using ECS, CodeCommit, CodeBuild, and CodePipeline. Create a VPC with public subnets, security groups, a load balancer, an ECR repository, and an ECS Fargate service definition. Additionally, configure a CI/CD pipeline that pulls source code from CodeCommit, builds it with CodeBuild, and deploys it to ECS"},{"role":"assistant","content":"provider \"aws\" {\r\n  profile = \"default\"\r\n  region  = \"us-east-1\"\r\n}\r\n\r\nresource \"aws_vpc\" \"ecs-vpc\" {\r\n  cidr_block = \"${var.cidr}\"\r\n\r\n  tags = {\r\n    Name = \"ecs-vpc\"\r\n  }\r\n}\r\n\r\n# PUBLIC SUBNETS\r\nresource \"aws_subnet\" \"pub-subnets\" {\r\n  count                   = length(var.azs)\r\n  vpc_id                  = \"${aws_vpc.ecs-vpc.id}\"\r\n  availability_zone       = \"${var.azs[count.index]}\"\r\n  cidr_block              = \"${var.subnets-ip[count.index]}\"\r\n  map_public_ip_on_launch = true\r\n\r\n  tags = {\r\n    Name = \"pub-subnets\"\r\n  }\r\n}\r\n\r\n# INTERNET GATEWAY\r\nresource \"aws_internet_gateway\" \"i-gateway\" {\r\n  vpc_id = \"${aws_vpc.ecs-vpc.id}\"\r\n\r\n  tags = {\r\n    Name = \"ecs-igtw\"\r\n  }\r\n}\r\nvariable \"cidr\" {\r\n  type    = string\r\n  default = \"145.0.0.0/16\"\r\n}\r\n\r\nvariable \"azs\" {\r\n  type = list(string)\r\n  default = [\r\n    \"us-east-1a\",\r\n    \"us-east-1b\"\r\n  ]\r\n}\r\n\r\nvariable \"subnets-ip\" {\r\n  type = list(string)\r\n  default = [\r\n    \"145.0.1.0/24\",\r\n    \"145.0.2.0/24\"\r\n  ]\r\n\r\n}\r\nresource \"aws_iam_role\" \"codebuild-role\" {\r\n  name = \"codebuild-role\"\r\n  assume_role_policy = jsonencode({\r\n    Statement = [\r\n      {\r\n        Action = \"sts:AssumeRole\"\r\n        Effect = \"Allow\"\r\n        Principal = {\r\n          Service = \"codebuild.amazonaws.com\"\r\n        }\r\n      },\r\n    ]\r\n  })\r\n}\r\n\r\nresource \"aws_iam_role_policy\" \"codebuild-policy\" {\r\n  role = \"${aws_iam_role.codebuild-role.name}\"\r\n\r\n  policy = jsonencode({\r\n    Statement = [\r\n      {\r\n        Action   = [\"codecommit:GitPull\"]\r\n        Effect   = \"Allow\"\r\n        Resource = \"*\"\r\n      },\r\n      {\r\n        Action = [\r\n          \"ecr:BatchCheckLayerAvailability\",\r\n          \"ecr:GetDownloadUrlForLayer\",\r\n          \"ecr:BatchGetImage\",\r\n          \"ecr:CompleteLayerUpload\",\r\n          \"ecr:GetAuthorizationToken\",\r\n          \"ecr:InitiateLayerUpload\",\r\n          \"ecr:PutImage\",\r\n        \"ecr:UploadLayerPart\"]\r\n        Effect   = \"Allow\"\r\n        Resource = \"*\"\r\n      },\r\n      {\r\n        Action = [\r\n          \"logs:CreateLogGroup\",\r\n          \"logs:CreateLogStream\",\r\n        \"logs:PutLogEvents\"]\r\n        Effect   = \"Allow\"\r\n        Resource = \"*\"\r\n      },\r\n      {\r\n        Action = [\r\n          \"s3:PutObject\",\r\n          \"s3:GetObject\",\r\n          \"s3:GetObjectVersion\",\r\n          \"s3:GetBucketAcl\",\r\n        \"s3:GetBucketLocation\"]\r\n        Effect   = \"Allow\"\r\n        Resource = \"*\"\r\n      }\r\n    ]\r\n\r\n\r\n  })\r\n\r\n}\r\n# TABLE FOR PUBLIC SUBNETS\r\nresource \"aws_route_table\" \"pub-table\" {\r\n  vpc_id = \"${aws_vpc.ecs-vpc.id}\"\r\n}\r\n\r\nresource \"aws_route\" \"pub-route\" {\r\n  route_table_id         = \"${aws_route_table.pub-table.id}\"\r\n  destination_cidr_block = \"0.0.0.0/0\"\r\n  gateway_id             = \"${aws_internet_gateway.i-gateway.id}\"\r\n}\r\n\r\nresource \"aws_route_table_association\" \"as-pub\" {\r\n  count          = length(var.azs)\r\n  route_table_id = \"${aws_route_table.pub-table.id}\"\r\n  subnet_id      = \"${aws_subnet.pub-subnets[count.index].id}\"\r\n}\r\nresource \"aws_security_group\" \"sg1\" {\r\n  name        = \"golang-server\"\r\n  description = \"Port 5000\"\r\n  vpc_id      = aws_vpc.ecs-vpc.id\r\n\r\n  ingress {\r\n    description      = \"Allow Port 5000\"\r\n    from_port        = 5000\r\n    to_port          = 5000\r\n    protocol         = \"tcp\"\r\n    cidr_blocks      = [\"0.0.0.0/0\"]\r\n    ipv6_cidr_blocks = [\"::/0\"]\r\n  }\r\n\r\n  egress {\r\n    description = \"Allow all ip and ports outboun\"\r\n    from_port   = 0\r\n    to_port     = 0\r\n    protocol    = \"-1\"\r\n    cidr_blocks = [\"0.0.0.0/0\"]\r\n  }\r\n}\r\n\r\nresource \"aws_security_group\" \"sg2\" {\r\n  name        = \"golang-server-alb\"\r\n  description = \"Port 80\"\r\n  vpc_id      = aws_vpc.ecs-vpc.id\r\n\r\n  ingress {\r\n    description      = \"Allow Port 80\"\r\n    from_port        = 80\r\n    to_port          = 80\r\n    protocol         = \"tcp\"\r\n    cidr_blocks      = [\"0.0.0.0/0\"]\r\n    ipv6_cidr_blocks = [\"::/0\"]\r\n  }\r\n\r\n  egress {\r\n    description = \"Allow all ip and ports outboun\"\r\n    from_port   = 0\r\n    to_port     = 0\r\n    protocol    = \"-1\"\r\n    cidr_blocks = [\"0.0.0.0/0\"]\r\n  }\r\n}\r\n\r\n\r\nresource \"aws_lb\" \"app-lb\" {\r\n  name               = \"app-lb\"\r\n  internal           = false\r\n  load_balancer_type = \"application\"\r\n  security_groups    = [aws_security_group.sg2.id]\r\n  subnets            = [\"${aws_subnet.pub-subnets[0].id}\", \"${aws_subnet.pub-subnets[1].id}\"]\r\n\r\n}\r\n\r\nresource \"aws_lb_target_group\" \"tg-group\" {\r\n  name        = \"tg-group\"\r\n  port        = \"5000\"\r\n  protocol    = \"HTTP\"\r\n  vpc_id      = \"${aws_vpc.ecs-vpc.id}\"\r\n  target_type = \"ip\"\r\n\r\n}\r\n\r\nresource \"aws_lb_listener\" \"lb-listener\" {\r\n  load_balancer_arn = \"${aws_lb.app-lb.arn}\"\r\n  port              = \"80\"\r\n  protocol          = \"HTTP\"\r\n\r\n  default_action {\r\n    type             = \"forward\"\r\n    target_group_arn = \"${aws_lb_target_group.tg-group.arn}\"\r\n  }\r\n}\r\n# CODECOMMIT REPOSITORY\r\nresource \"aws_codecommit_repository\" \"repo\" {\r\n  repository_name = var.repo_name\r\n}\r\n\r\n# CODEBUILD\r\nresource \"aws_codebuild_project\" \"repo-project\" {\r\n  name         = \"${var.build_project}\"\r\n  service_role = \"${aws_iam_role.codebuild-role.arn}\"\r\n\r\n  artifacts {\r\n    type = \"NO_ARTIFACTS\"\r\n  }\r\n\r\n  source {\r\n    type     = \"CODECOMMIT\"\r\n    location = \"${aws_codecommit_repository.repo.clone_url_http}\"\r\n  }\r\n\r\n  environment {\r\n    compute_type    = \"BUILD_GENERAL1_SMALL\"\r\n    image           = \"aws/codebuild/standard:5.0\"\r\n    type            = \"LINUX_CONTAINER\"\r\n    privileged_mode = true\r\n  }\r\n}\r\n# S3 BUCKET FOR ARTIFACTORY_STORE\r\nresource \"aws_s3_bucket\" \"bucket-artifact\" {\r\n  bucket = \"eroz-artifactory-bucket\"\r\n  acl    = \"private\"\r\n}\r\n\r\n# CODEPIPELINE\r\nresource \"aws_codepipeline\" \"pipeline\" {\r\n  name     = \"pipeline\"\r\n  role_arn = \"${data.aws_iam_role.pipeline_role.arn}\"\r\n\r\n  artifact_store {\r\n    location = \"${aws_s3_bucket.bucket-artifact.bucket}\"\r\n    type     = \"S3\"\r\n  }\r\n  # SOURCE\r\n  stage {\r\n    name = \"Source\"\r\n    action {\r\n      name             = \"Source\"\r\n      category         = \"Source\"\r\n      owner            = \"AWS\"\r\n      provider         = \"CodeCommit\"\r\n      version          = \"1\"\r\n      output_artifacts = [\"source_output\"]\r\n\r\n      configuration = {\r\n        RepositoryName = \"${var.repo_name}\"\r\n        BranchName     = \"${var.branch_name}\"\r\n      }\r\n    }\r\n  }\r\n  # BUILD\r\n  stage {\r\n    name = \"Build\"\r\n    action {\r\n      name             = \"Build\"\r\n      category         = \"Build\"\r\n      owner            = \"AWS\"\r\n      provider         = \"CodeBuild\"\r\n      version          = \"1\"\r\n      input_artifacts  = [\"source_output\"]\r\n      output_artifacts = [\"build_output\"]\r\n\r\n      configuration = {\r\n        ProjectName = \"${var.build_project}\"\r\n      }\r\n    }\r\n  }\r\n  # DEPLOY\r\n  stage {\r\n    name = \"Deploy\"\r\n    action {\r\n      name            = \"Deploy\"\r\n      category        = \"Deploy\"\r\n      owner           = \"AWS\"\r\n      provider        = \"ECS\"provider \"aws\" {\r\n  profile = \"default\"\r\n  region  = \"us-east-1\"\r\n}\r\n\r\nresource \"aws_vpc\" \"ecs-vpc\" {\r\n  cidr_block = \"${var.cidr}\"\r\n\r\n  tags = {\r\n    Name = \"ecs-vpc\"\r\n  }\r\n}\r\n\r\n# PUBLIC SUBNETS\r\nresource \"aws_subnet\" \"pub-subnets\" {\r\n  count                   = length(var.azs)\r\n  vpc_id                  = \"${aws_vpc.ecs-vpc.id}\"\r\n  availability_zone       = \"${var.azs[count.index]}\"\r\n  cidr_block              = \"${var.subnets-ip[count.index]}\"\r\n  map_public_ip_on_launch = true\r\n\r\n  tags = {\r\n    Name = \"pub-subnets\"\r\n  }\r\n}\r\n\r\n# INTERNET GATEWAY\r\nresource \"aws_internet_gateway\" \"i-gateway\" {\r\n  vpc_id = \"${aws_vpc.ecs-vpc.id}\"\r\n\r\n  tags = {\r\n    Name = \"ecs-igtw\"\r\n  }\r\n}\r\nvariable \"cidr\" {\r\n  type    = string\r\n  default = \"145.0.0.0/16\"\r\n}\r\n\r\nvariable \"azs\" {\r\n  type = list(string)\r\n  default = [\r\n    \"us-east-1a\",\r\n    \"us-east-1b\"\r\n  ]\r\n}\r\n\r\nvariable \"subnets-ip\" {\r\n  type = list(string)\r\n  default = [\r\n    \"145.0.1.0/24\",\r\n    \"145.0.2.0/24\"\r\n  ]\r\n\r\n}\r\nresource \"aws_iam_role\" \"codebuild-role\" {\r\n  name = \"codebuild-role\"\r\n  assume_role_policy = jsonencode({\r\n    Statement = [\r\n      {\r\n        Action = \"sts:AssumeRole\"\r\n        Effect = \"Allow\"\r\n        Principal = {\r\n          Service = \"codebuild.amazonaws.com\"\r\n        }\r\n      },\r\n    ]\r\n  })\r\n}\r\n\r\nresource \"aws_iam_role_policy\" \"codebuild-policy\" {\r\n  role = \"${aws_iam_role.codebuild-role.name}\"\r\n\r\n  policy = jsonencode({\r\n    Statement = [\r\n      {\r\n        Action   = [\"codecommit:GitPull\"]\r\n        Effect   = \"Allow\"\r\n        Resource = \"*\"\r\n      },\r\n      {\r\n        Action = [\r\n          \"ecr:BatchCheckLayerAvailability\",\r\n          \"ecr:GetDownloadUrlForLayer\",\r\n          \"ecr:BatchGetImage\",\r\n          \"ecr:CompleteLayerUpload\",\r\n          \"ecr:GetAuthorizationToken\",\r\n          \"ecr:InitiateLayerUpload\",\r\n          \"ecr:PutImage\",\r\n        \"ecr:UploadLayerPart\"]\r\n        Effect   = \"Allow\"\r\n        Resource = \"*\"\r\n      },\r\n      {\r\n        Action = [\r\n          \"logs:CreateLogGroup\",\r\n          \"logs:CreateLogStream\",\r\n        \"logs:PutLogEvents\"]\r\n        Effect   = \"Allow\"\r\n        Resource = \"*\"\r\n      },\r\n      {\r\n        Action = [\r\n          \"s3:PutObject\",\r\n          \"s3:GetObject\",\r\n          \"s3:GetObjectVersion\",\r\n          \"s3:GetBucketAcl\",\r\n        \"s3:GetBucketLocation\"]\r\n        Effect   = \"Allow\"\r\n        Resource = \"*\"\r\n      }\r\n    ]\r\n\r\n\r\n  })\r\n\r\n}\r\n# TABLE FOR PUBLIC SUBNETS\r\nresource \"aws_route_table\" \"pub-table\" {\r\n  vpc_id = \"${aws_vpc.ecs-vpc.id}\"\r\n}\r\n\r\nresource \"aws_route\" \"pub-route\" {\r\n  route_table_id         = \"${aws_route_table.pub-table.id}\"\r\n  destination_cidr_block = \"0.0.0.0/0\"\r\n  gateway_id             = \"${aws_internet_gateway.i-gateway.id}\"\r\n}\r\n\r\nresource \"aws_route_table_association\" \"as-pub\" {\r\n  count          = length(var.azs)\r\n  route_table_id = \"${aws_route_table.pub-table.id}\"\r\n  subnet_id      = \"${aws_subnet.pub-subnets[count.index].id}\"\r\n}\r\nresource \"aws_security_group\" \"sg1\" {\r\n  name        = \"golang-server\"\r\n  description = \"Port 5000\"\r\n  vpc_id      = aws_vpc.ecs-vpc.id\r\n\r\n  ingress {\r\n    description      = \"Allow Port 5000\"\r\n    from_port        = 5000\r\n    to_port          = 5000\r\n    protocol         = \"tcp\"\r\n    cidr_blocks      = [\"0.0.0.0/0\"]\r\n    ipv6_cidr_blocks = [\"::/0\"]\r\n  }\r\n\r\n  egress {\r\n    description = \"Allow all ip and ports outboun\"\r\n    from_port   = 0\r\n    to_port     = 0\r\n    protocol    = \"-1\"\r\n    cidr_blocks = [\"0.0.0.0/0\"]\r\n  }\r\n}\r\n\r\nresource \"aws_security_group\" \"sg2\" {\r\n  name        = \"golang-server-alb\"\r\n  description = \"Port 80\"\r\n  vpc_id      = aws_vpc.ecs-vpc.id\r\n\r\n  ingress {\r\n    description      = \"Allow Port 80\"\r\n    from_port        = 80\r\n    to_port          = 80\r\n    protocol         = \"tcp\"\r\n    cidr_blocks      = [\"0.0.0.0/0\"]\r\n    ipv6_cidr_blocks = [\"::/0\"]\r\n  }\r\n\r\n  egress {\r\n    description = \"Allow all ip and ports outboun\"\r\n    from_port   = 0\r\n    to_port     = 0\r\n    protocol    = \"-1\"\r\n    cidr_blocks = [\"0.0.0.0/0\"]\r\n  }\r\n}\r\n\r\n\r\nresource \"aws_lb\" \"app-lb\" {\r\n  name               = \"app-lb\"\r\n  internal           = false\r\n  load_balancer_type = \"application\"\r\n  security_groups    = [aws_security_group.sg2.id]\r\n  subnets            = [\"${aws_subnet.pub-subnets[0].id}\", \"${aws_subnet.pub-subnets[1].id}\"]\r\n\r\n}\r\n\r\nresource \"aws_lb_target_group\" \"tg-group\" {\r\n  name        = \"tg-group\"\r\n  port        = \"5000\"\r\n  protocol    = \"HTTP\"\r\n  vpc_id      = \"${aws_vpc.ecs-vpc.id}\"\r\n  target_type = \"ip\"\r\n\r\n}\r\n\r\nresource \"aws_lb_listener\" \"lb-listener\" {\r\n  load_balancer_arn = \"${aws_lb.app-lb.arn}\"\r\n  port              = \"80\"\r\n  protocol          = \"HTTP\"\r\n\r\n  default_action {\r\n    type             = \"forward\"\r\n    target_group_arn = \"${aws_lb_target_group.tg-group.arn}\"\r\n  }\r\n}\r\n# CODECOMMIT REPOSITORY\r\nresource \"aws_codecommit_repository\" \"repo\" {\r\n  repository_name = var.repo_name\r\n}\r\n\r\n# CODEBUILD\r\nresource \"aws_codebuild_project\" \"repo-project\" {\r\n  name         = \"${var.build_project}\"\r\n  service_role = \"${aws_iam_role.codebuild-role.arn}\"\r\n\r\n  artifacts {\r\n    type = \"NO_ARTIFACTS\"\r\n  }\r\n\r\n  source {\r\n    type     = \"CODECOMMIT\"\r\n    location = \"${aws_codecommit_repository.repo.clone_url_http}\"\r\n  }\r\n\r\n  environment {\r\n    compute_type    = \"BUILD_GENERAL1_SMALL\"\r\n    image           = \"aws/codebuild/standard:5.0\"\r\n    type            = \"LINUX_CONTAINER\"\r\n    privileged_mode = true\r\n  }\r\n}\r\n# S3 BUCKET FOR ARTIFACTORY_STORE\r\nresource \"aws_s3_bucket\" \"bucket-artifact\" {\r\n  bucket = \"eroz-artifactory-bucket\"\r\n  acl    = \"private\"\r\n}\r\n\r\n# CODEPIPELINE\r\nresource \"aws_codepipeline\" \"pipeline\" {\r\n  name     = \"pipeline\"\r\n  role_arn = \"${data.aws_iam_role.pipeline_role.arn}\"\r\n\r\n  artifact_store {\r\n    location = \"${aws_s3_bucket.bucket-artifact.bucket}\"\r\n    type     = \"S3\"\r\n  }\r\n  # SOURCE\r\n  stage {\r\n    name = \"Source\"\r\n    action {\r\n      name             = \"Source\"\r\n      category         = \"Source\"\r\n      owner            = \"AWS\"\r\n      provider         = \"CodeCommit\"\r\n      version          = \"1\"\r\n      output_artifacts = [\"source_output\"]\r\n\r\n      configuration = {\r\n        RepositoryName = \"${var.repo_name}\"\r\n        BranchName     = \"${var.branch_name}\"\r\n      }\r\n    }\r\n  }\r\n  # BUILD\r\n  stage {\r\n    name = \"Build\"\r\n    action {\r\n      name             = \"Build\"\r\n      category         = \"Build\"\r\n      owner            = \"AWS\"\r\n      provider         = \"CodeBuild\"\r\n      version          = \"1\"\r\n      input_artifacts  = [\"source_output\"]\r\n      output_artifacts = [\"build_output\"]\r\n\r\n      configuration = {\r\n        ProjectName = \"${var.build_project}\"\r\n      }\r\n    }\r\n  }\r\n  # DEPLOY\r\n  stage {\r\n    name = \"Deploy\"\r\n    action {\r\n      name            = \"Deploy\"\r\n      category        = \"Deploy\"\r\n      owner           = \"AWS\"\r\n      provider        = \"ECS\"\r\n      version         = \"1\"\r\n      input_artifacts = [\"build_output\"]\r\n\r\n      configuration = {\r\n        ClusterName = \"clusterDev\"\r\n        ServiceName = \"golang-Service\"\r\n        FileName    = \"imagedefinitions.json\"\r\n      }\r\n    }\r\n  }\r\n}\r\ndata \"aws_iam_role\" \"pipeline_role\" {\r\n  name = \"codepipeline-role\"\r\n}\r\n\r\ndata \"aws_iam_role\" \"ecs-task\" {\r\n  name = \"ecsTaskExecutionRole\"\r\n}\r\noutput \"repo_url\" {\r\n  value = aws_codecommit_repository.repo.clone_url_http\r\n}\r\n\r\noutput \"alb_dns\" {\r\n  value = aws_lb.app-lb.dns_name\r\n}\r\nvariable \"repo_name\" {\r\n  type    = string\r\n  default = \"dev-repo\"\r\n}\r\n\r\nvariable \"branch_name\" {\r\n  type    = string\r\n  default = \"master\"\r\n}\r\n\r\nvariable \"build_project\" {\r\n  type    = string\r\n  default = \"dev-build-repo\"\r\n}\r\n\r\nvariable \"uri_repo\" {\r\n  type = string\r\n  #The URI_REPO value is in a TF_VAR in my PC\r\n}\r\n\r\n# ECR REPOSITORY\r\nresource \"aws_ecr_repository\" \"ecr-repo\" {\r\n  name = \"ecr-repo\"\r\n}\r\n\r\n# ECS CLUSTER\r\nresource \"aws_ecs_cluster\" \"ecs-cluster\" {\r\n  name = \"clusterDev\"\r\n}\r\n\r\n# TASK DEFINITION\r\nresource \"aws_ecs_task_definition\" \"task\" {\r\n  family                   = \"HTTPserver\"\r\n  network_mode             = \"awsvpc\"\r\n  requires_compatibilities = [\"FARGATE\"]\r\n  cpu                      = 256\r\n  memory                   = 512\r\n  execution_role_arn       = \"${data.aws_iam_role.ecs-task.arn}\"\r\n\r\n  container_definitions = jsonencode([\r\n    {\r\n      name   = \"golang-container\"\r\n      image  = \"${var.uri_repo}:latest\" #URI\r\n      cpu    = 256\r\n      memory = 512\r\n      portMappings = [\r\n        {\r\n          containerPort = 5000\r\n        }\r\n      ]\r\n    }\r\n  ])\r\n}\r\n\r\n# ECS SERVICE\r\nresource \"aws_ecs_service\" \"svc\" {\r\n  name            = \"golang-Service\"\r\n  cluster         = \"${aws_ecs_cluster.ecs-cluster.id}\"\r\n  task_definition = \"${aws_ecs_task_definition.task.id}\"\r\n  desired_count   = 2\r\n  launch_type     = \"FARGATE\"\r\n\r\n\r\n  network_configuration {\r\n    subnets          = [\"${aws_subnet.pub-subnets[0].id}\", \"${aws_subnet.pub-subnets[1].id}\"]\r\n    security_groups  = [\"${aws_security_group.sg1.id}\"]\r\n    assign_public_ip = true\r\n  }\r\n\r\n  load_balancer {\r\n    target_group_arn = \"${aws_lb_target_group.tg-group.arn}\"\r\n    container_name   = \"golang-container\"\r\n    container_port   = \"5000\"\r\n  }\r\n}\r\n\r\n\r\n      version         = \"1\"\r\n      input_artifacts = [\"build_output\"]\r\n\r\n      configuration = {\r\n        ClusterName = \"clusterDev\"\r\n        ServiceName = \"golang-Service\"\r\n        FileName    = \"imagedefinitions.json\"\r\n      }\r\n    }\r\n  }\r\n}\r\ndata \"aws_iam_role\" \"pipeline_role\" {\r\n  name = \"codepipeline-role\"\r\n}\r\n\r\ndata \"aws_iam_role\" \"ecs-task\" {\r\n  name = \"ecsTaskExecutionRole\"\r\n}\r\noutput \"repo_url\" {\r\n  value = aws_codecommit_repository.repo.clone_url_http\r\n}\r\n\r\noutput \"alb_dns\" {\r\n  value = aws_lb.app-lb.dns_name\r\n}\r\nvariable \"repo_name\" {\r\n  type    = string\r\n  default = \"dev-repo\"\r\n}\r\n\r\nvariable \"branch_name\" {\r\n  type    = string\r\n  default = \"master\"\r\n}\r\n\r\nvariable \"build_project\" {\r\n  type    = string\r\n  default = \"dev-build-repo\"\r\n}\r\n\r\nvariable \"uri_repo\" {\r\n  type = string\r\n  #The URI_REPO value is in a TF_VAR in my PC\r\n}\r\n\r\n# ECR REPOSITORY\r\nresource \"aws_ecr_repository\" \"ecr-repo\" {\r\n  name = \"ecr-repo\"\r\n}\r\n\r\n# ECS CLUSTER\r\nresource \"aws_ecs_cluster\" \"ecs-cluster\" {\r\n  name = \"clusterDev\"\r\n}\r\n\r\n# TASK DEFINITION\r\nresource \"aws_ecs_task_definition\" \"task\" {\r\n  family                   = \"HTTPserver\"\r\n  network_mode             = \"awsvpc\"\r\n  requires_compatibilities = [\"FARGATE\"]\r\n  cpu                      = 256\r\n  memory                   = 512\r\n  execution_role_arn       = \"${data.aws_iam_role.ecs-task.arn}\"\r\n\r\n  container_definitions = jsonencode([\r\n    {\r\n      name   = \"golang-container\"\r\n      image  = \"${var.uri_repo}:latest\" #URI\r\n      cpu    = 256\r\n      memory = 512\r\n      portMappings = [\r\n        {\r\n          containerPort = 5000\r\n        }\r\n      ]\r\n    }\r\n  ])\r\n}\r\n\r\n# ECS SERVICE\r\nresource \"aws_ecs_service\" \"svc\" {\r\n  name            = \"golang-Service\"\r\n  cluster         = \"${aws_ecs_cluster.ecs-cluster.id}\"\r\n  task_definition = \"${aws_ecs_task_definition.task.id}\"\r\n  desired_count   = 2\r\n  launch_type     = \"FARGATE\"\r\n\r\n\r\n  network_configuration {\r\n    subnets          = [\"${aws_subnet.pub-subnets[0].id}\", \"${aws_subnet.pub-subnets[1].id}\"]\r\n    security_groups  = [\"${aws_security_group.sg1.id}\"]\r\n    assign_public_ip = true\r\n  }\r\n\r\n  load_balancer {\r\n    target_group_arn = \"${aws_lb_target_group.tg-group.arn}\"\r\n    container_name   = \"golang-container\"\r\n    container_port   = \"5000\"\r\n  }\r\n}\r\n\r\n"}]}
{"messages": [{"role": "user", "content": "Create an Azure Resource Group using the specified application name and location. Set up an Azure Kubernetes Cluster with a default node pool of one node and enable System Assigned identity. Provision an Azure Container Registry with admin access. Establish an Azure Storage Account for Airflow logs and create a private storage container within it. Implement a management policy to prune logs older than seven days in the storage account."}, {"role": "assistant", "content": "\n#File: main.tf\nterraform {\n  required_providers {\n    azurerm = {\n      source  = \"hashicorp/azurerm\"\n      version = \"=3.70.0\"\n    }\n  }\n}\n\nprovider \"azurerm\" {\n  features {}\n}\n\nresource \"azurerm_resource_group\" \"rg\" {\n  name     = \"${var.app_name}rg\"\n  location = var.location\n}\n\n# Azure Kubernetes Cluster\n\nresource \"azurerm_kubernetes_cluster\" \"main\" {\n  name                = \"${var.app_name}aks\"\n  location            = var.location\n  resource_group_name = azurerm_resource_group.rg.name\n  dns_prefix          = \"${var.app_name}-aks\"\n\n  default_node_pool {\n    name       = \"default\"\n    node_count = 1\n    vm_size    = \"Standard_DS2_v2\"\n  }\n\n  identity {\n    type = \"SystemAssigned\"\n  }\n\n  storage_profile {\n    blob_driver_enabled = true\n  }\n}\n\n# Azure Container Registry\n\nresource \"azurerm_container_registry\" \"acr\" {\n  name                = \"${var.app_name}acr\"\n  resource_group_name = azurerm_resource_group.rg.name\n  location            = var.location\n  sku                 = \"Standard\"\n  admin_enabled       = true\n}\n\nresource \"azurerm_role_assignment\" \"main\" {\n  principal_id         = azurerm_kubernetes_cluster.main.kubelet_identity[0].object_id\n  role_definition_name = \"AcrPull\"\n  scope                = azurerm_container_registry.acr.id\n}\n\n# Blob storage for Airflow logs\n\nresource \"azurerm_storage_account\" \"airflow\" {\n  name                     = \"${var.app_name}airflowsa\"\n  resource_group_name      = azurerm_resource_group.rg.name\n  location                 = var.location\n  account_tier             = \"Standard\"\n  account_replication_type = \"LRS\"\n}\n\nresource \"azurerm_storage_container\" \"airflow_logs\" {\n  name                  = \"airflow-logs\"\n  storage_account_name  = azurerm_storage_account.airflow.name\n  container_access_type = \"private\"\n}\n\nresource \"azurerm_storage_management_policy\" \"prune_logs\" {\n  storage_account_id = azurerm_storage_account.airflow.id\n\n  rule {\n    name    = \"prune-logs\"\n    enabled = true\n    filters {\n      prefix_match = [\"airflow-logs\"]\n      blob_types   = [\"blockBlob\"]\n    }\n    actions {\n      base_blob {\n        delete_after_days_since_modification_greater_than = 7\n      }\n    }\n  }\n}\n\n#File: variables.tf\nvariable \"app_name\" {\n  type        = string\n  description = \"name of the application\"\n}\n\nvariable \"location\" {\n  type        = string\n  description = \"location for the resources\"\n}\n"}]}
{"messages": [{"role": "user", "content": "Create a unique storage account name using a random ID in Terraform. Create an Azure Data Lake Storage Gen2 account with the specified resource group, location, and properties. Create four storage containers named Landing-zone, Bronze, Silver, and Gold within the Data Lake Storage account. Set the access type of each container to private. Output the names of the storage account and all created containers for confirmation."}, {"role": "assistant", "content": "\n#File: main.tf\nresource \"random_id\" \"storage_account_name_unique\" {\n  byte_length = 8\n}\n\n# Criar um Azure Data Lake Storage Gen2\nresource \"azurerm_storage_account\" \"storage\" {\n  name                     = \"datalake${random_id.storage_account_name_unique.hex}\"\n  resource_group_name      = var.resource_group_name\n  location                 = var.location\n  account_tier             = \"Standard\"\n  account_replication_type = \"LRS\"\n  account_kind             = \"StorageV2\"\n  is_hns_enabled           = true\n\n\n  blob_properties {\n\n    delete_retention_policy {\n      days = 7\n    }\n    container_delete_retention_policy {\n      days = 7\n    }\n  }\n}\n\n# Criar quatro containers dentro do Azure Data Lake Storage Gen2: Landing-zone, Bronze, Silver e Gold\nresource \"azurerm_storage_container\" \"landing-zone\" {\n  name                  = \"landing-zone\"\n  storage_account_name  = azurerm_storage_account.storage.name\n  container_access_type = \"private\"\n}\n\n\nresource \"azurerm_storage_container\" \"bronze\" {\n  name                  = \"bronze\"\n  storage_account_name  = azurerm_storage_account.storage.name\n  container_access_type = \"private\"\n}\n\nresource \"azurerm_storage_container\" \"silver\" {\n  name                  = \"silver\"\n  storage_account_name  = azurerm_storage_account.storage.name\n  container_access_type = \"private\"\n}\n\nresource \"azurerm_storage_container\" \"gold\" {\n  name                  = \"gold\"\n  storage_account_name  = azurerm_storage_account.storage.name\n  container_access_type = \"private\"\n}\n\n\n\n\n\n#File: output.tf\noutput \"adls_name\" {\n  description = \"Name of the created storage account\"\n  value       = azurerm_storage_account.storage.name\n}\n\noutput \"adls_dfs_endpoint\" {\n  description = \"Primary DFS endpoint of the created storage account\"\n  value       = azurerm_storage_account.storage.primary_dfs_endpoint\n}\n\noutput \"adls_container_landing_zone\" {\n  description = \"Name of the created storage container landing-zone\"\n  value       = azurerm_storage_container.landing-zone.name\n}\n\noutput \"adls_container_bronze\" {\n  description = \"Name of the created storage container bronze\"\n  value       = azurerm_storage_container.bronze.name\n}\n\noutput \"adls_container_silver\" {\n  description = \"Name of the created storage container silver\"\n  value       = azurerm_storage_container.silver.name\n}\noutput \"adls_container_gold\" {\n  description = \"Name of the created storage container gold\"\n  value       = azurerm_storage_container.gold.name\n}\n#File: provider.tf\nterraform {\n  required_providers {\n    azurerm = {\n      source = \"hashicorp/azurerm\"\n      version = \"3.3.0\"\n    }\n  }\n}\n\n# Configure the Microsoft Azure Provider\nprovider \"azurerm\" {\n  features {}\n}\n#File: variables.tf\n\n# Lista de variaveis utilizadas nos arquivos de terraform\nvariable \"resource_group_name\" {\n  default = \"learn-12d50fbf-379d-41b4-ad24-bd64d266bef7\"\n}\n\nvariable \"location\" {\n  default = \"westus\"\n}"}]}
{"messages": [{"role": "user", "content": "Create a Terraform configuration for Azure by defining the required provider for Azure Resource Manager. Create an Azure resource group named according to the variable `resource_group_name` in the specified `location`. Provision an Azure storage account with the name defined in `storage_account_name`, ensuring it uses the correct resource group and location, and set its tier and replication type based on the specified variables. Set up a storage container in the storage account with the appropriate name and access type using the provided variables. Ensure that the configuration includes all necessary variables with default values for smoother deployment."}, {"role": "assistant", "content": "\n#File: backend.tf\nterraform {\n  required_providers {\n    azurerm = {\n      source = \"hashicorp/azurerm\"\n      version = \"~>2.0\"\n    }\n  }\n}\n\nprovider \"azurerm\" {\n  features {}\n\n  subscription_id   = \"\"    # insert subscription_id\n}\n#File: main.tf\n# Backend for Terraform state file\n\nresource \"azurerm_resource_group\" \"terraformbackend\"{\n  name                  = var.resource_group_name\n  location              = var.location\n}\n\nresource \"azurerm_storage_account\" \"terraform_backend\" {\n    name                = var.storage_account_name\n    resource_group_name = azurerm_resource_group.terraformbackend.name\n    location            = azurerm_resource_group.terraformbackend.location\n    account_tier        = var.storage_account_tier\n    account_replication_type = var.storage_account_replication_type\n    allow_blob_public_access = true\n}\n\nresource \"azurerm_storage_container\" \"terraform_backend\" {\n  name                  = var.storage_container_name \n  storage_account_name  = azurerm_storage_account.terraform_backend.name\n  container_access_type = var.container_access_type\n}\n#File: output.tf\n\n#File: variables.tf\nvariable \"resource_group_name\" {\n    type    = string\n    default = \"terraformbackend\"\n}\n\nvariable \"location\" {\n    type    = string\n    default = \"norwayeast\"\n}\n\n\nvariable \"storage_account_name\" {\n    type    = string\n    default = \"terraformbackendxxyygg\"\n}\n\nvariable \"storage_account_tier\" {\n    type    = string\n    default = \"Standard\"\n}\n\nvariable \"storage_account_replication_type\" {\n    type    = string\n    default = \"LRS\"\n}\n\n\nvariable \"storage_container_name\" {\n    type    = string\n    default = \"terraformbackend\"\n}\n\nvariable \"container_access_type\" {\n    type    = string\n    default = \"blob\"\n}"}]}
{"messages": [{"role": "user", "content": "Create a Google Cloud provider configuration with the specified project name and region. Generate local timestamps for output paths and job naming. Download and unzip the necessary machine learning samples, copy training and evaluation data to your Google Cloud Storage bucket, and install the required TensorFlow version. Submit a training job to AI Platform with the specified model details and stream the logs. Create a model, version it, and submit a prediction job while checking the job's status and retrieving prediction results."}, {"role": "assistant", "content": "\n#File: main.tf\nprovider \"google\" {\n project     = \"${var.project-name}\"\n region      = \"${var.REGION}\"\n}\n\nlocals {\n  timestamp = \"${timestamp()}\"\n  timestamp_sanitized = \"${replace(\"${local.timestamp}\", \"/[-| |T|Z|:]/\", \"\")}\"\n  fdate = \"${formatdate(\"HH:mmaa\", \"${timestamp()}\")}\"\n  fdate_sanitized = \"${replace(\"${local.fdate}\", \"/[:|am]/\", \"\")}\"\n}\n\nresource \"null_resource\" \"ex1\" {\n  provisioner \"local-exec\" {\n    command    = <<EOF\nwget https://github.com/GoogleCloudPlatform/cloudml-samples/archive/master.zip\nunzip master.zip\ncd cloudml-samples-master/census/estimator\ngsutil cp -r gs://cloud-samples-data/ai-platform/census/data/ gs://${var.BUCKET_NAME1}/ \nTRAIN_DATA=gs://\"${var.BUCKET_NAME1}\"/data/adult.data.csv\nEVAL_DATA=gs://\"${var.BUCKET_NAME1}\"/data/adult.test.csv\npip install --user tensorflow==1.14.*\nMODEL_DIR=output\nrm -rf $MODEL_DIR/*\ngcloud ai-platform local train --module-name trainer.task --package-path trainer/ --job-dir output/ -- --train-files $TRAIN_DATA --eval-files $EVAL_DATA --train-steps 100 --eval-steps 100\nTRAIN_DATA=gs://\"${var.BUCKET_NAME1}\"/data/adult.data.csv\nEVAL_DATA=gs://\"${var.BUCKET_NAME1}\"/data/adult.test.csv\ngsutil cp ../test.json gs://${var.BUCKET_NAME1}/data/test.json\nTEST_JSON=gs://\"${var.BUCKET_NAME1}\"/data/test.json\nOUTPUT_PATH=gs://\"${var.BUCKET_NAME1}\"/\"${var.JOB_NAME}${local.fdate_sanitized}\"\ngcloud ai-platform jobs submit training \"${var.JOB_NAME}${local.fdate_sanitized}\" --job-dir $OUTPUT_PATH --runtime-version 1.14 --module-name trainer.task --package-path trainer/ --region \"${var.REGION}\" -- --train-files $TRAIN_DATA --eval-fi$\ngcloud ai-platform jobs stream-logs \"${var.JOB_NAME}${local.fdate_sanitized}\"\ngcloud ai-platform models create \"${var.MODEL_NAME}${local.fdate_sanitized}\" --regions \"${var.REGION}\"\nMODEL_BINARIES=$(gsutil ls gs://${var.BUCKET_NAME1}/${var.JOB_NAME}${local.fdate_sanitized}/export/census/ |tail -1)\ngcloud ai-platform versions create \"${var.VER}${local.fdate_sanitized}\" --model \"${var.MODEL_NAME}${local.fdate_sanitized}\" --origin $MODEL_BINARIES --runtime-version=1.15\ngcloud ai-platform models list\ngcloud ai-platform predict --model \"${var.MODEL_NAME}${local.fdate_sanitized}\" --version \"${var.VER}${local.fdate_sanitized}\" --json-instances ../test.json\nOUTPUT_PATH=gs://\"${var.BUCKET_NAME1}\"/\"${var.JOB_NAME1}${local.fdate_sanitized}\"\ngcloud ai-platform jobs submit prediction \"${var.JOB_NAME1}${local.fdate_sanitized}\" --model \"${var.MODEL_NAME}${local.fdate_sanitized}\" --version \"${var.VER}${local.fdate_sanitized}\" --data-format text --region \"${var.REGION}\" --input-paths $TEST_JSON --output-path $OUTPUT_PATH/predictions\ngcloud ai-platform jobs describe \"${var.JOB_NAME1}${local.fdate_sanitized}\"\ngcloud ai-platform jobs stream-logs \"${var.JOB_NAME1}${local.fdate_sanitized}\"\ngsutil cat $OUTPUT_PATH/predictions/prediction.results-00000-of-00001\nEOF\n  }\n}\n\n\n#File: variables.tf\nvariable \"BUCKET_NAME1\" {  \n default = \"<name of bucket>\"\n}\n\nvariable \"project-name\" {\n   default = \"<name of your project>\"\n}\n\nvariable \"JOB_NAME\" {\n   default = \"<job name>\"\n}\n\nvariable \"MODEL_NAME\" {\n   default = \"<madel name>\"\n}\n\nvariable \"REGION\" {\n default = \"us-central1\"\n}\n\n\nvariable \"JOB_NAME1\" {\ndefault = \"<prediction name>\"\n}\n\n\nvariable \"VER\" {\n default = \"<versionname>\"\n}\n\n"}]}
{"messages": [{"role": "user", "content": "Create a Google Compute VPC network with routing mode set to \"REGIONAL\" and auto-create subnetworks disabled. Establish a Google Compute subnetwork within the specified region using the defined IP CIDR range. Deploy a Google Kubernetes Engine (GKE) cluster named after your application in the selected region, linking it to the previously created network and subnetwork. Ensure that the cluster has the Autopilot feature enabled for simplified management. Output the name of the created cluster after deployment."}, {"role": "assistant", "content": "\n#File: main.tf\nresource \"google_compute_network\" \"vpc\" {\n  project                 = var.project_id\n  name                    = \"${var.application_name}-network\"\n  auto_create_subnetworks = false\n  routing_mode            = \"REGIONAL\"\n}\n\nresource \"google_compute_subnetwork\" \"subnet\" {\n  name          = \"${var.application_name}-subnetwok\"\n  network       = google_compute_network.vpc.id\n  region        = var.region\n  ip_cidr_range = var.subnet_cidr_range\n}\n\nresource \"google_container_cluster\" \"primary\" {\n  name     = var.application_name\n  location = var.region\n\n  network    = google_compute_network.vpc.self_link\n  subnetwork = google_compute_subnetwork.subnet.self_link\n\n  ip_allocation_policy {}\n\n  enable_autopilot = true\n}\n\n#File: outputs.tf\noutput \"cluster_name\" {\n  value = google_container_cluster.primary.name\n}\n\n#File: variables.tf\nvariable \"project_id\" {\n  type        = string\n  description = \"Project ID\"\n  sensitive   = true\n}\n\nvariable \"region\" {\n  type        = string\n  description = \"GKE cluster region\"\n}\n\nvariable \"application_name\" {\n  type        = string\n  description = \"Application name\"\n}\n\n\nvariable \"subnet_cidr_range\" {\n  type        = string\n  description = \"IP CIDR range for subnetwork\"\n}\n\n#File: versions.tf\nterraform {\n  required_providers {\n    google = {\n      source  = \"hashicorp/google\"\n      version = \"4.54.0\"\n    }\n  }\n}\n"}]}
{"messages": [{"role": "user", "content": "Create application variables for the company name, application name, domain name, and environment in Terraform. Set up a Google Compute Network with a public subnet and define the CIDR. Implement firewall rules to allow HTTP, HTTPS, SSH, and RDP traffic. Create a Google Compute Instance for a Windows server with SQL Server 2019, ensuring to tag the instance accordingly. Output the VM's name, external IP, and internal IP for reference."}, {"role": "assistant", "content": "\n#File: app-variables.tf\n#############################\n## Application - Variables ##\n#############################\n\n# company name \nvariable \"company\" {\n  type        = string\n  description = \"This variable defines the company name used to build resources\"\n}\n\n# application name \nvariable \"app_name\" {\n  type        = string\n  description = \"This variable defines the application name used to build resources\"\n}\n\n# domain name \nvariable \"app_domain\" {\n  type        = string\n  description = \"This variable defines the domain name used to build resources\"\n}\n\n# environment\nvariable \"environment\" {\n  type        = string\n  description = \"This variable defines the environment to be built\"\n}\n\n\n#File: network-firewall.tf\n###################################\n## Network Firewall Rules - Main ##\n###################################\n\n# Allow http\nresource \"google_compute_firewall\" \"allow-http\" {\n  name    = \"${var.app_name}-${var.environment}-fw-allow-http\"\n  network = google_compute_network.vpc.name\n  allow {\n    protocol = \"tcp\"\n    ports    = [\"80\"]\n  }\n  \n  source_ranges = [\"0.0.0.0/0\"]\n  target_tags = [\"http\"] \n}\n\n# allow https\nresource \"google_compute_firewall\" \"allow-https\" {\n  name    = \"${var.app_name}-${var.environment}-fw-allow-https\"\n  network = google_compute_network.vpc.name\n  allow {\n    protocol = \"tcp\"\n    ports    = [\"443\"]\n  }\n\n  source_ranges = [\"0.0.0.0/0\"]\n  target_tags = [\"https\"] \n}\n\n# allow ssh\nresource \"google_compute_firewall\" \"allow-ssh\" {\n  name    = \"${var.app_name}-${var.environment}-fw-allow-ssh\"\n  network = google_compute_network.vpc.name\n  allow {\n    protocol = \"tcp\"\n    ports    = [\"22\"]\n  }\n\n  source_ranges = [\"0.0.0.0/0\"]\n  target_tags = [\"ssh\"]\n}\n\n# allow rdp\nresource \"google_compute_firewall\" \"allow-rdp\" {\n  name    = \"${var.app_name}-${var.environment}-fw-allow-rdp\"\n  network = google_compute_network.vpc.name\n  allow {\n    protocol = \"tcp\"\n    ports    = [\"3389\"]\n  }\n\n  source_ranges = [\"0.0.0.0/0\"]\n  target_tags = [\"rdp\"]\n}\n\n#File: network-main.tf\n####################\n## Network - Main ##\n####################\n\n# create VPC\nresource \"google_compute_network\" \"vpc\" {\n  name                    = \"${lower(var.company)}-${lower(var.app_name)}-${var.environment}-vpc\"\n  auto_create_subnetworks = \"false\"\n  routing_mode            = \"GLOBAL\"\n}\n\n# create public subnet\nresource \"google_compute_subnetwork\" \"network_subnet\" {\n  name          = \"${lower(var.company)}-${lower(var.app_name)}-${var.environment}-subnet\"\n  ip_cidr_range = var.network-subnet-cidr\n  network       = google_compute_network.vpc.name\n  region        = var.gcp_region\n}\n\n#File: network-variables.tf\n#########################\n## Network - Variables ##\n#########################\n\nvariable \"network-subnet-cidr\" {\n  type        = string\n  description = \"The CIDR for the network subnet\"\n}\n#File: provider-main.tf\n#########################\n## GCP Provider - Main ##\n#########################\n\n# Define Terraform provider\nterraform {\n  required_version = \"~> 1.0\"\n\n  required_providers {\n    google = {\n      source = \"hashicorp/google\"\n      // version = \"4.11.0\" # pinning version\n    }\n  }\n}\n\nprovider \"google\" {\n  credentials = file(var.gcp_auth_file)\n  project     = var.gcp_project\n  region      = var.gcp_region\n  zone        = var.gcp_zone\n}\n\n#File: provider-variables.tf\n##############################\n## GCP Provider - Variables ##\n##############################\n\n# GCP authentication file\nvariable \"gcp_auth_file\" {\n  type        = string\n  description = \"GCP authentication file\"\n}\n\n# define GCP project name\nvariable \"gcp_project\" {\n  type        = string\n  description = \"GCP project name\"\n}\n\n# define GCP region\nvariable \"gcp_region\" {\n  type        = string\n  description = \"GCP region\"\n}\n\n# define GCP region\nvariable \"gcp_zone\" {\n  type        = string\n  description = \"GCP zone\"\n}\n\n#File: windows-sql-versions.tf\n###############################\n## Windows with SQL Versions ##\n###############################\n\n# Windows Server 2022 with SQL Server 2019 Enterprise \nvariable \"windows_2022_sql_2019_enterprise_sku\" {\n  type        = string\n  description = \"Windows Server 2022 and SQL Server 2019 Enterprise\"\n  default     = \"windows-sql-cloud/sql-ent-2019-win-2022\"\n}\n\n# Windows Server 2022 with SQL Server 2019 Standard\nvariable \"windows_2022_sql_2019_standard_sku\" {\n  type        = string\n  description = \"Windows Server 2022 and SQL Server 2019 Standard\"\n  default     = \"windows-sql-cloud/sql-std-2019-win-2022\"\n}\n\n# Windows Server 2022 with SQL Server 2019 Web\nvariable \"windows_2022_sql_2019_web_sku\" {\n  type        = string\n  description = \"Windows Server and with SQL Server 2019 Web\"\n  default     = \"windows-sql-cloud/sql-web-2019-win-2022\"\n}\n\n#File: windows-sql-vm-main.tf\n###########################\n## GCP Windows VM - Main ##\n###########################\n\n# Terraform plugin for creating random ids\nresource \"random_id\" \"instance_id\" {\n  byte_length = 4\n}\n\n# Create VM\nresource \"google_compute_instance\" \"vm_instance_public\" {\n  name         = \"${lower(var.company)}-${lower(var.app_name)}-${var.environment}-vm${random_id.instance_id.hex}\"\n  machine_type = var.windows_sql_instance_type\n  zone         = var.gcp_zone\n  hostname     = \"${var.app_name}-vm${random_id.instance_id.hex}.${var.app_domain}\"\n  tags         = [\"rdp\",\"sql\"]\n\n  boot_disk {\n    initialize_params {\n      image = var.windows_2022_sql_2019_web_sku\n    }\n  }\n\n  network_interface {\n    network       = google_compute_network.vpc.name\n    subnetwork    = google_compute_subnetwork.network_subnet.name\n    access_config { }\n  }\n} \n\n#File: windows-sql-vm-output.tf\n#############################\n## GCP Windows VM - Output ##\n#############################\n\noutput \"vm-name\" {\n  value = google_compute_instance.vm_instance_public.name\n}\n\noutput \"vm-external-ip\" {\n  value = google_compute_instance.vm_instance_public.network_interface.0.access_config.0.nat_ip\n}\n\noutput \"vm-internal-ip\" {\n  value = google_compute_instance.vm_instance_public.network_interface.0.network_ip\n}\n\n#File: windows-sql-vm-variables.tf\n################################\n## GCP Windows VM - Variables ##\n################################\n\nvariable \"windows_sql_instance_type\" {\n  type        = string\n  description = \"VM instance type\"\n  default     = \"n2-standard-2\"\n}\n"}]}
{"messages": [{"role": "user", "content": "Create a virtual network named \"bots-vnet\" in the \"West US\" region and assign it an address space of \"10.2.0.0/16\". Create a subnet called \"bots-subnet\" within that virtual network, using the address prefix \"10.2.1.0/24\". Set up two public IPs with static allocation for the bots and create a network security group (NSG) allowing SSH and HTTPS traffic. Finally, launch two virtual machines named \"bot-vm-0\" and \"bot-vm-1\" using Ubuntu, linking them with the appropriate network interfaces and NSG."}, {"role": "assistant", "content": "\n#File: bots.tf\n# Virtual Network for Bots\nresource \"azurerm_virtual_network\" \"bots_vnet\" {\n  name                = \"bots-vnet\"\n  location            = \"West US\" # Can change: Modify location as needed\n  resource_group_name = \"testingcncbotnet\" # Must change: Replace with your resource group name\n  address_space       = [\"10.2.0.0/16\"] # Can change: Modify IP range if needed\n}\n\n# Subnet for Bots\nresource \"azurerm_subnet\" \"bots_subnet\" {\n  name                 = \"bots-subnet\"\n  resource_group_name  = azurerm_virtual_network.bots_vnet.resource_group_name\n  virtual_network_name = azurerm_virtual_network.bots_vnet.name\n  address_prefixes     = [\"10.2.1.0/24\"] # Can change: Modify subnet range if needed\n}\n\n# Public IPs for Bots\nresource \"azurerm_public_ip\" \"bots_public_ip\" {\n  count               = 2\n  name                = \"bot-public-ip-${count.index}\"\n  location            = \"West US\" # Can change: Modify location as needed\n  resource_group_name = \"testingcncbotnet\" # Must change: Replace with your resource group name\n  allocation_method   = \"Static\"\n}\n\n# NSG for Bots (Allow SSH)\nresource \"azurerm_network_security_group\" \"bots_nsg\" {\n  name                = \"bots-nsg\"\n  location            = \"West US\" # Can change: Modify location as needed\n  resource_group_name = \"testingcncbotnet\" # Must change: Replace with your resource group name\n\n  security_rule {\n    name                       = \"AllowSSH\"\n    priority                   = 1001\n    direction                  = \"Inbound\"\n    access                     = \"Allow\"\n    protocol                   = \"Tcp\"\n    source_port_range          = \"*\"\n    destination_port_range     = \"22\"\n    source_address_prefix      = \"*\"\n    destination_address_prefix = \"*\"\n  }\n\n  security_rule {\n    name                       = \"AllowHTTPS\"\n    priority                   = 1002\n    direction                  = \"Inbound\"\n    access                     = \"Allow\"\n    protocol                   = \"Tcp\"\n    source_port_range          = \"*\"\n    destination_port_range     = \"443\"\n    source_address_prefix      = \"*\"\n    destination_address_prefix = \"*\"\n  }\n\n  security_rule {\n    name                       = \"AllowAnyCustom8000Inbound\"\n    priority                   = 1012\n    direction                  = \"Inbound\"\n    access                     = \"Allow\"\n    protocol                   = \"Tcp\"\n    source_port_range          = \"*\"\n    destination_port_range     = \"8000\"\n    source_address_prefix      = \"*\"\n    destination_address_prefix = \"*\"\n  }\n\n  security_rule {\n    name                       = \"AllowAnyCustom7777Inbound\"\n    priority                   = 1022\n    direction                  = \"Inbound\"\n    access                     = \"Allow\"\n    protocol                   = \"Tcp\"\n    source_port_range          = \"*\"\n    destination_port_range     = \"7777\"\n    source_address_prefix      = \"*\"\n    destination_address_prefix = \"*\"\n  }\n}\n\n# Network Interfaces for Bots\nresource \"azurerm_network_interface\" \"bots_nic\" {\n  count               = 2\n  name                = \"bot-nic-${count.index}\"\n  location            = \"West US\" # Can change: Modify location as needed\n  resource_group_name = \"testingcncbotnet\" # Must change: Replace with your resource group name\n\n  ip_configuration {\n    name                          = \"internal\"\n    subnet_id                     = azurerm_subnet.bots_subnet.id\n    private_ip_address_allocation = \"Dynamic\"\n    public_ip_address_id          = azurerm_public_ip.bots_public_ip[count.index].id\n  }\n}\n\n# Associate NSG with Bot NICs\nresource \"azurerm_network_interface_security_group_association\" \"bots_nsg_assoc\" {\n  count                      = 2\n  network_interface_id      = azurerm_network_interface.bots_nic[count.index].id\n  network_security_group_id = azurerm_network_security_group.bots_nsg.id\n}\n\n# Bot Virtual Machines\nresource \"azurerm_virtual_machine\" \"bots_vm\" {\n  count                 = 2\n  name                  = \"bot-vm-${count.index}\"\n  location              = \"West US\" # Can change: Modify location as needed\n  resource_group_name   = \"testingcncbotnet\" # Must change: Replace with your resource group name\n  network_interface_ids = [azurerm_network_interface.bots_nic[count.index].id]\n  vm_size               = \"Standard_B1s\" # Can change: Modify Size as needed\n\n  storage_os_disk {\n    name              = \"bot-disk-${count.index}\"\n    caching           = \"ReadWrite\"\n    create_option     = \"FromImage\"\n    managed_disk_type = \"Standard_LRS\"\n  }\n\n  storage_image_reference {\n    publisher = \"canonical\"\n    offer     = \"ubuntu-24_04-lts\"\n    sku       = \"server\"\n    version   = \"latest\"\n  }\n\n  os_profile {\n    computer_name  = \"bot-vm-${count.index}\"\n    admin_username = \"azureuser\" # Can change: Modify username as needed\n    admin_password = \"YourStrongPassword123!\" # Can change: password location as needed\n  }\n\n  os_profile_linux_config {\n    disable_password_authentication = false\n  }\n}\n\n#File: c2.tf\nterraform {\n  required_providers {\n    azurerm = {\n      source  = \"hashicorp/azurerm\"\n      version = \"~> 4.0\"\n    }\n  }\n}\n\nprovider \"azurerm\" {\n  features {}\n  subscription_id = \"809d7da5-98b1-4d3c-9e02-e6440574c68b\" # Must change: Replace with your Azure subscription ID\n}\n\n# Virtual Network for C2\nresource \"azurerm_virtual_network\" \"c2_vnet\" {\n  name                = \"c2-vnet\"\n  location            = \"West US\" # Can change: Modify location as needed\n  resource_group_name = \"testingcncbotnet\" # Must change: Replace with your resource group name\n  address_space       = [\"10.1.0.0/16\"] # Can change: Modify IP range if needed\n}\n\n# Subnet for C2\nresource \"azurerm_subnet\" \"c2_subnet\" {\n  name                 = \"c2-subnet\"\n  resource_group_name  = azurerm_virtual_network.c2_vnet.resource_group_name\n  virtual_network_name = azurerm_virtual_network.c2_vnet.name\n  address_prefixes     = [\"10.1.1.0/24\"] # Can change: Modify subnet range if needed\n}\n\n# Public IP for C2\nresource \"azurerm_public_ip\" \"c2_public_ip\" {\n  name                = \"c2-public-ip\"\n  location            = \"West US\"\n  resource_group_name = \"testingcncbotnet\" # Must change: Replace with your resource group name\n  allocation_method   = \"Static\"\n}\n\n# NSG for C2 (Allow SSH & HTTPS)\nresource \"azurerm_network_security_group\" \"c2_nsg\" {\n  name                = \"c2-nsg\"\n  location            = \"West US\" # Can change: Modify location as needed\n  resource_group_name = \"testingcncbotnet\" # Must change: Replace with your resource group name\n\n  security_rule {\n    name                       = \"AllowSSH\"\n    priority                   = 1001\n    direction                  = \"Inbound\"\n    access                     = \"Allow\"\n    protocol                   = \"Tcp\"\n    source_port_range          = \"*\"\n    destination_port_range     = \"22\"\n    source_address_prefix      = \"*\"\n    destination_address_prefix = \"*\"\n  }\n\n  security_rule {\n    name                       = \"AllowHTTPS\"\n    priority                   = 1002\n    direction                  = \"Inbound\"\n    access                     = \"Allow\"\n    protocol                   = \"Tcp\"\n    source_port_range          = \"*\"\n    destination_port_range     = \"443\"\n    source_address_prefix      = \"*\"\n    destination_address_prefix = \"*\"\n  }\n\n  security_rule {\n    name                       = \"AllowAnyHTTPInbound\"\n    priority                   = 1012\n    direction                  = \"Inbound\"\n    access                     = \"Allow\"\n    protocol                   = \"Tcp\"\n    source_port_range          = \"*\"\n    destination_port_range     = \"80\"\n    source_address_prefix      = \"*\"\n    destination_address_prefix = \"*\"\n  }\n\n  security_rule {\n    name                       = \"AllowAnyCustom8000Inbound\"\n    priority                   = 1022\n    direction                  = \"Inbound\"\n    access                     = \"Allow\"\n    protocol                   = \"Tcp\"\n    source_port_range          = \"*\"\n    destination_port_range     = \"8000\"\n    source_address_prefix      = \"*\"\n    destination_address_prefix = \"*\"\n  }\n\n  security_rule {\n    name                       = \"AllowAnyCustom7777Inbound\"\n    priority                   = 1032\n    direction                  = \"Inbound\"\n    access                     = \"Allow\"\n    protocol                   = \"Tcp\"\n    source_port_range          = \"*\"\n    destination_port_range     = \"7777\"\n    source_address_prefix      = \"*\"\n    destination_address_prefix = \"*\"\n  }\n}\n\n# Network Interface for C2\nresource \"azurerm_network_interface\" \"c2_nic\" {\n  name                = \"c2-nic\"\n  location            = \"West US\" # Can change: Modify location as needed\n  resource_group_name = \"testingcncbotnet\" # Must change: Replace with your resource group name\n\n  ip_configuration {\n    name                          = \"internal\"\n    subnet_id                     = azurerm_subnet.c2_subnet.id\n    private_ip_address_allocation = \"Dynamic\"\n    public_ip_address_id          = azurerm_public_ip.c2_public_ip.id\n  }\n}\n\n# Associate NSG with C2 NIC\nresource \"azurerm_network_interface_security_group_association\" \"c2_nsg_assoc\" {\n  network_interface_id      = azurerm_network_interface.c2_nic.id\n  network_security_group_id = azurerm_network_security_group.c2_nsg.id\n}\n\n# C2 Virtual Machine\nresource \"azurerm_virtual_machine\" \"c2_vm\" {\n  name                  = \"c2-vm\"\n  location              = \"West US\" # Can change: Modify location as needed\n  resource_group_name   = \"testingcncbotnet\" # Must change: Replace with your resource group name\n  network_interface_ids = [azurerm_network_interface.c2_nic.id]\n  vm_size               = \"Standard_D2s_v3\" # Can change: Modify Size as needed\n\n  storage_os_disk {\n    name              = \"c2-disk\"\n    caching           = \"ReadWrite\"\n    create_option     = \"FromImage\"\n    managed_disk_type = \"Premium_LRS\"\n    disk_size_gb      = 30\n  }\n\n  storage_image_reference {\n    publisher = \"canonical\"\n    offer     = \"ubuntu-24_04-lts\"\n    sku       = \"server\"\n    version   = \"latest\"\n  }\n\n  os_profile {\n    computer_name  = \"c2-vm\"\n    admin_username = \"azureuser\" # Can change: Modify username as needed\n    admin_password = \"YourStrongPassword123!\" # Can change: password location as needed\n  }\n\n  os_profile_linux_config {\n    disable_password_authentication = false\n  }\n}\n"}]}
{"messages": [{"role":"user","content":"Deploy an AWS EC2 instance in the us-east-2 region using a user-defined AMI and a t2.micro instance type. It sets up a security group that allows inbound TCP traffic on a configurable HTTP port defined by the server_port variable. The instance runs a simple HTTP server via busybox, serving a \"Hello, World\" page on the specified port, with both the AMI ID and server port passed as input variables."},{"role":"assistant","content":"provider \"aws\" {\r\n  region = \"us-east-2\"\r\n}\r\n\r\nresource \"aws_instance\" \"example\" {\r\n  ami                    = var.ami\r\n  instance_type          = \"t2.micro\"\r\n  vpc_security_group_ids = [aws_security_group.instance.id]\r\n\r\n  user_data = <<-EOF\r\n              #!/bin/bash\r\n              echo \"Hello, World\" > index.html\r\n              nohup busybox httpd -f -p \"${var.server_port}\" &\r\n              EOF\r\n\r\n  tags = {\r\n    Name = \"terraform-example\"\r\n  }\r\n}\r\n\r\n\r\nresource \"aws_security_group\" \"instance\" {\r\n  name = \"terraform-example-instance\"\r\n\r\n  # Inbound HTTP from anywhere\r\n  ingress {\r\n    from_port   = var.server_port\r\n    to_port     = var.server_port\r\n    protocol    = \"tcp\"\r\n    cidr_blocks = [\"0.0.0.0/0\"]\r\n  }\r\n}\r\nvariable \"server_port\" {\r\n  description = \"The port the server will use for HTTP requests\"\r\n  type        = number\r\n}\r\n\r\nvariable \"ami{\r\n  description = \"AmI of the image to install\"\r\n  type = string\r\n}"}]}
{"messages": [{"role": "user", "content": "Create a policy definition for virtual machine SKU restrictions, limiting allowed SKUs to specific models. Assign this policy to the current subscription to enforce compliance. Define a policy for enabling encryption at host for virtual machines and scale sets, and assign it as well. Establish a policy for requiring endpoint protection on machines and implement it through a subscription assignment. Finally, ensure all resources are deployed in the West Europe region by creating a corresponding policy definition and assignment."}, {"role": "assistant", "content": "\n#File: allowed-vm-sizes.tf\nresource \"azurerm_policy_definition\" \"virtual_machine_sku_restriction\" {\n  name         = \"virtual-machine-sku-restriction\"\n  display_name = \"Virtual Machine SKU Restriction\"\n  description  = \"Restricts the allowed SKU's for virtual machine resources to only the specified sizes.\"\n  policy_type  = \"Custom\"\n  mode         = \"Indexed\"\n\n  policy_rule = <<POLICY_RULE\n{\n  \"if\": {\n    \"not\": {\n        \"field\": \"Microsoft.Compute/virtualMachines/sku.name\",\n        \"in\": [\"Standard_D2s_v5\", \"Standard_D4s_v5\", \"Standard_D8s_v5\"]\n      }\n  },\n  \"then\": {\n    \"effect\": \"deny\"\n  }\n}\nPOLICY_RULE\n}\n\nresource \"azurerm_subscription_policy_assignment\" \"virtual_machine_sku_restriction\" {\n  name                 = \"virtual-machine-sku-restriction\"\n  policy_definition_id = azurerm_policy_definition.virtual_machine_sku_restriction.id\n  subscription_id      = data.azurerm_subscription.current.id\n}\n#File: encryption-at-host.tf\nresource \"azurerm_policy_definition\" \"encryption_at_host\" {\n  name         = \"encryption-at-host\"\n  policy_type  = \"Custom\"\n  mode         = \"Indexed\"\n  display_name = \"Virtual machines and virtual machine scale sets should have encryption at host enabled\"\n\n  metadata = <<METADATA\n    {\n    \"category\": \"Compute\",\n    \"version\": \"1.0.0\"\n    }\n  METADATA\n\n\n  policy_rule = <<POLICY_RULE\n    {\n        \"if\": {\n          \"anyOf\": [\n          {\n              \"allOf\": [\n              {\n                  \"field\": \"type\",\n                  \"equals\": \"Microsoft.Compute/virtualMachines\"\n              },\n              {\n                  \"field\": \"Microsoft.Compute/virtualMachines/securityProfile.encryptionAtHost\",\n                  \"notEquals\": \"true\"\n              }\n              ]\n          },\n          {\n              \"allOf\": [\n              {\n                  \"field\": \"type\",\n                  \"equals\": \"Microsoft.Compute/virtualMachineScaleSets\"\n              },\n              {\n                  \"field\": \"Microsoft.Compute/virtualMachineScaleSets/virtualMachineProfile.securityProfile.encryptionAtHost\",\n                  \"notEquals\": \"true\"\n              }\n              ]\n          }\n          ]\n        },\n        \"then\": {\n            \"effect\": \"Audit\"\n        }\n  }\n  POLICY_RULE\n}\n\nresource \"azurerm_subscription_policy_assignment\" \"encryption_at_host\" {\n  name                 = \"encryption-at-host\"\n  policy_definition_id = azurerm_policy_definition.encryption_at_host.id\n  subscription_id      = data.azurerm_subscription.current.id\n}\n#File: endpoint-protection.tf\nresource \"azurerm_policy_definition\" \"endpoint_protection\" {\n  name         = \"endpoint-protection\"\n  policy_type  = \"Custom\"\n  mode         = \"All\"\n  display_name = \"Endpoint protection should be installed on your machines\"\n\n  metadata = <<METADATA\n    {\n    \"category\": \"Security Center\"\n    }\n  METADATA\n\n\n  policy_rule = <<POLICY_RULE\n    {\n        \"if\": {\n            \"allOf\": [\n            {\n                \"field\": \"type\",\n                \"in\": [\n                    \"Microsoft.Compute/virtualMachines\",\n                    \"Microsoft.ClassicCompute/virtualMachines\",\n                    \"Microsoft.HybridCompute/machines\"\n                ]\n            }\n            ]\n        },\n        \"then\": {\n            \"effect\": \"AuditIfNotExists\",\n            \"details\": {\n                \"type\": \"Microsoft.Security/assessments\",\n                \"name\": \"4fb67663-9ab9-475d-b026-8c544cced439\",\n                \"existenceCondition\": {\n                    \"field\": \"Microsoft.Security/assessments/status.code\",\n                    \"in\": [\n                        \"NotApplicable\",\n                        \"Healthy\"\n                    ]\n                }\n            }\n        }\n    }\n  POLICY_RULE\n}\n\nresource \"azurerm_subscription_policy_assignment\" \"endpoint_protection\" {\n  name                 = \"endpoint-protection\"\n  policy_definition_id = azurerm_policy_definition.endpoint_protection.id\n  subscription_id      = data.azurerm_subscription.current.id\n}\n#File: linux-vm-guest-configuration.tf\nresource \"azurerm_policy_definition\" \"linux_vm_guest_configuration\" {\n  name         = \"linux-vm-guest-configuration\"\n  policy_type  = \"Custom\"\n  mode         = \"Indexed\"\n  display_name = \"Linux VM Guest Configuration\"\n  description = \"This policy deploys the Linux Guest Configuration extension to Linux virtual machines hosted in Azure that are supported by Guest Configuration.\"\n\n  metadata = <<METADATA\n    {\n      \"category\": \"Guest Configuration\",\n      \"version\": \"3.0.0\"\n    }\n  METADATA\n\n  policy_rule = <<POLICY_RULE\n  {\n    \"if\": {\n        \"allOf\": [\n          {\n            \"field\": \"type\",\n            \"equals\": \"Microsoft.Compute/virtualMachines\"\n          },\n          {\n            \"anyOf\": [\n              {\n                \"field\": \"Microsoft.Compute/imagePublisher\",\n                \"in\": [\n                  \"microsoft-aks\",\n                  \"qubole-inc\",\n                  \"datastax\",\n                  \"couchbase\",\n                  \"scalegrid\",\n                  \"checkpoint\",\n                  \"paloaltonetworks\",\n                  \"debian\",\n                  \"credativ\"\n                ]\n              },\n              {\n                \"allOf\": [\n                  {\n                    \"field\": \"Microsoft.Compute/imagePublisher\",\n                    \"equals\": \"OpenLogic\"\n                  },\n                  {\n                    \"field\": \"Microsoft.Compute/imageSKU\",\n                    \"notLike\": \"6*\"\n                  }\n                ]\n              },\n              {\n                \"allOf\": [\n                  {\n                    \"field\": \"Microsoft.Compute/imagePublisher\",\n                    \"equals\": \"Oracle\"\n                  },\n                  {\n                    \"field\": \"Microsoft.Compute/imageSKU\",\n                    \"notLike\": \"6*\"\n                  }\n                ]\n              },\n              {\n                \"allOf\": [\n                  {\n                    \"field\": \"Microsoft.Compute/imagePublisher\",\n                    \"equals\": \"RedHat\"\n                  },\n                  {\n                    \"field\": \"Microsoft.Compute/imageSKU\",\n                    \"notLike\": \"6*\"\n                  }\n                ]\n              },\n              {\n                \"allOf\": [\n                  {\n                    \"field\": \"Microsoft.Compute/imagePublisher\",\n                    \"equals\": \"center-for-internet-security-inc\"\n                  },\n                  {\n                    \"field\": \"Microsoft.Compute/imageOffer\",\n                    \"notLike\": \"cis-windows*\"\n                  }\n                ]\n              },\n              {\n                \"allOf\": [\n                  {\n                    \"field\": \"Microsoft.Compute/imagePublisher\",\n                    \"equals\": \"Suse\"\n                  },\n                  {\n                    \"field\": \"Microsoft.Compute/imageSKU\",\n                    \"notLike\": \"11*\"\n                  }\n                ]\n              },\n              {\n                \"allOf\": [\n                  {\n                    \"field\": \"Microsoft.Compute/imagePublisher\",\n                    \"equals\": \"Canonical\"\n                  },\n                  {\n                    \"field\": \"Microsoft.Compute/imageSKU\",\n                    \"notLike\": \"12*\"\n                  }\n                ]\n              },\n              {\n                \"allOf\": [\n                  {\n                    \"field\": \"Microsoft.Compute/imagePublisher\",\n                    \"equals\": \"microsoft-dsvm\"\n                  },\n                  {\n                    \"field\": \"Microsoft.Compute/imageOffer\",\n                    \"notLike\": \"dsvm-win*\"\n                  }\n                ]\n              },\n              {\n                \"allOf\": [\n                  {\n                    \"field\": \"Microsoft.Compute/imagePublisher\",\n                    \"equals\": \"cloudera\"\n                  },\n                  {\n                    \"field\": \"Microsoft.Compute/imageSKU\",\n                    \"notLike\": \"6*\"\n                  }\n                ]\n              },\n              {\n                \"allOf\": [\n                  {\n                    \"field\": \"Microsoft.Compute/imagePublisher\",\n                    \"equals\": \"microsoft-ads\"\n                  },\n                  {\n                    \"field\": \"Microsoft.Compute/imageOffer\",\n                    \"like\": \"linux*\"\n                  }\n                ]\n              },\n              {\n                \"allOf\": [\n                  {\n                    \"anyOf\": [\n                      {\n                        \"field\": \"Microsoft.Compute/virtualMachines/osProfile.linuxConfiguration\",\n                        \"exists\": \"true\"\n                      },\n                      {\n                        \"field\": \"Microsoft.Compute/virtualMachines/storageProfile.osDisk.osType\",\n                        \"like\": \"Linux*\"\n                      }\n                    ]\n                  },\n                  {\n                    \"anyOf\": [\n                      {\n                        \"field\": \"Microsoft.Compute/imagePublisher\",\n                        \"exists\": \"false\"\n                      },\n                      {\n                        \"field\": \"Microsoft.Compute/imagePublisher\",\n                        \"notIn\": [\n                          \"OpenLogic\",\n                          \"RedHat\",\n                          \"credativ\",\n                          \"Suse\",\n                          \"Canonical\",\n                          \"microsoft-dsvm\",\n                          \"cloudera\",\n                          \"microsoft-ads\",\n                          \"center-for-internet-security-inc\",\n                          \"Oracle\",\n                          \"AzureDatabricks\",\n                          \"azureopenshift\"\n                        ]\n                      }\n                    ]\n                  }\n                ]\n              }\n            ]\n          }\n        ]\n      },\n      \"then\": {\n        \"effect\": \"deployIfNotExists\",\n        \"details\": {\n          \"roleDefinitionIds\": [\n            \"/providers/microsoft.authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c\"\n          ],\n          \"type\": \"Microsoft.Compute/virtualMachines/extensions\",\n          \"name\": \"AzurePolicyforLinux\",\n          \"existenceCondition\": {\n            \"allOf\": [\n              {\n                \"field\": \"Microsoft.Compute/virtualMachines/extensions/publisher\",\n                \"equals\": \"Microsoft.GuestConfiguration\"\n              },\n              {\n                \"field\": \"Microsoft.Compute/virtualMachines/extensions/type\",\n                \"equals\": \"ConfigurationforLinux\"\n              },\n              {\n                \"field\": \"Microsoft.Compute/virtualMachines/extensions/provisioningState\",\n                \"equals\": \"Succeeded\"\n              }\n            ]\n          },\n          \"deployment\": {\n            \"properties\": {\n              \"mode\": \"incremental\",\n              \"parameters\": {\n                \"vmName\": {\n                  \"value\": \"[field('name')]\"\n                },\n                \"location\": {\n                  \"value\": \"[field('location')]\"\n                }\n              },\n              \"template\": {\n                \"$schema\": \"https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#\",\n                \"contentVersion\": \"1.0.0.0\",\n                \"parameters\": {\n                  \"vmName\": {\n                    \"type\": \"string\"\n                  },\n                  \"location\": {\n                    \"type\": \"string\"\n                  }\n                },\n                \"resources\": [\n                  {\n                    \"apiVersion\": \"2019-07-01\",\n                    \"name\": \"[concat(parameters('vmName'), '/AzurePolicyforLinux')]\",\n                    \"type\": \"Microsoft.Compute/virtualMachines/extensions\",\n                    \"location\": \"[parameters('location')]\",\n                    \"properties\": {\n                      \"publisher\": \"Microsoft.GuestConfiguration\",\n                      \"type\": \"ConfigurationforLinux\",\n                      \"typeHandlerVersion\": \"1.0\",\n                      \"autoUpgradeMinorVersion\": true,\n                      \"enableAutomaticUpgrade\": true,\n                      \"settings\": {},\n                      \"protectedSettings\": {}\n                    }\n                  }\n                ]\n              }\n            }\n          }\n        }\n      }\n  }\n  POLICY_RULE\n}\n\nresource \"azurerm_subscription_policy_assignment\" \"linux_vm_guest_configuration\" {\n  name                 = \"linux-vm-guest-configuration\"\n  policy_definition_id = azurerm_policy_definition.linux_vm_guest_configuration.id\n  subscription_id      = data.azurerm_subscription.current.id\n  location             = \"westeurope\"\n  identity {\n      type             = \"SystemAssigned\"\n  }\n}\n\nresource \"azurerm_role_assignment\" \"linux_vm_guest_configuration\" {\n  scope                = data.azurerm_subscription.current.id\n  role_definition_name = \"Contributor\"\n  principal_id         = azurerm_subscription_policy_assignment.linux_vm_guest_configuration.identity[0].principal_id\n}\n#File: main.tf\ndata \"azurerm_subscription\" \"current\" { }\n#File: providers.tf\nterraform {\n  required_providers {\n    azurerm = {\n      source  = \"hashicorp/azurerm\"\n      version = \"~> 3.0.0\"\n    }\n  }\n}\n\nprovider \"azurerm\" {\n  features {}\n}\n\n#File: resource-tagging.tf\nresource \"azurerm_policy_definition\" \"resource_tagging\" {\n  name         = \"resource-tagging\"\n  policy_type  = \"Custom\"\n  mode         = \"All\"\n  display_name = \"Resource Tagging\"\n  description = \"This policy appends the 'CostCenter', 'Owner', and 'Department' tags with a timestamp as their value if they do not exist on resources.\"\n\n  metadata = <<METADATA\n    {\n      \"version\": \"1.0.1\",\n      \"category\": \"Tags\"\n    }\n  METADATA\n\n  policy_rule = <<POLICY_RULE\n  {\n        \"if\": {\n            \"not\": {\n                \"allOf\": [\n                    {\n                        \"field\": \"tags['CostCenter']\",\n                        \"exists\": \"true\"\n                    },\n                    {\n                        \"field\": \"tags['Owner']\",\n                        \"exists\": \"true\"\n                    },\n                    {\n                        \"field\": \"tags['Department']\",\n                        \"exists\": \"true\"\n                    }\n                ]\n            }\n        },\n        \"then\": {\n            \"effect\": \"Modify\",\n            \"details\": {\n                \"roleDefinitionIds\": [\n                    \"/providers/microsoft.authorization/roleDefinitions/9f1af436-2d4a-4c3c-bfd0-4aa7c3c4d54e\"\n                ],\n                \"operations\": [\n                    {\n                        \"operation\": \"add\",\n                        \"field\": \"tags\",\n                        \"value\": {\n                            \"CostCenter\": \"[concat('CC-',utcNow())]\",\n                            \"Owner\": \"[concat('Owner-',utcNow())]\",\n                            \"Department\": \"[concat('Dept-',utcNow())]\"\n                        }\n                    }\n                ]\n            }\n        }\n    }\n  POLICY_RULE\n}\n\nresource \"azurerm_subscription_policy_assignment\" \"resource_tagging\" {\n  name                 = \"resource-tagging\"\n  policy_definition_id = azurerm_policy_definition.resource_tagging.id\n  subscription_id      = data.azurerm_subscription.current.id\n  location             = \"westeurope\"\n  identity {\n    type             = \"SystemAssigned\"\n  }\n}\n\nresource \"azurerm_role_assignment\" \"resource_tagging\" {\n  scope                = data.azurerm_subscription.current.id\n  role_definition_name = \"Contributor\"\n  principal_id         = azurerm_subscription_policy_assignment.resource_tagging.identity[0].principal_id\n}\n\nresource \"azurerm_subscription_policy_remediation\" \"resource_tagging\" {\n  name                 = \"resource-tagging\"\n  subscription_id      = data.azurerm_subscription.current.id\n  policy_assignment_id = azurerm_subscription_policy_assignment.resource_tagging.id\n}\n#File: vm-managed-identity.tf\nresource \"azurerm_policy_definition\" \"vm_managed_identity\" {\n  name         = \"vm-managed-identity\"\n  policy_type  = \"Custom\"\n  mode         = \"Indexed\"\n  display_name = \"VM Managed identity\"\n  description = \"This policy adds a system-assigned managed identity to virtual machines hosted in Azure that are supported by Guest Configuration but do not have any managed identities.\"\n\n  metadata = <<METADATA\n    {\n      \"category\": \"Guest Configuration\",\n      \"version\": \"4.0.0\"\n    }\n  METADATA\n\n\n  policy_rule = <<POLICY_RULE\n    {\n        \"if\": {\n        \"allOf\": [\n          {\n            \"field\": \"type\",\n            \"equals\": \"Microsoft.Compute/virtualMachines\"\n          },\n          {\n            \"anyOf\": [\n              {\n                \"field\": \"identity.type\",\n                \"exists\": \"false\"\n              },\n              {\n                \"field\": \"identity.type\",\n                \"equals\": \"None\"\n              }\n            ]\n          }\n        ]\n      },\n      \"then\": {\n        \"effect\": \"modify\",\n        \"details\": {\n          \"roleDefinitionIds\": [\n            \"/providers/microsoft.authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c\"\n          ],\n          \"operations\": [\n            {\n              \"operation\": \"addOrReplace\",\n              \"field\": \"identity.type\",\n              \"value\": \"SystemAssigned\"\n            }\n          ]\n        }\n      }\n    }\n  POLICY_RULE\n}\n\nresource \"azurerm_subscription_policy_assignment\" \"vm_managed_identity\" {\n  name                 = \"vm-managed-identity\"\n  policy_definition_id = azurerm_policy_definition.vm_managed_identity.id\n  subscription_id      = data.azurerm_subscription.current.id\n  location             = \"westeurope\"\n  identity {\n      type             = \"SystemAssigned\"\n  }\n}\n\nresource \"azurerm_role_assignment\" \"vm_managed_identity\" {\n  scope                = data.azurerm_subscription.current.id\n  role_definition_name = \"Contributor\"\n  principal_id         = azurerm_subscription_policy_assignment.vm_managed_identity.identity[0].principal_id\n}\n\nresource \"azurerm_subscription_policy_remediation\" \"vm_managed_identity\" {\n  name                 = \"vm-managed-identity\"\n  subscription_id      = data.azurerm_subscription.current.id\n  policy_assignment_id = azurerm_subscription_policy_assignment.vm_managed_identity.id\n}\n#File: west-europe-only.tf\nresource \"azurerm_policy_definition\" \"west_europe_only\" {\n  name         = \"west-europe-only\"\n  display_name = \"Ensure all resources are deployed in West Europe\"\n  description  = \"This policy ensures that all resources are deployed in the West Europe region.\"\n  policy_type  = \"Custom\"\n  mode         = \"Indexed\"\n\n  metadata = <<METADATA\n    {\n      \"category\": \"Location\"\n    }\n  METADATA\n\n  policy_rule = <<POLICY_RULE\n    {\n      \"if\": {\n        \"not\": {\n          \"field\": \"location\",\n          \"in\": [\n            \"westeurope\"\n          ]\n        }\n      },\n      \"then\": {\n        \"effect\": \"deny\"\n      }\n    }\n  POLICY_RULE\n}\n\nresource \"azurerm_subscription_policy_assignment\" \"west_europe_only\" {\n  name                 = \"west-europe-only\"\n  policy_definition_id = azurerm_policy_definition.west_europe_only.id\n  subscription_id      = data.azurerm_subscription.current.id\n}"}]}
{"messages": [{"role":"user","content":"Create a VPC with multiple public and private subnets distributed across all available availability zones, including internet gateways, NAT gateways, and corresponding route tables for proper routing.Use dynamic subnet CIDR block calculation via a subnets module and configures subnet naming and tagging based on customizable prefixes and VPC settings. Include enabling DNS support and hostname resolution within the VPC and connects private subnets to the internet through NAT gateways placed in public subnets."},{"role":"assistant","content":"locals {\r\n  public_subnet_prefix         = length(var.public_subnet_prefix) > 0 ? var.public_subnet_prefix : \"${var.vpc_name}_public_subnet\"\r\n  private_subnet_prefix        = length(var.private_subnet_prefix) > 0 ? var.private_subnet_prefix : \"${var.vpc_name}_private_subnet\"\r\n  number_of_availability_zones = length(data.aws_availability_zones.available.names)\r\n  public_subnet_info           = [for az in range(local.number_of_availability_zones) : { name = \"public_az${az}\", new_bits = var.public_subnet_size }]\r\n  private_subnet_info          = [for az in range(local.number_of_availability_zones) : { name = \"private_az${az}\", new_bits = var.private_subnet_size }]\r\n  network_separation           = [{ name = null, new_bits = var.private_subnet_offset }]\r\n  networks                     = concat(local.public_subnet_info, local.network_separation, local.private_subnet_info)\r\n  public_subnets               = [for name, cidr in module.subnets.network_cidr_blocks : cidr if length(regexall(\"^public_.*\", name)) > 0]\r\n  private_subnets              = [for name, cidr in module.subnets.network_cidr_blocks : cidr if length(regexall(\"^private_.*\", name)) > 0]\r\n}\r\n\r\nmodule \"subnets\" {\r\n  source = \"hashicorp/subnets/cidr\"\r\n\r\n  base_cidr_block = var.vpc_cidr_range\r\n  networks        = local.networks\r\n}\r\n\r\n# VPC\r\nresource \"aws_vpc\" \"core\" {\r\n  cidr_block           = var.vpc_cidr_range\r\n  enable_dns_support   = var.enable_dns_support\r\n  enable_dns_hostnames = var.enable_dns_hostnames\r\n\r\n  tags = merge({ Name = var.vpc_name }, var.tags)\r\n}\r\n\r\n# Public subnets\r\nresource \"aws_subnet\" \"public_subnet\" {\r\n  count                   = local.number_of_availability_zones\r\n  vpc_id                  = aws_vpc.core.id\r\n  cidr_block              = local.public_subnets[count.index]\r\n  availability_zone       = data.aws_availability_zones.available.names[count.index]\r\n  map_public_ip_on_launch = true # tfsec:ignore:aws-ec2-no-public-ip-subnet\r\n\r\n  tags = merge({\r\n    Name = \"${local.public_subnet_prefix}_${replace(\r\n      data.aws_availability_zones.available.names[count.index],\r\n      \"-\",\r\n      \"_\",\r\n    )}\"\r\n    Scope = \"public\" },\r\n  var.tags)\r\n}\r\n\r\n# Private subnets\r\nresource \"aws_subnet\" \"private_subnet\" {\r\n  count                   = local.number_of_availability_zones\r\n  vpc_id                  = aws_vpc.core.id\r\n  cidr_block              = local.private_subnets[count.index]\r\n  availability_zone       = data.aws_availability_zones.available.names[count.index]\r\n  map_public_ip_on_launch = false\r\n\r\n  tags = merge({\r\n    Name = \"${local.private_subnet_prefix}_${replace(\r\n      data.aws_availability_zones.available.names[count.index],\r\n      \"-\",\r\n      \"_\",\r\n    )}\"\r\n    Scope = \"private\" },\r\n  var.tags)\r\n}\r\n\r\n# IGW - Internet Gateway\r\nresource \"aws_internet_gateway\" \"core_igw\" {\r\n  vpc_id = aws_vpc.core.id\r\n\r\n  tags = merge({\r\n    Name = \"${var.vpc_name}_igw\"\r\n  }, var.tags)\r\n}\r\n\r\n# EIPs for NAT Gateways\r\nresource \"aws_eip\" \"core_nat_gw_eip\" {\r\n  count = local.number_of_availability_zones\r\n  vpc   = true\r\n\r\n  tags = merge({\r\n    Name = \"${var.vpc_name}_nat_gw_eip_${replace(\r\n      data.aws_availability_zones.available.names[count.index],\r\n      \"-\",\r\n      \"_\",\r\n    )}\"\r\n  }, var.tags)\r\n}\r\n\r\n# NAT Gateways for private subnets\r\nresource \"aws_nat_gateway\" \"core_nat_gw\" {\r\n  count         = local.number_of_availability_zones\r\n  subnet_id     = aws_subnet.public_subnet[count.index].id\r\n  allocation_id = aws_eip.core_nat_gw_eip[count.index].id\r\n\r\n  tags = merge({\r\n    Name = \"${var.vpc_name}_nat_gw_${replace(\r\n      data.aws_availability_zones.available.names[count.index],\r\n      \"-\",\r\n      \"_\",\r\n    )}\"\r\n  }, var.tags)\r\n}\r\n\r\n# Route tables for public/private subnets\r\nresource \"aws_route_table\" \"core_main_route_table\" {\r\n  vpc_id = aws_vpc.core.id\r\n\r\n  tags = merge({\r\n    Name = \"${var.vpc_name}_main_route_table_name\"\r\n  }, var.tags)\r\n}\r\n\r\nresource \"aws_route_table\" \"core_private_route_table\" {\r\n  count  = local.number_of_availability_zones\r\n  vpc_id = aws_vpc.core.id\r\n  route  = []\r\n\r\n  tags = merge({\r\n    Name = \"${var.vpc_name}_private_route_table_${replace(\r\n      data.aws_availability_zones.available.names[count.index],\r\n      \"-\",\r\n      \"_\",\r\n    )}\"\r\n  }, var.tags)\r\n}\r\n\r\n# Default public route through the IGW\r\nresource \"aws_route\" \"core_main_route_table_public_default_route\" {\r\n  route_table_id         = aws_route_table.core_main_route_table.id\r\n  destination_cidr_block = \"0.0.0.0/0\"\r\n  gateway_id             = aws_internet_gateway.core_igw.id\r\n}\r\n\r\n# Default private route through the NAT gateways\r\nresource \"aws_route\" \"core_private_route_table_default_route\" {\r\n  count                  = local.number_of_availability_zones\r\n  route_table_id         = aws_route_table.core_private_route_table[count.index].id\r\n  destination_cidr_block = \"0.0.0.0/0\"\r\n  nat_gateway_id         = aws_nat_gateway.core_nat_gw[count.index].id\r\n}\r\n\r\nresource \"aws_route_table_association\" \"core_private_route_table_association\" {\r\n  count          = local.number_of_availability_zones\r\n  subnet_id      = aws_subnet.private_subnet[count.index].id\r\n  route_table_id = aws_route_table.core_private_route_table[count.index].id\r\n}\r\n\r\ndata \"aws_availability_zones\" \"available\" {}\r\n\r\nprovider \"aws\" {\r\n  access_key                  = \"mock_access_key\" #tfsec:ignore:aws-misc-no-exposing-plaintext-credentials\r\n  region                      = \"eu-central-1\"\r\n  s3_use_path_style           = true\r\n  secret_key                  = \"mock_secret_key\" #tfsec:ignore:general-secrets-sensitive-in-attribute\r\n  skip_credentials_validation = true\r\n  skip_metadata_api_check     = true\r\n  skip_requesting_account_id  = true\r\n\r\n  endpoints {\r\n    ec2    = \"http://localhost:4566\"\r\n    iam    = \"http://localhost:4566\"\r\n    sts    = \"http://localhost:4566\"\r\n    config = \"http://localhost:4566\"\r\n    s3     = \"http://localhost:4566\"\r\n    kms    = \"http://localhost:4566\"\r\n  }\r\n}\r\n\r\nvariable \"tags\" {\r\n  type        = map(string)\r\n  description = \"A map of tags to apply to all VPC resources\"\r\n  default     = {}\r\n}\r\n\r\nvariable \"vpc_name\" {\r\n  type        = string\r\n  description = \"The name of the VPC\"\r\n  default     = \"core_vpc\"\r\n}\r\n\r\nvariable \"vpc_cidr_range\" {\r\n  type        = string\r\n  description = \"The IP address space to use for the VPC\"\r\n  default     = \"10.0.0.0/16\"\r\n}\r\n\r\nvariable \"public_subnet_size\" {\r\n  type        = number\r\n  description = \"The size of the public subnet (default: 1022 usable addresses)\"\r\n  default     = 6\r\n}\r\n\r\nvariable \"private_subnet_size\" {\r\n  type        = number\r\n  description = \"The size of the private subnet (default: 1022 usable addresses)\"\r\n  default     = 6\r\n}\r\n\r\nvariable \"private_subnet_offset\" {\r\n  type        = number\r\n  description = \"The amount of IP space between the public and the private subnet\"\r\n  default     = 2\r\n}\r\n\r\nvariable \"public_subnet_prefix\" {\r\n  type        = string\r\n  description = \"The prefix to attach to the name of the public subnets\"\r\n  default     = \"\"\r\n}\r\n\r\nvariable \"private_subnet_prefix\" {\r\n  type        = string\r\n  description = \"The prefix to attach to the name of the private subnets\"\r\n  default     = \"\"\r\n}\r\n\r\nvariable \"enable_dns_support\" {\r\n  type        = bool\r\n  description = \"Whether or not to enable VPC DNS support\"\r\n  default     = true\r\n}\r\n\r\nvariable \"enable_dns_hostnames\" {\r\n  type        = bool\r\n  description = \"Whether or not to enable VPC DNS hostname support\"\r\n  default     = true\r\n}\r\n\r\n"}]}
{"messages": [{"role":"user","content":"Provide a containerized application on AWS, leveraging ECS, an Application Load Balancer, and a custom VPC. An Aurora PostgreSQL database, supported by S3 buckets and Secrets Manager. Additionally, AWS Bedrock Knowledge Bases and CloudWatch and Lambda functions."},{"role":"assistant","content":"provider \"aws\" {\r\n  region = var.region\r\n}\r\n\r\nvariable \"name\" {\r\n  description = \"The name of this template (e.g., my-app-prod)\"\r\n  type        = string\r\n}\r\n\r\nvariable \"region\" {\r\n  description = \"The AWS region to deploy\"\r\n  type        = string\r\n}\r\n\r\nvariable \"container_name\" {\r\n  description = \"The name of the container\"\r\n  type        = string\r\n  default     = \"app\"\r\n}\r\n\r\nvariable \"container_port\" {\r\n  description = \"The port that the container is listening on\"\r\n  type        = number\r\n  default     = 8080\r\n}\r\n\r\nvariable \"health_check\" {\r\n  description = \"A map containing configuration for the health check\"\r\n  type        = string\r\n  default     = \"/health\"\r\n}\r\n\r\nvariable \"tags\" {\r\n  description = \"A map of tags to apply to all resources\"\r\n  type        = map(string)\r\n  default     = {}\r\n}\r\n\r\nvariable \"image\" {\r\n  description = \"container image to initially bootstrap. future images can be deployed using a separate mechanism\"\r\n  type        = string\r\n  default     = \"public.ecr.aws/jritsema/defaultbackend\"\r\n}\r\n\r\nresource \"aws_s3_bucket\" \"main\" {\r\n  bucket        = \"${var.name}-documents-${local.account_id}\"\r\n  force_destroy = true\r\n}\r\n\r\nresource \"aws_s3_bucket_public_access_block\" \"main\" {\r\n  bucket = aws_s3_bucket.main.id\r\n\r\n  block_public_acls       = true\r\n  block_public_policy     = true\r\n  ignore_public_acls      = true\r\n  restrict_public_buckets = true\r\n}\r\n\r\n# bucket for storing llm logs\r\nresource \"aws_s3_bucket\" \"llm_logs\" {\r\n  bucket        = \"${var.name}-llm-logs-${local.account_id}\"\r\n  force_destroy = true\r\n}\r\n\r\nlocals {\r\n  vpc_cidr = \"10.0.0.0/16\"\r\n  azs      = slice(data.aws_availability_zones.available.names, 0, 3)\r\n}\r\n\r\nmodule \"vpc\" {\r\n  source  = \"terraform-aws-modules/vpc/aws\"\r\n\r\n  name = var.name\r\n  cidr = local.vpc_cidr\r\n\r\n  azs             = local.azs\r\n  public_subnets  = [for k, v in local.azs : cidrsubnet(local.vpc_cidr, 8, k)]\r\n  private_subnets = [for k, v in local.azs : cidrsubnet(local.vpc_cidr, 8, k + 10)]\r\n\r\n  enable_nat_gateway = true\r\n  # single_nat_gateway = true\r\n\r\n  # Manage so we can name\r\n  manage_default_network_acl    = true\r\n  default_network_acl_tags      = { Name = \"${var.name}-default\" }\r\n  manage_default_route_table    = true\r\n  default_route_table_tags      = { Name = \"${var.name}-default\" }\r\n  manage_default_security_group = true\r\n  default_security_group_tags   = { Name = \"${var.name}-default\" }\r\n\r\n  tags = var.tags\r\n}\r\n\r\n# zip the source code\r\ndata \"archive_file\" \"llm_logs\" {\r\n  type        = \"zip\"\r\n  source_file = \"llm-logging.py\"\r\n  output_path = \".archive/lambda.zip\"\r\n}\r\n\r\nresource \"aws_lambda_function\" \"log_to_s3\" {\r\n  function_name    = \"${var.name}-llm-logs-s3\"\r\n  description      = \"filters app logs for llm logs and writes them to s3\"\r\n  runtime          = \"python3.13\"\r\n  filename         = data.archive_file.llm_logs.output_path\r\n  source_code_hash = filebase64sha256(data.archive_file.llm_logs.output_path)\r\n  handler          = \"llm-logging.lambda_handler\"\r\n  role             = aws_iam_role.lambda_llm_logs.arn\r\n  environment {\r\n    variables = {\r\n      S3_BUCKET = aws_s3_bucket.llm_logs.id\r\n    }\r\n  }\r\n}\r\n\r\nresource \"aws_iam_role\" \"lambda_llm_logs\" {\r\n  name = \"llm_logs_lambda_execution_role\"\r\n\r\n  assume_role_policy = jsonencode({\r\n    Statement = [{\r\n      Effect = \"Allow\",\r\n      Principal = {\r\n        Service = \"lambda.amazonaws.com\"\r\n      },\r\n      Action = \"sts:AssumeRole\"\r\n    }]\r\n  })\r\n}\r\n\r\n# allow lambda to write to bucket\r\nresource \"aws_iam_role_policy\" \"lambda_llm_logs\" {\r\n  name = \"llm_logs_lambda_execution_role\"\r\n  role = aws_iam_role.lambda_llm_logs.id\r\n  policy = jsonencode({\r\n    Statement = [{\r\n      Effect   = \"Allow\"\r\n      Action   = \"s3:PutObject\"\r\n      Resource = \"${aws_s3_bucket.llm_logs.arn}/*\"\r\n    }]\r\n  })\r\n}\r\n\r\n# run the lambda against each log\r\nresource \"aws_cloudwatch_log_subscription_filter\" \"llm_logs\" {\r\n  name            = \"${var.name}-llm-logs-s3\"\r\n  log_group_name  = \"${module.ecs_cluster.cloudwatch_log_group_name}/${var.container_name}\"\r\n  destination_arn = aws_lambda_function.log_to_s3.arn\r\n  filter_pattern  = \"\"\r\n  depends_on      = [module.ecs_service]\r\n}\r\n\r\nresource \"aws_lambda_permission\" \"llm_logs\" {\r\n  statement_id   = \"invoked_by_container_app_logs\"\r\n  action         = \"lambda:InvokeFunction\"\r\n  principal      = \"logs.${local.region}.amazonaws.com\"\r\n  function_name  = aws_lambda_function.log_to_s3.function_name\r\n  source_arn     = \"${module.ecs_cluster.cloudwatch_log_group_arn}/${var.container_name}:*\"\r\n  source_account = local.account_id\r\n}\r\n\r\nresource \"aws_iam_role_policy_attachment\" \"lambda_basic_execution\" {\r\n  role       = aws_iam_role.lambda_llm_logs.name\r\n  policy_arn = \"arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\"\r\n}\r\n\r\nresource \"aws_iam_role_policy_attachment\" \"cw_subscription\" {\r\n  role       = aws_iam_role.lambda_llm_logs.name\r\n  policy_arn = \"arn:aws:iam::aws:policy/CloudWatchLogsFullAccess\"\r\n}\r\n\r\nresource \"aws_cloudwatch_log_group\" \"llm_logs\" {\r\n  name              = \"/aws/lambda/${aws_lambda_function.log_to_s3.function_name}\"\r\n  retention_in_days = 7\r\n}\r\nlocals {\r\n  embedding_model_arn = \"arn:aws:bedrock:${local.region}::foundation-model/amazon.titan-embed-g1-text-02\"\r\n}\r\n\r\nresource \"aws_bedrockagent_knowledge_base\" \"main\" {\r\n  name        = var.name\r\n  description = \"kb for ${var.name}\"\r\n  role_arn    = aws_iam_role.bedrock_kb_role.arn\r\n\r\n  knowledge_base_configuration {\r\n    type = \"VECTOR\"\r\n    vector_knowledge_base_configuration {\r\n      embedding_model_arn = local.embedding_model_arn\r\n    }\r\n  }\r\n\r\n  storage_configuration {\r\n    type = \"RDS\"\r\n    rds_configuration {\r\n      credentials_secret_arn = local.bedrock_user_secret\r\n      database_name          = local.database_name\r\n      resource_arn           = local.aurora_cluster_arn\r\n      table_name             = \"${local.schema}.${local.table}\"\r\n      field_mapping {\r\n        metadata_field    = local.metadata_field\r\n        primary_key_field = local.pkey_field\r\n        text_field        = local.text_field\r\n        vector_field      = local.vector_field\r\n      }\r\n    }\r\n  }\r\n\r\n  # ensure that the postgres bedrock schema/table\r\n  # is created before the knowledge base is created\r\n  depends_on = [null_resource.postgres_setup]\r\n}\r\n\r\nresource \"aws_bedrockagent_data_source\" \"main\" {\r\n  knowledge_base_id = aws_bedrockagent_knowledge_base.main.id\r\n  name              = aws_s3_bucket.main.bucket\r\n  data_source_configuration {\r\n    type = \"S3\"\r\n    s3_configuration {\r\n      bucket_arn = aws_s3_bucket.main.arn\r\n    }\r\n  }\r\n  data_deletion_policy = \"RETAIN\"\r\n}\r\n\r\nresource \"aws_iam_role\" \"bedrock_kb_role\" {\r\n  name               = \"BedrockExecutionRoleForKnowledgeBase-${var.name}\"\r\n  assume_role_policy = data.aws_iam_policy_document.kb_assume.json\r\n}\r\n\r\nresource \"aws_iam_role_policy\" \"kb\" {\r\n  role   = aws_iam_role.bedrock_kb_role.name\r\n  policy = data.aws_iam_policy_document.kb.json\r\n}\r\n\r\ndata \"aws_iam_policy_document\" \"kb_assume\" {\r\n  statement {\r\n    sid     = \"AmazonBedrockKnowledgeBaseTrustPolicy\"\r\n    effect  = \"Allow\"\r\n    actions = [\"sts:AssumeRole\"]\r\n    principals {\r\n      type        = \"Service\"\r\n      identifiers = [\"bedrock.amazonaws.com\"]\r\n    }\r\n    condition {\r\n      test     = \"StringEquals\"\r\n      variable = \"aws:SourceAccount\"\r\n      values   = [local.account_id]\r\n    }\r\n    condition {\r\n      test     = \"ArnLike\"\r\n      variable = \"aws:SourceArn\"\r\n      values   = [\"arn:aws:bedrock:${local.region}:${local.account_id}:knowledge-base/*\"]\r\n    }\r\n  }\r\n}\r\n\r\ndata \"aws_iam_policy_document\" \"kb\" {\r\n  statement {\r\n    sid       = \"BedrockInvokeModelStatement\"\r\n    effect    = \"Allow\"\r\n    actions   = [\"bedrock:InvokeModel\"]\r\n    resources = [local.embedding_model_arn]\r\n  }\r\n\r\n  statement {\r\n    sid       = \"RdsDescribeStatementID\"\r\n    effect    = \"Allow\"\r\n    actions   = [\"rds:DescribeDBClusters\"]\r\n    resources = [local.aurora_cluster_arn]\r\n  }\r\n\r\n  statement {\r\n    sid    = \"DataAPIStatementID\"\r\n    effect = \"Allow\"\r\n    actions = [\r\n      \"rds-data:BatchExecuteStatement\",\r\n      \"rds-data:ExecuteStatement\",\r\n    ]\r\n    resources = [local.aurora_cluster_arn]\r\n  }\r\n\r\n  statement {\r\n    sid       = \"S3ListBucketStatement\"\r\n    effect    = \"Allow\"\r\n    actions   = [\"s3:ListBucket\"]\r\n    resources = [aws_s3_bucket.main.arn]\r\n    condition {\r\n      test     = \"StringEquals\"\r\n      variable = \"aws:ResourceAccount\"\r\n      values   = [local.account_id]\r\n    }\r\n  }\r\n\r\n  statement {\r\n    sid       = \"S3GetObjectStatement\"\r\n    effect    = \"Allow\"\r\n    actions   = [\"s3:GetObject\"]\r\n    resources = [\"${aws_s3_bucket.main.arn}/*\"]\r\n    condition {\r\n      test     = \"StringEquals\"\r\n      variable = \"aws:ResourceAccount\"\r\n      values   = [local.account_id]\r\n    }\r\n  }\r\n\r\n  statement {\r\n    sid       = \"SecretsManagerGetStatement\"\r\n    effect    = \"Allow\"\r\n    actions   = [\"secretsmanager:GetSecretValue\"]\r\n    resources = [local.bedrock_user_secret]\r\n  }\r\n}\r\n\r\n# schedule a KB sync every hour\r\nresource \"aws_scheduler_schedule\" \"main\" {\r\n  name                = \"${var.name}-kb-sync\"\r\n  schedule_expression = \"rate(1 days)\"\r\n\r\n  target {\r\n    arn      = \"arn:aws:scheduler:::aws-sdk:bedrockagent:startIngestionJob\"\r\n    role_arn = aws_iam_role.event_bridge_scheduler.arn\r\n\r\n    input = jsonencode({\r\n      KnowledgeBaseId = aws_bedrockagent_knowledge_base.main.id\r\n      DataSourceId    = aws_bedrockagent_data_source.main.data_source_id\r\n    })\r\n  }\r\n\r\n  flexible_time_window {\r\n    mode = \"OFF\"\r\n  }\r\n}\r\n\r\nresource \"aws_iam_role\" \"event_bridge_scheduler\" {\r\n  name = \"${var.name}-event-bridge-scheduler-role\"\r\n\r\n  assume_role_policy = <<-EOF\r\n  {\r\n    \"Statement\": [\r\n      {\r\n        \"Effect\": \"Allow\",\r\n        \"Principal\": {\r\n          \"Service\": \"scheduler.amazonaws.com\"\r\n        },\r\n        \"Action\": \"sts:AssumeRole\"\r\n      }\r\n    ]\r\n  }\r\n  EOF\r\n}\r\n\r\ndata \"aws_iam_policy_document\" \"kb_sync\" {\r\n  statement {\r\n    effect    = \"Allow\"\r\n    actions   = [\"bedrock:StartIngestionJob\"]\r\n    resources = [aws_bedrockagent_knowledge_base.main.arn]\r\n  }\r\n}\r\n\r\nresource \"aws_iam_role_policy\" \"event_bridge_scheduler\" {\r\n  role   = aws_iam_role.event_bridge_scheduler.name\r\n  policy = data.aws_iam_policy_document.kb_sync.json\r\n}\r\n\r\n# deliver kb sync logs to s3\r\nresource \"awscc_logs_delivery_source\" \"kb_logs\" {\r\n  name         = \"${var.name}-kb-logs\"\r\n  log_type     = \"APPLICATION_LOGS\"\r\n  resource_arn = aws_bedrockagent_knowledge_base.main.arn\r\n  tags = [for k, v in var.tags : {\r\n    key   = k\r\n    value = v\r\n  }]\r\n}\r\n\r\nresource \"awscc_logs_delivery_destination\" \"kb_logs\" {\r\n  name                     = \"${var.name}-kb-logs\"\r\n  destination_resource_arn = aws_s3_bucket.kb_logs.arn\r\n  tags = [for k, v in var.tags : {\r\n    key   = k\r\n    value = v\r\n  }]\r\n}\r\n\r\nresource \"awscc_logs_delivery\" \"kb_logs\" {\r\n  delivery_source_name     = awscc_logs_delivery_source.kb_logs.name\r\n  delivery_destination_arn = awscc_logs_delivery_destination.kb_logs.arn\r\n  tags = [for k, v in var.tags : {\r\n    key   = k\r\n    value = v\r\n  }]\r\n}\r\n\r\nresource \"aws_s3_bucket\" \"kb_logs\" {\r\n  bucket = \"${var.name}-kb-logs-${local.account_id}\"\r\n}\r\n\r\nresource \"aws_s3_bucket_public_access_block\" \"kb_logs\" {\r\n  bucket                  = aws_s3_bucket.main.id\r\n  block_public_acls       = true\r\n  block_public_policy     = true\r\n  ignore_public_acls      = true\r\n  restrict_public_buckets = true\r\n}\r\n\r\nmodule \"ecs_cluster\" {\r\n  source  = \"terraform-aws-modules/ecs/aws//modules/cluster\"\r\n\r\n  cluster_name = var.name\r\n\r\n  fargate_capacity_providers = {\r\n    FARGATE      = {}\r\n    FARGATE_SPOT = {}\r\n  }\r\n\r\n  tags = var.tags\r\n}\r\n\r\nmodule \"ecs_service\" {\r\n  source  = \"terraform-aws-modules/ecs/aws//modules/service\"\r\n\r\n  name        = var.name\r\n  cluster_arn = module.ecs_cluster.arn\r\n\r\n  cpu    = 1024\r\n  memory = 2048\r\n\r\n  # supports external task def deployments\r\n  # by ignoring changes to task definition and desired count\r\n  ignore_task_definition_changes = true\r\n  desired_count                  = 1\r\n\r\n  # Task Definition\r\n  enable_execute_command = false\r\n\r\n  container_definitions = {\r\n    (var.container_name) = {\r\n\r\n      image = var.image\r\n\r\n      port_mappings = [\r\n        {\r\n          protocol      = \"tcp\",\r\n          containerPort = var.container_port\r\n        }\r\n      ]\r\n\r\n      environment = [\r\n        {\r\n          \"name\" : \"PORT\",\r\n          \"value\" : \"${var.container_port}\"\r\n        },\r\n        {\r\n          \"name\" : \"HEALTHCHECK\",\r\n          \"value\" : \"${var.health_check}\"\r\n        },\r\n        {\r\n          \"name\" : \"POSTGRES_DB\"\r\n          \"value\" : local.database_name\r\n        },\r\n        {\r\n          \"name\" : \"POSTGRES_HOST\"\r\n          \"value\" : module.aurora_postgres.cluster_endpoint\r\n        },\r\n        {\r\n          \"name\" : \"KNOWLEDGE_BASE_ID\",\r\n          \"value\" : aws_bedrockagent_knowledge_base.main.id\r\n        },\r\n        {\r\n          \"name\" : \"DB_SECRET_ARN\",\r\n          \"value\" : local.aurora_secret_arn\r\n        },\r\n        {\r\n          \"name\" : \"OTEL_RESOURCE_ATTRIBUTES\",\r\n          \"value\" : \"service.namespace=${var.name},service.name=orchestrator\"\r\n        },\r\n      ]\r\n\r\n      readonly_root_filesystem = false\r\n\r\n      dependsOn = [\r\n        {\r\n          containerName = \"otel\"\r\n          condition     = \"HEALTHY\"\r\n        }\r\n      ]\r\n    },\r\n    otel = {\r\n      image   = \"public.ecr.aws/aws-observability/aws-otel-collector:v0.41.2\"\r\n      command = [\"--config=/etc/ecs/ecs-default-config.yaml\"]\r\n      healthCheck = {\r\n        command     = [\"/healthcheck\"]\r\n        interval    = 5\r\n        timeout     = 6\r\n        retries     = 5\r\n        startPeriod = 1\r\n      }\r\n    },\r\n  }\r\n\r\n  load_balancer = {\r\n    service = {\r\n      target_group_arn = module.alb.target_groups[\"ecs-task\"].arn\r\n      container_name   = var.container_name\r\n      container_port   = var.container_port\r\n    }\r\n  }\r\n\r\n  subnet_ids = module.vpc.private_subnets\r\n\r\n  security_group_rules = {\r\n    ingress_alb_service = {\r\n      type                     = \"ingress\"\r\n      from_port                = var.container_port\r\n      to_port                  = var.container_port\r\n      protocol                 = \"tcp\"\r\n      description              = \"Service port\"\r\n      source_security_group_id = module.alb.security_group_id\r\n    }\r\n    egress_all = {\r\n      type        = \"egress\"\r\n      from_port   = 0\r\n      to_port     = 0\r\n      protocol    = \"-1\"\r\n      cidr_blocks = [\"0.0.0.0/0\"]\r\n    }\r\n  }\r\n\r\n  tasks_iam_role_name        = \"${var.name}-tasks\"\r\n  tasks_iam_role_description = \"role for ${var.name}\"\r\n\r\n  tasks_iam_role_statements = [\r\n    {\r\n      actions   = [\"secretsmanager:GetSecretValue\"]\r\n      resources = [local.aurora_secret_arn]\r\n    },\r\n    {\r\n      actions   = [\"bedrock:Retrieve\"]\r\n      resources = [\"arn:aws:bedrock:${local.region}:${local.account_id}:knowledge-base/*\"]\r\n    },\r\n    {\r\n      actions   = [\"bedrock:InvokeModel\"]\r\n      resources = [\"arn:aws:bedrock:${local.region}::foundation-model/*\"]\r\n    },\r\n    {\r\n      actions = [\r\n        \"xray:PutTraceSegments\",\r\n        \"xray:PutTelemetryRecords\"\r\n      ]\r\n      resources = [\"*\"]\r\n    }\r\n  ]\r\n\r\n  tags = var.tags\r\n}\r\n\r\nmodule \"alb\" {\r\n  source  = \"terraform-aws-modules/alb/aws\"\r\n  version = \"~> 9.0\"\r\n\r\n  name = var.name\r\n\r\n  enable_deletion_protection = false\r\n\r\n  vpc_id  = module.vpc.vpc_id\r\n  subnets = module.vpc.public_subnets\r\n\r\n  security_group_ingress_rules = {\r\n    all_http = {\r\n      from_port   = 80\r\n      to_port     = 80\r\n      ip_protocol = \"tcp\"\r\n      description = \"HTTP web traffic\"\r\n      cidr_ipv4   = \"0.0.0.0/0\"\r\n    }\r\n  }\r\n\r\n  security_group_egress_rules = { for cidr_block in module.vpc.private_subnets_cidr_blocks :\r\n    (cidr_block) => {\r\n      ip_protocol = \"-1\"\r\n      cidr_ipv4   = cidr_block\r\n    }\r\n  }\r\n\r\n  listeners = {\r\n    http = {\r\n      port     = \"80\"\r\n      protocol = \"HTTP\"\r\n\r\n      forward = {\r\n        target_group_key = \"ecs-task\"\r\n      }\r\n    }\r\n  }\r\n\r\n  target_groups = {\r\n\r\n    ecs-task = {\r\n      backend_protocol = \"HTTP\"\r\n      backend_port     = var.container_port\r\n      target_type      = \"ip\"\r\n\r\n      health_check = {\r\n        enabled             = true\r\n        healthy_threshold   = 5\r\n        interval            = 10\r\n        matcher             = \"200-299\"\r\n        path                = var.health_check\r\n        port                = \"traffic-port\"\r\n        protocol            = \"HTTP\"\r\n        timeout             = 5\r\n        unhealthy_threshold = 2\r\n      }\r\n\r\n      create_attachment = false\r\n    }\r\n  }\r\n\r\n  tags = var.tags\r\n}\r\nresource \"aws_ecr_repository\" \"main\" {\r\n  name                 = var.name\r\n  image_tag_mutability = \"IMMUTABLE\"\r\n  force_delete         = true\r\n\r\n  image_scanning_configuration {\r\n    scan_on_push = true\r\n  }\r\n}\r\nlocals {\r\n  aurora_cluster_arn  = module.aurora_postgres.cluster_arn\r\n  database_name       = module.aurora_postgres.cluster_database_name\r\n  aurora_secret_arn   = module.aurora_postgres.cluster_master_user_secret[0].secret_arn\r\n  bedrock_user        = \"bedrock_user\"\r\n  bedrock_user_secret = aws_secretsmanager_secret.kb_creds.arn\r\n\r\n  # kb table info\r\n  schema         = \"bedrock_integration\"\r\n  table          = \"bedrock_kb\"\r\n  pkey_field     = \"id\"\r\n  vector_field   = \"embedding\"\r\n  text_field     = \"chunks\"\r\n  metadata_field = \"metadata\"\r\n}\r\n\r\nmodule \"aurora_postgres\" {\r\n  source = \"terraform-aws-modules/rds-aurora/aws\"\r\n\r\n  name                        = var.name\r\n  engine                      = data.aws_rds_engine_version.postgres.engine\r\n  engine_version              = data.aws_rds_engine_version.postgres.version\r\n  engine_mode                 = \"provisioned\"\r\n  storage_encrypted           = true\r\n  database_name               = \"postgres\"\r\n  master_username             = \"postgres\"\r\n  manage_master_user_password = true\r\n  enable_http_endpoint        = true\r\n\r\n  serverlessv2_scaling_configuration = {\r\n    min_capacity = 0.5\r\n    max_capacity = 2\r\n  }\r\n\r\n  instance_class = \"db.serverless\"\r\n  instances = {\r\n    \"1\" = {}\r\n  }\r\n\r\n  # networking\r\n  vpc_id                 = module.vpc.vpc_id\r\n  subnets                = module.vpc.private_subnets\r\n  create_db_subnet_group = true\r\n  security_group_rules = {\r\n    ingress = {\r\n      type                     = \"ingress\"\r\n      description              = \"restricts ingress to app container\"\r\n      source_security_group_id = module.ecs_service.security_group_id\r\n    }\r\n    egress = {\r\n      type        = \"egress\"\r\n      from_port   = 0\r\n      to_port     = 0\r\n      protocol    = \"-1\"\r\n      cidr_blocks = [\"0.0.0.0/0\"]\r\n    }\r\n  }\r\n\r\n  backup_retention_period = 7\r\n  monitoring_interval     = 60\r\n  apply_immediately       = true\r\n  skip_final_snapshot     = true\r\n}\r\n\r\n# credentials that bedrock kb uses\r\nresource \"aws_secretsmanager_secret\" \"kb_creds\" {\r\n  name_prefix             = \"${var.name}-kb-creds\"\r\n  recovery_window_in_days = 0\r\n}\r\n\r\nresource \"random_password\" \"kb_password\" {\r\n  length  = 16\r\n  special = false\r\n}\r\n\r\n# create a secret in AWS Secrets Manager using username and password\r\nresource \"aws_secretsmanager_secret_version\" \"v1\" {\r\n  secret_id = aws_secretsmanager_secret.kb_creds.id\r\n  secret_string = jsonencode({\r\n    username = local.bedrock_user\r\n    password = random_password.kb_password.result\r\n  })\r\n}\r\n\r\nresource \"null_resource\" \"postgres_setup\" {\r\n  provisioner \"local-exec\" {\r\n    command = \"./database.sh\"\r\n    environment = {\r\n      AWS_REGION  = data.aws_region.current.name\r\n      CLUSTER_ARN = local.aurora_cluster_arn\r\n      DB_NAME     = local.database_name\r\n      DB_USER     = local.bedrock_user\r\n      DB_PASSWORD = random_password.kb_password.result\r\n      ADMIN       = local.aurora_secret_arn\r\n      USER        = local.bedrock_user_secret\r\n      SCHEMA      = local.schema\r\n      TABLE       = local.table\r\n      PKEY        = local.pkey_field\r\n      VECTOR      = local.vector_field\r\n      TEXT        = local.text_field\r\n      METADATA    = local.metadata_field\r\n    }\r\n  }\r\n\r\n  # need the database ready before updating schema\r\n  depends_on = [module.aurora_postgres]\r\n}\r\ndata \"aws_region\" \"current\" {}\r\n\r\ndata \"aws_caller_identity\" \"current\" {}\r\n\r\ndata \"aws_availability_zones\" \"available\" {}\r\n\r\ndata \"aws_rds_engine_version\" \"postgres\" {\r\n  engine  = \"aurora-postgresql\"\r\n}\r\n\r\nlocals {\r\n  region     = data.aws_region.current.name\r\n  account_id = data.aws_caller_identity.current.account_id\r\n}\r\n"}]}
{"messages": [{"role": "user", "content": "Create a resource group named \"rg-azure-demo\" in the \"southcentralus\" location with the tag \"source\" set to \"Terraform\". Define the Azure provider with version \"~>2.31.1\" and ensure compatibility with Terraform version \">= 0.13\". Specify a variable called \"security_group_ids\" that allows a list of CIDR blocks for allowed IP addresses, defaulting to \"0.0.0.0/0\". Ensure all necessary files and configurations are included for a complete Terraform setup. Deploy your infrastructure by executing the Terraform commands."}, {"role": "assistant", "content": "\n#File: main.tf\n# Provides the Resource Group\nresource \"azurerm_resource_group\" \"rg\" {\n    name = \"rg-azure-demo\"\n    location = \"southcentralus\"\n    tags = {\n        source = \"Terraform\"\n    }\n}\n#File: provider.tf\nterraform {\n  required_providers {\n    azure = {\n      source  = \"hashicorp/azurerm\"\n      version = \"~>2.31.1\"\n    }\n  }\n}\n\nprovider \"azurerm\" {\n  features {}\n}\n#File: versions.tf\nterraform {\n  required_version = \">= 0.13\"\n}\n#File: variables.tf\nvariable \"security_group_ids\" {\n  type        = list(string)\n  description = \"List of CIDR blocks for allowed IP addresses\"\n  default     = [\"0.0.0.0/0\"] # You can set your default value here if needed\n}"}]}
{"messages": [{"role":"user","content":"Creates an AWS WAF Regional Web ACL to protect an Application Load Balancer by restricting access to a specific admin endpoint. The configuration should define a list of allowed admin IP addresses using an IP set, and create a byte match condition to identify requests targeting the protected URL path. Create a WAF rule that blocks any requests to this admin endpoint from IPs not in the allowed list, while allowing all other traffic. Finally, the Web ACL must be associated with the ALB to enforce this security policy"},{"role":"assistant","content":"variable \"app_name\" {\r\n}\r\n\r\nvariable \"environment\" {\r\n}\r\n\r\nvariable \"alb_arn\" {\r\n}\r\n\r\nvariable \"protected_endpoint\" {\r\n}\r\n\r\nvariable \"admin_remote_ipset\" {\r\n  type = list(string)\r\n}\r\n\r\nresource \"aws_wafregional_ipset\" \"admin_remote_ipset\" {\r\n  name = \"${var.environment}-${var.app_name}-match-admin-remote-ip\"\r\n  dynamic \"ip_set_descriptor\" {\r\n    for_each = var.admin_remote_ipset\r\n    content {\r\n\r\n      type  = ip_set_descriptor.value.type\r\n      value = ip_set_descriptor.value.value\r\n    }\r\n  }\r\n}\r\n\r\nresource \"aws_wafregional_byte_match_set\" \"match_admin_url\" {\r\n  name = \"${var.environment}-${var.app_name}-match-admin-url\"\r\n  byte_match_tuples {\r\n    text_transformation   = \"URL_DECODE\"\r\n    target_string         = var.protected_endpoint\r\n    positional_constraint = \"STARTS_WITH\"\r\n    field_to_match {\r\n      type = \"URI\"\r\n    }\r\n  }\r\n}\r\n\r\nresource \"aws_wafregional_rule\" \"detect_admin_access\" {\r\n  name        = \"${var.environment}-${var.app_name}-detect-admin-access\"\r\n  metric_name = \"${var.environment}${var.app_name}detectadminaccess\"\r\n\r\n  predicate {\r\n    data_id = aws_wafregional_ipset.admin_remote_ipset.id\r\n    negated = true\r\n    type    = \"IPMatch\"\r\n  }\r\n\r\n  predicate {\r\n    data_id = aws_wafregional_byte_match_set.match_admin_url.id\r\n    negated = false\r\n    type    = \"ByteMatch\"\r\n  }\r\n}\r\n\r\nresource \"aws_wafregional_web_acl\" \"acl\" {\r\n  name        = \"${var.environment}-${var.app_name}-admin-acl\"\r\n  metric_name = \"${var.environment}${var.app_name}adminacl\"\r\n\r\n  default_action {\r\n    type = \"ALLOW\"\r\n  }\r\n\r\n  rule {\r\n    action {\r\n      type = \"BLOCK\"\r\n    }\r\n    priority = 1\r\n    rule_id  = aws_wafregional_rule.detect_admin_access.id\r\n    type     = \"REGULAR\"\r\n  }\r\n}\r\n\r\nresource \"aws_wafregional_web_acl_association\" \"acl-association\" {\r\n  resource_arn = var.alb_arn\r\n  web_acl_id   = aws_wafregional_web_acl.acl.id\r\n}\r\n"}]}
{"messages": [{"role": "user", "content": "Create a Google Cloud VPC with specified name and settings. Establish a public subnet within the VPC using a provided CIDR range. Configure firewall rules to allow HTTP, HTTPS, SSH, and RDP traffic to the VPC. Set up firewall rules for internal communication with specified ports. Create a Google Compute Engine virtual machine with a specific machine type and startup script for installation."}, {"role": "assistant", "content": "\n#File: network-firewall.tf\n# Basic Network Firewall Rules | network-firewall.tf  \n\n# Allow http\nresource \"google_compute_firewall\" \"allow-http\" {\n  name    = \"${var.app_name}-${var.app_environment}-fw-allow-http\"\n  network = \"${google_compute_network.vpc.name}\"\n  allow {\n    protocol = \"tcp\"\n    ports    = [\"80\"]\n  }\n  target_tags = [\"http\"] \n}\n\n# allow https\nresource \"google_compute_firewall\" \"allow-https\" {\n  name    = \"${var.app_name}-${var.app_environment}-fw-allow-https\"\n  network = \"${google_compute_network.vpc.name}\"\n  allow {\n    protocol = \"tcp\"\n    ports    = [\"443\"]\n  }\n  target_tags = [\"https\"] \n}\n\n# allow ssh\nresource \"google_compute_firewall\" \"allow-ssh\" {\n  name    = \"${var.app_name}-${var.app_environment}-fw-allow-ssh\"\n  network = \"${google_compute_network.vpc.name}\"\n  allow {\n    protocol = \"tcp\"\n    ports    = [\"22\"]\n  }\n  target_tags = [\"ssh\"]\n}\n\n# allow rdp\nresource \"google_compute_firewall\" \"allow-rdp\" {\n  name    = \"${var.app_name}-${var.app_environment}-fw-allow-rdp\"\n  network = \"${google_compute_network.vpc.name}\"\n  allow {\n    protocol = \"tcp\"\n    ports    = [\"3389\"]\n  }\n  target_tags = [\"rdp\"]\n}\n\n#File: network-variables.tf\n# network varibles | network-single-region.tf\n\n# define GCP region\nvariable \"gcp_region_1\" {\n  type = string\n  description = \"GCP region\"\n}\n\n# define GCP zone\nvariable \"gcp_zone_1\" {\n  type = string\n  description = \"GCP zone\"\n}\n\n# define Public subnet\nvariable \"public_subnet_cidr_1\" {\n  type = string\n  description = \"Public subnet CIDR 1\"\n}\n\n\n#File: network.tf\n# Single region, public only network configuration | network.tf\n\n# create VPC\nresource \"google_compute_network\" \"vpc\" {\n  name                    = \"${var.app_name}-${var.app_environment}-vpc\"\n  auto_create_subnetworks = \"false\"\n  routing_mode            = \"GLOBAL\"\n}\n\n# create public subnet\nresource \"google_compute_subnetwork\" \"public_subnet_1\" {\n  name          = \"${var.app_name}-${var.app_environment}-public-subnet-1\"\n  ip_cidr_range = var.public_subnet_cidr_1\n  network       = google_compute_network.vpc.name\n  region        = var.gcp_region_1\n}\n\n# allow internal icmp (disable for better security)\nresource \"google_compute_firewall\" \"allow-internal\" {\n  name    = \"${var.app_name}-${var.app_environment}-fw-allow-internal\"\n  network = \"${google_compute_network.vpc.name}\"\n  allow {\n    protocol = \"icmp\"\n  }\n  allow {\n    protocol = \"tcp\"\n    ports    = [\"0-65535\"]\n  }\n  allow {\n    protocol = \"udp\"\n    ports    = [\"0-65535\"]\n  }\n  source_ranges = [\n    \"${var.public_subnet_cidr_1}\"\n  ]\n}\n\n#File: provider.tf\n# setup the GCP provider | provider.tf\n\nterraform {\n  required_version = \">= 0.12\"\n}\n\nprovider \"google\" {\n  project = var.app_project\n  credentials = file(var.gcp_auth_file)\n  region  = var.gcp_region_1\n  zone    = var.gcp_zone_1\n}\n\n#File: variables-auth.tf\n# Google Cloud connection & authentication and Application configuration | variables-auth.tf\n\n# GCP authentication file\nvariable \"gcp_auth_file\" {\n  type = string\n  description = \"GCP authentication file\"\n}\n\n# define GCP project name\nvariable \"app_project\" {\n  type = string\n  description = \"GCP project name\"\n}\n\n# define application name\nvariable \"app_name\" {\n  type = string\n  description = \"Application name\"\n}\n\n# define application domain\nvariable \"app_domain\" {\n  type = string\n  description = \"Application domain\"\n}\n\n# define application environment\nvariable \"app_environment\" {\n  type = string\n  description = \"Application environment\"\n}\n\n#File: vm-output.tf\n# Virtual machine output | vm-output.tf\n\noutput \"vm-name\" {\n  value = google_compute_instance.vm_instance_public.name\n}\n\noutput \"vm-external-ip\" {\n  value = google_compute_instance.vm_instance_public.network_interface.0.access_config.0.nat_ip\n}\n\noutput \"vm-internal-ip\" {\n  value = google_compute_instance.vm_instance_public.network_interface.0.network_ip\n}\n\n#File: vm.tf\n# Create Google Cloud VM | vm.tf\n\n# Terraform plugin for creating random ids\nresource \"random_id\" \"instance_id\" {\n byte_length = 4\n}\n\n# Create VM #1\nresource \"google_compute_instance\" \"vm_instance_public\" {\n  name         = \"${var.app_name}-${var.app_environment}-vm-${random_id.instance_id.hex}\"\n  machine_type = \"f1-micro\"\n  zone         = var.gcp_zone_1\n  hostname     = \"${var.app_name}-vm-${random_id.instance_id.hex}.${var.app_domain}\"\n  tags         = [\"ssh\",\"http\"]\n\n  boot_disk {\n    initialize_params {\n      image = \"ubuntu-os-cloud/ubuntu-1804-lts\"\n    }\n  }\n\n  metadata_startup_script = \"sudo apt-get update; sudo apt-get install -yq build-essential apache2\"\n\n  network_interface {\n    network       = google_compute_network.vpc.name\n    subnetwork    = google_compute_subnetwork.public_subnet_1.name\n    access_config { }\n  }\n} \n"}]}
{"messages": [{"role": "user", "content": "Create application variables in Terraform, including application name, domain name, and environment. Define a Google Cloud provider with authentication, project, region, and zone variables. Create a VPC and a public subnet using defined variables. Set up firewall rules to allow HTTPS and RDP access. Finally, create a Google Compute Engine Windows VM instance with a specified machine type and attach the appropriate network interface."}, {"role": "assistant", "content": "\n#File: app-variables.tf\n#############################\n## Application - Variables ##\n#############################\n\n# application name \nvariable \"app_name\" {\n  type        = string\n  description = \"This variable defines the application name used to build resources\"\n  default     = \"kopicloud-ad-api-2019\"\n}\n\n# domain name \nvariable \"app_domain\" {\n  type        = string\n  description = \"This variable defines the domain name used to build resources\"\n}\n\n# environment\nvariable \"environment\" {\n  type        = string\n  description = \"This variable defines the environment to be built\"\n}\n\n\n#File: network-firewall.tf\n###################################\n## Network Firewall Rules - Main ##\n###################################\n\n# allow https\nresource \"google_compute_firewall\" \"allow-https\" {\n  name    = \"${var.app_name}-${var.environment}-fw-allow-https\"\n  network = google_compute_network.vpc.name\n  allow {\n    protocol = \"tcp\"\n    ports    = [\"443\"]\n  }\n\n  source_ranges = [\"0.0.0.0/0\"]\n  target_tags = [\"https-server\"] \n}\n\n# allow rdp\nresource \"google_compute_firewall\" \"allow-rdp\" {\n  name    = \"${var.app_name}-${var.environment}-fw-allow-rdp\"\n  network = google_compute_network.vpc.name\n  allow {\n    protocol = \"tcp\"\n    ports    = [\"3389\"]\n  }\n\n  source_ranges = [\"0.0.0.0/0\"]\n  target_tags = [\"rdp\"]\n}\n\n#File: network-main.tf\n####################\n## Network - Main ##\n####################\n\n# create VPC\nresource \"google_compute_network\" \"vpc\" {\n  name                    = \"${var.app_name}-${var.environment}-vpc\"\n  auto_create_subnetworks = \"false\"\n  routing_mode            = \"GLOBAL\"\n}\n\n# create public subnet\nresource \"google_compute_subnetwork\" \"network_subnet\" {\n  name          = \"${var.app_name}-${var.environment}-subnet\"\n  ip_cidr_range = var.network-subnet-cidr\n  network       = google_compute_network.vpc.name\n  region        = var.gcp_region\n}\n\n#File: network-variables.tf\n#########################\n## Network - Variables ##\n#########################\n\nvariable \"network-subnet-cidr\" {\n  type        = string\n  description = \"The CIDR for the network subnet\"\n}\n#File: provider-main.tf\n#########################\n## GCP Provider - Main ##\n#########################\n\n# Define Terraform provider\nterraform {\n  required_version = \"~> 1.3\"\n\n  required_providers {\n    google = {\n      source = \"hashicorp/google\"\n      version = \"~>4.0\" #\n    }\n  }\n}\n\nprovider \"google\" {\n  credentials = file(var.gcp_auth_file)\n  project     = var.gcp_project\n  region      = var.gcp_region\n  zone        = var.gcp_zone\n}\n\n#File: provider-variables.tf\n##############################\n## GCP Provider - Variables ##\n##############################\n\n# GCP authentication file\nvariable \"gcp_auth_file\" {\n  type        = string\n  description = \"GCP authentication file\"\n}\n\n# define GCP project name\nvariable \"gcp_project\" {\n  type        = string\n  description = \"GCP project name\"\n}\n\n# define GCP region\nvariable \"gcp_region\" {\n  type        = string\n  description = \"GCP region\"\n}\n\n# define GCP region\nvariable \"gcp_zone\" {\n  type        = string\n  description = \"GCP zone\"\n}\n\n#File: windows-versions.tf\n######################\n## Windows Versions ##\n######################\n\nvariable \"windows_2019_sku\" {\n  type        = string\n  description = \"SKU for Windows Server 2019\"\n  default     = \"windows-cloud/windows-2019\"\n}\n\n\n#File: windows-vm-main.tf\n###########################\n## GCP Windows VM - Main ##\n###########################\n\n# Terraform plugin for creating random ids\nresource \"random_id\" \"instance_id\" {\n  byte_length = 4\n}\n\n# Download script from GitHub\ndata \"http\" \"powershell_script\" {\n  url = \"https://raw.githubusercontent.com/KopiCloud-AD-API/kopicloud-ad-api-setup-scripts/main/setup-win2019.ps1\"\n}\n\nresource \"local_file\" \"powershell_script\" {\n  content  = data.http.powershell_script.response_body\n  filename = \"${path.module}/local_script_path.ps1\"\n}\n\n# Create VM\nresource \"google_compute_instance\" \"api\" {\n  name         = \"${var.app_name}-${var.environment}-vm${random_id.instance_id.hex}\"\n  machine_type = var.windows_instance_type\n  zone         = var.gcp_zone\n  hostname     = \"${var.app_name}-vm${random_id.instance_id.hex}.${var.app_domain}\"\n  tags         = [\"rdp\", \"https-server\"]\n\n  boot_disk {\n    initialize_params {\n      image = var.windows_2019_sku\n    }\n  }\n\n  network_interface {\n    network    = google_compute_network.vpc.name\n    subnetwork = google_compute_subnetwork.network_subnet.name\n    access_config {}\n  }\n\n  metadata = {\n    \"windows-startup-script-ps1\" = data.http.powershell_script.response_body\n  }\n}\n\n#File: windows-vm-output.tf\n#############################\n## GCP Windows VM - Output ##\n#############################\n\noutput \"vm-name\" {\n  value = google_compute_instance.api.name\n}\n\noutput \"vm-external-ip\" {\n  value = google_compute_instance.api.network_interface.0.access_config.0.nat_ip\n}\n\noutput \"vm-internal-ip\" {\n  value = google_compute_instance.api.network_interface.0.network_ip\n}\n\n#File: windows-vm-variables.tf\n################################\n## GCP Windows VM - Variables ##\n################################\n\nvariable \"windows_instance_type\" {\n  type        = string\n  description = \"VM instance type\"\n  default     = \"n2-standard-2\"\n}\n"}]}
{"messages": [{"role":"user","content":"Defines a AWS infrastructure with a VPC, public and private subnets, route tables, and internet and NAT gateways to enable secure internet access. It creates security groups tailored for an application instance and a database instance, controlling inbound traffic like HTTP, HTTPS, MySQL, and SSH access based on specified CIDR blocks. Finally, it provisions EC2 instances for the app and database, each attached to dedicated network interfaces within their respective subnets, using the latest Amazon Linux AMI and configurable instance types and storage volumes."},{"role":"assistant","content":"# AWS Provider Configuration\r\nprovider \"aws\" {\r\n  access_key = var.access_key\r\n  secret_key = var.secret_key\r\n  region     = var.region\r\n}\r\n\r\n# Vendor and Environment Variables\r\nvariable \"vendor\" {\r\n  type = string\r\n}\r\n\r\nvariable \"environment\" {\r\n  type = string\r\n}\r\n\r\n# AWS Region\r\nvariable \"region\" {\r\n  type    = string\r\n  default = \"us-west-2\"\r\n}\r\n\r\n# AWS Access and Secret Keys\r\nvariable \"access_key\" {\r\n  type = string\r\n}\r\n\r\nvariable \"secret_key\" {\r\n  type = string\r\n}\r\n\r\n# VPC CIDR Block\r\nvariable \"vpc_cidr_block\" {\r\n  description = \"The CIDR block for the VPC\"\r\n  type        = string\r\n}\r\n\r\n# Public Subnet CIDR Blocks (list of CIDR blocks for each availability zone)\r\nvariable \"public_cidr_blocks\" {\r\n  description = \"CIDR blocks for the public subnets in each availability zone\"\r\n  type        = list(string)\r\n}\r\n\r\n# Private Subnet CIDR Blocks (list of CIDR blocks for each availability zone)\r\nvariable \"private_cidr_blocks\" {\r\n  description = \"CIDR blocks for the private subnets in each availability zone\"\r\n  type        = list(string)\r\n}\r\n\r\n# Security Group CIDR blocks (optional)\r\nvariable \"allowed_ssh_cidr_blocks\" {\r\n  description = \"CIDR blocks allowed to access SSH\"\r\n  type        = list(string)\r\n  default     = [\"0.0.0.0/0\"] # Replace with trusted IPs as needed\r\n}\r\n\r\n# Declare VPC ID variable\r\nvariable \"vpc_id\" {\r\n  description = \"The ID of the VPC\"\r\n  type        = string\r\n}\r\n\r\nvariable \"app_private_ip\" {\r\n  description = \"Private IP address of the application instance\"\r\n  type        = string\r\n}\r\n\r\nvariable \"public_subnet_id\" {\r\n  description = \"The ID of the public subnet\"\r\n  type        = string\r\n}\r\n\r\nvariable \"private_subnet_id\" {\r\n  description = \"The ID of the private subnet\"\r\n  type        = string\r\n}\r\n\r\nvariable \"app_sg_id\" {\r\n  description = \"Security group ID for the app instance\"\r\n  type        = string\r\n}\r\n\r\nvariable \"db_sg_id\" {\r\n  description = \"Security group ID for the database instance\"\r\n  type        = string\r\n}\r\n\r\nvariable \"app_instance_type\" {\r\n  description = \"The instance type for the app server\"\r\n  type        = string\r\n  default     = \"t2.micro\"  # You can specify a default instance type here, or leave it empty to require input\r\n}\r\n\r\nvariable \"db_instance_type\" {\r\n  description = \"The instance type for the database server\"\r\n  type        = string\r\n  default     = \"t2.micro\"  # You can specify a default instance type here, or leave it empty to require input\r\n}\r\n\r\nvariable \"key_name\" {\r\n  description = \"The name of the SSH key pair to use for the instances\"\r\n  type        = string\r\n}\r\n\r\nvariable \"app_volume_size\" {\r\n  description = \"The size of the root volume for the app instance (in GB)\"\r\n  type        = number\r\n  default     = 30  # You can specify a default value, or leave it empty to require input\r\n}\r\n\r\nvariable \"db_volume_size\" {\r\n  description = \"The size of the root volume for the database instance (in GB)\"\r\n  type        = number\r\n  default     = 50  # You can specify a default value, or leave it empty to require input\r\n}\r\n\r\nvariable \"db_private_ip\" {\r\n  description = \"The private IP address for the database instance\"\r\n  type        = string\r\n}\r\n\r\n# Create and Assign Route Tables\r\n\r\n# Public Route Table\r\nresource \"aws_route_table\" \"public\" {\r\n  vpc_id = var.vpc_id\r\n\r\n  route {\r\n    cidr_block = \"0.0.0.0/0\"\r\n    gateway_id = aws_internet_gateway.gw.id\r\n  }\r\n\r\n  tags = {\r\n    Name = \"${lower(var.vendor)}-${lower(var.environment)}-rt-public\"\r\n  }\r\n}\r\n\r\n# Private Route Table\r\nresource \"aws_route_table\" \"private\" {\r\n  vpc_id = var.vpc_id\r\n\r\n  route {\r\n    cidr_block = \"0.0.0.0/0\"\r\n    gateway_id = aws_nat_gateway.natgw.id\r\n  }\r\n\r\n  tags = {\r\n    Name = \"${lower(var.vendor)}-${lower(var.environment)}-rt-private\"\r\n  }\r\n\r\n  lifecycle {\r\n    ignore_changes = [\r\n      route,\r\n    ]\r\n  }\r\n}\r\n\r\n# Associate Public Route Table with Subnet\r\nresource \"aws_route_table_association\" \"public_association\" {\r\n  subnet_id      = var.public_subnet_id\r\n  route_table_id = aws_route_table.public.id\r\n}\r\n\r\n# Associate Private Route Table with Subnet\r\nresource \"aws_route_table_association\" \"private_association\" {\r\n  subnet_id      = var.private_subnet_id\r\n  route_table_id = aws_route_table.private.id\r\n}\r\n# Security Group for Database\r\nresource \"aws_security_group\" \"db_sg\" {\r\n  name        = \"${lower(var.vendor)}-${lower(var.environment)}-db-sg\"\r\n  description = \"Security Group for Database\"\r\n  vpc_id      = var.vpc_id\r\n\r\n  # Allow all outbound traffic\r\n  egress {\r\n    from_port   = 0\r\n    to_port     = 0\r\n    protocol    = \"-1\"\r\n    cidr_blocks = [\"0.0.0.0/0\"]\r\n  }\r\n\r\n  # Allow inbound MySQL traffic from App instance\r\n  ingress {\r\n    from_port   = 3306\r\n    to_port     = 3306\r\n    protocol    = \"tcp\"\r\n    cidr_blocks = [\"${var.app_private_ip}/32\"]\r\n  }\r\n\r\n  # Allow SSH access (if required, from a specific range or trusted IPs)\r\n  ingress {\r\n    from_port   = 22\r\n    to_port     = 22\r\n    protocol    = \"tcp\"\r\n    cidr_blocks = var.allowed_ssh_cidr_blocks\r\n  }\r\n\r\n  tags = {\r\n    Name = \"${lower(var.vendor)}-${lower(var.environment)}-db-sg\"\r\n  }\r\n}\r\n\r\n# Security Group for Application\r\nresource \"aws_security_group\" \"app_sg\" {\r\n  name        = \"${lower(var.vendor)}-${lower(var.environment)}-app-sg\"\r\n  description = \"Security Group for Application\"\r\n  vpc_id      = var.vpc_id\r\n\r\n  # Allow all outbound traffic\r\n  egress {\r\n    from_port   = 0\r\n    to_port     = 0\r\n    protocol    = \"-1\"\r\n    cidr_blocks = [\"0.0.0.0/0\"]\r\n  }\r\n\r\n  # Allow inbound HTTP traffic\r\n  ingress {\r\n    from_port   = 80\r\n    to_port     = 80\r\n    protocol    = \"tcp\"\r\n    cidr_blocks = [\"0.0.0.0/0\"]\r\n  }\r\n\r\n  # Allow inbound HTTPS traffic\r\n  ingress {\r\n    from_port   = 443\r\n    to_port     = 443\r\n    protocol    = \"tcp\"\r\n    cidr_blocks = [\"0.0.0.0/0\"]\r\n  }\r\n\r\n  # Allow SSH access (if required, from a specific range or trusted IPs)\r\n  ingress {\r\n    from_port   = 22\r\n    to_port     = 22\r\n    protocol    = \"tcp\"\r\n    cidr_blocks = var.allowed_ssh_cidr_blocks\r\n  }\r\n\r\n  tags = {\r\n    Name = \"${lower(var.vendor)}-${lower(var.environment)}-app-sg\"\r\n  }\r\n}\r\n# Create Subnets\r\n\r\n# Define Availability Zones for multi-AZ support\r\nlocals {\r\n  availability_zones = [\"${var.region}a\", \"${var.region}b\"]  # Support for multiple AZs if needed\r\n}\r\n\r\n# Public Subnet\r\nresource \"aws_subnet\" \"public\" {\r\n  for_each = toset(local.availability_zones)\r\n\r\n  vpc_id            = var.vpc_id\r\n  cidr_block        = element(var.public_cidr_blocks, index(local.availability_zones, each.value))\r\n  availability_zone = each.value\r\n\r\n  tags = {\r\n    Name = \"${lower(var.vendor)}-${lower(var.environment)}-public-${each.value}\"\r\n  }\r\n}\r\n\r\n# Private Subnet\r\nresource \"aws_subnet\" \"private\" {\r\n  for_each = toset(local.availability_zones)\r\n\r\n  vpc_id            = var.vpc_id\r\n  cidr_block        = element(var.private_cidr_blocks, index(local.availability_zones, each.value))\r\n  availability_zone = each.value\r\n\r\n  tags = {\r\n    Name = \"${lower(var.vendor)}-${lower(var.environment)}-private-${each.value}\"\r\n  }\r\n}\r\n# Create VPC\r\nresource \"aws_vpc\" \"development_vpc\" {\r\n  cidr_block = var.vpc_cidr_block\r\n\r\n  tags = {\r\n    Name = \"${lower(var.vendor)}-${lower(var.environment)}-vpc\"\r\n  }\r\n}\r\n\r\n# Query the created VPC (optional)\r\ndata \"aws_vpc\" \"existing_vpc\" {\r\n  id = aws_vpc.development_vpc.id\r\n}\r\ndata \"aws_ami\" \"latest_amazon_linux_img\" {\r\n  most_recent = true\r\n  owners      = [\"amazon\"]\r\n\r\n  filter {\r\n    name   = \"name\"\r\n    values = [\"amzn2-ami-hvm-*-gp2\"]\r\n  }\r\n  filter {\r\n    name   = \"virtualization-type\"\r\n    values = [\"hvm\"]\r\n  }\r\n}\r\n\r\n# Private Network Interface for App Instance\r\nresource \"aws_network_interface\" \"private_network_interface\" {\r\n  subnet_id       = var.public_subnet_id  # Ensure this variable is declared in variables.tf\r\n  security_groups = [var.app_sg_id]       # Ensure this variable is declared in variables.tf\r\n  private_ips     = [var.app_private_ip]  # Ensure this variable is declared in variables.tf\r\n}\r\n\r\n# App Instance\r\nresource \"aws_instance\" \"app\" {\r\n  ami                       = data.aws_ami.latest_amazon_linux_img.id\r\n  instance_type             = var.app_instance_type  # Ensure this variable is declared in variables.tf\r\n  key_name                  = var.key_name           # Ensure this variable is declared in variables.tf\r\n  associate_public_ip_address = true\r\n\r\n  root_block_device {\r\n    volume_type = \"gp2\"\r\n    volume_size = var.app_volume_size  # Ensure this variable is declared in variables.tf\r\n  }\r\n\r\n  network_interface {\r\n    network_interface_id = aws_network_interface.private_network_interface.id\r\n    device_index         = 0\r\n  }\r\n\r\n  tags = {\r\n    Name = \"${var.vendor}-${var.environment}-app\"\r\n  }\r\n\r\n  lifecycle {\r\n    ignore_changes = [\r\n      ami,\r\n    ]\r\n  }\r\n}\r\n\r\n# Private Network Interface for DB Instance\r\nresource \"aws_network_interface\" \"db_network_interface\" {\r\n  subnet_id       = var.private_subnet_id  # Ensure this variable is declared in variables.tf\r\n  security_groups = [var.db_sg_id]         # Ensure this variable is declared in variables.tf\r\n  private_ips     = [var.db_private_ip]    # Ensure this variable is declared in variables.tf\r\n}\r\n\r\n# DB Instance\r\nresource \"aws_instance\" \"db\" {\r\n  ami           = data.aws_ami.latest_amazon_linux_img.id\r\n  instance_type = var.db_instance_type  # Ensure this variable is declared in variables.tf\r\n  key_name      = var.key_name         # Ensure this variable is declared in variables.tf\r\n\r\n  root_block_device {\r\n    volume_type = \"gp2\"\r\n    volume_size = var.db_volume_size  # Ensure this variable is declared in variables.tf\r\n  }\r\n\r\n  network_interface {\r\n    network_interface_id = aws_network_interface.db_network_interface.id\r\n    device_index         = 0\r\n  }\r\n\r\n  tags = {\r\n    Name = \"${var.vendor}-${var.environment}-db\"\r\n  }\r\n\r\n  lifecycle {\r\n    ignore_changes = [\r\n      ami,\r\n    ]\r\n  }\r\n}\r\n# Create Internet Gateway\r\nresource \"aws_internet_gateway\" \"gw\" {\r\n  vpc_id = var.vpc_id\r\n  tags = {\r\n    Name = \"${lower(var.vendor)}-${lower(var.environment)}-ig\"\r\n  }\r\n}\r\n\r\n# Create Elastic IP for NAT Gateway\r\nresource \"aws_eip\" \"nat_eip\" {\r\n  network_border_group = \"us-west-2\"  # Replace with the appropriate AWS region\r\n  depends_on           = [aws_internet_gateway.gw]\r\n  tags = {\r\n    Name = \"${lower(var.vendor)}-${lower(var.environment)}-nat-eip\"\r\n  }\r\n}\r\n\r\n# Create NAT Gateway\r\nresource \"aws_nat_gateway\" \"natgw\" {\r\n  allocation_id = aws_eip.nat_eip.id\r\n  subnet_id     = var.public_subnet_id\r\n  depends_on    = [aws_internet_gateway.gw]\r\n  tags = {\r\n    Name = \"${lower(var.vendor)}-${lower(var.environment)}-nat-gw\"\r\n  }\r\n}\r\n"}]}
{"messages": [{"role":"user","content":"Provide an AWS Lex V2 chatbot with an associated Lambda function for natural language processing and fulfillment. Include an S3 bucket to store IoT energy consumption data, IAM roles and policies for secure Lambda and S3 access. The chatbot queries CSV data stored in S3 and returns dynamic responses based on user intents configured in Lex"},{"role":"assistant","content":"resource \"aws_lambda_function\" \"terraform_lambda\" {\r\n  function_name = \"EnergyConsumptionTerraform\"\r\n  filename      = \"lambda_function.zip\"\r\n  handler       = \"lambda_function.lambda_handler\"\r\n  role          = aws_iam_role.lambda_role.arn\r\n  runtime       = \"python3.12\"\r\n  depends_on    = [aws_iam_role_policy_attachment.attach_cloudwatch_logs_policy_to_iam_role, aws_iam_role_policy_attachment.attach_s3_policy_to_iam_role]\r\n}\r\n\r\nresource \"aws_iam_role\" \"lambda_role\" {\r\n  name               = \"EnergyConsumptionRoleTerraform\"\r\n  assume_role_policy = <<EOF\r\n{\r\n \"Version\": \"2012-10-17\",\r\n \"Statement\": [\r\n   {\r\n     \"Action\": \"sts:AssumeRole\",\r\n     \"Principal\": {\r\n       \"Service\": \"lambda.amazonaws.com\"\r\n     },\r\n     \"Effect\": \"Allow\",\r\n     \"Sid\": \"\"\r\n   }\r\n ]\r\n}\r\nEOF\r\n}\r\n\r\nresource \"aws_iam_policy\" \"iam_policy_for_cloudwatch_logs\" {\r\n  name        = \"CloudWatchLogsPolicy\"\r\n  path        = \"/\"\r\n  description = \"AWS IAM Policy for managing CloudWatch Logs\"\r\n  policy      = <<EOF\r\n{\r\n  \"Version\": \"2012-10-17\",\r\n  \"Statement\": [\r\n    {\r\n      \"Action\": [\r\n        \"logs:CreateLogGroup\",\r\n        \"logs:CreateLogStream\",\r\n        \"logs:PutLogEvents\"\r\n      ],\r\n      \"Resource\": \"arn:aws:logs:*:*:*\",\r\n      \"Effect\": \"Allow\"\r\n    }\r\n  ]\r\n}\r\nEOF\r\n}\r\n\r\n\r\n# reference the customer managed policy by its ARN. \r\nresource \"aws_iam_role_policy_attachment\" \"attach_cloudwatch_logs_policy_to_iam_role\" {\r\n  role       = aws_iam_role.lambda_role.name\r\n  policy_arn = aws_iam_policy.iam_policy_for_cloudwatch_logs.arn\r\n}\r\n\r\n\r\n# reference the AWS managed policy by its ARN. \r\nresource \"aws_iam_role_policy_attachment\" \"attach_s3_policy_to_iam_role\" {\r\n  role       = aws_iam_role.lambda_role.name\r\n  policy_arn = \"arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess\"\r\n}\r\n\r\n\r\nresource \"aws_lexv2models_bot\" \"IOTChatBot\" {\r\n  name = \"IOTChatBot\"\r\n  data_privacy {\r\n    child_directed = \"false\"\r\n  }\r\n  idle_session_ttl_in_seconds = 300\r\n  role_arn                    = \"arn:aws:iam::602917784174:role/aws-service-role/lexv2.amazonaws.com/AWSServiceRoleForLexV2Bots_I7S64VA609\"\r\n\r\n  tags = {\r\n    foo = \"bar\"\r\n  }\r\n}\r\n\r\nterraform {\r\n  required_providers {\r\n    aws = {\r\n      source = \"hashicorp/aws\"\r\n      version = \"5.33.0\"\r\n    }\r\n  }\r\n}\r\n\r\nprovider \"aws\" {\r\n  # Configuration options\r\n    region = \"us-east-1\"\r\n    # region = \"us-west-2\"\r\n    \r\n}\r\n\r\n\r\nresource \"aws_s3_bucket\" \"mybucket\" {\r\n  bucket = \"lex-chatbot-bucket-for-iot-data\"\r\n  \r\n  tags = {\r\n    Name        = \"My bucket\"\r\n    Environment = \"Dev\"\r\n  }\r\n}\r\n"}]}
{"messages": [{"role":"user","content":"Set up an AWS ECS Fargate service to run a containerized data import task using a public Docker image, with access to a private S3 bucket for data storage. Provide the necessary AWS infrastructure, including a VPC with a public subnet, internet gateway, security group, IAM roles with S3 permissions, and an ECS cluster with task and service definitions. The S3 bucket is initialized with both public and private files, and appropriate network and execution roles are configured to enable secure communication and data operations."},{"role":"assistant","content":"provider \"aws\" {\r\n}\r\n\r\nresource \"aws_ecs_cluster\" \"cloudseclabs_ecs_cluster\" {\r\n  name = \"labs-ecs-cluster\"\r\n}\r\n\r\nresource \"aws_ecs_task_definition\" \"lab_dataimport_task\" {\r\n  family = \"lab-dataimport-task\"\r\n\r\n  container_definitions    = <<DEFINITION\r\n    [\r\n        {\r\n            \"image\": \"public.ecr.aws/s3v0n4c3/cloudsectidbit-dataimport:latest\",\r\n            \"name\": \"cloudsectidbit-dataimport\",      \r\n            \"essential\": true,     \r\n            \"environment\": [\r\n                    {\r\n                        \"name\": \"BUCKET_NAME\",\r\n                        \"value\": \"${aws_s3_bucket.data_internal.bucket}\"\r\n                    }\r\n            ],\r\n            \"portMappings\":[\r\n                {\r\n                    \"containerPort\" : 80,\r\n                    \"hostPort\"      : 80\r\n                }\r\n            ],\r\n            \"memory\"    : 512,\r\n            \"cpu\"       : 256\r\n        }\r\n    ]\r\n  DEFINITION\r\n  requires_compatibilities = [\"FARGATE\"]\r\n  network_mode             = \"awsvpc\"\r\n  memory                   = 512\r\n  cpu                      = 256\r\n  #execution_role_arn       = aws_iam_role.ecsTaskExecutionRole.arn\r\n  task_role_arn = aws_iam_role.ecs_role.arn\r\n\r\n}\r\n\r\nresource \"aws_ecs_service\" \"lab_dataimport_service\" {\r\n  name            = \"lab-dataimport\"\r\n  cluster         = aws_ecs_cluster.cloudseclabs_ecs_cluster.id\r\n  task_definition = aws_ecs_task_definition.lab_dataimport_task.arn\r\n  launch_type     = \"FARGATE\"\r\n  desired_count   = 1\r\n\r\n  network_configuration {\r\n    assign_public_ip = true\r\n    security_groups  = [aws_security_group.public_vpc_sg.id]\r\n    subnets          = [aws_subnet.public_vpc_subnet.id]\r\n  }\r\n}\r\n\r\nresource \"aws_security_group\" \"public_vpc_sg\" {\r\n  vpc_id = aws_vpc.public_vpc.id\r\n\r\n  name        = \"public_vpc_sg\"\r\n  description = \"public_vpc_sg\"\r\n  tags = {\r\n    Name = \"public_vpc_sg\"\r\n  }\r\n\r\n  egress {\r\n    from_port   = 0\r\n    to_port     = 0\r\n    protocol    = \"-1\"\r\n    cidr_blocks = [\"0.0.0.0/0\"]\r\n    description = \"allow egress\"\r\n  }\r\n  ingress {\r\n    from_port   = 443\r\n    to_port     = 443\r\n    protocol    = \"tcp\"\r\n    self        = \"false\"\r\n    cidr_blocks = [\"0.0.0.0/0\"]\r\n    description = \"allow ingress port 443\"\r\n  }\r\n\r\n  ingress {\r\n    from_port   = 80\r\n    to_port     = 80\r\n    protocol    = \"tcp\"\r\n    self        = \"false\"\r\n    cidr_blocks = [\"0.0.0.0/0\"]\r\n    description = \"allow ingress port 80\"\r\n  }\r\n\r\n}\r\n\r\ndata \"aws_iam_policy_document\" \"s3_data_bucket_policy\" {\r\n  statement {\r\n    sid    = \"\"\r\n    effect = \"Allow\"\r\n    actions = [\r\n      \"s3:ListBucket\"\r\n    ]\r\n    resources = [\r\n      \"arn:aws:s3:::${aws_s3_bucket.data_internal.bucket}\"\r\n    ]\r\n  }\r\n  statement {\r\n    sid    = \"\"\r\n    effect = \"Allow\"\r\n    actions = [\r\n      \"s3:DeleteObject\",\r\n      \"s3:GetObject\",\r\n      \"s3:PutObject\",\r\n      \"s3:PutObjectAcl\"\r\n    ]\r\n    resources = [\r\n      \"arn:aws:s3:::${aws_s3_bucket.data_internal.bucket}/*\"\r\n    ]\r\n  }\r\n}\r\n\r\nresource \"aws_iam_policy\" \"s3_policy\" {\r\n  name   = \"dataimport-s3-policy\"\r\n  policy = data.aws_iam_policy_document.s3_data_bucket_policy.json\r\n}\r\n\r\nresource \"aws_iam_role_policy_attachment\" \"ecs_role_s3_data_bucket_policy_attach\" {\r\n  role       = aws_iam_role.ecs_role.name\r\n  policy_arn = aws_iam_policy.s3_policy.arn\r\n}\r\n\r\ndata \"aws_iam_policy_document\" \"ecs_assume_role_policy\" {\r\n  statement {\r\n    sid    = \"\"\r\n    effect = \"Allow\"\r\n    actions = [\r\n      \"sts:AssumeRole\",\r\n    ]\r\n    principals {\r\n      type        = \"Service\"\r\n      identifiers = [\"ecs-tasks.amazonaws.com\"]\r\n    }\r\n  }\r\n}\r\n\r\nresource \"aws_iam_role\" \"ecs_role\" {\r\n  name               = \"ecs-role\"\r\n  assume_role_policy = data.aws_iam_policy_document.ecs_assume_role_policy.json\r\n}\r\n\r\n# bucket definition\r\nresource \"aws_s3_bucket\" \"data_internal\" {\r\n  bucket_prefix = \"data-internal-private-\"\r\n  //acl = \"public-read\"\r\n}\r\n\r\nresource \"aws_s3_bucket_object\" \"public-folder\" {\r\n  bucket = aws_s3_bucket.data_internal.id\r\n  key    = \"public-stuff/\"\r\n  source = \"/dev/null\"\r\n}\r\n\r\nresource \"aws_s3_bucket_object\" \"logo_upload\" {\r\n  bucket =aws_s3_bucket.data_internal.id\r\n  key           = \"public-stuff/logo.png\"\r\n  source        = \"private-data/public-stuff/logo.png\"\r\n  acl           = \"public-read\"\r\n  content_type  = \"image/png\"\r\n}\r\n\r\nresource \"aws_s3_bucket_object\" \"private_data_up\" {\r\n  for_each = fileset(\"private-data/\", \"*.txt\")\r\n  bucket   = aws_s3_bucket.data_internal.id\r\n  key      = each.value\r\n  source   = \"private-data/${each.value}\"\r\n  etag     = filemd5(\"private-data/${each.value}\")\r\n}\r\nresource \"aws_vpc\" \"public_vpc\" {\r\n  cidr_block           = \"10.0.0.0/16\"\r\n  enable_dns_hostnames = true\r\n  tags = {\r\n    Name = \"public_vpc\"\r\n  }\r\n}\r\n\r\nresource \"aws_internet_gateway\" \"public_vpc_igw\" {\r\n  vpc_id = aws_vpc.public_vpc.id\r\n  tags = {\r\n    Name = \"public_vpc_igw\"\r\n  }\r\n}\r\n\r\nresource \"aws_route\" \"public_vpc_route\" {\r\n  route_table_id         = aws_vpc.public_vpc.main_route_table_id\r\n  gateway_id             = aws_internet_gateway.public_vpc_igw.id\r\n  destination_cidr_block = \"0.0.0.0/0\"\r\n}\r\n\r\nresource \"aws_subnet\" \"public_vpc_subnet\" {\r\n  vpc_id     = aws_vpc.public_vpc.id\r\n  cidr_block = \"10.0.0.0/20\"\r\n  tags = {\r\n    Name = \"public_vpc_subnet\"\r\n  }\r\n}\r\n"}]}
{"messages": [{"role":"user","content":"Set up a complete AWS VPC architecture with public, private, and database subnets across three availability zones, including routing via an internet gateway and a NAT gateway for internet access. Provide a NAT gateway with an Elastic IP and associates route tables accordingly for public and private access management. The infrastructure is tagged using a project-specific name and region defined via variables, enabling flexible and reusable deployments."},{"role":"assistant","content":"provider \"aws\" {\r\n  region = var.aws_region\r\n}\r\n\r\ndata \"aws_caller_identity\" \"current\" {\r\n}\r\n\r\nresource \"aws_subnet\" \"internet_subnet_1a\" {\r\n  vpc_id                  = \"${aws_vpc.project_vpc.id}\"\r\n  cidr_block              = \"171.0.54.0/24\"\r\n  map_public_ip_on_launch = true\r\n  availability_zone       = \"${var.aws_region}a\"\r\n\r\n  tags = {\r\n    Name = \"${var.project_name}-internet-1a\"\r\n  }\r\n}\r\n\r\nresource \"aws_nat_gateway\" \"nat\" {\r\n    allocation_id   = \"${aws_eip.vpc_eip.id}\"\r\n    subnet_id       = \"${aws_subnet.internet_subnet_1a.id}\"\r\n    depends_on      = [\"aws_internet_gateway.gw\"]\r\n\r\n    tags = {\r\n       Name = \"${var.project_name}-nat-gateway\"\r\n    }\r\n}\r\n\r\nresource \"aws_route_table\" \"nat_route_table\" {\r\n    vpc_id = \"${aws_vpc.project_vpc.id}\"\r\n\r\n    tags = {\r\n        Name = \"${var.project_name}-nat-route-table\"\r\n    }\r\n}\r\n\r\nresource \"aws_route\" \"private_internet_access\" {\r\n\troute_table_id          = \"${aws_route_table.nat_route_table.id}\"\r\n\tdestination_cidr_block  = \"0.0.0.0/0\"\r\n\tnat_gateway_id          = \"${aws_nat_gateway.nat.id}\"\r\n}\r\nresource \"aws_route_table\" \"closed_route_table\" {\r\n    vpc_id = \"${aws_vpc.project_vpc.id}\"\r\n\r\n    tags = {\r\n        Name = \"${var.project_name}-closed-route-table\"\r\n    }\r\n}\r\n\r\nresource \"aws_subnet\" \"database_subnet_1a\" {\r\n  vpc_id                  = \"${aws_vpc.project_vpc.id}\"\r\n  cidr_block              = \"171.0.51.0/24\"\r\n  map_public_ip_on_launch = false\r\n  availability_zone       = \"${var.aws_region}a\"\r\n\r\n  tags = {\r\n    Name = \"${var.project_name}-database-1a\"\r\n  }\r\n}\r\n\r\nresource \"aws_subnet\" \"database_subnet_1b\" {\r\n  vpc_id                  = \"${aws_vpc.project_vpc.id}\"\r\n  cidr_block              = \"171.0.52.0/24\"\r\n  map_public_ip_on_launch = false\r\n  availability_zone       = \"${var.aws_region}b\"\r\n\r\n  tags = {\r\n    Name = \"${var.project_name}-database-1b\"\r\n  }\r\n}\r\n\r\nresource \"aws_subnet\" \"database_subnet_1c\" {\r\n  vpc_id                  = \"${aws_vpc.project_vpc.id}\"\r\n  cidr_block              = \"171.0.53.0/24\"\r\n  map_public_ip_on_launch = false\r\n  availability_zone       = \"${var.aws_region}c\"\r\n\r\n  tags = {\r\n    Name = \"${var.project_name}-database-1c\"\r\n  }\r\n}\r\n\r\nresource \"aws_subnet\" \"private_subnet_1a\" {\r\n  vpc_id                  = \"${aws_vpc.project_vpc.id}\"\r\n  cidr_block              = \"171.0.0.0/20\"\r\n  map_public_ip_on_launch = false\r\n  availability_zone       = \"${var.aws_region}a\"\r\n\r\n  tags = {\r\n    Name = \"${var.project_name}-private-1a\"\r\n  }\r\n}\r\n\r\nresource \"aws_route_table_association\" \"private_subnet_1a_association\" {\r\n    subnet_id = \"${aws_subnet.private_subnet_1a.id}\"\r\n    route_table_id = \"${aws_route_table.nat_route_table.id}\"\r\n}\r\n\r\nresource \"aws_subnet\" \"private_subnet_1b\" {\r\n  vpc_id                  = \"${aws_vpc.project_vpc.id}\"\r\n  cidr_block              = \"171.0.16.0/20\"\r\n  map_public_ip_on_launch = false\r\n  availability_zone       = \"${var.aws_region}b\"\r\n\r\n  tags = {\r\n    Name = \"${var.project_name}-private-1b\"\r\n  }\r\n}\r\n\r\nresource \"aws_route_table_association\" \"private_subnet_1b_association\" {\r\n    subnet_id = \"${aws_subnet.private_subnet_1b.id}\"\r\n    route_table_id = \"${aws_route_table.nat_route_table.id}\"\r\n}\r\n\r\nresource \"aws_subnet\" \"private_subnet_1c\" {\r\n  vpc_id                  = \"${aws_vpc.project_vpc.id}\"\r\n  cidr_block              = \"171.0.32.0/20\"\r\n  map_public_ip_on_launch = false\r\n  availability_zone       = \"${var.aws_region}c\"\r\n\r\n  tags = {\r\n    Name = \"${var.project_name}-private-1c\"\r\n  }\r\n}\r\n\r\nresource \"aws_route_table_association\" \"private_subnet_1c_association\" {\r\n    subnet_id = \"${aws_subnet.private_subnet_1c.id}\"\r\n    route_table_id = \"${aws_route_table.nat_route_table.id}\"\r\n}\r\nresource \"aws_subnet\" \"public_subnet_1a\" {\r\n  vpc_id                  = \"${aws_vpc.project_vpc.id}\"\r\n  cidr_block              = \"171.0.48.0/24\"\r\n  map_public_ip_on_launch = true\r\n  availability_zone       = \"${var.aws_region}a\"\r\n\r\n  tags = {\r\n    Name = \"${var.project_name}-public-1a\"\r\n  }\r\n}\r\n\r\nresource \"aws_route_table_association\" \"public_subnet_1a_association\" {\r\n    subnet_id       = \"${aws_subnet.public_subnet_1a.id}\"\r\n    route_table_id  = \"${aws_route_table.igw_route_table.id}\"\r\n}\r\n\r\nresource \"aws_subnet\" \"public_subnet_1b\" {\r\n  vpc_id                  = \"${aws_vpc.project_vpc.id}\"\r\n  cidr_block              = \"171.0.49.0/24\"\r\n  map_public_ip_on_launch = true\r\n  availability_zone       = \"${var.aws_region}b\"\r\n\r\n  tags = {\r\n    Name = \"${var.project_name}-public-1b\"\r\n  }\r\n}\r\n\r\nresource \"aws_route_table_association\" \"public_subnet_1b_association\" {\r\n    subnet_id       = \"${aws_subnet.public_subnet_1b.id}\"\r\n    route_table_id  = \"${aws_route_table.igw_route_table.id}\"\r\n}\r\n\r\nresource \"aws_subnet\" \"public_subnet_1c\" {\r\n  vpc_id                  = \"${aws_vpc.project_vpc.id}\"\r\n  cidr_block              = \"171.0.50.0/24\"\r\n  map_public_ip_on_launch = true\r\n  availability_zone       = \"${var.aws_region}c\"\r\n\r\n  tags = {\r\n    Name = \"${var.project_name}-public-1c\"\r\n  }\r\n}\r\n\r\nresource \"aws_route_table_association\" \"public_subnet_1c_association\" {\r\n    subnet_id       = \"${aws_subnet.public_subnet_1c.id}\"\r\n    route_table_id  = \"${aws_route_table.igw_route_table.id}\"\r\n}\r\nvariable \"project_name\" {}\r\n\r\nvariable \"aws_region\" {}\r\n\r\nresource \"aws_vpc\" \"project_vpc\" {\r\n    cidr_block = \"171.0.0.0/16\"\r\n    enable_dns_support = true\r\n    enable_dns_hostnames = true\r\n    tags = {\r\n        Name = \"${var.project_name}-vpc\"\r\n    }\r\n}\r\n\r\n# Elastic IP\r\nresource \"aws_eip\" \"vpc_eip\" {\r\n    vpc      = true\r\n    depends_on = [\"aws_internet_gateway.gw\"]\r\n    tags = {\r\n        Name = \"${var.project_name}-nat\"\r\n    }\r\n}"}]}
{"messages": [{"role": "user", "content": "Create a local variable for the Coralogix function name and define a mapping of Coralogix regions to their API endpoints. Generate a zip archive of the source code located in the `src` directory. Create a Google Cloud Storage bucket object to store the zip file, linking it to the archive you just created. Deploy a Google Cloud Function with environment variables that include the Coralogix log URL and other configuration details. Set IAM permissions for the Cloud Function to allow invocations by a specified member."}, {"role": "assistant", "content": "\n#File: main.tf\nlocals {\n  function_name = \"Coralogix-GCS-${random_string.this.result}\"\n  coralogix_regions = {\n    Europe    = \"api.coralogix.com\"\n    Europe2   = \"api.eu2.coralogix.com\"\n    India     = \"api.app.coralogix.in\"\n    Singapore = \"api.coralogixsg.com\"\n    US        = \"api.coralogix.us\"\n    US2       = \"cx498.coralogix.com\"\n\n  }\n  coralogix_url = local.coralogix_regions[var.coralogix_region]\n  labels = {\n    provider = \"coralogix\"\n    license  = \"apache2\"\n  }\n}\n\ndata \"archive_file\" \"this\" {\n  type        = \"zip\"\n  source_dir  = \"${path.module}/src\"\n  output_path = \"${path.module}/dist/gcsToCoralogix.zip\"\n}\n\nresource \"google_storage_bucket_object\" \"this\" {\n  name   = \"gcsToCoralogix.zip\"\n  bucket = var.bucket\n  source = data.archive_file.this.output_path\n}\n\nresource \"random_string\" \"this\" {\n  length  = 12\n  special = false\n}\n\nresource \"google_cloudfunctions_function\" \"this\" {\n  name                  = local.function_name\n  description           = \"Send GCS logs to Coralogix.\"\n  runtime               = \"python38\"\n  available_memory_mb   = 1024\n  timeout               = 60\n  source_archive_bucket = google_storage_bucket_object.this.bucket\n  source_archive_object = google_storage_bucket_object.this.name\n  entry_point           = \"to_coralogix\"\n  environment_variables = {\n    CORALOGIX_LOG_URL        = \"https://${local.coralogix_url}/api/v1/logs\"\n    CORALOGIX_TIME_DELTA_URL = \"https://${local.coralogix_url}/sdk/v1/time\"\n    private_key              = var.private_key\n    app_name                 = var.application_name\n    sub_name                 = var.subsystem_name\n    newline_pattern          = var.newline_pattern\n  }\n  event_trigger {\n    event_type = \"google.storage.object.finalize\"\n    resource   = var.bucket\n  }\n  labels = merge(var.labels, local.labels)\n}\n\nresource \"google_cloudfunctions_function_iam_member\" \"this\" {\n  project        = google_cloudfunctions_function.this.project\n  region         = google_cloudfunctions_function.this.region\n  cloud_function = google_cloudfunctions_function.this.name\n  role           = \"roles/cloudfunctions.invoker\"\n  member         = var.function_iam_member\n}\n\n#File: outputs.tf\noutput \"project\" {\n  description = \"GCP Project ID\"\n  value       = google_cloudfunctions_function.this.project\n}\n\noutput \"region\" {\n  description = \"GCP Region\"\n  value       = google_cloudfunctions_function.this.region\n}\n\noutput \"function\" {\n  description = \"GCP Cloud Function Name\"\n  value       = google_cloudfunctions_function.this.name\n}\n\n#File: variables.tf\nvariable \"coralogix_region\" {\n  description = \"The Coralogix location region, possible options are [Europe, Europe2, India, Singapore, US]\"\n  type        = string\n  default     = \"Europe\"\n  validation {\n    condition = contains([\"Europe\",\"Europe2\",\"India\",\"Singapore\",\"US\",\"US2\"], var.coralogix_region)\n    error_message = \"The coralogix region must be on of these values: [Europe, Europe2, India, Singapore, US, US2].\"\n  }\n}\n\nvariable \"private_key\" {\n  description = \"The Coralogix private key which is used to validate your authenticity\"\n  type        = string\n  sensitive   = true\n}\n\nvariable \"application_name\" {\n  description = \"The name of your application\"\n  type        = string\n}\n\nvariable \"subsystem_name\" {\n  description = \"The subsystem name of your application\"\n  type        = string\n}\n\nvariable \"newline_pattern\" {\n  description = \"The pattern for lines splitting\"\n  type        = string\n  default     = \"(?:\\\\r\\\\n|\\\\r|\\\\n)\"\n}\n\nvariable \"bucket\" {\n  description = \"The name of the GCS Bucket to watch\"\n  type        = string\n}\n\nvariable \"labels\" {\n  description = \"A map of labels to add to Cloud Function\"\n  type        = map(string)\n  default     = {}\n}\n\nvariable \"function_iam_member\" {\n  description = \"The IAM member to grant the Cloud Function invoker role\"\n  type        = string\n  default     = \"allUsers\"\n}\n\n#File: versions.tf\nterraform {\n  required_version = \">= 0.13.1\"\n\n  required_providers {\n    google = {\n      source  = \"hashicorp/google\"\n      version = \">= 4.31.0\"\n    }\n    archive = {\n      source  = \"hashicorp/archive\"\n      version = \">= 2.2.0\"\n    }\n    random = {\n      source  = \"hashicorp/random\"\n      version = \">= 3.3.2\"\n    }\n  }\n}\n"}]}
{"messages": [{"role":"user","content":"Create Terraform configuration that reads outputs and parameters from two existing AWS CloudFormation stacks related to a Datomic system, extracting information like VPC IDs, security groups, load balancers, and deployment resources. Defines resources to create security group rules for SSH access, a VPC endpoint service linked to a network load balancer, and an interface VPC endpoint for Amazon SQS within the specified VPC. The configuration also exposes key infrastructure details as outputs for use in other modules or deployments."},{"role":"assistant","content":"provider \"aws\" {\r\n  region  = var.region\r\n  profile = var.profile\r\n}\r\n\r\ndata \"aws_cloudformation_stack\" \"datomic_compute\" {\r\n  name = \"${var.system_name}-compute\"\r\n}\r\n\r\ndata \"aws_cloudformation_stack\" \"datomic_storage\" {\r\n  name = var.system_name\r\n}\r\n\r\ndata \"aws_route_table\" \"datomic\" {\r\n  filter {\r\n    name   = \"tag:Name\"\r\n    values = [\"datomic-${var.system_name}\"]\r\n  }\r\n}\r\n\r\nresource \"aws_security_group_rule\" \"inbound_bastion\" {\r\n  cidr_blocks       = [\"0.0.0.0/0\"]\r\n  from_port         = 22\r\n  protocol          = \"tcp\"\r\n  security_group_id = data.aws_cloudformation_stack.datomic_compute.outputs[\"BastionSecurityGroup\"]\r\n  to_port           = 22\r\n  type              = \"ingress\"\r\n}\r\n\r\nresource \"aws_vpc_endpoint_service\" \"datomic\" {\r\n  acceptance_required        = false\r\n  network_load_balancer_arns = [data.aws_cloudformation_stack.datomic_compute.outputs[\"LoadBalancer\"]]\r\n}\r\n\r\nresource \"aws_vpc_endpoint\" \"sqs\" {\r\n  service_name       = \"com.amazonaws.${var.region}.sqs\"\r\n  vpc_endpoint_type  = \"Interface\"\r\n  vpc_id             = data.aws_cloudformation_stack.datomic_storage.outputs[\"VpcId\"]\r\n  security_group_ids = [data.aws_cloudformation_stack.datomic_compute.outputs[\"NodeSecurityGroup\"]]\r\n}\r\n\r\nvariable \"profile\" {}\r\nvariable \"region\" {}\r\nvariable \"system_name\" {}\r\n\r\noutput \"apps_security_group_id\" {\r\n  value = data.aws_cloudformation_stack.datomic_storage.outputs[\"AppsSecurityGroup\"]\r\n}\r\n\r\noutput \"code_bucket_arn\" {\r\n  value = data.aws_cloudformation_stack.datomic_compute.outputs[\"DatomicCodeBucketArn\"]\r\n}\r\n\r\noutput \"code_deploy_application_name\" {\r\n  value = data.aws_cloudformation_stack.datomic_compute.outputs[\"CodeDeployApplicationName\"]\r\n}\r\n\r\noutput \"deploy_state_machine_arn\" {\r\n  value = data.aws_cloudformation_stack.datomic_compute.outputs[\"DeployStateMachine\"]\r\n}\r\n\r\noutput \"endpoint_service_name\" {\r\n  value = aws_vpc_endpoint_service.datomic.service_name\r\n}\r\n\r\noutput \"key_name\" {\r\n  value = data.aws_cloudformation_stack.datomic_compute.parameters[\"KeyName\"]\r\n}\r\n\r\noutput \"lambda_security_group_id\" {\r\n  value = data.aws_cloudformation_stack.datomic_compute.outputs[\"LambdaSecurityGroup\"]\r\n}\r\n\r\noutput \"load_balancer_arn\" {\r\n  value = data.aws_cloudformation_stack.datomic_compute.outputs[\"LoadBalancer\"]\r\n}\r\n\r\noutput \"load_balancer_http_direct_endpoint\" {\r\n  value = data.aws_cloudformation_stack.datomic_compute.outputs[\"LoadBalancerHttpDirectEndpoint\"]\r\n}\r\n\r\noutput \"load_balancer_name\" {\r\n  value = data.aws_cloudformation_stack.datomic_compute.outputs[\"LoadBalancerName\"]\r\n}\r\n\r\noutput \"node_security_group_id\" {\r\n  value = data.aws_cloudformation_stack.datomic_compute.outputs[\"NodeSecurityGroup\"]\r\n}\r\n\r\noutput \"route_table_id\" {\r\n  value = data.aws_route_table.datomic.id\r\n}\r\n\r\noutput \"subnet_cidr_blocks\" {\r\n  value = [\r\n    data.aws_cloudformation_stack.datomic_storage.outputs[\"Subnet0CidrBlock\"],\r\n    data.aws_cloudformation_stack.datomic_storage.outputs[\"Subnet1CidrBlock\"],\r\n    data.aws_cloudformation_stack.datomic_storage.outputs[\"Subnet2CidrBlock\"],\r\n  ]\r\n}\r\n\r\noutput \"storage_arn\" {\r\n  value = data.aws_cloudformation_stack.datomic_storage.outputs[\"S3DatomicArn\"]\r\n}\r\n\r\noutput \"system_name\" {\r\n  value = data.aws_cloudformation_stack.datomic_compute.outputs[\"SystemName\"]\r\n}\r\n\r\noutput \"vpc_id\" {\r\n  value = data.aws_cloudformation_stack.datomic_storage.outputs[\"VpcId\"]\r\n}\r\n"}]}
{"messages": [{"role":"user","content":"Define an AWS CloudFront distribution backed by an S3 origin, secured with an ACM SSL certificate and customizable cache behavior. It supports aliases (CNAMEs), custom error responses, response headers policies, and sets up an origin access identity to restrict S3 bucket access to CloudFront. Additionally, it includes IAM policy documents for CloudFront invalidation permissions and supports tagging for resource management."},{"role":"assistant","content":"locals {\r\n  origin_id = \"main\"\r\n}\r\n\r\n\r\n# required\r\n\r\nvariable \"comment\" {\r\n  type        = string\r\n  description = \"Any comment you want to add to the distribution for easier identification.\"\r\n}\r\n\r\nvariable \"aliases\" {\r\n  type        = list(string)\r\n  description = \"List of CNAMEs\"\r\n}\r\n\r\nvariable \"certificate_arn\" {\r\n  type        = string\r\n  description = \"AWS ACM certificate ARN.\"\r\n}\r\n\r\nvariable \"s3_origin\" {\r\n  type = object({\r\n    path                        = string\r\n    bucket_regional_domain_name = string\r\n  })\r\n\r\n  description = \"S3 origin configuration\"\r\n}\r\n\r\n# optional\r\n\r\nvariable \"tags\" {\r\n  type        = map(string)\r\n  description = \"Tags attached to Cloudfront distribution.\"\r\n  default     = {}\r\n}\r\n\r\nvariable \"custom_error_responses\" {\r\n  type = list(object({\r\n    error_code            = number\r\n    error_caching_min_ttl = number\r\n    response_code         = number\r\n    response_page_path    = string\r\n  }))\r\n\r\n  default = []\r\n\r\n  description = \"List of custom error responses for distribution.\"\r\n}\r\n\r\nvariable \"certificate_minimum_protocol_version\" {\r\n  # https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/cloudfront_distribution#minimum_protocol_version\r\n  type        = string\r\n  default     = \"TLSv1.2_2019\"\r\n  description = \"The minimum version of the SSL protocol that you want to use for HTTPS.\"\r\n}\r\n\r\nvariable \"default_root_object\" {\r\n  type        = string\r\n  description = \"The object that you want CDN to return when an user requests the root URL.\"\r\n  default     = \"index.html\"\r\n}\r\n\r\nvariable \"default_cache_behavior\" {\r\n  # https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/cloudfront_distribution#default-cache-behavior-arguments\r\n  type = object({\r\n    allowed_methods = list(string),\r\n    cached_methods  = list(string),\r\n    min_ttl         = number\r\n    max_ttl         = number\r\n    default_ttl     = number\r\n    compress        = bool\r\n  })\r\n\r\n  default = {\r\n    allowed_methods = [\"DELETE\", \"GET\", \"HEAD\", \"OPTIONS\", \"PATCH\", \"POST\", \"PUT\"]\r\n    cached_methods  = [\"GET\", \"HEAD\"]\r\n    min_ttl         = 0\r\n    default_ttl     = 3600  # 1 hour\r\n    max_ttl         = 86400 # 1 day\r\n    compress        = true\r\n  }\r\n\r\n  description = \"Default cache behavior for this distribution\"\r\n}\r\n\r\nvariable \"response_headers_policy_id\" {\r\n  type        = string\r\n  description = \"The identifier for a response headers policy.\"\r\n  default     = null\r\n}\r\n\r\nvariable \"price_class\" {\r\n  type        = string\r\n  description = \"Cloudfront distribution's price class.\"\r\n  default     = \"PriceClass_100\"\r\n}\r\n\r\n\r\nresource \"aws_cloudfront_distribution\" \"this\" {\r\n  comment             = var.comment\r\n  enabled             = true\r\n  is_ipv6_enabled     = true\r\n  default_root_object = var.default_root_object\r\n  aliases             = var.aliases\r\n  price_class         = var.price_class\r\n\r\n  viewer_certificate {\r\n    cloudfront_default_certificate = false\r\n    acm_certificate_arn            = var.certificate_arn\r\n    minimum_protocol_version       = var.certificate_minimum_protocol_version\r\n\r\n    # sni-only is preferred, vip causes CloudFront to use a dedicated IP address and may incur extra charges.\r\n    ssl_support_method = \"sni-only\"\r\n  }\r\n\r\n  restrictions {\r\n    geo_restriction {\r\n      restriction_type = \"none\"\r\n    }\r\n  }\r\n\r\n  origin {\r\n    # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-cloudfront-distribution-origin.html\r\n\r\n    origin_id   = local.origin_id # must be unique within distribution\r\n    origin_path = var.s3_origin.path\r\n    domain_name = var.s3_origin.bucket_regional_domain_name\r\n\r\n    s3_origin_config {\r\n      origin_access_identity = aws_cloudfront_origin_access_identity.this.cloudfront_access_identity_path\r\n    }\r\n  }\r\n\r\n  default_cache_behavior {\r\n    allowed_methods  = var.default_cache_behavior.allowed_methods\r\n    cached_methods   = var.default_cache_behavior.cached_methods\r\n    target_origin_id = local.origin_id\r\n\r\n    response_headers_policy_id = var.response_headers_policy_id\r\n\r\n    forwarded_values {\r\n      query_string = false\r\n\r\n      cookies {\r\n        forward = \"none\"\r\n      }\r\n    }\r\n\r\n    compress               = var.default_cache_behavior.compress\r\n    viewer_protocol_policy = \"redirect-to-https\"\r\n    min_ttl                = var.default_cache_behavior.min_ttl\r\n    default_ttl            = var.default_cache_behavior.default_ttl\r\n    max_ttl                = var.default_cache_behavior.max_ttl\r\n  }\r\n\r\n  dynamic \"custom_error_response\" {\r\n    for_each = var.custom_error_responses\r\n\r\n    content {\r\n      error_code            = custom_error_response.value.error_code\r\n      error_caching_min_ttl = custom_error_response.value.error_caching_min_ttl\r\n      response_code         = custom_error_response.value.response_code\r\n      response_page_path    = custom_error_response.value.response_page_path\r\n    }\r\n  }\r\n\r\n  tags = var.tags\r\n}\r\n\r\nresource \"aws_cloudfront_origin_access_identity\" \"this\" {\r\n  comment = var.comment\r\n}\r\n\r\ndata \"aws_iam_policy_document\" \"this\" {\r\n\r\n  statement {\r\n    sid = 1\r\n\r\n    actions = [\r\n      \"cloudfront:CreateInvalidation\",\r\n    ]\r\n\r\n    resources = [\r\n      aws_cloudfront_distribution.this.arn\r\n    ]\r\n  }\r\n}\r\n\r\n"}]}
{"messages": [{"role":"user","content":"The Ansible playbook to install/configure a desktop (xfce), remote desktop (xrdp), web interface (Guacamole), and web proxy (Apache httpd)."},{"role":"assistant","content":"# Vendor AMI\r\ndata \"aws_ami\" \"cw-vendor-ami-latest\" {\r\n  most_recent = true\r\n  owners      = [var.vendor_ami_account_number]\r\n  filter {\r\n    name   = \"name\"\r\n    values = [var.vendor_ami_name_string]\r\n  }\r\n  filter {\r\n    name   = \"virtualization-type\"\r\n    values = [\"hvm\"]\r\n  }\r\n  filter {\r\n    name   = \"architecture\"\r\n    values = [\"x86_64\"]\r\n  }\r\n  filter {\r\n    name   = \"root-device-type\"\r\n    values = [\"ebs\"]\r\n  }\r\n}\r\n\r\n# Create AMI with KMS CMK from latest Vendor AMI\r\nresource \"aws_ami_copy\" \"cw-latest-vendor-ami-with-cmk\" {\r\n  name              = \"${var.name_prefix}-encrypted-ami-${random_string.cw-random.result}\"\r\n  description       = \"KMS CMK-encrypted AMI of latest official vendor AMI\"\r\n  source_ami_id     = data.aws_ami.cw-vendor-ami-latest.id\r\n  source_ami_region = var.aws_region\r\n  encrypted         = true\r\n  kms_key_id        = aws_kms_key.cw-kmscmk-ec2.arn\r\n  tags = {\r\n    Name = \"${var.name_prefix}-encrypted-ami-${random_string.cw-random.result}\"\r\n  }\r\n}\r\n\r\nvariable \"aws_region\" {\r\n  type = string\r\n}\r\n\r\nvariable \"aws_profile\" {\r\n  type = string\r\n}\r\n\r\nvariable \"vpc_cidr\" {\r\n  type = string\r\n}\r\n\r\nvariable \"net_cidr\" {\r\n  type = string\r\n}\r\n\r\nvariable \"net_instance_ip\" {\r\n  type = string\r\n}\r\n\r\nvariable \"guacnet_cidr\" {\r\n  type = string\r\n}\r\n\r\nvariable \"guacnet_guacd\" {\r\n  type = string\r\n}\r\n\r\nvariable \"guacnet_guacdb\" {\r\n  type = string\r\n}\r\n\r\nvariable \"guacnet_guacamole\" {\r\n  type = string\r\n}\r\n\r\nvariable \"guacnet_webproxy\" {\r\n  type = string\r\n}\r\n\r\nvariable \"guacnet_duckdnsupdater\" {\r\n  type = string\r\n}\r\n\r\nvariable \"mgmt_cidr\" {\r\n  type        = string\r\n  description = \"Subnet CIDR allowed to access WebUI and SSH, e.g. 172.16.10.0/30\"\r\n}\r\n\r\nvariable \"instance_type\" {\r\n  type        = string\r\n  description = \"The type of EC2 instance to deploy\"\r\n}\r\n\r\nvariable \"instance_key\" {\r\n  type        = string\r\n  description = \"A public key for SSH access to instance(s)\"\r\n}\r\n\r\nvariable \"instance_vol_size\" {\r\n  type        = number\r\n  description = \"The volume size of the instances' root block device\"\r\n}\r\n\r\nvariable \"instance_vol_type\" {\r\n  type        = string\r\n  description = \"The type of volume standard, gp2, gp3, io1, io2, sc1, or st1\"\r\n}\r\n\r\nvariable \"kms_manager\" {\r\n  type        = string\r\n  description = \"An IAM user for management of KMS key\"\r\n}\r\n\r\nvariable \"name_prefix\" {\r\n  type        = string\r\n  description = \"A friendly name prefix for the AMI and EC2 instances, e.g. 'cw' or 'dev'\"\r\n}\r\n\r\nvariable \"cw_password\" {\r\n  type        = string\r\n  description = \"The password to replace guacadmin's default Web UI password\"\r\n}\r\n\r\nvariable \"desktop\" {\r\n  type        = string\r\n  description = \"Desktop environment, either gnome or xfce\"\r\n}\r\n\r\nvariable \"vendor_ami_account_number\" {\r\n  type        = string\r\n  description = \"The account number of the vendor supplying the base AMI\"\r\n}\r\n\r\nvariable \"vendor_ami_name_string\" {\r\n  type        = string\r\n  description = \"The search string for the name of the AMI from the AMI Vendor\"\r\n}\r\n\r\nprovider \"aws\" {\r\n  region  = var.aws_region\r\n  profile = var.aws_profile\r\n}\r\n\r\n# region azs\r\ndata \"aws_availability_zones\" \"cw-azs\" {\r\n  state = \"available\"\r\n}\r\n\r\n# account id\r\ndata \"aws_caller_identity\" \"cw-aws-account\" {\r\n}\r\n\r\n# kms cmk manager - granted read access to KMS CMKs\r\ndata \"aws_iam_user\" \"cw-kmsmanager\" {\r\n  user_name = var.kms_manager\r\n}\r\n\r\nresource \"random_string\" \"cw-random\" {\r\n  length  = 5\r\n  upper   = false\r\n  special = false\r\n}\r\n\r\nvariable \"enable_duckdns\" {\r\n  type = number\r\n}\r\n\r\nvariable \"duckdns_domain\" {\r\n  type = string\r\n}\r\n\r\nvariable \"duckdns_token\" {\r\n  type = string\r\n}\r\n\r\nvariable \"letsencrypt_email\" {\r\n  type = string\r\n}\r\n# SSM Managed Policy\r\ndata \"aws_iam_policy\" \"cw-instance-policy-ssm\" {\r\n  arn = \"arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore\"\r\n}\r\n\r\n# Instance Policy SSM Parameter\r\nresource \"aws_iam_policy\" \"cw-instance-policy-ssmparameter\" {\r\n  name        = \"${var.name_prefix}-instance-policy-ssmparameter-${random_string.cw-random.result}\"\r\n  path        = \"/\"\r\n  description = \"Provides cw instances access to ssm parameter(s)\"\r\n  policy      = <<EOF\r\n{\r\n  \"Statement\": [\r\n    {\r\n      \"Sid\": \"GetSSMParameter\",\r\n      \"Effect\": \"Allow\",\r\n      \"Action\": [\r\n        \"ssm:GetParameters\"\r\n      ],\r\n      \"Resource\": [\"${aws_ssm_parameter.cw-ssm-param-pass.arn}\"]\r\n    },\r\n    {\r\n      \"Sid\": \"SSMCMK\",\r\n      \"Effect\": \"Allow\",\r\n      \"Action\": \"kms:Decrypt\",\r\n      \"Resource\": [\"${aws_kms_key.cw-kmscmk-ssm.arn}\"]\r\n    }\r\n  ]\r\n}\r\nEOF\r\n}\r\n\r\n# Instance Policy S3\r\nresource \"aws_iam_policy\" \"cw-instance-policy-s3\" {\r\n  name        = \"${var.name_prefix}-instance-policy-s3-${random_string.cw-random.result}\"\r\n  path        = \"/\"\r\n  description = \"Provides cw instances access to s3 objects/bucket\"\r\n  policy      = <<EOF\r\n{\r\n  \"Statement\": [\r\n    {\r\n      \"Sid\": \"ListObjectsinBucket\",\r\n      \"Effect\": \"Allow\",\r\n      \"Action\": [\r\n        \"s3:ListBucket\"\r\n      ],\r\n      \"Resource\": [\"${aws_s3_bucket.cw-bucket.arn}\"]\r\n    },\r\n    {\r\n      \"Sid\": \"GetObjectsinBucketPrefix\",\r\n      \"Effect\": \"Allow\",\r\n      \"Action\": [\r\n        \"s3:GetObject\",\r\n        \"s3:GetObjectVersion\"\r\n      ],\r\n      \"Resource\": [\"${aws_s3_bucket.cw-bucket.arn}/*\"]\r\n    },\r\n    {\r\n      \"Sid\": \"PutObjectsinBucketPrefix\",\r\n      \"Effect\": \"Allow\",\r\n      \"Action\": [\r\n        \"s3:PutObject\",\r\n        \"s3:PutObjectAcl\"\r\n      ],\r\n      \"Resource\": [\"${aws_s3_bucket.cw-bucket.arn}/workstation/*\",\"${aws_s3_bucket.cw-bucket.arn}/ssm/*\"]\r\n    },\r\n    {\r\n      \"Sid\": \"S3CMK\",\r\n      \"Effect\": \"Allow\",\r\n      \"Action\": [\r\n        \"kms:Encrypt\",\r\n        \"kms:ReEncrypt*\",\r\n        \"kms:GenerateDataKey*\",\r\n        \"kms:DescribeKey\"\r\n      ],\r\n      \"Resource\": [\"${aws_kms_key.cw-kmscmk-s3.arn}\"]\r\n    }\r\n  ]\r\n}\r\nEOF\r\n}\r\n\r\n# Instance Role\r\nresource \"aws_iam_role\" \"cw-instance-iam-role\" {\r\n  name               = \"${var.name_prefix}-instance-role-${random_string.cw-random.result}\"\r\n  path               = \"/\"\r\n  assume_role_policy = <<EOF\r\n{\r\n  \"Statement\": [\r\n      {\r\n          \"Action\": \"sts:AssumeRole\",\r\n          \"Principal\": {\r\n             \"Service\": \"ec2.amazonaws.com\"\r\n          },\r\n          \"Effect\": \"Allow\",\r\n          \"Sid\": \"\"\r\n      }\r\n  ]\r\n}\r\nEOF\r\n}\r\n\r\n# Instance Role Attachments\r\nresource \"aws_iam_role_policy_attachment\" \"cw-iam-attach-ssm\" {\r\n  role       = aws_iam_role.cw-instance-iam-role.name\r\n  policy_arn = data.aws_iam_policy.cw-instance-policy-ssm.arn\r\n}\r\n\r\nresource \"aws_iam_role_policy_attachment\" \"cw-iam-attach-ssmparameter\" {\r\n  role       = aws_iam_role.cw-instance-iam-role.name\r\n  policy_arn = aws_iam_policy.cw-instance-policy-ssmparameter.arn\r\n}\r\n\r\nresource \"aws_iam_role_policy_attachment\" \"cw-iam-attach-s3\" {\r\n  role       = aws_iam_role.cw-instance-iam-role.name\r\n  policy_arn = aws_iam_policy.cw-instance-policy-s3.arn\r\n}\r\n\r\n# Instance Profile\r\nresource \"aws_iam_instance_profile\" \"cw-instance-profile\" {\r\n  name = \"${var.name_prefix}-instance-profile-${random_string.cw-random.result}\"\r\n  role = aws_iam_role.cw-instance-iam-role.name\r\n}\r\n# Instance Key\r\nresource \"aws_key_pair\" \"cw-instance-key\" {\r\n  key_name   = \"${var.name_prefix}-instance-key-${random_string.cw-random.result}\"\r\n  public_key = var.instance_key\r\n  tags = {\r\n    Name = \"${var.name_prefix}-instance-key\"\r\n  }\r\n}\r\n\r\n# Instance(s)\r\nresource \"aws_instance\" \"cw-instance-1\" {\r\n  ami                    = aws_ami_copy.cw-latest-vendor-ami-with-cmk.id\r\n  instance_type          = var.instance_type\r\n  iam_instance_profile   = aws_iam_instance_profile.cw-instance-profile.name\r\n  key_name               = aws_key_pair.cw-instance-key.key_name\r\n  subnet_id              = aws_subnet.cw-net.id\r\n  private_ip             = var.net_instance_ip\r\n  vpc_security_group_ids = [aws_security_group.cw-sg.id]\r\n  tags = {\r\n    Name = \"${var.name_prefix}-workstation-1-${random_string.cw-random.result}\",\r\n    cw   = \"True\"\r\n  }\r\n  user_data = <<EOF\r\n#!/bin/bash\r\n# set hostname\r\nhostnamectl set-hostname ${var.name_prefix}-workstation-1-${random_string.cw-random.result}\r\nEOF\r\n  root_block_device {\r\n    volume_size = var.instance_vol_size\r\n    volume_type = var.instance_vol_type\r\n    encrypted   = \"true\"\r\n    kms_key_id  = aws_kms_key.cw-kmscmk-ec2.arn\r\n  }\r\n  depends_on = [aws_iam_role_policy_attachment.cw-iam-attach-ssm, aws_iam_role_policy_attachment.cw-iam-attach-s3]\r\n}\r\n\r\n# Elastic IP for Instance(s)\r\nresource \"aws_eip\" \"cw-eip-1\" {\r\n  vpc                       = true\r\n  instance                  = aws_instance.cw-instance-1.id\r\n  associate_with_private_ip = var.net_instance_ip\r\n  depends_on                = [aws_internet_gateway.cw-gw]\r\n}\r\nresource \"aws_kms_key\" \"cw-kmscmk-s3\" {\r\n  description              = \"Key for cw s3\"\r\n  key_usage                = \"ENCRYPT_DECRYPT\"\r\n  customer_master_key_spec = \"SYMMETRIC_DEFAULT\"\r\n  enable_key_rotation      = \"true\"\r\n  tags = {\r\n    Name = \"cw-kmscmk-s3-${random_string.cw-random.result}\"\r\n  }\r\n  policy = <<EOF\r\n{\r\n  \"Id\": \"cw-kmskeypolicy-s3\",\r\n  \"Statement\": [\r\n    {\r\n      \"Sid\": \"Enable IAM User Permissions\",\r\n      \"Effect\": \"Allow\",\r\n      \"Principal\": {\r\n        \"AWS\": \"${data.aws_iam_user.cw-kmsmanager.arn}\"\r\n      },\r\n      \"Action\": \"kms:*\",\r\n      \"Resource\": \"*\"\r\n    },\r\n    {\r\n      \"Sid\": \"Allow EC2 Encrypt\",\r\n      \"Effect\": \"Allow\",\r\n      \"Principal\": {\r\n        \"AWS\": \"${aws_iam_role.cw-instance-iam-role.arn}\"\r\n      },\r\n      \"Action\": [\r\n        \"kms:Encrypt\",\r\n        \"kms:ReEncrypt*\",\r\n        \"kms:GenerateDataKey*\",\r\n        \"kms:DescribeKey\"\r\n      ],\r\n      \"Resource\": \"*\",\r\n      \"Condition\": {\r\n        \"StringEquals\": {\r\n          \"kms:CallerAccount\": \"${data.aws_caller_identity.cw-aws-account.account_id}\",\r\n          \"kms:ViaService\": \"ec2.${var.aws_region}.amazonaws.com\"\r\n        }\r\n      }\r\n    },\r\n    {\r\n      \"Sid\": \"Allow access through S3\",\r\n      \"Effect\": \"Allow\",\r\n      \"Principal\": {\r\n        \"AWS\": \"${aws_iam_role.cw-instance-iam-role.arn}\"\r\n      },\r\n      \"Action\": [\r\n        \"kms:Encrypt\",\r\n        \"kms:Decrypt\",\r\n        \"kms:ReEncrypt*\",\r\n        \"kms:GenerateDataKey*\",\r\n        \"kms:DescribeKey\"\r\n      ],\r\n      \"Resource\": \"*\",\r\n      \"Condition\": {\r\n        \"StringEquals\": {\r\n          \"kms:CallerAccount\": \"${data.aws_caller_identity.cw-aws-account.account_id}\",\r\n          \"kms:ViaService\": \"s3.${var.aws_region}.amazonaws.com\"\r\n        }\r\n      }\r\n    }\r\n  ]\r\n}\r\nEOF\r\n}\r\n\r\nresource \"aws_kms_alias\" \"cw-kmscmk-s3-alias\" {\r\n  name          = \"alias/${var.name_prefix}-kmscmk-s3-${random_string.cw-random.result}\"\r\n  target_key_id = aws_kms_key.cw-kmscmk-s3.key_id\r\n}\r\n\r\nresource \"aws_kms_key\" \"cw-kmscmk-ec2\" {\r\n  description              = \"Key for cw ec2/ebs\"\r\n  key_usage                = \"ENCRYPT_DECRYPT\"\r\n  customer_master_key_spec = \"SYMMETRIC_DEFAULT\"\r\n  enable_key_rotation      = \"true\"\r\n  tags = {\r\n    Name = \"cw-kmscmk-ec2-${random_string.cw-random.result}\"\r\n  }\r\n  policy = <<EOF\r\n{\r\n  \"Id\": \"cw-kmskeypolicy-ec2\",\r\n  \"Statement\": [\r\n    {\r\n      \"Sid\": \"Enable IAM User Permissions\",\r\n      \"Effect\": \"Allow\",\r\n      \"Principal\": {\r\n        \"AWS\": \"${data.aws_iam_user.cw-kmsmanager.arn}\"\r\n      },\r\n      \"Action\": \"kms:*\",\r\n      \"Resource\": \"*\"\r\n    },\r\n    {\r\n      \"Sid\": \"Allow attachment of persistent resources\",\r\n      \"Effect\": \"Allow\",\r\n      \"Principal\": {\r\n        \"AWS\": \"${aws_iam_role.cw-instance-iam-role.arn}\"\r\n      },\r\n      \"Action\": [\r\n        \"kms:CreateGrant\",\r\n        \"kms:ListGrants\",\r\n        \"kms:RevokeGrant\"\r\n      ],\r\n      \"Resource\": \"*\",\r\n      \"Condition\": {\r\n        \"Bool\": {\r\n          \"kms:GrantIsForAWSResource\": \"true\"\r\n        }\r\n      }\r\n    },\r\n    {\r\n      \"Sid\": \"Allow access through EC2\",\r\n      \"Effect\": \"Allow\",\r\n      \"Principal\": {\r\n        \"AWS\": \"${aws_iam_role.cw-instance-iam-role.arn}\"\r\n      },\r\n      \"Action\": [\r\n        \"kms:Encrypt\",\r\n        \"kms:Decrypt\",\r\n        \"kms:ReEncrypt*\",\r\n        \"kms:GenerateDataKey*\",\r\n        \"kms:DescribeKey\"\r\n      ],\r\n      \"Resource\": \"*\",\r\n      \"Condition\": {\r\n        \"StringEquals\": {\r\n          \"kms:CallerAccount\": \"${data.aws_caller_identity.cw-aws-account.account_id}\",\r\n          \"kms:ViaService\": \"ec2.${var.aws_region}.amazonaws.com\"\r\n        }\r\n      }\r\n    }\r\n  ]\r\n}\r\nEOF\r\n}\r\n\r\nresource \"aws_kms_alias\" \"cw-kmscmk-ec2-alias\" {\r\n  name          = \"alias/${var.name_prefix}-kmscmk-ec2-${random_string.cw-random.result}\"\r\n  target_key_id = aws_kms_key.cw-kmscmk-ec2.key_id\r\n}\r\n\r\nresource \"aws_kms_key\" \"cw-kmscmk-ssm\" {\r\n  description              = \"Key for cw ssm/ebs\"\r\n  key_usage                = \"ENCRYPT_DECRYPT\"\r\n  customer_master_key_spec = \"SYMMETRIC_DEFAULT\"\r\n  enable_key_rotation      = \"true\"\r\n  tags = {\r\n    Name = \"cw-kmscmk-ssm-${random_string.cw-random.result}\"\r\n  }\r\n  policy = <<EOF\r\n{\r\n  \"Id\": \"cw-kmskeypolicy-ssm\",\r\n  \"Statement\": [\r\n    {\r\n      \"Sid\": \"Enable IAM User Permissions\",\r\n      \"Effect\": \"Allow\",\r\n      \"Principal\": {\r\n        \"AWS\": \"${data.aws_iam_user.cw-kmsmanager.arn}\"\r\n      },\r\n      \"Action\": \"kms:*\",\r\n      \"Resource\": \"*\"\r\n    },\r\n    {\r\n      \"Sid\": \"Allow access through EC2\",\r\n      \"Effect\": \"Allow\",\r\n      \"Principal\": {\r\n        \"AWS\": \"${aws_iam_role.cw-instance-iam-role.arn}\"\r\n      },\r\n      \"Action\": \"kms:Decrypt\",\r\n      \"Resource\": \"*\",\r\n      \"Condition\": {\r\n        \"StringEquals\": {\r\n          \"kms:CallerAccount\": \"${data.aws_caller_identity.cw-aws-account.account_id}\",\r\n          \"kms:ViaService\": \"ssm.${var.aws_region}.amazonaws.com\"\r\n        }\r\n      }\r\n    }\r\n  ]\r\n}\r\nEOF\r\n}\r\n\r\nresource \"aws_kms_alias\" \"cw-kmscmk-ssm-alias\" {\r\n  name          = \"alias/${var.name_prefix}-kmscmk-ssm-${random_string.cw-random.result}\"\r\n  target_key_id = aws_kms_key.cw-kmscmk-ssm.key_id\r\n}\r\n# vpc and gateway\r\nresource \"aws_vpc\" \"cw-vpc\" {\r\n  cidr_block           = var.vpc_cidr\r\n  enable_dns_support   = \"true\"\r\n  enable_dns_hostnames = \"true\"\r\n  tags = {\r\n    Name = \"${var.name_prefix}-vpc-${random_string.cw-random.result}\"\r\n  }\r\n}\r\n\r\n# internet gateway \r\nresource \"aws_internet_gateway\" \"cw-gw\" {\r\n  vpc_id = aws_vpc.cw-vpc.id\r\n  tags = {\r\n    Name = \"${var.name_prefix}-gw-${random_string.cw-random.result}\"\r\n  }\r\n}\r\n\r\n# public route table\r\nresource \"aws_route_table\" \"cw-pubrt\" {\r\n  vpc_id = aws_vpc.cw-vpc.id\r\n  route {\r\n    cidr_block = \"0.0.0.0/0\"\r\n    gateway_id = aws_internet_gateway.cw-gw.id\r\n  }\r\n  tags = {\r\n    Name = \"${var.name_prefix}-pubrt-${random_string.cw-random.result}\"\r\n  }\r\n}\r\n\r\n# net\r\nresource \"aws_subnet\" \"cw-net\" {\r\n  vpc_id            = aws_vpc.cw-vpc.id\r\n  availability_zone = data.aws_availability_zones.cw-azs.names[0]\r\n  cidr_block        = var.net_cidr\r\n  tags = {\r\n    Name = \"${var.name_prefix}-net-${random_string.cw-random.result}\"\r\n  }\r\n  depends_on = [aws_internet_gateway.cw-gw]\r\n}\r\n\r\n# public route table associations\r\nresource \"aws_route_table_association\" \"rt-assoc-net\" {\r\n  subnet_id      = aws_subnet.cw-net.id\r\n  route_table_id = aws_route_table.cw-pubrt.id\r\n}\r\n# s3 bucket\r\nresource \"aws_s3_bucket\" \"cw-bucket\" {\r\n  bucket = \"${var.name_prefix}-bucket-${random_string.cw-random.result}\"\r\n  acl    = \"private\"\r\n  versioning {\r\n    enabled = true\r\n  }\r\n  server_side_encryption_configuration {\r\n    rule {\r\n      apply_server_side_encryption_by_default {\r\n        kms_master_key_id = aws_kms_key.cw-kmscmk-s3.arn\r\n        sse_algorithm     = \"aws:kms\"\r\n      }\r\n    }\r\n  }\r\n  force_destroy = true\r\n  policy        = <<POLICY\r\n{\r\n  \"Statement\": [\r\n    {\r\n      \"Sid\": \"KMS Manager\",\r\n      \"Effect\": \"Allow\",\r\n      \"Principal\": {\r\n        \"AWS\": [\"${data.aws_iam_user.cw-kmsmanager.arn}\"]\r\n      },\r\n      \"Action\": [\r\n        \"s3:*\"\r\n      ],\r\n      \"Resource\": [\r\n        \"arn:aws:s3:::${var.name_prefix}-bucket-${random_string.cw-random.result}\",\r\n        \"arn:aws:s3:::${var.name_prefix}-bucket-${random_string.cw-random.result}/*\"\r\n      ]\r\n    },\r\n    {\r\n      \"Sid\": \"Instance List\",\r\n      \"Effect\": \"Allow\",\r\n      \"Principal\": {\r\n        \"AWS\": [\"${aws_iam_role.cw-instance-iam-role.arn}\"]\r\n      },\r\n      \"Action\": [\r\n        \"s3:ListBucket\"\r\n      ],\r\n      \"Resource\": [\"arn:aws:s3:::${var.name_prefix}-bucket-${random_string.cw-random.result}\"]\r\n    },\r\n    {\r\n      \"Sid\": \"Instance Get\",\r\n      \"Effect\": \"Allow\",\r\n      \"Principal\": {\r\n        \"AWS\": [\"${aws_iam_role.cw-instance-iam-role.arn}\"]\r\n      },\r\n      \"Action\": [\r\n        \"s3:GetObject\",\r\n        \"s3:GetObjectVersion\"\r\n      ],\r\n      \"Resource\": [\"arn:aws:s3:::${var.name_prefix}-bucket-${random_string.cw-random.result}/*\"]\r\n    },\r\n    {\r\n      \"Sid\": \"Instance Put\",\r\n      \"Effect\": \"Allow\",\r\n      \"Principal\": {\r\n        \"AWS\": [\"${aws_iam_role.cw-instance-iam-role.arn}\"]\r\n      },\r\n      \"Action\": [\r\n        \"s3:PutObject\",\r\n        \"s3:PutObjectAcl\"\r\n      ],\r\n      \"Resource\": [\r\n        \"arn:aws:s3:::${var.name_prefix}-bucket-${random_string.cw-random.result}/ssm/*\"\r\n      ]\r\n    }\r\n  ]\r\n}\r\nPOLICY\r\n}\r\n\r\n# s3 block all public access to bucket\r\nresource \"aws_s3_bucket_public_access_block\" \"cw-bucket-pubaccessblock\" {\r\n  bucket                  = aws_s3_bucket.cw-bucket.id\r\n  block_public_acls       = true\r\n  block_public_policy     = true\r\n  ignore_public_acls      = true\r\n  restrict_public_buckets = true\r\n}\r\n\r\n# s3 objects (playbook)\r\nresource \"aws_s3_bucket_object\" \"cw-workstation-files\" {\r\n  for_each       = fileset(\"../playbooks/\", \"**\")\r\n  bucket         = aws_s3_bucket.cw-bucket.id\r\n  key            = \"playbook/${each.value}\"\r\n  content_base64 = base64encode(file(\"${path.module}/../playbooks/${each.value}\"))\r\n  kms_key_id     = aws_kms_key.cw-kmscmk-s3.arn\r\n}\r\n# security groups\r\nresource \"aws_security_group\" \"cw-sg\" {\r\n  name        = \"${var.name_prefix}-sg\"\r\n  description = \"Security group for public traffic\"\r\n  vpc_id      = aws_vpc.cw-vpc.id\r\n  tags = {\r\n    Name = \"cw-sg\"\r\n  }\r\n}\r\n\r\n# public sg rules\r\nresource \"aws_security_group_rule\" \"cw-sg-mgmt-ssh-in\" {\r\n  security_group_id = aws_security_group.cw-sg.id\r\n  type              = \"ingress\"\r\n  description       = \"IN FROM MGMT - SSH MGMT\"\r\n  from_port         = \"22\"\r\n  to_port           = \"22\"\r\n  protocol          = \"tcp\"\r\n  cidr_blocks       = [var.mgmt_cidr]\r\n}\r\n\r\nresource \"aws_security_group_rule\" \"cw-sg-mgmt-https-in\" {\r\n  security_group_id = aws_security_group.cw-sg.id\r\n  type              = \"ingress\"\r\n  description       = \"IN FROM SELF, MGMT - HTTPS\"\r\n  from_port         = \"443\"\r\n  to_port           = \"443\"\r\n  protocol          = \"tcp\"\r\n  cidr_blocks       = [var.mgmt_cidr, \"${aws_eip.cw-eip-1.public_ip}/32\"]\r\n}\r\n\r\nresource \"aws_security_group_rule\" \"cw-sg-out-tcp\" {\r\n  security_group_id = aws_security_group.cw-sg.id\r\n  type              = \"egress\"\r\n  description       = \"OUT TO WORLD - TCP\"\r\n  from_port         = 0\r\n  to_port           = 65535\r\n  protocol          = \"tcp\"\r\n  cidr_blocks       = [\"0.0.0.0/0\"]\r\n}\r\n\r\nresource \"aws_security_group_rule\" \"cw-sg-out-udp\" {\r\n  security_group_id = aws_security_group.cw-sg.id\r\n  type              = \"egress\"\r\n  description       = \"OUT TO WORLD - UDP\"\r\n  from_port         = 0\r\n  to_port           = 65535\r\n  protocol          = \"udp\"\r\n  cidr_blocks       = [\"0.0.0.0/0\"]\r\n}\r\nresource \"aws_ssm_parameter\" \"cw-ssm-param-pass\" {\r\n  name   = \"${var.name_prefix}-cw-web-password-${random_string.cw-random.result}\"\r\n  type   = \"SecureString\"\r\n  key_id = aws_kms_key.cw-kmscmk-ssm.key_id\r\n  value  = var.cw_password\r\n}\r\n\r\nresource \"aws_ssm_document\" \"cw-ssm-doc\" {\r\n  name          = \"${var.name_prefix}-ssm-doc-${random_string.cw-random.result}\"\r\n  document_type = \"Command\"\r\n  content       = <<DOC\r\n  {\r\n    \"description\": \"Ansible Playbooks via SSM for Ubuntu 18.04 and 20.04, installs Ansible properly.\",\r\n    \"parameters\": {\r\n    \"SourceType\": {\r\n      \"description\": \"(Optional) Specify the source type.\",\r\n      \"type\": \"String\",\r\n      \"allowedValues\": [\r\n      \"GitHub\",\r\n      \"S3\"\r\n      ]\r\n    },\r\n    \"SourceInfo\": {\r\n      \"description\": \"Specify 'path'. Important: If you specify S3, then the IAM instance profile on your managed instances must be configured with read access to Amazon S3.\",\r\n      \"type\": \"StringMap\",\r\n      \"displayType\": \"textarea\",\r\n      \"default\": {}\r\n    },\r\n    \"PlaybookFile\": {\r\n      \"type\": \"String\",\r\n      \"description\": \"(Optional) The Playbook file to run (including relative path). If the main Playbook file is located in the ./automation directory, then specify automation/playbook.yml.\",\r\n      \"default\": \"hello-world-playbook.yml\",\r\n      \"allowedPattern\": \"[(a-z_A-Z0-9\\\\-)/]+(.yml|.yaml)$\"\r\n    },\r\n    \"ExtraVariables\": {\r\n      \"type\": \"String\",\r\n      \"description\": \"(Optional) Additional variables to pass to Ansible at runtime. Enter key/value pairs separated by a space. For example: color=red flavor=cherry\",\r\n      \"default\": \"SSM=True\",\r\n      \"displayType\": \"textarea\",\r\n      \"allowedPattern\": \"^$|^\\\\w+\\\\=[^\\\\s|:();&]+(\\\\s\\\\w+\\\\=[^\\\\s|:();&]+)*$\"\r\n    },\r\n    \"Verbose\": {\r\n      \"type\": \"String\",\r\n      \"description\": \"(Optional) Set the verbosity level for logging Playbook executions. Specify -v for low verbosity, -vv or vvv for medium verbosity, and -vvvv for debug level.\",\r\n      \"allowedValues\": [\r\n      \"-v\",\r\n      \"-vv\",\r\n      \"-vvv\",\r\n      \"-vvvv\"\r\n      ],\r\n      \"default\": \"-v\"\r\n    }\r\n    },\r\n    \"mainSteps\": [\r\n    {\r\n      \"action\": \"aws:downloadContent\",\r\n      \"name\": \"downloadContent\",\r\n      \"inputs\": {\r\n      \"SourceType\": \"{{ SourceType }}\",\r\n      \"SourceInfo\": \"{{ SourceInfo }}\"\r\n      }\r\n    },\r\n    {\r\n      \"action\": \"aws:runShellScript\",\r\n      \"name\": \"runShellScript\",\r\n      \"inputs\": {\r\n      \"runCommand\": [\r\n        \"#!/bin/bash\",\r\n        \"# Ensure ansible is installed\",\r\n        \"sudo apt-get update\",\r\n        \"sudo DEBIAN_FRONTEND=noninteractive apt-get -y install python3-pip git\",\r\n        \"sudo pip3 install ansible\",\r\n        \"echo \\\"Running Ansible in `pwd`\\\"\",\r\n        \"#this section locates files and unzips them\",\r\n        \"for zip in $(find -iname '*.zip'); do\",\r\n        \"  unzip -o $zip\",\r\n        \"done\",\r\n        \"PlaybookFile=\\\"{{PlaybookFile}}\\\"\",\r\n        \"if [ ! -f  \\\"$${PlaybookFile}\\\" ] ; then\",\r\n        \"   echo \\\"The specified Playbook file doesn't exist in the downloaded bundle. Please review the relative path and file name.\\\" >&2\",\r\n        \"   exit 2\",\r\n        \"fi\",\r\n        \"/usr/local/bin/ansible-playbook -i \\\"localhost,\\\" -c local -e \\\"{{ExtraVariables}}\\\" \\\"{{Verbose}}\\\" \\\"$${PlaybookFile}\\\"\"\r\n      ]\r\n      }\r\n    }\r\n    ]\r\n  }\r\nDOC\r\n}\r\n\r\nresource \"aws_ssm_association\" \"cw-ssm-assoc\" {\r\n  association_name = \"${var.name_prefix}-ssm-assoc-${random_string.cw-random.result}\"\r\n  name             = aws_ssm_document.cw-ssm-doc.name\r\n  targets {\r\n    key    = \"tag:cw\"\r\n    values = [\"True\"]\r\n  }\r\n  output_location {\r\n    s3_bucket_name = aws_s3_bucket.cw-bucket.id\r\n    s3_key_prefix  = \"ssm\"\r\n  }\r\n  parameters = {\r\n    ExtraVariables = \"name_prefix=${var.name_prefix} name_suffix=${random_string.cw-random.result} guacnet_cidr=${var.guacnet_cidr} guacnet_guacd=${var.guacnet_guacd} guacnet_guacdb=${var.guacnet_guacdb} guacnet_guacamole=${var.guacnet_guacamole} guacnet_webproxy=${var.guacnet_webproxy} guacnet_duckdnsupdater=${var.guacnet_duckdnsupdater} aws_region=${var.aws_region} desktop=${var.desktop} enable_duckdns=${var.enable_duckdns} duckdns_domain=${var.duckdns_domain} duckdns_token=${var.duckdns_token} letsencrypt_email=${var.letsencrypt_email}\"\r\n    PlaybookFile   = \"cloud_workstation_aws.yml\"\r\n    SourceInfo     = \"{\\\"path\\\":\\\"https://s3.${var.aws_region}.amazonaws.com/${aws_s3_bucket.cw-bucket.id}/playbook/\\\"}\"\r\n    SourceType     = \"S3\"\r\n    Verbose        = \"-v\"\r\n  }\r\n  depends_on = [aws_iam_role_policy_attachment.cw-iam-attach-ssm, aws_iam_role_policy_attachment.cw-iam-attach-s3, aws_s3_bucket_object.cw-workstation-files]\r\n}\r\n"}]}
{"messages": [{"role": "user", "content": "Create a Kubernetes namespace named \"test.\" Deploy an application with two replicas using the \"nginx:1.19.4\" image in the \"test\" namespace. Add a Helm repository for the NGINX ingress controller and install it as a release named \"nginx-ingress-controller.\" Create a second Kubernetes namespace called \"csi-driver.\" Install the Secrets Store CSI Driver in the \"csi-driver\" namespace using Helm with the configuration to enable syncing secrets."}, {"role": "assistant", "content": "\n#File: main.tf\nterraform {\n  required_providers {\n    kubernetes = {\n      source  = \"hashicorp/kubernetes\"\n      version = \"= 2.4.1\"\n    }\n\n    helm = {\n      source  = \"hashicorp/helm\"\n      version = \"= 2.2.0\"\n    }\n  }\n}\n\nresource \"kubernetes_namespace\" \"test\" {\n  metadata {\n    name = \"test\"\n  }\n}\n\n\nresource \"kubernetes_deployment\" \"test\" {\n  metadata {\n    name      = \"test\"\n    namespace = kubernetes_namespace.test.metadata.0.name\n  }\n  spec {\n    replicas = 2\n    selector {\n      match_labels = {\n        app = \"test\"\n      }\n    }\n    template {\n      metadata {\n        labels = {\n          app = \"test\"\n        }\n      }\n      spec {\n        container {\n          image = \"nginx:1.19.4\"\n          name  = \"nginx\"\n\n          resources {\n            limits = {\n              memory = \"512M\"\n              cpu    = \"1\"\n            }\n            requests = {\n              memory = \"256M\"\n              cpu    = \"50m\"\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\n\nresource \"helm_release\" \"nginx_ingress\" {\n  name = \"nginx-ingress-controller\"\n\n  repository = \"https://charts.bitnami.com/bitnami\"\n  chart      = \"nginx-ingress-controller\"\n\n  set {\n    name  = \"service.type\"\n    value = \"ClusterIP\"\n  }\n}\n\n\nresource \"kubernetes_namespace\" \"csi-driver\" {\n  metadata {\n    name = \"csi-driver\"\n  }\n}\n\n/*\necho \"Adding Helm repo for Secret Store CSI...\"\nhelm repo add secrets-store-csi-driver https://raw.githubusercontent.com/kubernetes-sigs/secrets-store-csi-driver/master/charts\n\necho \"Installing Secrets Store CSI Driver using Helm...\"\nkubectl create ns csi-driver\nhelm --namespace csi-driver install csi-secrets-store secrets-store-csi-driver/secrets-store-csi-driver  --set syncSecret.enabled=true\n*/\n\nresource \"helm_release\" \"csi-secrets-store\" {\n  namespace = \"csi-driver\"\n  name      = \"csi-secrets-store\"\n  version   = \"0.1.0\"\n\n  repository = \"https://raw.githubusercontent.com/kubernetes-sigs/secrets-store-csi-driver/master/charts\"\n  chart      = \"secrets-store-csi-driver\"\n\n  set {\n    name  = \"syncSecret.enabled\"\n    value = \"true\"\n  }\n}\n\nresource \"local_file\" \"kubeconfig\" {\n  content  = var.kubeconfig\n  filename = \"${path.root}/kubeconfig\"\n}\n#File: output.tf\n/*\noutput \"secret-provider-class\" {\n  description = \"tasd\"\n  value = templatefile(\n               \"${path.module}/secret-provider-class.yaml\"\n               , \n               { tenantId = \"\\\"${var.tenantId}\\\"\", \n                 resourceGroupName = \"\\\"${var.resourceGroup}\\\"\", \n                 subscriptionId = \"\\\"${var.subscriptionId }\\\"\",\n                 secretProviderClassName = var.secretProviderClassName,\n                 keyVaultName = var.keyVaultName,\n                 secretName = var.secretName,\n                 secret1Alias = var.secret1Alias,\n                 secret2Alias = var.secret2Alias,\n                 secret1Name = var.secret1Name,\n                 secret2Name = var.secret2Name\n        })\n}              \n*/\n#File: variables.tf\nvariable \"cluster_name\" {\n  type = string\n}\n\nvariable \"kubeconfig\" {\n  type = string\n}\n\nvariable \"resourceGroup\" {\n  type = string\n}\n\nvariable \"subscriptionId\" {\n  type = string\n}\n\nvariable \"tenantId\" {\n  type = string\n}\n\n/*\nvariable secretProviderClassName { \n  default = \"secret-provider-kv\"\n}\n\nvariable keyVaultName {\n  default = \"kv-aks\"\n}\n\nvariable secretName {\n  default = \"secret-kv\"\n}\n\nvariable secret1Name {\n  default = \"DBUsername\"\n}\n\nvariable secret2Name {\n  default = \"DBPassword\"\n}\n\nvariable secret1Alias {\n  default = \"DB_USERNAME\"\n}\n\nvariable secret2Alias {\n  default = \"DB_PASSWORD\"\n}\n\n\nvariable  identityName {\n  default = \"id-aks-kv\" \n}\n\nvariable  identitySelector {\n  default = \"azure-kv\"\n}\n\n*/"}]}
{"messages": [{"role": "user", "content": "Create a Google Cloud provider configuration with the required project, region, and zone. Create a VPC network with automatic subnet creation. Launch a Google Compute Engine instance with a specified machine type and a Debian boot disk. Set up a Cloud Storage bucket with lifecycle rules to manage storage class transitions and deletion. Define the necessary variables for configuration, including project ID and resource tags."}, {"role": "assistant", "content": "\n#File: main.tf\nterraform {\n  required_providers {\n    google = {\n      source  = \"hashicorp/google\"\n      version = \"4.31.0\"\n    }\n  }\n}\n\nprovider \"google\" {\n  # Configuration options\n  project = var.project_id\n  region  = var.gcp_region\n  zone    = var.gcp_zone\n}\n\nresource \"google_compute_network\" \"vpc_network\" {\n  name                    = var.vpc_network_name\n  auto_create_subnetworks = \"true\"\n}\n\nresource \"google_compute_instance\" \"vm_instance\" {\n  name         = var.vm_instance_name\n  machine_type = var.vm_instance_machine_type\n\n  boot_disk {\n    initialize_params {\n      image = \"debian-cloud/debian-11\"\n    }\n  }\n\n  network_interface {\n    # A default network is created for all GCP projects\n    network = google_compute_network.vpc_network.name\n    access_config {\n    }\n  }\n\n  tags = [var.resoucre_tags[\"location\"], var.resoucre_tags[\"env\"]]\n}\n\nmodule \"cloud-storage\" {\n  source  = \"terraform-google-modules/cloud-storage/google\"\n  version = \"3.3.0\"\n  # insert the 3 required variables here\n  names      = [var.bucket_name]\n  prefix     = \"demo\"\n  project_id = var.project_id\n  location   = var.location\n  lifecycle_rules = [{\n    condition = {\n      age = 5\n    }\n    action = {\n      type = \"Delete\"\n    }\n    condition = {\n      age = 3\n    }\n    action = {\n      type          = \"SetStorageClass\"\n      storage_class = var.storage_class\n    }\n  }]\n}\n\n#File: variables.tf\nvariable \"project_id\" {\n  type        = string\n  description = \"GCP Project ID\"\n  default     = \"<PROJECT_ID GOES HERE>\"\n  nullable    = false\n}\n\nvariable \"gcp_region\" {\n  type        = string\n  description = \"Name GCP Region\"\n  default     = \"us-central1\"\n  nullable    = false\n}\n\nvariable \"gcp_zone\" {\n  type        = string\n  description = \"Name GCP Zone\"\n  default     = \"us-central1-a\"\n  nullable    = false\n}\n\nvariable \"bucket_name\" {\n  type        = string\n  description = \"List of bucket names with the project id\"\n}\n\nvariable \"storage_class\" {\n  type        = string\n  description = \"The storage class of the Storage Bucket to create\"\n}\n\nvariable \"vpc_network_name\" {\n  type        = string\n  description = \"Name of the VPC Network\"\n}\n\nvariable \"vm_instance_name\" {\n  type        = string\n  description = \"Name of the VM Instance\"\n}\n\nvariable \"vm_instance_machine_type\" {\n  type        = string\n  description = \"Machine type for the VM Instance\"\n  sensitive   = true\n}\n\nvariable \"resoucre_tags\" {\n  type        = map(string)\n  description = \"Tags to set for all VM Resources\"\n}\n\nvariable \"location\" {\n  type        = string\n  description = \"Bucket Location Continent\"\n  default     = \"US\"\n}\n"}]}
{"messages": [{"role": "user", "content": "Create a Google Compute VPC network with a specified name and disable automatic subnet creation. Create a Google Compute subnetwork within that network, providing a unique name, region, and CIDR range. Set up a firewall rule to allow SSH access on port 22 from any IP address, and tag instances for SSH access. Define variables for network name, subnet name, subnet CIDR, and region. Output the VPC network name, ID, subnet name, ID, and the subnet's self-link."}, {"role": "assistant", "content": "\n#File: main.tf\nresource \"google_compute_network\" \"vpc_network\" {\n  name                    = var.network_name\n  auto_create_subnetworks = false\n}\n\nresource \"google_compute_subnetwork\" \"subnet\" {\n  name          = var.subnet_name\n  network       = google_compute_network.vpc_network.id\n  region        = var.region\n  ip_cidr_range = var.subnet_cidr //This is within standard private IP ranges, and allows for\n                                //only 255 hosts since its for a demo project.\n}\n\nresource \"google_compute_firewall\" \"allow_ssh\" {\n  name    = \"allow-ssh\"\n  network = var.network_name\n\n  allow {\n    protocol = \"tcp\"\n    ports    = [\"22\"]\n  }\n\n  source_ranges = [\"0.0.0.0/0\"] # Allows SSH from any IP. Adjust for stricter access control.\n  target_tags   = [\"allow-ssh\"] # Add this tag to instances that should allow SSH access.\n  depends_on = [ google_compute_network.vpc_network ]\n}\n\n#File: outputs.tf\noutput \"vpc_network_name\" {\n  description = \"The name of the VPC network\"\n  value       = google_compute_network.vpc_network.name\n}\n\n\noutput \"vpc_network_id\" {\n  description = \"The ID of the VPC network\"\n  value       = google_compute_network.vpc_network.id\n}\n\noutput \"subnet_name\" {\n  description = \"The name of the subnet\"\n  value       = var.subnet_name\n}\n\noutput \"subnet_id\" {\n  description = \"The ID of the subnet\"\n  value       = google_compute_subnetwork.subnet.id\n}\n\noutput \"subnet_self_link\" {\n  description = \"The self-link of the subnet\"\n  value       = google_compute_subnetwork.subnet.self_link\n}\n\n#File: variables.tf\nvariable \"network_name\" {\n  description = \"The name of the network\"\n  type        = string\n}\n\nvariable \"subnet_name\" {\n  description = \"The name of the subnet\"\n  type        = string\n}\n\nvariable \"subnet_cidr\" {\n  description = \"The CIDR block for the subnet\"\n  type        = string\n}\n\nvariable \"region\" {\n  description = \"The region for your network\"\n  type = string\n}\n"}]}
{"messages": [{"role":"user","content":"Create a Amazon Elastic Kubernetes Service (Amazon EKS)."},{"role":"assistant","content":"provider \"aws\"{\r\n  \r\n}\r\n\r\n# Environment\r\nvariable \"env\" {\r\n  type = string\r\n}\r\n\r\n# Type\r\nvariable \"type\" {\r\n  type = string\r\n}\r\n\r\n# Stack name\r\nvariable \"project_name\" {\r\n  type = string\r\n}\r\n\r\n# VPC CIDR\r\nvariable \"vpc_cidr\" {\r\n  type    = string\r\n  default = \"10.0.0.0/16\"\r\n}\r\n\r\n# CIDR of public subet in AZ1 \r\nvariable \"public_subnet_az1_cidr\" {\r\n  type    = string\r\n  default = \"10.0.1.0/24\"\r\n}\r\n\r\n# CIDR of public subet in AZ2\r\nvariable \"public_subnet_az2_cidr\" {\r\n  type    = string\r\n  default = \"10.0.2.0/24\"\r\n}\r\n\r\n\r\n# Creating VPC\r\nresource \"aws_vpc\" \"eks_vpc\" {\r\n  cidr_block           = var.vpc_cidr\r\n  instance_tenancy     = \"default\"\r\n  enable_dns_hostnames = true\r\n\r\n  tags = {\r\n    Name = \"${var.project_name}-vpc\"\r\n    Env  = var.env\r\n    Type = var.type\r\n  }\r\n}\r\n\r\n# Creating Internet Gateway and attach it to VPC\r\nresource \"aws_internet_gateway\" \"eks_internet_gateway\" {\r\n  vpc_id = aws_vpc.eks_vpc.id\r\n\r\n  tags = {\r\n    Name = \"${var.project_name}-igw\"\r\n    Env  = var.env\r\n    Type = var.type\r\n  }\r\n}\r\n\r\n# Using data source to get all Avalablility Zones in region\r\ndata \"aws_availability_zones\" \"available_zones\" {}\r\n\r\n# Creating Public Subnet AZ1\r\nresource \"aws_subnet\" \"public_subnet_az1\" {\r\n  vpc_id                  = aws_vpc.eks_vpc.id\r\n  cidr_block              = var.public_subnet_az1_cidr\r\n  availability_zone       = data.aws_availability_zones.available_zones.names[0]\r\n  map_public_ip_on_launch = true\r\n\r\n  tags = {\r\n    Name = \"Public Subnet AZ1\"\r\n    Env  = var.env\r\n    Type = var.type\r\n  }\r\n}\r\n\r\n# Creating Public Subnet AZ2\r\nresource \"aws_subnet\" \"public_subnet_az2\" {\r\n  vpc_id                  = aws_vpc.eks_vpc.id\r\n  cidr_block              = var.public_subnet_az2_cidr\r\n  availability_zone       = data.aws_availability_zones.available_zones.names[1]\r\n  map_public_ip_on_launch = true\r\n\r\n  tags = {\r\n    Name = \"Public Subnet AZ2\"\r\n    Env  = var.env\r\n    Type = var.type\r\n  }\r\n}\r\n\r\n# Creating Route Table and add Public Route\r\nresource \"aws_route_table\" \"public_route_table\" {\r\n  vpc_id = aws_vpc.eks_vpc.id\r\n\r\n  route {\r\n    cidr_block = \"0.0.0.0/0\"\r\n    gateway_id = aws_internet_gateway.eks_internet_gateway.id\r\n  }\r\n\r\n  tags = {\r\n    Name = \"Public Route Table\"\r\n    Env  = var.env\r\n    Type = var.type\r\n  }\r\n}\r\n\r\n# Associating Public Subnet in AZ1 to route table\r\nresource \"aws_route_table_association\" \"public_subnet_az1_route_table_association\" {\r\n  subnet_id      = aws_subnet.public_subnet_az1.id\r\n  route_table_id = aws_route_table.public_route_table.id\r\n}\r\n\r\n# Associating Public Subnet in AZ2 to route table\r\nresource \"aws_route_table_association\" \"public_subnet_az2_route_table_association\" {\r\n  subnet_id      = aws_subnet.public_subnet_az2.id\r\n  route_table_id = aws_route_table.public_route_table.id\r\n}\r\n\r\n"}]}
{"messages": [{"role": "user", "content": "Create a local backend configuration for Terraform state management. Generate a Google service account designated as a workload client. Launch multiple Google Compute Engine instances with automatic public IP addresses based on the specified count and zone. Set up SSH access through predefined firewall rules, restricting connections to allowed internal CIDR ranges. Define output variables for the private IP addresses of the instances and their associated network tags."}, {"role": "assistant", "content": "\n#File: backend.tf\nterraform {\n  backend \"local\" {\n    path = \"../terraform.tfstate\"\n  }\n}\n\n#File: main.tf\n################################################################################\n# Create Service Account to be assigned to Workload client\n################################################################################\nresource \"google_service_account\" \"service_account_workload\" {\n  account_id   = \"${var.name_prefix}-wkld-sa-${var.resource_tag}\"\n  display_name = \"${var.name_prefix}-wkld-sa-${var.resource_tag}\"\n}\n\n\n################################################################################\n# Create workload instance host with automatic public IP association\n################################################################################\nresource \"google_compute_instance\" \"server_host\" {\n  count        = var.workload_count\n  name         = \"${var.name_prefix}-workload-${count.index + 1}-${var.resource_tag}\"\n  machine_type = var.instance_type\n  zone         = element(var.zones, count.index)\n  tags         = [\"zscc-workload\"]\n  network_interface {\n    subnetwork = var.subnet\n  }\n  metadata = {\n    ssh-keys = \"ubuntu:${var.ssh_key}\"\n  }\n  metadata_startup_script = \"sudo apt install net-tools\"\n  boot_disk {\n    initialize_params {\n      image = var.workload_image_name\n      type  = \"pd-ssd\"\n      size  = \"10\"\n    }\n  }\n  service_account {\n    email  = google_service_account.service_account_workload.email\n    scopes = [\"cloud-platform\"]\n  }\n}\n\n################################################################################\n# Create pre-defined GCP Firewall rules for Workload\n################################################################################\nresource \"google_compute_firewall\" \"ssh_intranet_workload\" {\n  name    = \"${var.name_prefix}-fw-ssh-for-workload-${var.resource_tag}\"\n  network = var.vpc_network\n  allow {\n    protocol = \"tcp\"\n    ports    = [\"22\"]\n  }\n  source_ranges           = var.allowed_ssh_from_internal_cidr\n  target_service_accounts = [google_service_account.service_account_workload.email]\n}\n\n#File: outputs.tf\noutput \"private_ip\" {\n  description = \"Instance Private IP\"\n  value       = google_compute_instance.server_host[*].network_interface[0].network_ip\n}\n\noutput \"workload_network_tag\" {\n  description = \"Network tag as the source of a route rule\"\n  value       = google_compute_instance.server_host[0].tags\n}\n\n#File: variables.tf\nvariable \"name_prefix\" {\n  type        = string\n  description = \"A prefix to associate to all the workload module resources\"\n  default     = null\n}\n\nvariable \"resource_tag\" {\n  type        = string\n  description = \"A tag to associate to all workload module resources\"\n  default     = null\n}\n\nvariable \"subnet\" {\n  type        = string\n  description = \"A subnet the workload host is in\"\n}\n\nvariable \"instance_type\" {\n  type        = string\n  description = \"The bastion host instance type\"\n  default     = \"e2-micro\"\n}\n\nvariable \"ssh_key\" {\n  type        = string\n  description = \"A public key uploaded to the bastion instance\"\n}\n\nvariable \"zones\" {\n  type        = list(string)\n  description = \"The zone that the machine should be created in. If it is not provided, the provider zone is used\"\n}\n\nvariable \"allowed_ssh_from_internal_cidr\" {\n  type        = list(string)\n  description = \"CIDR allowed to ssh the bastion host from Intranet\"\n}\n\nvariable \"workload_image_name\" {\n  type        = string\n  description = \"Custom image name to be used for deploying bastion/workload appliances\"\n  default     = \"ubuntu-os-cloud/ubuntu-2204-lts\"\n}\n\nvariable \"vpc_network\" {\n  type        = string\n  description = \"Workload VPC network\"\n}\n\nvariable \"workload_count\" {\n  type        = number\n  description = \"The number of Workload VMs to deploy\"\n  default     = 1\n  validation {\n    condition     = var.workload_count >= 1 && var.workload_count <= 250\n    error_message = \"Input workload_count must be a whole number between 1 and 250.\"\n  }\n}\n\n#File: versions.tf\nterraform {\n  required_providers {\n    google = {\n      source  = \"hashicorp/google\"\n      version = \">= 5.11.0\"\n    }\n  }\n  required_version = \">= 0.13.7, < 2.0.0\"\n}\n"}]}
{"messages": [{"role":"user","content":"Define a conditional creation of AWS Lambda and EventBridge resources based on the variables create and a custom boolean putin_khuylo. Provide a Lambda function for managing CloudWatch log retention with configurable memory, timeout, environment variables, and IAM policies, and sets up an EventBridge schedule to trigger the Lambda periodically. The resources support tagging, customizable roles, and flexible packaging options, ensuring modular and controlled deployment."},{"role":"assistant","content":"locals {\r\n  create = var.create && var.putin_khuylo\r\n}\r\n\r\nvariable \"create\" {\r\n  description = \"Controls whether to create resources\"\r\n  type        = bool\r\n  default     = true\r\n}\r\n\r\nvariable \"create_package\" {\r\n  description = \"Whether to create Lambda function package (requires Python)\"\r\n  type        = string\r\n  default     = false\r\n}\r\n\r\n# Tags\r\nvariable \"tags\" {\r\n  description = \"A map of tags to assign to all resources\"\r\n  type        = map(string)\r\n  default     = {}\r\n}\r\n\r\nvariable \"lambda_tags\" {\r\n  description = \"A map of tags to assign to all resources created by Lambda module\"\r\n  type        = map(string)\r\n  default     = {}\r\n}\r\n\r\nvariable \"eventbridge_tags\" {\r\n  description = \"A map of tags to assign to all resources created by EventBridge module\"\r\n  type        = map(string)\r\n  default     = {}\r\n}\r\n\r\n# Lambda\r\nvariable \"name\" {\r\n  description = \"Lambda function name\"\r\n  type        = string\r\n  default     = \"cloudwatch-log-retention-manager\"\r\n}\r\n\r\nvariable \"description\" {\r\n  description = \"Description of Lambda function\"\r\n  type        = string\r\n  default     = \"CloudWatch Log Retention Manager\"\r\n}\r\n\r\nvariable \"source_path\" {\r\n  description = \"Source path object with instructions on how to build Lambda function package\"\r\n  type        = any\r\n  default     = null\r\n}\r\n\r\nvariable \"memory_size\" {\r\n  description = \"Amount of memory in MB your Lambda Function can use at runtime. Valid value between 128 MB to 10,240 MB (10 GB), in 64 MB increments.\"\r\n  type        = number\r\n  default     = 256\r\n}\r\n\r\nvariable \"timeout\" {\r\n  description = \"The amount of time your Lambda Function has to run in seconds.\"\r\n  type        = number\r\n  default     = 30\r\n}\r\n\r\nvariable \"environment_variables\" {\r\n  description = \"A map that defines environment variables for the Lambda Function.\"\r\n  type        = map(string)\r\n  default     = {}\r\n}\r\n\r\nvariable \"cloudwatch_logs_retention_in_days\" {\r\n  description = \"Specifies the number of days you want to retain log events in the specified log group. Possible values are: 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, and 3653.\"\r\n  type        = number\r\n  default     = 90\r\n}\r\n\r\n# EventBridge\r\nvariable \"eventbridge_role_name\" {\r\n  description = \"Name of EventBridge IAM role to create\"\r\n  type        = string\r\n  default     = null\r\n}\r\n\r\nvariable \"schedule_expression\" {\r\n  description = \"Schedule expression for EventBridge to trigger Lambda function. Can be cron() or rate().\"\r\n  type        = string\r\n  default     = \"rate(12 hours)\"\r\n}\r\n\r\nvariable \"role_arn\" {\r\n  description = \"ARN of IAM Role used by EventBridge to invoke Lambda Function\"\r\n  type        = string\r\n  default     = null\r\n}\r\n\r\nvariable \"putin_khuylo\" {\r\n  description = \"Do you agree that Putin doesn't respect Ukrainian sovereignty and territorial integrity? More info: https://en.wikipedia.org/wiki/Putin_khuylo!\"\r\n  type        = bool\r\n  default     = true\r\n}\r\n\r\n\r\n\r\nmodule \"lambda_function\" {\r\n  source  = \"terraform-aws-modules/lambda/aws\"\r\n\r\n  create = local.create\r\n\r\n  function_name = var.name\r\n  description   = var.description\r\n  handler       = \"log_retention_manager.lambda_handler\"\r\n  runtime       = \"python3.10\"\r\n  publish       = true\r\n\r\n  memory_size           = var.memory_size\r\n  timeout               = var.timeout\r\n  environment_variables = var.environment_variables\r\n\r\n  cloudwatch_logs_retention_in_days = var.cloudwatch_logs_retention_in_days\r\n\r\n  create_package = var.create_package\r\n  source_path    = var.source_path != null ? var.source_path : \"${path.module}/src/log_retention_manager.py\"\r\n\r\n  local_existing_package = var.create_package ? null : \"${path.module}/dist/log_retention_manager.zip\"\r\n\r\n  attach_policy_statements = true\r\n  policy_statements = {\r\n    readonly = {\r\n      effect = \"Allow\"\r\n      actions = [\r\n        \"ec2:DescribeRegions\",\r\n        \"logs:DescribeLogGroups\"\r\n      ]\r\n      resources = [\"*\"]\r\n    },\r\n    logs_retention_policy = {\r\n      effect    = \"Allow\",\r\n      actions   = [\"logs:PutRetentionPolicy\"],\r\n      resources = [\"*\"]\r\n    }\r\n  }\r\n\r\n  create_current_version_allowed_triggers = false\r\n  allowed_triggers = {\r\n    scheduled = {\r\n      principal  = \"scheduler.amazonaws.com\"\r\n      source_arn = module.eventbridge.eventbridge_schedule_arns[\"lambda-${var.name}\"]\r\n    }\r\n  }\r\n\r\n  tags = merge(var.tags, var.lambda_tags)\r\n}\r\n\r\n########################\r\n# EventBridge Schedules\r\n########################\r\nmodule \"eventbridge\" {\r\n  source  = \"terraform-aws-modules/eventbridge/aws\"\r\n\r\n  create = local.create\r\n\r\n  create_bus  = false\r\n  create_role = var.role_arn == null\r\n\r\n  role_name = var.eventbridge_role_name\r\n\r\n  attach_lambda_policy = true\r\n  lambda_target_arns   = [module.lambda_function.lambda_function_arn]\r\n\r\n  schedules = {\r\n    \"lambda-${var.name}\" = {\r\n      description         = \"Trigger Lambda ${var.name}\"\r\n      schedule_expression = var.schedule_expression\r\n      arn                 = module.lambda_function.lambda_function_arn\r\n      role_arn            = var.role_arn\r\n    }\r\n  }\r\n\r\n  tags = merge(var.tags, var.eventbridge_tags)\r\n}\r\n"}]}
{"messages": [{"role": "user", "content": "Create an Azure RM provider in your Terraform configuration file. Specify the required Azure RM provider and its version in the 'required_providers' block. Define a 'features' block within the provider configuration. Ensure to separate your variables in a dedicated `variables.tf` file for clarity. Validate the configuration by running `terraform init` to install the provider."}, {"role": "assistant", "content": "\n#File: main.tf\nterraform {\n  required_providers {\n    azurerm = {\n      source  = \"hashicorp/azurerm\"\n      version = \"~>2.0\"\n    }\n  }\n}\n\nprovider \"azurerm\" {\n  features {}\n}\n\n#File: variables.tf\n"}]}
{"messages": [{"role": "user", "content": "Create a variable for the company name in Terraform. Define variables for the application name, environment, and Azure region where resources will be created. Generate a resource group named using the company and application name combined with the environment. Create a virtual network and subnets for VMs and the Bastion host service, specifying CIDR ranges for each. Deploy a Bastion host with a public IP address for secure connectivity."}, {"role": "assistant", "content": "\n#File: app-variables.tf\n#############################\n## Application - Variables ##\n#############################\n\n# company name \nvariable \"company\" {\n  type        = string\n  description = \"This variable defines thecompany name used to build resources\"\n}\n\n# application name \nvariable \"app_name\" {\n  type        = string\n  description = \"This variable defines the application name used to build resources\"\n}\n\n# environment\nvariable \"environment\" {\n  type        = string\n  description = \"This variable defines the environment to be built\"\n}\n\n# azure region\nvariable \"location\" {\n  type        = string\n  description = \"Azure region where the resource group will be created\"\n  default     = \"north europe\"\n}\n#File: bastion-host-main.tf\n#########################\n## Bastion Host - Main ##\n#########################\n\n# Create a Public IP for the Bastion Host\nresource \"azurerm_public_ip\" \"bastion\" {\n  name                = \"kopi-bastion-pip\"\n  resource_group_name = azurerm_resource_group.network-rg.name\n  location            = azurerm_resource_group.network-rg.location  \n  allocation_method   = \"Static\"\n  sku                 = \"Standard\"\n}\n\n# Create the Bastion Host Service\nresource \"azurerm_bastion_host\" \"bastion\" {\n  name                = var.bastion_host_name\n  resource_group_name = azurerm_resource_group.network-rg.name\n  location            = azurerm_resource_group.network-rg.location\n\n  sku         = var.sku\n  scale_units = var.scale_units\n\n  ip_configuration {\n    name                 = \"kopi-bastion-host-ip-cfg\"\n    subnet_id            = azurerm_subnet.bastion-subnet.id\n    public_ip_address_id = azurerm_public_ip.bastion.id\n  }\n}\n#File: bastion-host-variables.tf\n##############################\n## Bastion Host - Variables ##\n##############################\n\nvariable \"bastion_host_name\" {\n  type        = string\n  description = \"Azure Bastion Host Service Name\"\n  default     = \"kopi-bastion-host\"\n}\n\nvariable \"sku\" {\n  type        = string\n  description = \"Azure Bastion Host Service SKU\"\n  default     = \"Basic\" // Basic or Standard\n}\n\nvariable \"scale_units\" {\n  type        = string\n  description = \"Azure Bastion Host Service Scale Units\"\n  default     = 2 // Basic = 2 or Standard = 2 to 50\n}\n\n#File: network-main.tf\n####################\n## Network - Main ##\n####################\n\n# Create a resource group for network\nresource \"azurerm_resource_group\" \"network-rg\" {\n  name     = \"${lower(replace(var.company,\" \",\"-\"))}-${lower(replace(var.app_name,\" \",\"-\"))}-${var.environment}-rg\"\n  location = var.location\n\n  tags = {\n    application = var.app_name\n    environment = var.environment\n  }\n}\n\n# Create the network VNET\nresource \"azurerm_virtual_network\" \"network-vnet\" {\n  name                = \"${lower(replace(var.company,\" \",\"-\"))}-${lower(replace(var.app_name,\" \",\"-\"))}-${var.environment}-vnet\"\n  address_space       = [var.network-vnet-cidr]\n  resource_group_name = azurerm_resource_group.network-rg.name\n  location            = azurerm_resource_group.network-rg.location\n\n  tags = {\n    application = var.app_name\n    environment = var.environment\n  }\n}\n\n# Create the VM subnet\nresource \"azurerm_subnet\" \"vm-subnet\" {\n  name                 = \"${lower(replace(var.company,\" \",\"-\"))}-${lower(replace(var.app_name,\" \",\"-\"))}-vm-${var.environment}-subnet\"\n  address_prefixes     = [var.network-vm-subnet-cidr]\n  virtual_network_name = azurerm_virtual_network.network-vnet.name\n  resource_group_name  = azurerm_resource_group.network-rg.name\n}\n\n# Create a subnet for Bastion Host // DO NOT Rename\nresource \"azurerm_subnet\" \"bastion-subnet\" {\n  name                 = \"AzureBastionSubnet\"\n  address_prefixes     = [var.network-bastion-subnet-cidr]\n  virtual_network_name = azurerm_virtual_network.network-vnet.name\n  resource_group_name  = azurerm_resource_group.network-rg.name\n}\n#File: network-output.tf\n######################\n## Network - Output ##\n######################\n\noutput \"network_resource_group_id\" {\n  value = azurerm_resource_group.network-rg.id\n}\n\noutput \"network_vnet_id\" {\n  value = azurerm_virtual_network.network-vnet.id\n}\n\noutput \"network_vm_subnet_id\" {\n  value = azurerm_subnet.vm-subnet.id\n}\n\noutput \"network_bastion_subnet_id\" {\n  value = azurerm_subnet.bastion-subnet.id\n}\n\n#File: network-variables.tf\n##############################\n## Core Network - Variables ##\n##############################\n\nvariable \"network-vnet-cidr\" {\n  type        = string\n  description = \"The CIDR of the network VNET\"\n}\n\nvariable \"network-vm-subnet-cidr\" {\n  type        = string\n  description = \"The CIDR for the virtual machine subnet\"\n}\n\nvariable \"network-bastion-subnet-cidr\" {\n  type        = string\n  description = \"The CIDR for the bastion service subnet\"\n}\n#File: provider-main.tf\n###########################\n## Azure Provider - Main ##\n###########################\n\n# Define Terraform provider\nterraform {\n  required_version = \"~> 1.3\"\n}\n\n# Configure the Azure provider\nprovider \"azurerm\" { \n  features {}  \n  environment     = \"public\"\n  subscription_id = var.azure-subscription-id\n  client_id       = var.azure-client-id\n  client_secret   = var.azure-client-secret\n  tenant_id       = var.azure-tenant-id\n}\n\n#File: provider-variables.tf\n################################\n## Azure Provider - Variables ##\n################################\n\n# Azure authentication variables\n\nvariable \"azure-subscription-id\" {\n  type        = string\n  description = \"Azure Subscription ID\"\n}\n\nvariable \"azure-client-id\" {\n  type        = string\n  description = \"Azure Client ID\"\n}\n\nvariable \"azure-client-secret\" {\n  type        = string\n  description = \"Azure Client Secret\"\n}\n\nvariable \"azure-tenant-id\" {\n  type        = string\n  description = \"Azure Tenant ID\"\n}\n"}]}
{"messages": [{"role": "user", "content": "Create a random ID for unique resource naming. Create an Azure resource group for JMeter load testing in the specified location with appropriate tags. Set up a virtual network and a subnet for the JMeter instances, enabling service delegation for container instances. Create a storage account and a file share for JMeter results. Launch JMeter worker containers and a controller container, specifying resource configurations and commands for execution."}, {"role": "assistant", "content": "\n#File: main.tf\nlocals {\n  tags = {\n    CreatedBy       = \"${var.CREATED_BY}\"\n  }\n}\n\nresource \"random_id\" \"random\" {\n  byte_length = 4\n}\n\nresource \"azurerm_resource_group\" \"jmeter_rg\" {\n  name     = \"jmeter-load-testing-rg\"\n  location = var.LOCATION\n  tags     = local.tags\n}\n\nresource \"azurerm_virtual_network\" \"jmeter_vnet\" {\n  name                = \"jmeter-load-testing-vnet\"\n  location            = azurerm_resource_group.jmeter_rg.location\n  resource_group_name = azurerm_resource_group.jmeter_rg.name\n  address_space       = [\"${var.VNET_ADDRESS_SPACE}\"]\n  tags     = local.tags\n}\n\nresource \"azurerm_subnet\" \"jmeter_subnet\" {\n  name                 = \"jmeter-load-testing-subnet\"\n  resource_group_name  = azurerm_resource_group.jmeter_rg.name\n  virtual_network_name = azurerm_virtual_network.jmeter_vnet.name\n  address_prefix       = var.SUBNET_ADDRESS_PREFIX\n\n  delegation {\n    name = \"delegation\"\n\n    service_delegation {\n      name    = \"Microsoft.ContainerInstance/containerGroups\"\n      actions = [\"Microsoft.Network/virtualNetworks/subnets/action\"]\n    }\n  }\n\n  service_endpoints = [\"Microsoft.Storage\"]\n}\n\nresource \"azurerm_network_profile\" \"jmeter_net_profile\" {\n  name                = \"jmeter-load-testing-netprofile\"\n  location            = azurerm_resource_group.jmeter_rg.location\n  resource_group_name = azurerm_resource_group.jmeter_rg.name\n\n  container_network_interface {\n    name = \"jmeter-load-testing-cnic\"\n\n    ip_configuration {\n      name      = \"jmeter-load-testing-ipconfig\"\n      subnet_id = azurerm_subnet.jmeter_subnet.id\n    }\n  }\n  tags     = local.tags\n}\n\nresource \"azurerm_storage_account\" \"jmeter_storage\" {\n  name                = \"jmeter${random_id.random.hex}\"\n  resource_group_name = azurerm_resource_group.jmeter_rg.name\n  location            = azurerm_resource_group.jmeter_rg.location\n\n  account_tier             = \"Standard\"\n  account_replication_type = \"LRS\"\n\n  network_rules {\n    default_action             = \"Allow\"\n    virtual_network_subnet_ids = [\"${azurerm_subnet.jmeter_subnet.id}\"]\n  }\n  tags     = local.tags\n}\n\nresource \"azurerm_storage_share\" \"jmeter_share\" {\n  name                 = \"jmeter\"\n  storage_account_name = azurerm_storage_account.jmeter_storage.name\n  quota                = var.JMETER_STORAGE_QUOTA_GIGABYTES\n}\n\nresource \"azurerm_container_group\" \"jmeter_workers\" {\n  count               = var.JMETER_WORKERS_COUNT\n  name                = \"jmeter-load-testing-worker-${count.index}\"\n  location            = azurerm_resource_group.jmeter_rg.location\n  resource_group_name = azurerm_resource_group.jmeter_rg.name\n\n  ip_address_type = \"private\"\n  os_type         = \"Linux\"\n\n  network_profile_id = azurerm_network_profile.jmeter_net_profile.id\n\n  container {\n    name   = \"jmeter\"\n    image  = var.JMETER_DOCKER_IMAGE\n    cpu    = var.JMETER_WORKER_CPU\n    memory = var.JMETER_WORKER_MEMORY\n\n    ports {\n      port     = var.JMETER_DOCKER_PORT\n      protocol = \"TCP\"\n    }\n\n    volume {\n      name                 = \"jmeter\"\n      mount_path           = \"/jmeter\"\n      read_only            = true\n      storage_account_name = azurerm_storage_account.jmeter_storage.name\n      storage_account_key  = azurerm_storage_account.jmeter_storage.primary_access_key\n      share_name           = azurerm_storage_share.jmeter_share.name\n    }\n\n    commands = [\n      \"/bin/sh\",\n      \"-c\",\n      \"cp -r /jmeter/* .; /entrypoint.sh -s -J server.rmi.ssl.disable=true\",\n    ]\n  }\n  tags     = local.tags\n}\n\nresource \"azurerm_container_group\" \"jmeter_controller\" {\n  name                = \"jmeter-load-testing-controller\"\n  location            = azurerm_resource_group.jmeter_rg.location\n  resource_group_name = azurerm_resource_group.jmeter_rg.name\n\n  ip_address_type = \"private\"\n  os_type         = \"Linux\"\n\n  network_profile_id = azurerm_network_profile.jmeter_net_profile.id\n\n  restart_policy = \"Never\"\n\n  container {\n    name   = \"jmeter\"\n    image  = var.JMETER_DOCKER_IMAGE\n    cpu    = var.JMETER_CONTROLLER_CPU\n    memory = var.JMETER_CONTROLLER_MEMORY\n\n    ports {\n      port     = var.JMETER_DOCKER_PORT\n      protocol = \"TCP\"\n    }\n\n    volume {\n      name                 = \"jmeter\"\n      mount_path           = \"/jmeter\"\n      read_only            = false\n      storage_account_name = azurerm_storage_account.jmeter_storage.name\n      storage_account_key  = azurerm_storage_account.jmeter_storage.primary_access_key\n      share_name           = azurerm_storage_share.jmeter_share.name\n    }\n\n    commands = [\n      \"/bin/sh\",\n      \"-c\",\n      \"cd /jmeter; /entrypoint.sh -n -J server.rmi.ssl.disable=true -t ${var.JMETER_JMX_FILE} -l ${var.JMETER_RESULTS_FILE} -e -o ${var.JMETER_DASHBOARD_FOLDER} -R ${join(\",\", \"${azurerm_container_group.jmeter_workers.*.ip_address}\")} ${var.JMETER_EXTRA_CLI_ARGUMENTS}\",\n    ]\n  }\n  tags     = local.tags\n}\n#File: output.tf\noutput \"resource_group_name\" {\n  value = \"${azurerm_resource_group.jmeter_rg.name}\"\n}\n\noutput \"storage_account_name\" {\n  value = \"${azurerm_storage_account.jmeter_storage.name}\"\n}\n\noutput \"storage_account_key\" {\n  value     = \"${azurerm_storage_account.jmeter_storage.primary_access_key}\"\n  sensitive = true\n}\n\noutput \"storage_file_share_name\" {\n  value = \"${azurerm_storage_share.jmeter_share.name}\"\n}\n\noutput \"storage_file_share_url\" {\n  value = \"${azurerm_storage_share.jmeter_share.url}\"\n}\n\noutput \"jmeter_controller_name\" {\n  value = \"${azurerm_container_group.jmeter_controller.name}\"\n}\n\noutput \"jmeter_controller_ip\" {\n  value = \"${azurerm_container_group.jmeter_controller.ip_address}\"\n}\n\noutput \"jmeter_workers_names\" {\n  value = \"${join(\",\", \"${azurerm_container_group.jmeter_workers.*.name}\")}\"\n}\n\noutput \"jmeter_workers_ip_list\" {\n  value = [\"${azurerm_container_group.jmeter_workers.*.ip_address}\"]\n}\n\noutput \"jmeter_workers_ips\" {\n  value = \"${join(\",\", \"${azurerm_container_group.jmeter_workers.*.ip_address}\")}\"\n}\n\noutput \"jmeter_results_file\" {\n  value = \"${var.JMETER_RESULTS_FILE}\"\n}\n\noutput \"jmeter_dashboard_folder\" {\n  value = \"${var.JMETER_DASHBOARD_FOLDER}\"\n}\n\n#File: provider.tf\nprovider \"azurerm\" {\n  version = \"=2.26.0\"\n  features {}\n}\n\nprovider \"random\" {\n  version = \"=2.2.1\"\n}\n\n#File: variables.tf\nvariable \"LOCATION\" {\n  type    = string\n  default = \"westeurope\"\n}\n\nvariable \"VNET_ADDRESS_SPACE\" {\n  type    = string\n  default = \"10.0.0.0/16\"\n}\n\nvariable \"SUBNET_ADDRESS_PREFIX\" {\n  type    = string\n  default = \"10.0.0.0/24\"\n}\n\nvariable \"JMETER_WORKERS_COUNT\" {\n  type    = number\n  default = 1\n}\n\nvariable \"JMETER_WORKER_CPU\" {\n  type    = string\n  default = \"1.0\"\n}\n\nvariable \"JMETER_WORKER_MEMORY\" {\n  type    = string\n  default = \"1.0\"\n}\n\nvariable \"JMETER_CONTROLLER_CPU\" {\n  type    = string\n  default = \"1.0\"\n}\n\nvariable \"JMETER_CONTROLLER_MEMORY\" {\n  type    = string\n  default = \"1\"\n}\n\nvariable \"JMETER_DOCKER_IMAGE\" {\n  type    = string\n  default = \"dishanr/jmeter\"\n}\n\nvariable \"JMETER_DOCKER_PORT\" {\n  type    = number\n  default = 1099\n}\n\nvariable \"JMETER_STORAGE_QUOTA_GIGABYTES\" {\n  type    = number\n  default = 1\n}\n\nvariable \"JMETER_RESULTS_FILE\" {\n  type    = string\n  default = \"results.jtl\"\n}\n\nvariable \"JMETER_DASHBOARD_FOLDER\" {\n  type    = string\n  default = \"dashboard\"\n}\n\nvariable \"CREATED_BY\" {\n  type    = string\n  default = \"dishanr@99x.io\"\n}\n\nvariable \"JMETER_EXTRA_CLI_ARGUMENTS\" {\n  type    = string\n    default = \" \"\n}\n\nvariable \"JMETER_JMX_FILE\" {\n  type        = string\n  description = \"JMX file\"\n}\n\nvariable \"JMETER_ACR_NAME\" {\n  type    = string\n}\n\nvariable \"JMETER_ACR_RESOURCE_GROUP_NAME\" {\n  type    = string\n}"}]}
{"messages": [{"role": "user", "content": "Create a Google Cloud VPC network with the specified name and description using the `google_compute_network` resource. Disable automatic subnet creation by setting `auto_create_subnetworks` to false. Then, create a subnet within that VPC by using the `google_compute_subnetwork` resource, providing the subnet name, description, region, network reference, and CIDR block. Define output variables to capture the self-links and names of both the VPC and subnet for future reference. Ensure that the variables meet the specified name and description requirements."}, {"role": "assistant", "content": "\n#File: main.tf\n# setup google terraform provider\nterraform {\n  required_providers {\n    google = {\n      source  = \"hashicorp/google\"\n      version = \"4.74.0\"\n    }\n  }\n}\n\n# VPC - https://registry.terraform.io/providers/hashicorp/google/4.74.0/docs/resources/compute_network\nresource \"google_compute_network\" \"vpc\" {\n  name        = var.vpc_name\n  description = var.vpc_description\n\n  # the network is created in \"custom subnet mode\"\n  # we will explicitly connect subnetwork resources below using google_compute_subnetwork resource\n  auto_create_subnetworks = \"false\"\n}\n\n# Subnet - https://registry.terraform.io/providers/hashicorp/google/4.74.0/docs/resources/compute_subnetwork\nresource \"google_compute_subnetwork\" \"subnet\" {\n  name          = var.subnet_name\n  description   = var.subnet_description\n  region        = var.region\n  network       = google_compute_network.vpc.name\n  ip_cidr_range = var.cidrBlock\n}\n#File: outputs.tf\noutput \"vpc_self_link\" {\n  description = \"The URI of the created resource\"\n  value       = google_compute_network.vpc.self_link\n}\n\noutput \"subnet_self_link\" {\n  description = \"The URI of the created resource\"\n  value       = google_compute_subnetwork.subnet.self_link\n}\n\noutput \"vpc_name\" {\n  description = \"vpc network name\"\n  value       = google_compute_network.vpc.name\n}\n\noutput \"subnet_name\" {\n  description = \"subnet name\"\n  value       = google_compute_subnetwork.subnet.name\n}\n#File: variables.tf\nvariable \"vpc_name\" {\n  type        = string\n  description = \"Name of the resource. Provided by the client when the resource is created. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression [a-z]([-a-z0-9]*[a-z0-9])? which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.\"\n}\n\nvariable \"vpc_description\" {\n  type        = string\n  description = \"An optional description of this resource. The resource must be recreated to modify this field.\"\n  default     = \"\"\n}\n\nvariable \"subnet_name\" {\n  type        = string\n  description = \"The name of the resource, provided by the client when initially creating the resource. The name must be 1-63 characters long, and comply with RFC1035. Specifically, the name must be 1-63 characters long and match the regular expression [a-z]([-a-z0-9]*[a-z0-9])? which means the first character must be a lowercase letter, and all following characters must be a dash, lowercase letter, or digit, except the last character, which cannot be a dash.\"\n}\n\nvariable \"subnet_description\" {\n  type        = string\n  description = \"An optional description of this resource. Provide this property when you create the resource. This field can be set only at resource creation time.\"\n  default     = \"\"\n}\n\nvariable \"cidrBlock\" {\n  type        = string\n  description = \"The range of internal addresses that are owned by this subnetwork. Provide this property when you create the subnetwork. For example, 10.0.0.0/8 or 192.168.0.0/16. Ranges must be unique and non-overlapping within a network. Only IPv4 is supported.\"\n}\n\nvariable \"region\" {\n  type        = string\n  description = \"The GCP region for this subnetwork.\"\n}"}]}
{"messages": [{"role":"user","content":"Deploy a simple Lambda function using Python 3.9. Upload the ZIP file manually. Give it an execution role."},{"role":"assistant","content":"provider \"aws\" {\r\n  region = \"us-east-1\"\r\n}\r\n\r\nresource \"aws_iam_role\" \"lambda_exec\" {\r\n  name = \"lambda_exec\"\r\n\r\n  assume_role_policy = jsonencode({\r\n    Statement = [{\r\n      Action    = \"sts:AssumeRole\",\r\n      Principal = {\r\n        Service = \"lambda.amazonaws.com\"\r\n      },\r\n      Effect = \"Allow\"\r\n    }]\r\n  })\r\n}\r\n\r\nresource \"aws_lambda_function\" \"my_lambda\" {\r\n  function_name = \"example_lambda\"\r\n  handler       = \"index.handler\"\r\n  runtime       = \"python3.9\"\r\n  filename      = \"lambda.zip\"\r\n  role          = aws_iam_role.lambda_exec.arn\r\n}\r\n"}]}
{"messages": [{"role":"user","content":"Set up an AWS backend for Terraform state management by creating an S3 bucket with versioning and strict public access restrictions, alongside a DynamoDB table for state locking. Define an IAM policy that grants necessary permissions for accessing the S3 bucket, DynamoDB table, and related SSM parameters, ensuring secure and controlled access to the backend resources. Additionally, store important backend configuration details like bucket name, key prefix, and lock table name as SSM parameters for easy retrieval and management."},{"role":"assistant","content":"\r\nvariable \"aws_region\" {\r\n  type        = string\r\n  default     = \"\"\r\n  description = \"AWS region for the backend resources. Will default to the session region.\"\r\n}\r\n\r\nvariable \"s3_bucket_name\" {\r\n  type        = string\r\n  default     = null\r\n  description = \"Name for the S3 bucket created to store Terraform state.\"\r\n}\r\n\r\nvariable \"s3_key_prefix\" {\r\n  type        = string\r\n  default     = null\r\n  description = \"Key prefix for the Terraform state objects in the S3 bucket.\"\r\n}\r\n\r\nvariable \"dynamo_table_name\" {\r\n  type        = string\r\n  default     = \"terraform-locking\"\r\n  description = \"Name for the DynamocDB table created to lock Terraform state.\"\r\n}\r\n\r\nvariable \"iam_policy_name\" {\r\n  type        = string\r\n  default     = \"Terraform-S3-Backend\"\r\n  description = \"Name for the IAM policy enabling access to the backend.\"\r\n}\r\n\r\nvariable \"parameter_prefix\" {\r\n  type    = string\r\n  default = \"terraform-state\"\r\n}\r\n\r\n\r\nprovider \"aws\" {\r\n  region = var.aws_region\r\n}\r\n\r\n\r\ndata \"aws_region\" \"current\" {}\r\ndata \"aws_caller_identity\" \"current\" {}\r\n\r\nresource \"aws_s3_bucket\" \"terraform_state_bucket\" {\r\n  bucket = can(var.s3_bucket_name) ? var.s3_bucket_name : null\r\n\r\n  tags = {\r\n    Name        = \"Terraform S3 Backend - State\"\r\n    application = \"Terraform S3 Backend\"\r\n  }\r\n\r\n  lifecycle {\r\n    prevent_destroy = false\r\n  }\r\n}\r\n\r\nresource \"aws_s3_bucket_versioning\" \"terraform_state\" {\r\n  bucket = aws_s3_bucket.terraform_state_bucket.id\r\n\r\n  versioning_configuration {\r\n    status = \"Enabled\"\r\n  }\r\n}\r\n\r\nresource \"aws_s3_bucket_public_access_block\" \"terraform_state\" {\r\n  bucket = aws_s3_bucket.terraform_state_bucket.id\r\n\r\n  block_public_acls       = true\r\n  block_public_policy     = true\r\n  ignore_public_acls      = true\r\n  restrict_public_buckets = true\r\n}\r\n\r\nresource \"aws_dynamodb_table\" \"terraform_lock_table\" {\r\n  name     = var.dynamo_table_name\r\n  hash_key = \"LockID\"\r\n\r\n  billing_mode = \"PAY_PER_REQUEST\"\r\n\r\n  attribute {\r\n    name = \"LockID\"\r\n    type = \"S\"\r\n  }\r\n\r\n  tags = {\r\n    Name        = \"Terraform S3 Backend - Locking\"\r\n    application = \"Terraform S3 Backend\"\r\n  }\r\n\r\n  lifecycle {\r\n    prevent_destroy = false\r\n  }\r\n}\r\n\r\nresource \"aws_iam_policy\" \"terraform_s3_backend_policy\" {\r\n  name        = var.iam_policy_name\r\n  description = \"Terraform S3 backend access.\"\r\n\r\n  policy = jsonencode({\r\n    Version = \"2012-10-17\"\r\n    Statement = [\r\n      {\r\n        Sid    = \"Bucket\"\r\n        Effect = \"Allow\"\r\n        Action = [\r\n          \"s3:ListBucket\"\r\n        ]\r\n        Resource = aws_s3_bucket.terraform_state_bucket.arn\r\n      },\r\n      {\r\n        Sid    = \"StateAccess\"\r\n        Effect = \"Allow\"\r\n        Action = [\r\n          \"s3:GetObject\",\r\n          \"s3:PutObject\",\r\n          \"s3:DeleteObject\"\r\n        ]\r\n        Resource = var.s3_key_prefix != null ? \"${aws_s3_bucket.terraform_state_bucket.arn}/${var.s3_key_prefix}/*\" : \"${aws_s3_bucket.terraform_state_bucket.arn}/*\"\r\n      },\r\n      {\r\n        Sid    = \"Locking\"\r\n        Effect = \"Allow\"\r\n        Action = [\r\n          \"dynamodb:GetItem\",\r\n          \"dynamodb:PutItem\",\r\n          \"dynamodb:DeleteItem\"\r\n        ]\r\n        Resource = aws_dynamodb_table.terraform_lock_table.arn\r\n      },\r\n      {\r\n        Sid    = \"Parameters\"\r\n        Effect = \"Allow\"\r\n        Action = [\r\n          \"ssm:DescribeParameters\",\r\n          \"ssm:GetParameter\",\r\n          \"ssm:GetParameterHistory\",\r\n          \"ssm:GetParameters\",\r\n          \"ssm:GetParametersByPath\"\r\n        ]\r\n        Resource = \"arn:aws:ssm:${var.aws_region}:${data.aws_caller_identity.current.account_id}:parameter/${var.parameter_prefix}/*\"\r\n      }\r\n    ]\r\n  })\r\n}\r\n\r\nresource \"aws_ssm_parameter\" \"terraform_state_bucket\" {\r\n  name        = \"/${var.parameter_prefix}/s3-backend-bucket\"\r\n  type        = \"String\"\r\n  description = \"Bucket used for Terraform S3 backend deployment(s).\"\r\n  value       = aws_s3_bucket.terraform_state_bucket.id\r\n\r\n  tags = {\r\n    application = \"Terraform S3 Backend\"\r\n  }\r\n}\r\n\r\nresource \"aws_ssm_parameter\" \"terraform_state_key_prefix\" {\r\n  name        = \"/${var.parameter_prefix}/s3-backend-prefix\"\r\n  type        = \"String\"\r\n  description = \"Key prefix for Terraform state.\"\r\n  value       = var.s3_key_prefix != null ? var.s3_key_prefix : \"\"\r\n\r\n  tags = {\r\n    application = \"Terraform S3 Backend\"\r\n  }\r\n}\r\n\r\nresource \"aws_ssm_parameter\" \"terraform_lock_table\" {\r\n  name        = \"/${var.parameter_prefix}/s3-backend-lock-table\"\r\n  type        = \"String\"\r\n  description = \"DynamoDB locking table used for Terraform S3 backend deployment(s).\"\r\n  value       = aws_dynamodb_table.terraform_lock_table.id\r\n\r\n  tags = {\r\n    application = \"Terraform S3 Backend\"\r\n  }\r\n}\r\n"}]}
{"messages": [{"role":"user","content":"Set up an AWS VPC named \"lambdas-vpc\" in the \"eu-west-2\" region, including both a public and a private subnet with specified CIDR blocks. Provide an Internet Gateway for public internet access, a NAT Gateway with an Elastic IP for outbound traffic from the private subnet, and configures appropriate route tables to enable routing between subnets and the internet. Additionally, create a security group allowing inbound TLS (port 443) traffic from within the VPC and unrestricted outbound traffic."},{"role":"assistant","content":"provider \"aws\" {\r\n  region = var.region\r\n}\r\n\r\nvariable \"region\" { default = \"eu-west-2\" }\r\nvariable \"vpc_cidr\" { default = \"10.0.0.0/16\" }\r\nvariable \"vpc_name\" { default = \"lambdas-vpc\" }\r\nvariable \"private_subnet_cidr\" { default = \"10.0.0.0/24\" }\r\nvariable \"private_subnet_name\" { default = \"lambdas-private\" }\r\nvariable \"public_subnet_cidr\" { default = \"10.0.1.0/24\" }\r\nvariable \"public_subnet_name\" { default = \"lambdas-public\" }\r\nvariable \"eip_name\" {\r\n    default =\"Elastic IP for Lambdas VPC\"\r\n}\r\nvariable \"nat_gateway_name\" {\r\n    default = \"NAT Gateway for Lambdas VPC\"\r\n}\r\nvariable \"custom_tags\" {\r\n  description = \"A map of custom tags to apply to resources\"\r\n  type        = map(string)\r\n  default     = {}\r\n}\r\n\r\n//// VPC\r\nresource \"aws_vpc\" \"lambdas\" {\r\n  cidr_block = var.vpc_cidr\r\n  tags = merge(\r\n    {\r\n      Name = var.vpc_name\r\n    },\r\n    var.custom_tags\r\n  )\r\n}\r\n\r\n\r\n//// Networks\r\nresource \"aws_subnet\" \"lambdas-private\" {\r\n  cidr_block = var.private_subnet_cidr\r\n  vpc_id     = aws_vpc.lambdas.id\r\n  tags = {\r\n    Name = var.private_subnet_name\r\n  }\r\n}\r\n\r\nresource \"aws_subnet\" \"lambdas-public\" {\r\n  cidr_block = var.public_subnet_cidr\r\n  vpc_id     = aws_vpc.lambdas.id\r\n  tags = {\r\n    Name = var.public_subnet_name\r\n  }\r\n}\r\n\r\n\r\n//// Gateways\r\nresource \"aws_internet_gateway\" \"lambdas\" {\r\n  vpc_id = aws_vpc.lambdas.id\r\n}\r\n\r\nresource \"aws_nat_gateway\" \"lambdas\" {\r\n  allocation_id = aws_eip.lambdas.id\r\n  subnet_id     = aws_subnet.lambdas-public.id\r\n  tags = merge(\r\n    {\r\n      Name = var.nat_gateway_name\r\n    },\r\n    var.custom_tags\r\n  )\r\n}\r\n\r\n\r\n//// Route tables Private\r\nresource \"aws_route_table\" \"lambdas-private\" {\r\n  vpc_id = aws_vpc.lambdas.id\r\n\r\n  route {\r\n    cidr_block     = \"0.0.0.0/0\"\r\n    nat_gateway_id = aws_nat_gateway.lambdas.id\r\n  }\r\n}\r\n\r\nresource \"aws_route_table_association\" \"lambdas-private\" {\r\n  route_table_id = aws_route_table.lambdas-private.id\r\n  subnet_id      = aws_subnet.lambdas-private.id\r\n}\r\n\r\n\r\n//// Route tables Public\r\nresource \"aws_route_table\" \"lambdas-public\" {\r\n  vpc_id = aws_vpc.lambdas.id\r\n\r\n  route {\r\n    cidr_block = \"0.0.0.0/0\"\r\n    gateway_id = aws_internet_gateway.lambdas.id\r\n  }\r\n}\r\n\r\nresource \"aws_route_table_association\" \"lambdas-public\" {\r\n  route_table_id = aws_route_table.lambdas-public.id\r\n  subnet_id      = aws_subnet.lambdas-public.id\r\n}\r\n\r\n\r\n//// ElasticIp\r\nresource \"aws_eip\" \"lambdas\" {\r\n  domain = \"vpc\"\r\n  tags = merge(\r\n    {\r\n      Name = var.eip_name\r\n    },\r\n    var.custom_tags\r\n  )\r\n}\r\n\r\nresource \"aws_security_group\" \"allow_tls\" {\r\n  depends_on = [\r\n    aws_vpc.lambdas\r\n  ]\r\n  name        = \"allow_tls\"\r\n  description = \"Allow TLS inbound traffic\"\r\n  vpc_id      = aws_vpc.lambdas.id\r\n\r\n  ingress {\r\n    description      = \"TLS from VPC\"\r\n    from_port        = 443\r\n    to_port          = 443\r\n    protocol         = \"tcp\"\r\n    cidr_blocks      = [var.vpc_cidr]\r\n    ipv6_cidr_blocks = [\"::/0\"]\r\n  }\r\n\r\n  egress {\r\n    from_port        = 0\r\n    to_port          = 0\r\n    protocol         = \"-1\"\r\n    cidr_blocks      = [\"0.0.0.0/0\"]\r\n    ipv6_cidr_blocks = [\"::/0\"]\r\n  }\r\n\r\n  tags = {\r\n    Name = \"allow_tls\"\r\n  }\r\n}\r\n"}]}
{"messages": [{"role": "user", "content": "Create a Google Cloud Run service by importing it into Terraform and managing it through configuration. Replace the placeholders in the import block with actual project, location, and name details. Execute `terraform plan -generate-config-out=generated.tf` to prepare the configuration and review the output file if desired. Run `terraform plan` to verify the changes and then apply the configuration using `terraform apply -auto-approve` to complete the setup. Set up necessary roles and service accounts for permissions required by Cloud Build and Cloud Run."}, {"role": "assistant", "content": "\n#File: imports.tf\n# Steps to take in order to import `data.google_cloud_run_service.atuf` Cloud Run service resource originating from cloudbuild.yaml\n# provisioned with `google_cloudbuild_trigger.atuf_trigger` so it could be managed by Terraform and i.e destroyed along with other resources.\n#\n# Reference:\n# Blog post: App architecture with reliability in mind: From Kubernetes to Serverless with GCP Cloud Build & Cloud Run\n# https://foolcontrol.org/?p=4621\n# \n# Cloud run service \"Import\" reference: https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/cloud_run_service#import\n\n# 1. In import block, replace {{project}}, {{location}}, {{name}} with actual service project, location, name from Outputs, i.e:\n# id = \"projects/fooctrl-312814/locations/europe-west4/services/atuf\"\n# and uncomment import block\n\n# 2. Run Terraform plan with `generate-config-out` flag:\n# terraform plan -generate-config-out=generated.tf\n \n# 3. Review generated.tf (optional)\n\n# 4. Run Terraform plan without any flags (there should be 1 new import):\n# terraform plan\n \n# 5. Run Terraform apply to import & Terraform manage previously external resource:\n# terraform apply -auto-approve\n \n# import {\n#   id = \"projects/ {{project}}/locations/{{location}}/services/atuf\"\n#   to = google_cloud_run_v2_service.default\n# }\n#File: main.tf\n# Automatically deploy app hosted in Github to Cloud Run using Cloud Build (cloudbuild.yaml) & avoid any “ClickOps” with Terraform\n#\n# Process explained in detail as part of following blog post:\n# App architecture with reliability in mind: From Kubernetes to Serverless with GCP Cloud Build & Cloud Run\n# https://foolcontrol.org/?p=4621\n# \n# Youtube video: \n# https://youtu.be/ksz1Vfg3ZQI?si=TIDL_p7sYS7oExPv\n\n# Providers setup\nterraform {\n  required_providers {\n    google = {\n      source = \"hashicorp/google\"\n      version = \"5.13.0\"\n    }\n    google-beta = {\n      source  = \"hashicorp/google-beta\"\n      version = \"5.13.0\"\n    }\n  }\n}\n\nprovider \"google\" {\n    # Provider config options\n    project = var.project\n    region = var.region\n    credentials = file(var.gcp_credentials)\n}\n\nprovider \"google-beta\" {\n    # Provider config options for google-beta\n    project = var.project\n    region = var.region\n    credentials = file(var.gcp_credentials)\n}\n\n\n# Requires Service Usage API & Identity to be manually enabled: \nmodule \"project-services\" {\n\n  source  = \"terraform-google-modules/project-factory/google//modules/project_services\"\n  version = \"~> 14.4\"\n\n  project_id = var.project\n\n  activate_apis = [\n    \"iam.googleapis.com\", # Identity and Access Management (IAM) API\n    \"cloudresourcemanager.googleapis.com\", # Cloud Resource Manager API\n    \"cloudbuild.googleapis.com\", # Cloud Build API\n    \"artifactregistry.googleapis.com\", # Artifacts Registry API\n    \"run.googleapis.com\" # Cloud Run (Admin) API\n  ]\n\n  disable_services_on_destroy = true\n}\n\n# Create \"cloud-sa\" service account for Cloud Build & Run use\nresource \"google_service_account\" \"cloudbuild_service_account\" {\n\n  depends_on = [ module.project-services ]\n  account_id = \"cloud-sa\"\n}\n\n# Define additional roles to assign to cloud-sa\nvariable \"roles_to_assign\" {\n  description = \"List of roles to assign\"\n  type        = list(string)\n  default     = [\n    \"roles/iam.serviceAccountUser\", # \"default\" role needed for Cloud Build & Cloud run\n    \"roles/logging.logWriter\", # needed for logging\n    \"roles/artifactregistry.admin\", # needed for \"Authenticate with  GCP Artifacts Registry\" in cloudbuild.yaml to work\n    \"roles/run.developer\", # needed for cloud run to work\n    \"roles/run.admin\" # needed for \"Allow public (unauthenticated) access\" in cloudbuild.yaml to work\n    ] \n}\n\n# Set additional roles to cloud-sa\nresource \"google_project_iam_binding\" \"cloud_sa_roles\" {\n\n  depends_on = [ module.project-services ]\n\n  project = var.project\n  count   = length(var.roles_to_assign)\n  role    = var.roles_to_assign[count.index]\n\n  members = [\n    \"serviceAccount:${google_service_account.cloudbuild_service_account.email}\",\n  ]\n}\n\n# Create atuf repo & add a cleanup policy for artifacts repo to keep only the most recent 3 versions of artifacts\nresource \"google_artifact_registry_repository\" \"atuf_repo\" {\n\n  depends_on = [ \n    google_project_iam_binding.cloud_sa_roles,\n    module.project-services\n  ]\n\n  provider = google-beta\n  project = var.project\n  location = var.region\n  repository_id = var.project_name\n  description   = \"${var.project_name_description} container repository\"\n  format        = \"DOCKER\"\n  cleanup_policy_dry_run = false\n  \n  cleanup_policies {\n    id     = \"keep-minimum-versions\"\n    action = \"KEEP\"\n    most_recent_versions {\n      keep_count  = 3\n    }\n  }\n}\n\n# Create Cloud Build trigger\nresource \"google_cloudbuild_trigger\" \"atuf_trigger\" {\n\n  depends_on = [\n    google_project_iam_binding.cloud_sa_roles,\n    google_artifact_registry_repository.atuf_repo,\n    module.project-services\n  ]\n\n  name     = var.cloudbuild_trigger_name\n  location = var.region\n  description = \"Terraform generated trigger for ${var.project_name_description} GitHub repository\"\n  filename = \"cloudbuild.yaml\"\n  service_account = google_service_account.cloudbuild_service_account.id\n\n  # Please note: \n  # Connecting to Github repo using CloudBuild trigger won't be possible using Terraform and will have to be done using Google Console for the first time\n  # otherwise will run into following error:\n  # Error creating Trigger: googleapi: Error 400: Repository mapping does not exist. \n  # Please visit https://console.cloud.google.com/cloud-build/triggers;region=europe-west4/connect?project=fooctrl-312814 to connect a repository to your project\n  # \n  # Explained in detail in Step 6 of:\n  # \"Automatically deploy app hosted in Github to Cloud Run using Cloud Build (cloudbuild.yaml) & avoid any “ClickOps” with Terraform\" section on:\n  # https://foolcontrol.org/?p=4621 & following Youtube video: ToDo: add link here\n  github {\n    owner = var.github_owner\n    name  = var.github_repo_connection\n    push {\n      branch = \"^main\"\n    }\n  }\n}\n\n# Trigger the Cloud Build trigger\n#\n# Explained in detail in Step 5 of:\n# \"Automatically deploy app hosted in Github to Cloud Run using Cloud Build (cloudbuild.yaml) & avoid any “ClickOps” with Terraform\" section on:\n# https://foolcontrol.org/?p=4621 & following Youtube video: ToDo: add link here\nresource \"null_resource\" \"build_trigger_run\" {\n\n  depends_on = [google_cloudbuild_trigger.atuf_trigger]\n\n  provisioner \"local-exec\" {\n    command = \"gcloud builds triggers run ${var.cloudbuild_trigger_name} --branch=main --region=${var.region}\"\n  }\n}\n\n# Polling mechanism to wait until \"atuf-tf-trigger\" build run has been completed successfully and there's a running Cloud Run service\n#\n# Explained in detail in Step 5 of:\n# \"Automatically deploy app hosted in Github to Cloud Run using Cloud Build (cloudbuild.yaml) & avoid any “ClickOps” with Terraform\" section on:\n# https://foolcontrol.org/?p=4621 & following Youtube video: ToDo: add link here\nresource \"null_resource\" \"build_trigger_run_wait\" {\n\n  depends_on = [\n    google_cloudbuild_trigger.atuf_trigger,\n    null_resource.build_trigger_run,\n    google_project_iam_binding.cloud_sa_roles,\n    module.project-services\n  ]\n\n  provisioner \"local-exec\" {\n    command = \"./scripts/wait_for_cloud_run.sh\"\n    interpreter = [\"/bin/bash\", \"-c\"]\n\n    environment = {\n      REGION  = var.region\n      PROJECT = var.project\n    }\n  }\n}\n\n# Get data about running ATUF Cloud Run service deployed from cloudbuild.yaml\ndata \"google_cloud_run_v2_service\" \"atuf\" {\n  depends_on = [\n    google_cloudbuild_trigger.atuf_trigger, \n    null_resource.build_trigger_run,\n    null_resource.build_trigger_run_wait,\n    module.project-services\n  ]\n\n  location = var.region\n  name     = var.project_name\n}\n\n# Map a custom domain using Cloud Run domain mapping (Limited availability and Preview)\n# Reference: https://cloud.google.com/run/docs/mapping-custom-domains\n#\n# Explained in detail in Step 11 of:\n# \"Automatically deploy app hosted in Github to Cloud Run using Cloud Build (cloudbuild.yaml) & avoid any “ClickOps” with Terraform\" section on:\n# https://foolcontrol.org/?p=4621 & following Youtube video: ToDo: add link here\nresource \"google_cloud_run_domain_mapping\" \"default\" {\n  name     = var.cloud_run_domain\n  location = data.google_cloud_run_v2_service.atuf.location\n  metadata {\n    namespace = var.project\n  }\n  spec {\n    route_name = data.google_cloud_run_v2_service.atuf.name\n  }\n\n  depends_on = [\n    google_cloudbuild_trigger.atuf_trigger, \n    null_resource.build_trigger_run_wait,\n    data.google_cloud_run_v2_service.atuf,\n    module.project-services\n  ]\n}\n\n# Output info about Cloud Run deployment\noutput \"atuf_cloud_run_service_info\" {\n  value = {\n    service_name = data.google_cloud_run_v2_service.atuf.name\n    service_location = data.google_cloud_run_v2_service.atuf.location\n    service_project = data.google_cloud_run_v2_service.atuf.project\n    service_url = data.google_cloud_run_v2_service.atuf.uri\n    service_domain_value = google_cloud_run_domain_mapping.default.name\n  }\n\n  depends_on = [ \n    google_cloudbuild_trigger.atuf_trigger, \n    null_resource.build_trigger_run_wait,\n    data.google_cloud_run_v2_service.atuf,\n    google_cloud_run_domain_mapping.default\n  ]\n}\n#File: variables.tf\nvariable \"gcp_credentials\" {\n  type        = string\n  description = \"The contents of GCP credentials\"\n  default     = \"~/.credentials/tf-deploy.json\"\n}\n\nvariable \"region\" {\n  type = string\n  description = \"The GCP region\"\n  default = \"europe-west4\"\n}\n\nvariable \"project\" {\n  type = string\n  description = \"The GCP project ID\"\n  default = \"fooctrl-dev\"\n}\n\nvariable \"project_name\" {\n  type = string\n  description = \"Project name\"\n  default = \"atuf\"\n}\n\nvariable \"project_name_description\" {\n  type = string\n  description = \"Project name used in description\"\n  default = \"ATUF\"\n}\n\nvariable \"cloudbuild_trigger_name\" {\n  type = string\n  description = \"Cloud Build Trigger name\"\n  default = \"atuf-tf-trigger\"\n}\n\nvariable \"github_owner\" {\n  type = string\n  description = \"GitHub owner (username)\"\n  default = \"AdnanHodzic\"\n}\n\nvariable \"github_repo_connection\" {\n  type = string\n  description = \"GitHub repository name\"\n  default = \"atuf.app\"\n}\n\nvariable \"cloud_run_domain\" {\n  type = string\n  description = \"Cloud Run custom domain name\"\n  default = \"\"\n}"}]}
{"messages": [{"role": "user", "content": "Enable the Cloud Functions, Cloud Storage, and Cloud Build services for your Google Cloud project. Create a Google Cloud Storage bucket named \"my-functions-source-bucket\" using your project ID and specified region. Define the variables for project ID and region to customize your deployment. Output the name of the created storage bucket for easy reference. Ensure all services are set to disable dependent services to avoid unintentional service disruptions."}, {"role": "assistant", "content": "\n#File: apis.tf\nresource \"google_project_service\" \"cloudfunctions\" {\n  project                    = var.project_id\n  service                    = \"cloudfunctions.googleapis.com\"\n  disable_dependent_services = true\n}\nresource \"google_project_service\" \"storage\" {\n  project                    = var.project_id\n  service                    = \"storage.googleapis.com\"\n  disable_dependent_services = true\n}\nresource \"google_project_service\" \"cloudbuild\" {\n  project                    = var.project_id\n  service                    = \"cloudbuild.googleapis.com\"\n  disable_dependent_services = true\n}\n#File: main.tf\nresource \"google_storage_bucket\" \"bucket\" {\n  name     = \"my-functions-source-bucket-${var.project_id}\"\n  location = var.region\n}\n#File: outputs.tf\noutput \"bucket_name\" {\n  value = google_storage_bucket.bucket.name\n}\n#File: variables.tf\nvariable \"project_id\" {\n  type = string\n}\n\nvariable \"region\" {\n  type    = string\n}\n"}]}
{"messages": [{"role": "user", "content": "Create a required providers block to specify the Azure Provider source and version as \"hashicorp/azurerm\" version \"3.27.0\". Configure the Azure Provider with default features. Create a resource group named \"myTFResourceGroup\" in the \"Brazil South\" location. Create a service plan named \"myTFAppServicePlan\" for Linux with SKU \"F1\" within the previously created resource group. Create a Linux web app named \"myTFTrainingAppService\" that uses the specified Docker image and tag, and output the application's URL."}, {"role": "assistant", "content": "\n#File: main.tf\n# We strongly recommend using the required_providers block to set the\n# Azure Provider source and version being used\nterraform {\n  required_providers {\n    azurerm = {\n      source  = \"hashicorp/azurerm\"\n      version = \"=3.27.0\"\n    }\n  }\n}\n\n# Configure the Microsoft Azure Provider\nprovider \"azurerm\" {\n  features {}\n}\n\n# Create a resource group\nresource \"azurerm_resource_group\" \"rg\" {\n  name     = \"myTFResourceGroup\"\n  location = \"Brazil South\"\n} \n\n# Create a service plan\nresource \"azurerm_service_plan\" \"asp\" {\n  name                = \"myTFAppServicePlan\"\n  location            = azurerm_resource_group.rg.location\n  resource_group_name = azurerm_resource_group.rg.name\n  os_type            = \"Linux\"\n  sku_name           = \"F1\"\n}\n\n# Create a app service\nresource \"azurerm_linux_web_app\" \"app\" {\n  name                = \"myTFTrainingAppService\"\n  location            = azurerm_resource_group.rg.location\n  resource_group_name = azurerm_resource_group.rg.name\n  service_plan_id     = azurerm_service_plan.asp.id\n\n  site_config {\n    always_on = false\n    application_stack {\n        docker_image = var.docker_image\n        docker_image_tag = var.docker_image_tag\n    }\n  }\n}\n\nvariable \"docker_image\" {\n  type = string\n  default = \"nginx\"\n}\n\nvariable \"docker_image_tag\" {\n  type = string\n  default = \"latest\"\n}\n\noutput \"app_url\" {\n  value = azurerm_linux_web_app.app.default_hostname\n}"}]}
{"messages": [{"role":"user","content":"Provide an AWS Lex V2 chatbot with an associated Lambda function for natural language processing and fulfillment. Include an S3 bucket to store IoT energy consumption data, IAM roles and policies for secure Lambda and S3 access. The chatbot queries CSV data stored in S3 and returns dynamic responses based on user intents configured in Lex"},{"role":"assistant","content":"resource \"aws_lambda_function\" \"terraform_lambda\" {\r\n  function_name = \"EnergyConsumptionTerraform\"\r\n  filename      = \"lambda_function.zip\"\r\n  handler       = \"lambda_function.lambda_handler\"\r\n  role          = aws_iam_role.lambda_role.arn\r\n  runtime       = \"python3.12\"\r\n  depends_on    = [aws_iam_role_policy_attachment.attach_cloudwatch_logs_policy_to_iam_role, aws_iam_role_policy_attachment.attach_s3_policy_to_iam_role]\r\n}\r\n\r\nresource \"aws_iam_role\" \"lambda_role\" {\r\n  name               = \"EnergyConsumptionRoleTerraform\"\r\n  assume_role_policy = <<EOF\r\n{\r\n \"Version\": \"2012-10-17\",\r\n \"Statement\": [\r\n   {\r\n     \"Action\": \"sts:AssumeRole\",\r\n     \"Principal\": {\r\n       \"Service\": \"lambda.amazonaws.com\"\r\n     },\r\n     \"Effect\": \"Allow\",\r\n     \"Sid\": \"\"\r\n   }\r\n ]\r\n}\r\nEOF\r\n}\r\n\r\nresource \"aws_iam_policy\" \"iam_policy_for_cloudwatch_logs\" {\r\n  name        = \"CloudWatchLogsPolicy\"\r\n  path        = \"/\"\r\n  description = \"AWS IAM Policy for managing CloudWatch Logs\"\r\n  policy      = <<EOF\r\n{\r\n  \"Version\": \"2012-10-17\",\r\n  \"Statement\": [\r\n    {\r\n      \"Action\": [\r\n        \"logs:CreateLogGroup\",\r\n        \"logs:CreateLogStream\",\r\n        \"logs:PutLogEvents\"\r\n      ],\r\n      \"Resource\": \"arn:aws:logs:*:*:*\",\r\n      \"Effect\": \"Allow\"\r\n    }\r\n  ]\r\n}\r\nEOF\r\n}\r\n\r\n\r\n# reference the customer managed policy by its ARN. \r\nresource \"aws_iam_role_policy_attachment\" \"attach_cloudwatch_logs_policy_to_iam_role\" {\r\n  role       = aws_iam_role.lambda_role.name\r\n  policy_arn = aws_iam_policy.iam_policy_for_cloudwatch_logs.arn\r\n}\r\n\r\n\r\n# reference the AWS managed policy by its ARN. \r\nresource \"aws_iam_role_policy_attachment\" \"attach_s3_policy_to_iam_role\" {\r\n  role       = aws_iam_role.lambda_role.name\r\n  policy_arn = \"arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess\"\r\n}\r\n\r\n\r\nresource \"aws_lexv2models_bot\" \"IOTChatBot\" {\r\n  name = \"IOTChatBot\"\r\n  data_privacy {\r\n    child_directed = \"false\"\r\n  }\r\n  idle_session_ttl_in_seconds = 300\r\n  role_arn                    = \"arn:aws:iam::602917784174:role/aws-service-role/lexv2.amazonaws.com/AWSServiceRoleForLexV2Bots_I7S64VA609\"\r\n\r\n  tags = {\r\n    foo = \"bar\"\r\n  }\r\n}\r\n\r\nterraform {\r\n  required_providers {\r\n    aws = {\r\n      source = \"hashicorp/aws\"\r\n      version = \"5.33.0\"\r\n    }\r\n  }\r\n}\r\n\r\nprovider \"aws\" {\r\n  # Configuration options\r\n    region = \"us-east-1\"\r\n    # region = \"us-west-2\"\r\n    \r\n}\r\n\r\n\r\nresource \"aws_s3_bucket\" \"mybucket\" {\r\n  bucket = \"lex-chatbot-bucket-for-iot-data\"\r\n  \r\n  tags = {\r\n    Name        = \"My bucket\"\r\n    Environment = \"Dev\"\r\n  }\r\n}\r\n"}]}
{"messages": [{"role": "user", "content": "Create a Google Cloud project using Terraform with the name “tfce-test” in the zone “us-central1-a.” Provision three SSD compute disks named “test-disk-a,” “test-disk-b,” and “test-disk-c,” each using the Debian 11 image. Deploy three Google Compute Engine instances: an f1-micro instance named “test-micro” with the first disk, a g1-small instance named “test-sm” with the second disk, and an n1-standard-1 instance named “test-standard” with the third disk that includes tags and a startup script. Ensure all instances have ephemeral public IP addresses and are associated with the default network."}, {"role": "assistant", "content": "\n#File: main.tf\nvariable \"zone\" {\n  default = \"us-central1-a\"\n}\n\nvariable \"project\" {\n  default = \"tfce-test\"\n}\n\nterraform {\n  required_providers {\n    google = {\n      source = \"hashicorp/google\"\n      version = \"5.12.0\"\n    }\n  }\n}\n\nprovider \"google\" {\n  project     = var.project\n  region      = var.zone\n}\n\ndata \"google_compute_image\" \"my_image\" {\n  family  = \"debian-11\"\n  project = \"debian-cloud\"\n}\n\nresource \"google_compute_disk\" \"default-a\" {\n  name  = \"test-disk-a\"\n  type  = \"pd-ssd\"\n  zone  = var.zone\n  image = data.google_compute_image.my_image.self_link\n  physical_block_size_bytes = 4096\n}\n\nresource \"google_compute_disk\" \"default-b\" {\n  name  = \"test-disk-b\"\n  type  = \"pd-ssd\"\n  zone  = var.zone\n  image = data.google_compute_image.my_image.self_link\n  physical_block_size_bytes = 4096\n}\n\nresource \"google_compute_disk\" \"default-c\" {\n  name  = \"test-disk-c\"\n  type  = \"pd-ssd\"\n  zone  = var.zone\n  image = data.google_compute_image.my_image.self_link\n  physical_block_size_bytes = 4096\n}\n\nresource \"google_compute_instance\" \"micro\" {\n  name         = \"test-micro\"\n  machine_type = \"f1-micro\"\n  zone         = var.zone\n\n  boot_disk {\n    source = google_compute_disk.default-a.self_link\n  }\n\n  network_interface {\n    network = \"default\"\n\n    access_config {\n      // Ephemeral public IP\n    }\n  }\n}\n\nresource \"google_compute_instance\" \"small\" {\n  name         = \"test-sm\"\n  machine_type = \"g1-small\"\n  zone         = var.zone\n\n  boot_disk {\n    source = google_compute_disk.default-b.self_link\n  }\n\n  network_interface {\n    network = \"default\"\n\n    access_config {\n      // Ephemeral public IP\n    }\n  }\n}\n\nresource \"google_compute_instance\" \"standard\" {\n  name         = \"test-standard\"\n  machine_type = \"n1-standard-1\"\n  zone         = var.zone\n\n  tags = [\"foo\", \"bar\"]\n\n  boot_disk {\n    source = google_compute_disk.default-c.self_link\n  }\n\n  // Local SSD disk\n  scratch_disk {\n    interface = \"SCSI\"\n  }\n\n  network_interface {\n    network = \"default\"\n\n    access_config {\n      // Ephemeral public IP\n    }\n  }\n\n  metadata = {\n    foo = \"bar\"\n  }\n\n  metadata_startup_script = \"echo hi > /test.txt\"\n}\n"}]}
{"messages": [{"role":"user","content":"Set up an AWS IAM OpenID Connect (OIDC) provider and an associated IAM role for GitHub Actions, using a labels module to standardize naming and tagging. Conditionally create the OIDC provider if it doesn't exist, attaches a trust policy to allow GitHub repositories specified in variables to assume the role via web identity. The role is then linked to one or more IAM policies defined by the user to grant the necessary permissions."},{"role":"assistant","content":"\r\n\r\n##-----------------------------------------------------------------------------\r\n## Labels module callled that will be used for naming and tags.   \r\n##-----------------------------------------------------------------------------\r\nmodule \"labels\" {\r\n  source  = \"clouddrove/labels/aws\"\r\n  version = \"1.3.0\"\r\n\r\n  name        = var.name\r\n  repository  = var.repository\r\n  environment = var.environment\r\n  managedby   = var.managedby\r\n  label_order = var.label_order\r\n}\r\n\r\n##----------------------------------------------------------------------------- \r\n## Data block to tls certificate.  \r\n##-----------------------------------------------------------------------------\r\n\r\ndata \"tls_certificate\" \"github\" {\r\n  url = var.provider_url\r\n}\r\n\r\n##----------------------------------------------------------------------------- \r\n## Data block for openid connect provider\r\n##-----------------------------------------------------------------------------\r\n\r\ndata \"aws_iam_openid_connect_provider\" \"github\" {\r\n  count = var.oidc_provider_exists ? 1 : 0\r\n  url   = var.provider_url\r\n}\r\n\r\n##-----------------------------------------------------------------------------\r\n## Include iam openid connect provider resource here   \r\n##-----------------------------------------------------------------------------\r\n\r\n\r\nresource \"aws_iam_openid_connect_provider\" \"github\" {\r\n  count           = var.oidc_provider_exists ? 0 : 1\r\n  client_id_list  = [\"sts.amazonaws.com\"]\r\n  thumbprint_list = var.oidc_provider_exists ? [] : [data.tls_certificate.github.certificates[0].sha1_fingerprint]\r\n  url             = var.provider_url\r\n  tags            = module.labels.tags\r\n}\r\n\r\n##-----------------------------------------------------------------------------\r\n## Include the role resource and attachment here\r\n##-----------------------------------------------------------------------------\r\n\r\nresource \"aws_iam_role\" \"github\" {\r\n  name = var.role_name\r\n  tags = module.labels.tags\r\n  assume_role_policy = var.custom_assume_role_policy != \"\" ? var.custom_assume_role_policy : jsonencode({\r\n    Version = \"2012-10-17\",\r\n    Statement = [\r\n      {\r\n        Effect = \"Allow\",\r\n        Principal = {\r\n          Federated = var.oidc_provider_exists ? data.aws_iam_openid_connect_provider.github[0].arn : aws_iam_openid_connect_provider.github[0].arn\r\n\r\n        },\r\n        Action = \"sts:AssumeRoleWithWebIdentity\",\r\n        Condition = {\r\n          StringEquals = {\r\n            \"token.actions.githubusercontent.com:aud\" = \"sts.amazonaws.com\"\r\n          },\r\n          \"ForAnyValue:StringLike\" = {\r\n            \"token.actions.githubusercontent.com:sub\" = [\r\n              for repo in var.oidc_github_repos : \"repo:${repo}:*\"\r\n            ]\r\n          }\r\n        }\r\n\r\n      }\r\n    ]\r\n  })\r\n}\r\n\r\n##-----------------------------------------------------------------------------\r\n## Include the iam role policy resource attachment here\r\n##-----------------------------------------------------------------------------\r\n\r\nresource \"aws_iam_role_policy_attachment\" \"github\" {\r\n  count      = length(var.policy_arns)\r\n  role       = aws_iam_role.github.name\r\n  policy_arn = var.policy_arns[count.index]\r\n}\r\n\r\n#Module      : LABEL\r\n#Description : Terraform label module variables\r\n\r\nvariable \"name\" {\r\n  type        = string\r\n  description = \"Name for tags\"\r\n}\r\n\r\nvariable \"repository\" {\r\n  type        = string\r\n  default     = \"https://github.com/clouddrove/terraform-aws-iam-role.git\"\r\n  description = \"Repository name for tags\"\r\n}\r\n\r\nvariable \"environment\" {\r\n  type        = string\r\n  description = \"Environment name for tags\"\r\n}\r\n\r\nvariable \"managedby\" {\r\n  type        = string\r\n  default     = \"hello@clouddrove.com\"\r\n  description = \"Managed by for tags\"\r\n}\r\n\r\nvariable \"label_order\" {\r\n  type        = list(any)\r\n  default     = [\"name\", \"environment\"]\r\n  description = \"Label order, e.g. `name`,`application`.\"\r\n}\r\n\r\n#Module      : OIDC\r\n#Description : Terraform github oidc module variables\r\n\r\nvariable \"provider_url\" {\r\n  type        = string\r\n  description = \"The URL of the identity provider for the OIDC\"\r\n}\r\n\r\nvariable \"custom_assume_role_policy\" {\r\n  type        = string\r\n  default     = \"\"\r\n  description = \"The custom json trusted_policy for attached to the role\"\r\n}\r\n\r\nvariable \"oidc_github_repos\" {\r\n  type        = list(string)\r\n  description = \"GitHub repository names for access\"\r\n}\r\n\r\nvariable \"role_name\" {\r\n  type        = string\r\n  description = \"Name of the AWS IAM Role to create\"\r\n}\r\n\r\nvariable \"oidc_provider_exists\" {\r\n  type        = bool\r\n  default     = true\r\n  description = \"Mention oidc provider exist or not in true or false\"\r\n}\r\n\r\nvariable \"policy_arns\" {\r\n  type        = list(string)\r\n  description = \"A list of policies/permissions to attach to the IAM role.\"\r\n}\r\n\r\n"}]}
{"messages": [{"role": "user", "content": "Create a Google Kubernetes Engine (GKE) cluster using Terraform, specifying the cluster name and zone through variables. Set the initial node count and configure release channels and vertical pod autoscaling according to the defined variables. Create a node pool linked to the cluster, defining the node configuration, management settings, and autoscaling options. Customize additional configurations such as deletion protection and HTTP load balancing based on variable values. Output the cluster name, endpoint, and CA certificate for access."}, {"role": "assistant", "content": "\n#File: main.tf\nresource \"google_container_cluster\" \"primary\" {\n  name     = var.cluster_name\n  location = var.zone\n\n  initial_node_count = var.initial_node_count\n  release_channel {\n    channel = var.release_channel\n  }\n\n  vertical_pod_autoscaling {\n    enabled = var.vertical_pod_autoscaling_enabled\n  }\n\n  deletion_protection = var.deletion_protection\n\n  addons_config {\n    http_load_balancing {\n      disabled = var.http_load_balancing_disabled\n    }\n    horizontal_pod_autoscaling {\n      disabled = var.horizontal_pod_autoscaling_disabled\n    }\n    network_policy_config {\n      disabled = var.network_policy_config_disabled\n    }\n    dns_cache_config {\n      enabled = var.dns_cache_config_enabled\n    }\n  }\n\n  timeouts {\n    create = var.create_timeout\n    update = var.update_timeout\n    delete = var.delete_timeout\n  }\n}\n\nresource \"google_container_node_pool\" \"primary_nodes\" {\n  cluster    = google_container_cluster.primary.name\n  location   = google_container_cluster.primary.location\n  node_count = var.node_count\n\n  node_config {\n    preemptible  = var.preemptible\n    machine_type = var.machine_type\n    disk_size_gb = var.disk_size_gb\n    oauth_scopes = var.oauth_scopes\n    metadata = var.metadata\n    tags = var.tags\n    shielded_instance_config {\n      enable_secure_boot = var.enable_secure_boot\n    }\n  }\n\n  management {\n    auto_upgrade = var.auto_upgrade\n    auto_repair  = var.auto_repair\n  }\n\n  autoscaling {\n    min_node_count = var.min_node_count\n    max_node_count = var.max_node_count\n  }\n\n  timeouts {\n    create = var.node_pool_create_timeout\n    update = var.node_pool_update_timeout\n    delete = var.node_pool_delete_timeout\n  }\n}\n#File: variables.tf\nvariable \"cluster_name\" {\n  description = \"The name of the GKE cluster\"\n  type        = string\n}\n\nvariable \"zone\" {\n  description = \"The GCP zone\"\n  type        = string\n}\n\nvariable \"initial_node_count\" {\n  description = \"The initial number of nodes\"\n  type        = number\n  default     = 1\n}\n\nvariable \"release_channel\" {\n  description = \"The release channel\"\n  type        = string\n}\n\nvariable \"vertical_pod_autoscaling_enabled\" {\n  description = \"Enable vertical pod autoscaling\"\n  type        = bool\n  default     = true\n}\n\nvariable \"deletion_protection\" {\n  description = \"Enable deletion protection\"\n  type        = bool\n  default     = false\n}\n\nvariable \"http_load_balancing_disabled\" {\n  description = \"Disable HTTP load balancing\"\n  type        = bool\n  default     = false\n}\n\nvariable \"horizontal_pod_autoscaling_disabled\" {\n  description = \"Disable horizontal pod autoscaling\"\n  type        = bool\n  default     = false\n}\n\nvariable \"network_policy_config_disabled\" {\n  description = \"Disable network policy config\"\n  type        = bool\n  default     = true\n}\n\nvariable \"dns_cache_config_enabled\" {\n  description = \"Enable DNS cache config\"\n  type        = bool\n  default     = true\n}\n\nvariable \"create_timeout\" {\n  description = \"Create timeout\"\n  type        = string\n  default     = \"30m\"\n}\n\nvariable \"update_timeout\" {\n  description = \"Update timeout\"\n  type        = string\n  default     = \"30m\"\n}\n\nvariable \"delete_timeout\" {\n  description = \"Delete timeout\"\n  type        = string\n  default     = \"30m\"\n}\n\nvariable \"node_count\" {\n  description = \"The number of nodes in the node pool\"\n  type        = number\n  default     = 1\n}\n\nvariable \"preemptible\" {\n  description = \"Whether the nodes are preemptible\"\n  type        = bool\n  default     = true\n}\n\nvariable \"machine_type\" {\n  description = \"The machine type of the nodes\"\n  type        = string\n  default     = \"e2-micro\"\n}\n\nvariable \"disk_size_gb\" {\n  description = \"The disk size of the nodes in GB\"\n  type        = number\n  default     = 10\n}\n\nvariable \"oauth_scopes\" {\n  description = \"The OAuth scopes for the nodes\"\n  type        = list(string)\n  default     = [\"https://www.googleapis.com/auth/cloud-platform\"]\n}\n\nvariable \"metadata\" {\n  description = \"The metadata for the nodes\"\n  type        = map(string)\n  default     = {\n    disable-legacy-endpoints = \"true\"\n  }\n}\n\nvariable \"tags\" {\n  description = \"The tags for the nodes\"\n  type        = list(string)\n  default     = [\"gke-node\"]\n}\n\nvariable \"enable_secure_boot\" {\n  description = \"Enable secure boot for the nodes\"\n  type        = bool\n  default     = true\n}\n\nvariable \"auto_upgrade\" {\n  description = \"Enable auto upgrade for the node pool\"\n  type        = bool\n  default     = true\n}\n\nvariable \"auto_repair\" {\n  description = \"Enable auto repair for the node pool\"\n  type        = bool\n  default     = true\n}\n\nvariable \"min_node_count\" {\n  description = \"The minimum number of nodes in the node pool\"\n  type        = number\n  default     = 1\n}\n\nvariable \"max_node_count\" {\n  description = \"The maximum number of nodes in the node pool\"\n  type        = number\n  default     = 3\n}\n\nvariable \"node_pool_create_timeout\" {\n  description = \"Create timeout for the node pool\"\n  type        = string\n  default     = \"30m\"\n}\n\nvariable \"node_pool_update_timeout\" {\n  description = \"Update timeout for the node pool\"\n  type        = string\n  default     = \"30m\"\n}\n\nvariable \"node_pool_delete_timeout\" {\n  description = \"Delete timeout for the node pool\"\n  type        = string\n  default     = \"30m\"\n}\n#File: outputs.tf\noutput \"kubernetes_cluster_name\" {\n  value = google_container_cluster.primary.name\n}\n\noutput \"kubernetes_cluster_endpoint\" {\n  value = google_container_cluster.primary.endpoint\n}\n\noutput \"kubernetes_cluster_ca_certificate\" {\n  value = google_container_cluster.primary.master_auth.0.cluster_ca_certificate\n}"}]}
{"messages": [{"role": "user", "content": "Create a static IP address for your Kubernetes master node in Google Cloud. Launch a Google Compute Engine instance named \"k8-master\" using the specified machine type, zone, and boot disk configuration. Deploy two additional Google Compute Engine instances named \"k8-worker1\" and \"k8-worker2\" with the same specifications as the master node. Set up the network interfaces to connect to the default network, assigning a dynamic IP to the worker nodes. Output the IP address of the master node and the IPs of the worker nodes for later use."}, {"role": "assistant", "content": "\n#File: main.tf\nresource \"google_compute_address\" \"k8_master_ip\" {\n  name   = \"k8-master-ip\"\n  region = var.region\n}\n\nresource \"google_compute_instance\" \"k8_master\" {\n  name         = \"k8-master\"\n  machine_type = var.instance_type\n  zone         = var.zone\n\n  boot_disk {\n    initialize_params {\n      image = var.image\n      size  = var.disk_size\n    }\n  }\n\n  network_interface {\n    network = \"default\"\n    access_config {\n      nat_ip = google_compute_address.k8_master_ip.address\n    }\n  }\n\n  metadata = {\n    ssh-keys = join(\"\\n\", [for key in var.ssh_public_keys : \"${var.ssh_user}:${key}\"])\n  }\n  tags = [\"k8s\"] \n}\n\n# VM for Kubernetes Worker Node 1\nresource \"google_compute_instance\" \"k8_worker1\" {\n  name         = \"k8-worker1\"\n  machine_type = var.instance_type\n  zone         = var.zone\n\n  boot_disk {\n    initialize_params {\n      image = var.image\n      size  = var.disk_size\n    }\n  }\n\n  network_interface {\n    network = \"default\"\n    access_config {\n      // Dynamic IP\n    }\n  }\n\n  metadata = {\n    ssh-keys = join(\"\\n\", [for key in var.ssh_public_keys : \"${var.ssh_user}:${key}\"])\n  }\n  tags = [\"k8s\"] \n}\n\n# VM for Kubernetes Worker Node 2\nresource \"google_compute_instance\" \"k8_worker2\" {\n  name         = \"k8-worker2\"\n  machine_type = var.instance_type\n  zone         = var.zone\n\n  boot_disk {\n    initialize_params {\n      image = var.image\n      size  = var.disk_size\n    }\n  }\n\n  network_interface {\n    network = \"default\"\n    access_config {\n      // Dynamic IP\n    }\n  }\n\n  metadata = {\n    ssh-keys = join(\"\\n\", [for key in var.ssh_public_keys : \"${var.ssh_user}:${key}\"])\n  }\n  tags = [\"k8s\"] \n}\n\noutput \"k8_master_ip\" {\n  value = google_compute_address.k8_master_ip.address\n}\n\noutput \"k8_worker_ips\" {\n  value = [\n    google_compute_instance.k8_worker1.network_interface[0].access_config[0].nat_ip,\n    google_compute_instance.k8_worker2.network_interface[0].access_config[0].nat_ip\n  ]\n}\n\noutput \"ssh_user\" {\n  value = var.ssh_user\n  \n}\n#File: provider.tf\nprovider \"google\" {\n  project     = var.project_id\n  region      = var.region\n}\n#File: variables.tf\n\nvariable \"project_id\" {\n  description = \"The GCP project ID\"\n  type        = string\n}\n\nvariable \"region\" {\n  description = \"The GCP region\"\n  type        = string\n  default = \"us-central1\"\n}\n\nvariable \"zone\" {\n  description = \"The GCP zone\"\n  type        = string\n  default = \"us-central1-a\"\n}\n\nvariable \"instance_type\" {\n  description = \"The instance type\"\n  type        = string\n  default = \"n2d-standard-2\"\n}\n\nvariable \"image\" {\n  description = \"The image to boot the instance\"\n  type        = string\n  default = \"rocky-linux-9\"\n}\n\nvariable \"disk_size\" {\n  description = \"The disk size in GB\"\n  type        = number\n  default = 100\n}\n\nvariable \"ssh_public_keys\" {\n  description = \"The SSH public key to access the instances\"\n  type        = list(string)\n}\n\nvariable \"ssh_user\" {\n  description = \"The SSH user to access the instances\"\n  type        = string\n}"}]}
{"messages": [{"role": "user", "content": "Create an Azure Key Vault with a unique name based on the region, environment, and application name. Define the necessary access policies and enable options for deployment, disk encryption, and template deployment. Generate a secret for the VPN root certificate using the specified certificate file. Establish a resource group to host the Key Vault and related network resources. Lastly, create a VPN gateway, including a public IP configuration and necessary VPN client settings."}, {"role": "assistant", "content": "\n#File: app-variables.tf\n#############################\n## Application - Variables ##\n#############################\n\n# app name \nvariable \"app_name\" {\n  type        = string\n  description = \"This variable defines the application name used to build resources\"\n}\n\n# company name \nvariable \"company\" {\n  type        = string\n  description = \"This variable defines the company name used to build resources\"\n}\n\n# company prefix \nvariable \"prefix\" {\n  type        = string\n  description = \"This variable defines the company name prefix used to build resources\"\n}\n\n# azure region\nvariable \"location\" {\n  type        = string\n  description = \"Azure region where the resource group will be created\"\n  default     = \"UK South\"\n}\n\n# azure region\nvariable \"region\" {\n  type        = string\n  description = \"Azure region code where the resource group will be created\"\n  default     = \"uks\"\n}\n\n# application or company environment\nvariable \"environment\" {\n  type        = string\n  description = \"This variable defines the environment to be built\"\n}\n#File: keyvault-main.tf\n#####################\n## KeyVault - Main ##\n#####################\n\n# Create the Azure Key Vault - globally unique - 24 characters max\nresource \"azurerm_key_vault\" \"kopi-keyvault\" {\n  name                = \"${var.region}-${var.environment}-${var.app_name}-kv\"\n  location            = azurerm_resource_group.kopi-rg.location\n  resource_group_name = azurerm_resource_group.kopi-rg.name\n  \n  enabled_for_deployment          = var.kv-enabled-for-deployment\n  enabled_for_disk_encryption     = var.kv-enabled-for-disk-encryption\n  enabled_for_template_deployment = var.kv-enabled-for-template-deployment\n  tenant_id                       = var.azure-tenant-id\n\n  sku_name = var.kv-sku-name\n  \n  tags = { \n    environment = var.environment\n  }\n\n  access_policy {\n    tenant_id = var.azure-tenant-id\n    object_id = var.kv-full-object-id\n\n    certificate_permissions = var.kv-certificate-permissions-full\n    key_permissions         = var.kv-key-permissions-full\n    secret_permissions      = var.kv-secret-permissions-full\n    storage_permissions     = var.kv-storage-permissions-full\n  }\n\n  network_acls {\n    default_action = \"Allow\"\n    bypass         = \"AzureServices\"\n  }\n}\n#File: keyvault-secret.tf\n############################\n## KeyVault Secret - Main ##\n############################\n\n# Variable for Certificate Name\nlocals {\n  certificate-name = \"${var.company}-RootCert.crt\"\n}\n\n# Create a Secret for the VPN Root certificate\nresource \"azurerm_key_vault_secret\" \"vpn-root-certificate\" {\n  depends_on=[azurerm_key_vault.kopi-keyvault]\n\n  name         = \"vpn-root-certificate\"\n  value        = filebase64(local.certificate-name)\n  key_vault_id = azurerm_key_vault.kopi-keyvault.id\n\n  tags = {\n    environment = var.environment\n  }\n}\n\n\n#File: keyvault-variables.tf\n#############################\n# Azure Key Vault variables #\n#############################\n\nvariable \"kv-full-object-id\" {\n  type        = string\n  description = \"The object ID of a user, service principal or security group in the Azure Active Directory tenant for FULL access to the Azure Key Vault\"\n}\n\nvariable \"kv-sku-name\" {\n  type        = string\n  description = \"Select Standard or Premium SKU\"\n  default     = \"standard\"\n}\n\nvariable \"kv-enabled-for-deployment\" {\n  type        = string\n  description = \"Allow Azure Virtual Machines to retrieve certificates stored as secrets from the Azure Key Vault\"\n  default     = \"true\"\n}\n\nvariable \"kv-enabled-for-disk-encryption\" {\n  type        = string\n  description = \"Allow Azure Disk Encryption to retrieve secrets from the Azure Key Vault and unwrap keys\" \n  default     = \"true\"\n}\n\nvariable \"kv-enabled-for-template-deployment\" {\n  type        = string\n  description = \"Allow Azure Resource Manager to retrieve secrets from the Azure Key Vault\"\n  default     = \"true\"\n}\n\nvariable \"kv-key-permissions-full\" {\n  type        = list(string)\n  description = \"List of full key permissions, must be one or more from the following: backup, create, decrypt, delete, encrypt, get, import, list, purge, recover, restore, sign, unwrapKey, update, verify and wrapKey.\"\n  default     = [ \"backup\", \"create\", \"decrypt\", \"delete\", \"encrypt\", \"get\", \"import\", \"list\", \"purge\", \n                  \"recover\", \"restore\", \"sign\", \"unwrapKey\",\"update\", \"verify\", \"wrapKey\" ]\n}\n\nvariable \"kv-secret-permissions-full\" {\n  type        = list(string)\n  description = \"List of full secret permissions, must be one or more from the following: backup, delete, get, list, purge, recover, restore and set\"\n  default     = [ \"backup\", \"delete\", \"get\", \"list\", \"purge\", \"recover\", \"restore\", \"set\" ]\n} \n\nvariable \"kv-certificate-permissions-full\" {\n  type        = list(string)\n  description = \"List of full certificate permissions, must be one or more from the following: backup, create, delete, deleteissuers, get, getissuers, import, list, listissuers, managecontacts, manageissuers, purge, recover, restore, setissuers and update\"\n  default     = [ \"create\", \"delete\", \"deleteissuers\", \"get\", \"getissuers\", \"import\", \"list\", \"listissuers\", \n                  \"managecontacts\", \"manageissuers\", \"purge\", \"recover\", \"setissuers\", \"update\", \"backup\", \"restore\" ]\n}\n\nvariable \"kv-storage-permissions-full\" {\n  type        = list(string)\n  description = \"List of full storage permissions, must be one or more from the following: backup, delete, deletesas, get, getsas, list, listsas, purge, recover, regeneratekey, restore, set, setsas and update\"\n  default     = [ \"backup\", \"delete\", \"deletesas\", \"get\", \"getsas\", \"list\", \"listsas\", \n                  \"purge\", \"recover\", \"regeneratekey\", \"restore\", \"set\", \"setsas\", \"update\" ]\n}\n\n#File: network-gateway.tf\n########################\n## VPN Gateway - Main ##\n########################\n\n# Read Certificate\ndata \"azurerm_key_vault_secret\" \"vpn-root-certificate\" {\n  depends_on=[\n    azurerm_key_vault.kopi-keyvault,\n    azurerm_key_vault_secret.vpn-root-certificate\n  ]\n  \n  name         = \"vpn-root-certificate\"\n  key_vault_id = azurerm_key_vault.kopi-keyvault.id\n}\n\n# Create a Public IP for the Gateway\nresource \"azurerm_public_ip\" \"kopi-gateway-ip\" {\n  name                = \"${var.region}-${var.environment}-${var.app_name}-gw-ip\"\n  location            = azurerm_resource_group.kopi-rg.location\n  resource_group_name = azurerm_resource_group.kopi-rg.name\n  allocation_method   = \"Dynamic\"\n}\n\n# Create VPN Gateway\nresource \"azurerm_virtual_network_gateway\" \"kopi-vpn-gateway\" {\n  name                = \"${var.region}-${var.environment}-${var.app_name}-gw\"\n  location            = azurerm_resource_group.kopi-rg.location\n  resource_group_name = azurerm_resource_group.kopi-rg.name\n\n  type     = \"Vpn\"\n  vpn_type = \"RouteBased\"\n\n  active_active = false\n  enable_bgp    = false\n  sku           = \"Basic\"\n\n  ip_configuration {\n    name                          = \"${var.region}-${var.environment}-${var.app_name}-vnet\"\n    public_ip_address_id          = azurerm_public_ip.kopi-gateway-ip.id\n    private_ip_address_allocation = \"Dynamic\"\n    subnet_id                     = azurerm_subnet.kopi-gateway-subnet.id\n  }\n\n  vpn_client_configuration {\n    address_space = [\"10.2.0.0/24\"]\n\n    root_certificate {\n      name = \"VPNROOT\"\n\n      public_cert_data = data.azurerm_key_vault_secret.vpn-root-certificate.value\n    }\n\n  }\n}\n\n#File: network-main.tf\n####################\n## Network - Main ##\n####################\n\n# Create a Resource Group\nresource \"azurerm_resource_group\" \"kopi-rg\" {\n  name     = \"${var.region}-${var.environment}-${var.app_name}-rg\"\n  location = var.location\n  tags = {\n    environment = var.environment\n  }\n}\n\n# Create the VNET\nresource \"azurerm_virtual_network\" \"kopi-vnet\" {\n  name                = \"${var.region}-${var.environment}-${var.app_name}-vnet\"\n  address_space       = [var.kopi-vnet-cidr]\n  location              = azurerm_resource_group.kopi-rg.location\n  resource_group_name   = azurerm_resource_group.kopi-rg.name\n  tags = {\n    environment = var.environment\n  }\n}\n\n# Create a Gateway Subnet\nresource \"azurerm_subnet\" \"kopi-gateway-subnet\" {\n  name                 = \"GatewaySubnet\" # do not rename\n  address_prefixes     = [var.kopi-gateway-subnet-cidr]\n  virtual_network_name = azurerm_virtual_network.kopi-vnet.name\n  resource_group_name  = azurerm_resource_group.kopi-rg.name\n}\n\n#File: network-variables.tf\n#########################\n## Network - Variables ##\n#########################\n\nvariable \"kopi-vnet-cidr\" {\n  type        = string\n  description = \"The CIDR of the VNET\"\n}\n\nvariable \"kopi-gateway-subnet-cidr\" {\n  type        = string\n  description = \"The CIDR for the Gateway subnet\"\n}\n\n#File: provider-main.tf\n###########################\n## Azure Provider - Main ##\n###########################\n\n# Define Terraform provider\nterraform {\n  required_version = \">= 0.13\"\n}\n\n# Configure the Azure provider\nprovider \"azurerm\" {\n  environment = \"public\"\n  version     = \">= 2.7.0\"\n  features {}\n  subscription_id = var.azure-subscription-id\n  client_id       = var.azure-client-id\n  client_secret   = var.azure-client-secret\n  tenant_id       = var.azure-tenant-id\n}\n\n#File: provider-variables.tf\n################################\n## Azure Provider - Variables ##\n################################\n\n# Azure authentication variables\nvariable \"azure-subscription-id\" {\n  type        = string\n  description = \"Azure Subscription ID\"\n}\n\nvariable \"azure-client-id\" {\n  type        = string\n  description = \"Azure Client ID\"\n}\n\nvariable \"azure-client-secret\" {\n  type        = string\n  description = \"Azure Client Secret\"\n}\n\nvariable \"azure-tenant-id\" {\n  type        = string\n  description = \"Azure Tenant ID\"\n}\n"}]}
{"messages": [{"role": "user", "content": "Create variables for the company, application, environment, and Azure region. Create an Azure resource group for network resources using those variables. Create a virtual network and subnet within the resource group, specifying their address spaces. Generate a secure SSH key for the Qualys VM and create an Azure SSH public key resource. Create a Qualys VM, network interface, and security group, and configure necessary rules for HTTPS and SSH access."}, {"role": "assistant", "content": "\n#File: app-variables.tf\n#############################\n## Application - Variables ##\n#############################\n\n# company name \nvariable \"company\" {\n  type        = string\n  description = \"This variable defines thecompany name used to build resources\"\n}\n\n# application name \nvariable \"app_name\" {\n  type        = string\n  description = \"This variable defines the application name used to build resources\"\n}\n\n# environment\nvariable \"environment\" {\n  type        = string\n  description = \"This variable defines the environment to be built\"\n}\n\n# azure region\nvariable \"location\" {\n  type        = string\n  description = \"Azure region where the resource group will be created\"\n  default     = \"north europe\"\n}\n#File: network-main.tf\n####################\n## Network - Main ##\n####################\n\n# Create a resource group for network\nresource \"azurerm_resource_group\" \"network-rg\" {\n  name     = \"${lower(replace(var.company,\" \",\"-\"))}-${lower(replace(var.app_name,\" \",\"-\"))}-${var.environment}-rg\"\n  location = var.location\n\n  tags = {\n    application = var.app_name\n    environment = var.environment\n  }\n}\n\n# Create the network VNET\nresource \"azurerm_virtual_network\" \"network-vnet\" {\n  name                = \"${lower(replace(var.company,\" \",\"-\"))}-${lower(replace(var.app_name,\" \",\"-\"))}-${var.environment}-vnet\"\n  address_space       = [var.network-vnet-cidr]\n  resource_group_name = azurerm_resource_group.network-rg.name\n  location            = azurerm_resource_group.network-rg.location\n\n  tags = {\n    application = var.app_name\n    environment = var.environment\n  }\n}\n\n# Create a subnet for Network\nresource \"azurerm_subnet\" \"network-subnet\" {\n  name                 = \"${lower(replace(var.company,\" \",\"-\"))}-${lower(replace(var.app_name,\" \",\"-\"))}-${var.environment}-subnet\"\n  address_prefixes     = [var.network-subnet-cidr]\n  virtual_network_name = azurerm_virtual_network.network-vnet.name\n  resource_group_name  = azurerm_resource_group.network-rg.name\n}\n\n\n#File: network-output.tf\n######################\n## Network - Output ##\n######################\n\noutput \"network_resource_group_id\" {\n  value = azurerm_resource_group.network-rg.id\n}\n\noutput \"network_vnet_id\" {\n  value = azurerm_virtual_network.network-vnet.id\n}\n\noutput \"network_subnet_id\" {\n  value = azurerm_subnet.network-subnet.id\n}\n\n\n#File: network-variables.tf\n##############################\n## Core Network - Variables ##\n##############################\n\nvariable \"network-vnet-cidr\" {\n  type        = string\n  description = \"The CIDR of the network VNET\"\n}\n\nvariable \"network-subnet-cidr\" {\n  type        = string\n  description = \"The CIDR for the network subnet\"\n}\n\n#File: provider-main.tf\n###########################\n## Azure Provider - Main ##\n###########################\n\n# Define Terraform provider\nterraform {\n  required_version = \"~> 1.3\"\n}\n\n# Configure the Azure provider\nprovider \"azurerm\" { \n  features {}  \n  environment     = \"public\"\n  subscription_id = var.azure-subscription-id\n  client_id       = var.azure-client-id\n  client_secret   = var.azure-client-secret\n  tenant_id       = var.azure-tenant-id\n}\n\n#File: provider-variables.tf\n################################\n## Azure Provider - Variables ##\n################################\n\n# Azure authentication variables\n\nvariable \"azure-subscription-id\" {\n  type        = string\n  description = \"Azure Subscription ID\"\n}\n\nvariable \"azure-client-id\" {\n  type        = string\n  description = \"Azure Client ID\"\n}\n\nvariable \"azure-client-secret\" {\n  type        = string\n  description = \"Azure Client Secret\"\n}\n\nvariable \"azure-tenant-id\" {\n  type        = string\n  description = \"Azure Tenant ID\"\n}\n\n#File: qualys-vm-main.tf\n#############################\n## Qualys Appliance - Main ##\n#############################\n\n# Generates a secure private key and encodes it as PEM\nresource \"tls_private_key\" \"qualys\" {\n  algorithm = \"RSA\"\n  rsa_bits  = 4096\n}\n\n# Create an Azure SSH Key\nresource \"azurerm_ssh_public_key\" \"qualys\" {\n  name                = \"kopi-qualys-vm-key\"\n  resource_group_name = azurerm_resource_group.network-rg.name\n  location            = azurerm_resource_group.network-rg.location\n  public_key          = tls_private_key.qualys.public_key_openssh  \n\n  tags = { \n    application = var.app_name\n    environment = var.environment\n  }\n}\n\n# Save file Locally - Use for Debug\nresource \"local_file\" \"qualys\" {\n  depends_on = [azurerm_ssh_public_key.qualys]\n  filename = \"kopi-qualys-vm-key.ssh\"\n  content  = tls_private_key.qualys.private_key_pem\n}\n\n# Create Network Card for qualys VM\nresource \"azurerm_network_interface\" \"qualys-vm-nic\" {\n  depends_on=[azurerm_resource_group.network-rg]\n\n  name                = \"${var.qualys_vm_name}}-nic\"\n  location            = azurerm_resource_group.network-rg.location\n  resource_group_name = azurerm_resource_group.network-rg.name\n  \n  ip_configuration {\n    name                          = \"internal\"\n    subnet_id                     = azurerm_subnet.network-subnet.id\n    private_ip_address_allocation = \"Dynamic\"\n  }\n\n  tags = { \n    application = var.app_name\n    environment = var.environment\n  }\n}\n\n# Create Qualys VM with qualys server\nresource \"azurerm_linux_virtual_machine\" \"qualys-vm\" {\n  depends_on=[azurerm_network_interface.qualys-vm-nic]\n\n  location              = azurerm_resource_group.network-rg.location\n  resource_group_name   = azurerm_resource_group.network-rg.name\n  name                  = var.qualys_vm_name\n  network_interface_ids = [azurerm_network_interface.qualys-vm-nic.id]\n  size                  = var.qualys_vm_size\n\n  computer_name  = var.qualys_vm_name\n  custom_data    = base64encode(\"PERSCODE=${var.personalization_code}\")\n\n  admin_username = var.qualys_admin_username\n  admin_ssh_key {\n    username   = var.qualys_admin_username\n    public_key = azurerm_ssh_public_key.qualys.public_key\n  }\n  disable_password_authentication = true\n\n  os_disk {\n    name                 = \"${var.qualys_vm_name}-disk\"\n    caching              = \"None\"\n    storage_account_type = \"StandardSSD_LRS\"\n  }\n\n  plan {\n    publisher = var.image_publisher\n    product   = var.image_offer\n    name      = var.image_sku\n  }\n\n  source_image_reference {\n    publisher = var.image_publisher\n    offer     = var.image_offer\n    sku       = var.image_sku\n    version   = var.image_version\n  }\n\n  tags = {\n    application = var.app_name\n    environment = var.environment\n  }\n}\n\n\n#File: qualys-vm-nsg.tf\n############################\n## Qualys Appliance - NSG ##\n############################\n\n# Create Security Group to access Qualys\nresource \"azurerm_network_security_group\" \"qualys-vm-nsg\" {\n  depends_on=[azurerm_resource_group.network-rg]\n\n  name                = \"${var.qualys_vm_name}-nsg\"\n  location            = azurerm_resource_group.network-rg.location\n  resource_group_name = azurerm_resource_group.network-rg.name\n\n  security_rule {\n    name                       = \"AllowHTTPS\"\n    description                = \"Allow HTTPS\"\n    priority                   = 100\n    direction                  = \"Inbound\"\n    access                     = \"Allow\"\n    protocol                   = \"Tcp\"\n    source_port_range          = \"*\"\n    destination_port_range     = \"443\"\n    source_address_prefix      = \"Internet\"\n    destination_address_prefix = \"*\"\n  }\n\n  security_rule {\n    name                       = \"AllowSSH\"\n    description                = \"Allow SSH\"\n    priority                   = 150\n    direction                  = \"Inbound\"\n    access                     = \"Allow\"\n    protocol                   = \"Tcp\"\n    source_port_range          = \"*\"\n    destination_port_range     = \"22\"\n    source_address_prefix      = \"Internet\"\n    destination_address_prefix = \"*\"\n  }\n  \n  tags = {\n    environment = var.environment\n  }\n}\n\n# Associate the qualys NSG with the subnet\nresource \"azurerm_subnet_network_security_group_association\" \"qualys-vm-nsg-association\" {\n  depends_on=[azurerm_resource_group.network-rg]\n\n  subnet_id                 = azurerm_subnet.network-subnet.id\n  network_security_group_id = azurerm_network_security_group.qualys-vm-nsg.id\n}\n#File: qualys-vm-output.tf\n###############################\n## Qualys Appliance - Output ##\n###############################\n\noutput \"qualys_vm_name\" {\n  description = \"Qualys Virtual Machine name\"\n  value       = azurerm_linux_virtual_machine.qualys-vm.name\n}\n\noutput \"qualys_vm_ip_address\" {\n  description = \"Qualys Virtual Machine IP Address\"\n  value       = azurerm_linux_virtual_machine.qualys-vm.private_ip_address\n}\n\noutput \"qualys_vm_admin_username\" {\n  description = \"Username password for the Virtual Machine\"\n  value       = var.qualys_admin_username\n}\n\n\n#File: qualys-vm-variables.tf\n##################################\n## Qualys Appliance - Variables ##\n##################################\n\n## Qualys VM Variables\n\nvariable \"qualys_vm_name\" {\n  type        = string\n  description = \"Qualys Virtual Machine Name\"\n  default     = \"kopi-qualys-vm\"\n}\n\nvariable \"qualys_vm_size\" {\n  type        = string\n  description = \"Qualys Virtual Machine Size\"\n  default     = \"Standard_D2s_v3\"\n}\n\nvariable \"qualys_admin_username\" {\n  type        = string\n  description = \"Administrator username for Qualys VM\"\n  default     = \"qualyssupport\"\n}\n\nvariable \"personalization_code\" {\n  type        = string\n  description = \"Qualys Virtual Scanner personalization code\"\n}\n\n## Images Variables \n\nvariable \"image_publisher\" {\n  type        = string\n  description = \"Virtual machine image publisher\"\n  default     = \"qualysguard\"\n}\n    \nvariable \"image_offer\" {\n  type        = string\n  description = \"Virtual machine image offer\"\n  default     = \"qualys-virtual-scanner\"\n}\n\nvariable \"image_sku\" {\n  type        = string\n  description = \"Virtual machine image sku\"\n  default     = \"qvsa\"\n}\n\nvariable \"image_version\" {\n  type        = string\n  description = \"Virtual machine image version\"\n  default     = \"2.7.3102\"\n}"}]}
{"messages": [{"role": "user", "content": "Create a resource group named with the application's name and environment in the specified location. Create an app service plan using Linux with a Basic tier and size B1 in the created resource group. Deploy an app service using the specified Docker image and tag, linking it to the app service plan. Configure the app service to listen on the defined port and tag it with owner and environment information. Output the default URL to access the app service."}, {"role": "assistant", "content": "\n#File: app-service.tf\n# Create a Resource Group\nresource \"azurerm_resource_group\" \"appservice-rg\" {\n  name = \"${var.app_name}-${var.environment}_AppService-rg\"\n  location = var.location\n \n  tags = {\n    owner = var.owner\n    environment = var.environment\n  }\n}\n\n# Create app service plan\nresource \"azurerm_app_service_plan\" \"service-plan\" {\n  name = \"${var.app_name}-${var.environment}_AppService-plan\"\n  location = azurerm_resource_group.appservice-rg.location\n  resource_group_name = azurerm_resource_group.appservice-rg.name\n  kind = \"Linux\"\n  reserved = true\n \n  sku {\n    tier = \"Basic\"\n    size = \"B1\"\n  }\n \n  tags = {\n    owner = var.owner\n    environment = var.environment\n  }\n}\n\n# Create app service\nresource \"azurerm_app_service\" \"app-service\" {\n  name = \"${var.app_name}-${var.environment}\"\n  location = azurerm_resource_group.appservice-rg.location\n  resource_group_name = azurerm_resource_group.appservice-rg.name\n  app_service_plan_id = azurerm_app_service_plan.service-plan.id  \n \n  site_config {\n    linux_fx_version = \"DOCKER|${var.docker_image}:${var.docker_image_tag}\"\n  }\n \n  app_settings = {\n    \"WEBSITES_PORT\" = var.app_port\n  }\n \n  tags = {\n    owner = var.owner\n    environment = var.environment\n  }\n}\n\noutput \"app_service_url\" {\n  value       = azurerm_app_service.app-service.default_site_hostname\n  description = \"Default URL to access the app service.\" \n}\n\n#File: main.tf\nterraform {\n  required_version = \">= 0.12\"\n}\n\n# Configure the Azure provider\nprovider \"azurerm\" {\n  environment = \"public\"\n  version     = \">= 2.15.0\"\n  features {}\n}\n#File: variables.tf\nvariable \"app_name\" {\n  type        = string\n  description = \"This variable defines the application name used to build resources.  It must be unique on Azure.\"\n}\n\nvariable \"app_port\" {\n  type        = string\n  description = \"Port used by the web app\"\n  default     = \"8080\"\n}\n\nvariable \"docker_image\" {\n  type        = string\n  description = \"Docker image name to deploy in the app service\"\n}\n\nvariable \"docker_image_tag\" {\n  type        = string\n  description = \"Docker image tag to deploy\"\n  default     = \"latest\"\n}\n\nvariable \"environment\" {\n  type        = string\n  description = \"This variable defines the environment to be built\"\n}\n\nvariable \"location\" {\n  type        = string\n  description = \"Azure region where the resource group will be created\"\n  default     = \"canadacentral\"\n}\n\nvariable \"owner\" {\n  type        = string\n  description = \"Specify the owner of the resource\"\n}\n\nvariable \"description\" {\n  type        = string\n  description = \"Provide a description of the resource\"\n}\n"}]}
{"messages": [{"role":"user","content":"Create a Go-based AWS Lambda function and expose it via a REST API (API Gateway) at the /time path. The API is integrated with the Lambda function using an AWS_PROXY setup, allowing HTTP requests to be passed directly to the function."},{"role":"assistant","content":"provider \"aws\" {\r\n  region  = \"us-east-1\"\r\n}\r\n\r\nresource \"aws_lambda_function\" \"time\" {\r\n  function_name    = \"time\"\r\n  handler          = \"aws-lambda-go\"\r\n  source_code_hash = \"data.archive_file.zip.output_base64sha256\"\r\n  role             = \"${aws_iam_role.iam_for_lambda.arn}\"\r\n  runtime          = \"go1.x\"\r\n  memory_size      = 128\r\n  timeout          = 10\r\n}\r\n\r\nresource \"aws_iam_role\" \"iam_for_lambda\" {\r\n  name = \"iam_for_lambda\"\r\n\r\n  assume_role_policy = <<EOF\r\n{\r\n  \"Statement\": [\r\n    {\r\n      \"Action\": \"sts:AssumeRole\",\r\n      \"Principal\": {\r\n        \"Service\": \"lambda.amazonaws.com\"\r\n      },\r\n      \"Effect\": \"Allow\",\r\n      \"Sid\": \"\"\r\n    }\r\n  ]\r\n}\r\nEOF\r\n}\r\n\r\nresource \"aws_api_gateway_rest_api\" \"api\" {\r\n  name = \"time_api\"\r\n}\r\n\r\nresource \"aws_api_gateway_resource\" \"resource\" {\r\n  path_part   = \"time\"\r\n  parent_id   = aws_api_gateway_rest_api.api.root_resource_id\r\n  rest_api_id = aws_api_gateway_rest_api.api.id\r\n}\r\n\r\nresource \"aws_api_gateway_method\" \"method\" {\r\n  rest_api_id   = aws_api_gateway_rest_api.api.id\r\n  resource_id   = aws_api_gateway_resource.resource.id\r\n  http_method   = \"GET\"\r\n  authorization = \"NONE\"\r\n}\r\n\r\nresource \"aws_api_gateway_integration\" \"integration\" {\r\n  rest_api_id             = aws_api_gateway_rest_api.api.id\r\n  resource_id             = aws_api_gateway_resource.resource.id\r\n  http_method             = aws_api_gateway_method.method.http_method\r\n  integration_http_method = \"POST\"\r\n  type                    = \"AWS_PROXY\"\r\n  uri                     = aws_lambda_function.time.invoke_arn\r\n}\r\n\r\nresource \"aws_lambda_permission\" \"apigw_lambda\" {\r\n  statement_id  = \"AllowExecutionFromAPIGateway\"\r\n  action        = \"lambda:InvokeFunction\"\r\n  function_name = aws_lambda_function.time.function_name\r\n  principal     = \"apigateway.amazonaws.com\"\r\n\r\n  source_arn = \"${aws_api_gateway_rest_api.api.execution_arn}/*/*/*\"\r\n}\r\n\r\nresource \"aws_api_gateway_deployment\" \"time_deploy\" {\r\n  depends_on = [aws_api_gateway_integration.integration]\r\n\r\n  rest_api_id = aws_api_gateway_rest_api.api.id\r\n  stage_name  = \"v1\"\r\n\r\n}\r\n\r\noutput \"url\" {\r\n  value = \"${aws_api_gateway_deployment.time_deploy.invoke_url}${aws_api_gateway_resource.resource.path}\"\r\n}"}]}
{"messages": [{"role": "user", "content": "Create a random resource group name using a specified prefix. Establish a resource group in Azure at a given location. Set up a virtual network named \"Vnet\" with a defined address space and link it to the resource group. Create a subnet within the virtual network and allocate a dynamic public IP address for external access. Configure a network security group with rules for SSH and HTTP traffic, and deploy a virtual machine with a cloud-init script for boot diagnostics and environment setup."}, {"role": "assistant", "content": "\n#File: main.tf\nresource \"random_pet\" \"rg_name\" {\n  prefix = var.resource_group_name_prefix\n}\n\nresource \"azurerm_resource_group\" \"rg\" {\n  location = var.resource_group_location\n  name     = random_pet.rg_name.id\n}\n\n# Create virtual network\nresource \"azurerm_virtual_network\" \"terraform_network\" {\n  name                = \"Vnet\"\n  address_space       = [\"10.0.0.0/16\"]\n  location            = azurerm_resource_group.rg.location\n  resource_group_name = azurerm_resource_group.rg.name\n}\n\n# Create subnet\nresource \"azurerm_subnet\" \"terraform_subnet\" {\n  name                 = \"Subnet\"\n  resource_group_name  = azurerm_resource_group.rg.name\n  virtual_network_name = azurerm_virtual_network.terraform_network.name\n  address_prefixes     = [\"10.0.1.0/24\"]\n}\n\n# Create public IP\nresource \"azurerm_public_ip\" \"public_ip\" {\n  name                = \"PublicIP\"\n  location            = azurerm_resource_group.rg.location\n  resource_group_name = azurerm_resource_group.rg.name\n  allocation_method   = \"Dynamic\"\n  domain_name_label =  var.SERVER_DOMAIN\n}\n\n# Create Network Security Group and rule\nresource \"azurerm_network_security_group\" \"terraform_nsg\" {\n  name                = \"NetworkSecurityGroup\"\n  location            = azurerm_resource_group.rg.location\n  resource_group_name = azurerm_resource_group.rg.name\n\n  security_rule {\n    name                       = \"SSH\"\n    priority                   = 1001\n    direction                  = \"Inbound\"\n    access                     = \"Allow\"\n    protocol                   = \"Tcp\"\n    source_port_range          = \"*\"\n    destination_port_range     = \"22\"\n    source_address_prefix      = \"*\"\n    destination_address_prefix = \"*\"\n  }\n\n  security_rule {\n  name                       = \"API-HTTP\"\n  priority                   = 1002\n  direction                  = \"Inbound\"\n  access                     = \"Allow\"\n  protocol                   = \"Tcp\"\n  source_port_range          = \"*\"\n  destination_port_range     = \"30000\"\n  source_address_prefix      = \"*\"\n  destination_address_prefix = \"*\"\n}\n\n  security_rule {\n  name                       = \"MC-SERVER\"\n  priority                   = 1003\n  direction                  = \"Inbound\"\n  access                     = \"Allow\"\n  protocol                   = \"Tcp\"\n  source_port_range          = \"*\"\n  destination_port_range     = \"30001-30010\"\n  source_address_prefix      = \"*\"\n  destination_address_prefix = \"*\"\n}\n\n}\n\n# Associate public IP with network interface of virtual machine\nresource \"azurerm_network_interface\" \"terraform_nic\" {\n  name                = \"NIC1\"\n  location            = azurerm_resource_group.rg.location\n  resource_group_name = azurerm_resource_group.rg.name\n\n  ip_configuration {\n    name                          = \"nic_configuration1\"\n    subnet_id                     = azurerm_subnet.terraform_subnet.id\n    private_ip_address_allocation = \"Dynamic\"\n    public_ip_address_id          = azurerm_public_ip.public_ip.id\n  }\n}\n\n# Generate random text for unique storage account name\nresource \"random_id\" \"random_id\" {\n  keepers = {\n    resource_group = azurerm_resource_group.rg.name\n  }\n  byte_length = 8\n}\n\n# Create storage account for boot diagnostics\nresource \"azurerm_storage_account\" \"storage_account\" {\n  name                    = \"diag${random_id.random_id.hex}\"\n  location                = azurerm_resource_group.rg.location\n  resource_group_name     = azurerm_resource_group.rg.name\n  account_tier            = \"Standard\"\n  account_replication_type = \"LRS\"\n}\n\n# creating cloud init script\ndata \"template_cloudinit_config\" \"vm\" {\n  gzip          = true\n  base64_encode = true\n\n part {\n    content_type = \"text/cloud-config\"\n    content = <<EOF\n    package_update: true\n    package_upgrade: true\n    packages:\n      - python3\n      - python3-pip\n      - python3-venv\n      - docker.io\n      - git\n    EOF\n  }\n\n  part {\n  content_type = \"text/cloud-config\"\n  content = <<EOF\n    runcmd:\n      - date +\"%T.%N\"\n      - echo \"Start cloud init\"\n      - mkdir /tmp/workspace\n      - cd /tmp/workspace\n      - date +\"%T.%N\"\n      - echo \"Clone repo\"\n      - git clone https://github.com/fl028/k8s-minecraft-server-provider.git\n      - date +\"%T.%N\"\n      - echo \"Start k3s installation\"\n      - cd\n      - ufw disable\n      - curl -sfL https://get.k3s.io | sh -s - --write-kubeconfig-mode=644\n      - date +\"%T.%N\"\n      - echo \"Sleeping - k3s installation\"\n      - sleep 60\n      - date +\"%T.%N\"\n      - echo \"Cube config\"\n      - mkdir /root/.kube\n      - cp /etc/rancher/k3s/k3s.yaml /root/.kube/config\n      - export KUBECONFIG=/root/.kube/config\n      - date +\"%T.%N\"\n      - echo \"Helm setup\"\n      - mkdir /tmp/workspace/helm-download\n      - curl -fsSL -o /tmp/workspace/helm-download/get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3\n      - chmod 700 /tmp/workspace/helm-download/get_helm.sh\n      - /tmp/workspace/helm-download/get_helm.sh\n      - sleep 10\n      - date +\"%T.%N\"\n      - echo \"docker setup\"\n      - docker run -d -p 5000:5000 --restart=always --name registry registry:2\n      - echo \"Verify\"\n      - sleep 6\n      - date +\"%T.%N\"\n      - docker ps\n      - echo\n      - kubectl cluster-info\n      - echo\n      - kubectl get pods,services -A -o wide\n      - date +\"%T.%N\"\n      - echo \"minecraft data prep\"\n      - mkdir /tmp/workspace/minecraft-data\n      - echo \"operator prep\"\n      - cd /tmp/workspace/k8s-minecraft-server-provider/operator-sdk/smooth-mc-operator\n      - curl -LO https://github.com/operator-framework/operator-sdk/releases/download/v1.31.0/operator-sdk_linux_amd64\n      - chmod +x operator-sdk_linux_amd64 && sudo mv operator-sdk_linux_amd64 /usr/local/bin/operator-sdk\n      - make docker-build IMG=localhost:5000/smooth-mc-operator-chart\n      - make docker-build docker-push IMG=localhost:5000/smooth-mc-operator-chart\n      - make deploy IMG=localhost:5000/smooth-mc-operator-chart\n      - echo \"Verify\"\n      - sleep 10\n      - date +\"%T.%N\"\n      - kubectl get pods -A -o wide\n      - echo\n      - echo \"API prep\"\n      - cd /tmp/workspace/k8s-minecraft-server-provider/python/api\n      - cp /root/.kube/config /tmp/workspace/k8s-minecraft-server-provider/python/api/config\n      - docker build -t localhost:5000/mc-provider-api-container .\n      - sleep 5\n      - docker push localhost:5000/mc-provider-api-container\n      - sleep 5\n      - helm install mc-provider-api /tmp/workspace/k8s-minecraft-server-provider/helm/mc-provider-api\n      - echo \"Verify\"\n      - sleep 10\n      - date +\"%T.%N\"\n      - kubectl get pods -A -o wide\n      - date +\"%T.%N\"\n      - echo \"Done\"\n    EOF\n  }\n}\n\n# Create virtual machine (Standard B4ms (4 vcpus, 16 GiB memory))\nresource \"azurerm_linux_virtual_machine\" \"terraform_vm\" {\n  name                   = \"vm1\"\n  location               = azurerm_resource_group.rg.location\n  resource_group_name    = azurerm_resource_group.rg.name\n  network_interface_ids  = [azurerm_network_interface.terraform_nic.id] \n  size                   = \"Standard_B4ms\"          \n\n  custom_data = data.template_cloudinit_config.vm.rendered \n\n  computer_name  = \"vm1\"\n  admin_username = var.username\n\n  os_disk {\n    name                 = \"osdisk1\"\n    caching              = \"ReadWrite\"\n    storage_account_type = \"Premium_LRS\"\n  }\n\n  source_image_reference {\n    publisher = \"canonical\"\n    offer     = \"0001-com-ubuntu-server-jammy\"\n    sku       = \"22_04-lts\"\n    version   = \"latest\"\n  }\n\n  admin_ssh_key {\n    username   = var.username\n    public_key = jsondecode(azapi_resource_action.ssh_public_key_gen.output).publicKey\n  }\n\n  boot_diagnostics {\n    storage_account_uri = azurerm_storage_account.storage_account.primary_blob_endpoint  # Use the storage account for the first VM\n  }\n}\n\n# Output variables to display the SSH command and IP\noutput \"ssh_command_vm1\"{\n  value = \"ssh -i ./private_key.pem azureadmin@${azurerm_public_ip.public_ip.ip_address}\"\n}\n\nresource \"local_file\" \"vscode_ssh_config\" {\n  filename = \"vscode_ssh_config\"\n  content = <<-EOF\n    Host vm1\n        HostName ${azurerm_public_ip.public_ip.ip_address}\n        User azureadmin\n        IdentityFile ${var.PROJECT_ROOT_PATH}\\terraform\\infrastructure\\${var.private_key_filename}\n  EOF\n}\n\n#File: providers.tf\nterraform {\n  required_providers {\n    azapi = {\n      source = \"Azure/azapi\"\n      version = \"1.7.0\"\n    }\n    azurerm = {\n      source = \"hashicorp/azurerm\"\n      version = \"3.71.0\"\n    }\n    random = {\n      source = \"hashicorp/random\"\n      version = \"3.5.1\"\n    }\n    local = {\n      source = \"hashicorp/local\"\n      version = \"2.4.0\"\n    }\n  }\n}\n\nprovider \"azapi\" {\n  subscription_id = var.AZURE_SUBSCRIPTION_ID\n  tenant_id       = var.AZURE_TENANT_ID\n  client_id       = var.AZURE_CLIENT_ID\n  client_secret   = var.AZURE_CLIENT_SECRET\n}\n\nprovider \"azurerm\" {\n  features {}\n\n  subscription_id = var.AZURE_SUBSCRIPTION_ID\n  tenant_id       = var.AZURE_TENANT_ID\n  client_id       = var.AZURE_CLIENT_ID\n  client_secret   = var.AZURE_CLIENT_SECRET\n}\n\nprovider \"random\" {\n  # Configuration options\n}\n\nprovider \"local\" {\n  # Configuration options\n}\n#File: ssh.tf\nresource \"random_pet\" \"ssh_key_name\" {\n  prefix    = \"ssh\"\n  separator = \"\"\n}\n\nresource \"azapi_resource_action\" \"ssh_public_key_gen\" {\n  type        = \"Microsoft.Compute/sshPublicKeys@2022-11-01\"\n  resource_id = azapi_resource.ssh_public_key.id\n  action      = \"generateKeyPair\"\n  method      = \"POST\"\n\n  response_export_values = [\"publicKey\", \"privateKey\"]\n}\n\nresource \"azapi_resource\" \"ssh_public_key\" {\n  type      = \"Microsoft.Compute/sshPublicKeys@2022-11-01\"\n  name      = random_pet.ssh_key_name.id\n  location  = azurerm_resource_group.rg.location\n  parent_id = azurerm_resource_group.rg.id\n}\n\nvariable \"private_key_filename\" {\n  description = \"Filename for the private key PEM file\"\n  type        = string\n  default     = \"private_key.pem\"\n}\n\n# Create a file for the private key\nresource \"local_file\" \"private_key_file\" {\n  filename = var.private_key_filename\n  content  = jsondecode(azapi_resource_action.ssh_public_key_gen.output).privateKey\n}\n\nlocals {\n  private_key_content = local_file.private_key_file.content\n}\n\n\n#File: vars.tf\nvariable \"AZURE_SUBSCRIPTION_ID\" {\n  description = \"Azure config\"\n  type        = string\n}\n\nvariable \"AZURE_TENANT_ID\" {\n  description = \"Azure config\"\n  type        = string\n}\n\nvariable \"AZURE_CLIENT_ID\" {\n  description = \"Azure config\"\n  type        = string\n}\n\nvariable \"AZURE_CLIENT_SECRET\" {\n  description = \"Azure config\"\n  type        = string\n}\n\nvariable \"SERVER_DOMAIN\" {\n  description = \"Your server domain name\"\n  type        = string\n  default     = \"fl028\"\n}\n\nvariable \"PROJECT_ROOT_PATH\" {\n  description = \"Path to the project root directory\"\n  type        = string\n}\n\nvariable \"resource_group_location\" {\n  default     = \"westeurope\"\n  description = \"Location of the resource group.\"\n}\n\nvariable \"resource_group_name_prefix\" {\n  type        = string\n  default     = \"rg\"\n  description = \"Prefix of the resource group name that's combined with a random ID so name is unique in your Azure subscription.\"\n}\n\nvariable \"username\" {\n  type        = string\n  description = \"The username for the local account that will be created on the new VM.\"\n  default     = \"azureadmin\"\n}\n\n"}]}
{"messages": [{"role":"user","content":"Set up a complete AWS infrastructure with a VPC, public and private subnets, a security group allowing SSH, HTTP, HTTPS, and port 3000 access, and an EC2 instance using an Ubuntu 22.04 AMI. Create an SSH key pair, provisions a t3.micro EC2 instance within a public subnet, and applies an Ansible playbook to configure the instance after deployment. The setup supports modular reuse and includes variable parameters for flexibility in AWS region, profile, networking, and SSH access"},{"role":"assistant","content":"\r\nprovider \"aws\" {\r\n  profile = var.profile\r\n  region  = var.region\r\n}\r\n\r\nvariable \"region\" {\r\n  description = \"The AWS region to use\"\r\n  default     = \"ap-southeast-1\"\r\n}\r\n\r\nvariable \"profile\" {\r\n  description = \"The AWS profile to use\"\r\n  default     = \"default\"\r\n}\r\n\r\nvariable \"vpc_name\" {\r\n  description = \"The name of the VPC\"\r\n  default     = \"dicoding-vpc\"\r\n}\r\n\r\nvariable \"vpc_cidr\" {\r\n  description = \"The CIDR of the VPC\"\r\n  default     = \"10.0.0.0/16\"\r\n}\r\n\r\nvariable \"public_key\" {\r\n  description = \"The public key to use for SSH\"\r\n}\r\n\r\nvariable \"private_key\" {\r\n  description = \"The private key to use for SSH\"\r\n}\r\n\r\n\r\nlocals {\r\n  vpc_name   = var.vpc_name\r\n  vpc_cidr   = var.vpc_cidr\r\n  azs        = slice(data.aws_availability_zones.available.names, 0, 3)\r\n  public_key = var.public_key\r\n}\r\n\r\ndata \"aws_availability_zones\" \"available\" {}\r\n\r\n# Find Ubuntu 22.04 AMI\r\ndata \"aws_ami\" \"ubuntu_22_04\" {\r\n  owners      = [\"099720109477\"] # Canonical\r\n  most_recent = \"true\"\r\n\r\n  filter {\r\n    name   = \"name\"\r\n    values = [\"ubuntu/images/hvm-ssd/ubuntu-jammy-22.04-amd64-server-*\"]\r\n  }\r\n  filter {\r\n    name   = \"virtualization-type\"\r\n    values = [\"hvm\"]\r\n  }\r\n}\r\n\r\n# Create a VPC\r\nmodule \"aws_vpc\" {\r\n  source  = \"terraform-aws-modules/vpc/aws\"\r\n\r\n  name = local.vpc_name\r\n  cidr = local.vpc_cidr\r\n  azs  = local.azs\r\n\r\n  public_subnets  = [for k, v in local.azs : cidrsubnet(local.vpc_cidr, 8, k)]\r\n  private_subnets = [for k, v in local.azs : cidrsubnet(local.vpc_cidr, 8, k + 10)]\r\n\r\n  create_igw           = true\r\n  enable_nat_gateway   = false\r\n  single_nat_gateway   = true\r\n  enable_dns_hostnames = true\r\n  enable_dns_support   = true\r\n}\r\n\r\n# Create a Security Group\r\nresource \"aws_security_group\" \"instance_sg\" {\r\n  name        = \"dicoding-sg\"\r\n  description = \"Allow SSH, HTTP, HTTPS & port 3000 inbound traffic\"\r\n  vpc_id      = module.aws_vpc.vpc_id\r\n\r\n  ingress {\r\n    description      = \"SSH from internet\"\r\n    from_port        = 22\r\n    to_port          = 22\r\n    protocol         = \"tcp\"\r\n    cidr_blocks      = [\"0.0.0.0/0\"]\r\n    ipv6_cidr_blocks = [\"::/0\"]\r\n  }\r\n\r\n  ingress {\r\n    description      = \"HTTP from internet\"\r\n    from_port        = 80\r\n    to_port          = 80\r\n    protocol         = \"tcp\"\r\n    cidr_blocks      = [\"0.0.0.0/0\"]\r\n    ipv6_cidr_blocks = [\"::/0\"]\r\n  }\r\n\r\n  ingress {\r\n    description      = \"HTTPS from internet\"\r\n    from_port        = 443\r\n    to_port          = 443\r\n    protocol         = \"tcp\"\r\n    cidr_blocks      = [\"0.0.0.0/0\"]\r\n    ipv6_cidr_blocks = [\"::/0\"]\r\n  }\r\n\r\n  ingress {\r\n    description      = \"Custom HTTP port from internet\"\r\n    from_port        = 3000\r\n    to_port          = 3000\r\n    protocol         = \"tcp\"\r\n    cidr_blocks      = [\"0.0.0.0/0\"]\r\n    ipv6_cidr_blocks = [\"::/0\"]\r\n  }\r\n\r\n  egress {\r\n    from_port        = 0\r\n    to_port          = 0\r\n    protocol         = \"-1\"\r\n    cidr_blocks      = [\"0.0.0.0/0\"]\r\n    ipv6_cidr_blocks = [\"::/0\"]\r\n  }\r\n}\r\n\r\n# Create a keypair for ec2 instance\r\nresource \"aws_key_pair\" \"instance_key\" {\r\n  key_name   = \"instance-keypair\"\r\n  public_key = file(local.public_key)\r\n}\r\n\r\n# Create a EC2 Instance\r\nmodule \"ec2_instance\" {\r\n  source  = \"terraform-aws-modules/ec2-instance/aws\"\r\n\r\n  name = \"single-instance\"\r\n\r\n  ami                    = data.aws_ami.ubuntu_22_04.id\r\n  instance_type          = \"t3.micro\"\r\n  key_name               = aws_key_pair.instance_key.id\r\n  vpc_security_group_ids = [aws_security_group.instance_sg.id]\r\n  subnet_id              = module.aws_vpc.public_subnets[0]\r\n}\r\n\r\n# Provisioner EC2 instance with Terraform & Ansible\r\nresource \"null_resource\" \"ansible\" {\r\n  provisioner \"local-exec\" {\r\n    command = \"ssh-keyscan -H ${module.ec2_instance.public_ip} >> ~/.ssh/known_hosts\"\r\n  }\r\n\r\n  provisioner \"local-exec\" {\r\n    command = \"ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -u ubuntu -i '${module.ec2_instance.public_ip},' --private-key ${var.private_key} -e 'pub_key=${var.public_key}' playbooks/setup-webserver.yml\"\r\n  }\r\n\r\n  depends_on = [\r\n    module.ec2_instance,\r\n  ]\r\n}\r\n"}]}
{"messages": [{"role": "user", "content": "Create a set of variables for your Terraform GCP configuration including company name, application name, domain name, and environment. Use these variables to configure a Google Compute Engine (GCE) instance with a specified machine type in a given zone. Implement firewall rules to allow HTTP, HTTPS, SSH, and RDP traffic. Initialize a VPC and a public subnet with the defined CIDR range. Ensure the startup script installs and enables Apache on the GCE instance upon creation."}, {"role": "assistant", "content": "\n#File: app-variables.tf\n#############################\n## Application - Variables ##\n#############################\n\n# company name \nvariable \"company\" {\n  type        = string\n  description = \"This variable defines the company name used to build resources\"\n}\n\n# application name \nvariable \"app_name\" {\n  type        = string\n  description = \"This variable defines the application name used to build resources\"\n}\n\n# domain name \nvariable \"app_domain\" {\n  type        = string\n  description = \"This variable defines the domain name used to build resources\"\n}\n\n# environment\nvariable \"environment\" {\n  type        = string\n  description = \"This variable defines the environment to be built\"\n}\n\n\n#File: linux-vm-main.tf\n#########################\n## GCP Linux VM - Main ##\n#########################\n\n# Terraform plugin for creating random ids\nresource \"random_id\" \"instance_id\" {\n  byte_length = 4\n}\n\n# Bootstrapping Script to Install Apache\ndata \"template_file\" \"linux-metadata\" {\ntemplate = <<EOF\nsudo apt-get update; \nsudo apt-get install -yq build-essential apache2;\nsudo systemctl start apache2;\nsudo systemctl enable apache2;\nEOF\n}\n\n# Create VM\nresource \"google_compute_instance\" \"vm_instance_public\" {\n  name         = \"${lower(var.company)}-${lower(var.app_name)}-${var.environment}-vm${random_id.instance_id.hex}\"\n  machine_type = var.linux_instance_type\n  zone         = var.gcp_zone\n  hostname     = \"${var.app_name}-vm${random_id.instance_id.hex}.${var.app_domain}\"\n  tags         = [\"ssh\",\"http\"]\n\n  boot_disk {\n    initialize_params {\n      image = var.ubuntu_2004_sku\n    }\n  }\n\n  metadata_startup_script = data.template_file.linux-metadata.rendered\n\n  network_interface {\n    network       = google_compute_network.vpc.name\n    subnetwork    = google_compute_subnetwork.network_subnet.name\n    access_config { }\n  }\n} \n\n#File: linux-vm-output.tf\n###########################\n## GCP Linux VM - Output ##\n###########################\n\noutput \"vm-name\" {\n  value = google_compute_instance.vm_instance_public.name\n}\n\noutput \"vm-external-ip\" {\n  value = google_compute_instance.vm_instance_public.network_interface.0.access_config.0.nat_ip\n}\n\noutput \"vm-internal-ip\" {\n  value = google_compute_instance.vm_instance_public.network_interface.0.network_ip\n}\n\n#File: linux-vm-variables.tf\n##############################\n## GCP Linux VM - Variables ##\n##############################\n\nvariable \"linux_instance_type\" {\n  type        = string\n  description = \"VM instance type\"\n  default     = \"f1-micro\"\n}\n\n#File: network-firewall.tf\n###################################\n## Network Firewall Rules - Main ##\n###################################\n\n# Allow http\nresource \"google_compute_firewall\" \"allow-http\" {\n  name    = \"${var.app_name}-${var.environment}-fw-allow-http\"\n  network = google_compute_network.vpc.name\n  allow {\n    protocol = \"tcp\"\n    ports    = [\"80\"]\n  }\n  \n  source_ranges = [\"0.0.0.0/0\"]\n  target_tags = [\"http\"] \n}\n\n# allow https\nresource \"google_compute_firewall\" \"allow-https\" {\n  name    = \"${var.app_name}-${var.environment}-fw-allow-https\"\n  network = google_compute_network.vpc.name\n  allow {\n    protocol = \"tcp\"\n    ports    = [\"443\"]\n  }\n\n  source_ranges = [\"0.0.0.0/0\"]\n  target_tags = [\"https\"] \n}\n\n# allow ssh\nresource \"google_compute_firewall\" \"allow-ssh\" {\n  name    = \"${var.app_name}-${var.environment}-fw-allow-ssh\"\n  network = google_compute_network.vpc.name\n  allow {\n    protocol = \"tcp\"\n    ports    = [\"22\"]\n  }\n\n  source_ranges = [\"0.0.0.0/0\"]\n  target_tags = [\"ssh\"]\n}\n\n# allow rdp\nresource \"google_compute_firewall\" \"allow-rdp\" {\n  name    = \"${var.app_name}-${var.environment}-fw-allow-rdp\"\n  network = google_compute_network.vpc.name\n  allow {\n    protocol = \"tcp\"\n    ports    = [\"3389\"]\n  }\n\n  source_ranges = [\"0.0.0.0/0\"]\n  target_tags = [\"rdp\"]\n}\n\n#File: network-main.tf\n####################\n## Network - Main ##\n####################\n\n# create VPC\nresource \"google_compute_network\" \"vpc\" {\n  name                    = \"${lower(var.company)}-${lower(var.app_name)}-${var.environment}-vpc\"\n  auto_create_subnetworks = \"false\"\n  routing_mode            = \"GLOBAL\"\n}\n\n# create public subnet\nresource \"google_compute_subnetwork\" \"network_subnet\" {\n  name          = \"${lower(var.company)}-${lower(var.app_name)}-${var.environment}-subnet\"\n  ip_cidr_range = var.network-subnet-cidr\n  network       = google_compute_network.vpc.name\n  region        = var.gcp_region\n}\n\n#File: network-variables.tf\n#########################\n## Network - Variables ##\n#########################\n\nvariable \"network-subnet-cidr\" {\n  type        = string\n  description = \"The CIDR for the network subnet\"\n}\n#File: provider-main.tf\n#########################\n## GCP Provider - Main ##\n#########################\n\n# Define Terraform provider\nterraform {\n  required_version = \"~> 1.0\"\n\n  required_providers {\n    google = {\n      source = \"hashicorp/google\"\n      // version = \"4.11.0\" # pinning version\n    }\n  }\n}\n\nprovider \"google\" {\n  credentials = file(var.gcp_auth_file)\n  project     = var.gcp_project\n  region      = var.gcp_region\n  zone        = var.gcp_zone\n}\n\n#File: provider-variables.tf\n##############################\n## GCP Provider - Variables ##\n##############################\n\n# GCP authentication file\nvariable \"gcp_auth_file\" {\n  type        = string\n  description = \"GCP authentication file\"\n}\n\n# define GCP project name\nvariable \"gcp_project\" {\n  type        = string\n  description = \"GCP project name\"\n}\n\n# define GCP region\nvariable \"gcp_region\" {\n  type        = string\n  description = \"GCP region\"\n}\n\n# define GCP region\nvariable \"gcp_zone\" {\n  type        = string\n  description = \"GCP zone\"\n}\n\n#File: ubuntu-versions.tf\n#####################\n## Ubuntu Versions ##\n#####################\n\nvariable \"ubuntu_1804_sku\" {\n  type        = string\n  description = \"SKU for Ubuntu 18.04 LTS\"\n  default     = \"ubuntu-os-cloud/ubuntu-1804-lts\"\n}\nvariable \"ubuntu_2004_sku\" {\n  type        = string\n  description = \"SKU for Ubuntu 20.04 LTS\"\n  default     = \"ubuntu-os-cloud/ubuntu-2004-lts\"\n}\nvariable \"ubuntu_pro_1604_sku\" {\n  type        = string\n  description = \"SKU for Ubuntu PRO 16.04 LTS\"\n  default     = \"ubuntu-os-pro-cloud/ubuntu-pro-1604-lts\"\n}\nvariable \"ubuntu_pro_1804_sku\" {\n  type        = string\n  description = \"SKU for Ubuntu PRO 18.04 LTS\"\n  default     = \"ubuntu-os-pro-cloud/ubuntu-pro-1804-lts\"\n}\nvariable \"ubuntu_pro_2004_sku\" {\n  type        = string\n  description = \"SKU for Ubuntu PRO 20.04 LTS\"\n  default     = \"ubuntu-os-pro-cloud/ubuntu-pro-2004-lts\"\n}\n"}]}
{"messages": [{"role":"user","content":"Sets a CloudFormation stack to deploy a Datomic query group, using remote state data to fetch configuration details such as system name, key name, and environment-specific values. Construct the stack name and injects parameters into the CloudFormation template, which is sourced from a provided S3 URL. After stack creation, a null_resource runs a script to deploy the Ions code depending on the environment, and the configuration also queries associated Auto Scaling Groups for the deployed stack."},{"role":"assistant","content":"\r\ndata \"aws_caller_identity\" \"current\" {}\r\ndata \"aws_region\" \"current\" {}\r\n\r\ndata \"terraform_remote_state\" \"datomic\" {\r\n  backend = \"s3\"\r\n\r\n  # TODO: Fill in the blanks\r\n  config = {\r\n    bucket         = \"…\"\r\n    key            = \"datomic/terraform.tfstate\"\r\n    region         = \"us-east-1\"\r\n    dynamodb_table = \"…\"\r\n    profile        = \"ops-tools\"\r\n  }\r\n}\r\n\r\nlocals {\r\n  base_stack_name = \"${var.service_name}-qg\"\r\n  split_suffix    = split(\"-\", var.suffix)\r\n  rev             = local.split_suffix[0]\r\n  stack_name      = \"${local.base_stack_name}${local.rev == \"\" ? \"\" : \"-${local.rev}\"}\"\r\n}\r\n\r\nresource \"aws_cloudformation_stack\" \"query_group\" {\r\n  name         = local.stack_name\r\n  capabilities = [\"CAPABILITY_NAMED_IAM\"]\r\n\r\n  parameters = {\r\n    ApplicationName = var.service_name\r\n    EnvironmentMap  = \"{:env \\\"${var.env}\\\" :query-group \\\"${local.stack_name}\\\" :system \\\"${data.terraform_remote_state.datomic.outputs.system_name[var.env]}\\\" :region \\\"${var.region}\\\" :database-name \\\"${var.database_name}\\\"}\"\r\n    InstanceType    = var.instance_type\r\n    KeyName         = data.terraform_remote_state.datomic.outputs.key_name[var.env]\r\n    SystemName      = data.terraform_remote_state.datomic.outputs.system_name[var.env]\r\n  }\r\n\r\n  template_url = var.query_group_cfs_url\r\n}\r\n\r\nresource \"null_resource\" \"ions\" {\r\n  depends_on = [aws_cloudformation_stack.query_group]\r\n\r\n  triggers = {\r\n    query_group_stack_id = aws_cloudformation_stack.query_group.id\r\n  }\r\n\r\n  provisioner \"local-exec\" {\r\n    command = var.env == \"dev\" ? \"cd \\\"${path.module}/ions\\\" && DEPLOYMENT_GROUP=${aws_cloudformation_stack.query_group.outputs[\"CodeDeployDeploymentGroup\"]} bash bin/dev-release.sh\" : \"cd \\\"${path.module}/ions\\\" && ASSUME_ROLE_ARN=${var.assume_role_arn} DEPLOYMENT_GROUP=${aws_cloudformation_stack.query_group.outputs[\"CodeDeployDeploymentGroup\"]} UNAME=${var.rev} REGION=${var.region} bash bin/codebuild-release.sh\"\r\n  }\r\n}\r\n\r\ndata \"aws_autoscaling_groups\" \"query_group\" {\r\n  depends_on = [aws_cloudformation_stack.query_group]\r\n\r\n  filter {\r\n    name   = \"Key\"\r\n    values = [\"aws:cloudformation:stack-name\"]\r\n  }\r\n\r\n  filter {\r\n    name   = \"Value\"\r\n    values = [aws_cloudformation_stack.query_group.name]\r\n  }\r\n}\r\n"}]}
{"messages": [{"role":"user","content":"Set up a highly available AWS environment including a VPC with public and private subnets across two availability zones, internet gateway, NAT gateways, and route tables. It provisions a bastion host for secure SSH access and deploys an RDS PostgreSQL database with multi-AZ support, secured by dedicated security groups. Additionally, it creates IAM roles for Kubernetes certificate management and manages sensitive database credentials via AWS Secrets Manager."},{"role":"assistant","content":"\r\nprovider \"aws\" {\r\n  profile = var.aws_profile\r\n  region  = var.aws_region\r\n}\r\n\r\nresource \"aws_key_pair\" \"authorized_key\" {\r\n  key_name   = var.ec2_key_name\r\n  public_key = var.ec2_key\r\n}\r\n\r\ndata \"aws_ami\" \"ubuntu\" {\r\n  most_recent = true\r\n\r\n  filter {\r\n    name   = \"name\"\r\n    values = [\"ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-*\"]\r\n  }\r\n\r\n  filter {\r\n    name   = \"virtualization-type\"\r\n    values = [\"hvm\"]\r\n  }\r\n\r\n  owners = [\"099720109477\"] # Canonical\r\n}\r\n\r\nvariable \"cluster_name\" {\r\n  description = \"The name to give to this environment. Will be used for naming various resources.\"\r\n  type        = string\r\n}\r\n\r\nvariable \"aws_profile\" {\r\n  description = \"The AWS CLI profile to use\"\r\n  type        = string\r\n}\r\n\r\nvariable \"aws_region\" {\r\n  description = \"AWS region to use\"\r\n  type        = string\r\n}\r\n\r\nvariable \"vpc_cidr\" {\r\n  description = \"The CIDR block for the VPC\"\r\n  type        = string\r\n}\r\n\r\nvariable \"ec2_key_name\" {\r\n  description = \"The name of the public key to inject to instances launched in the VPC\"\r\n  type        = string\r\n}\r\n\r\nvariable \"ec2_key\" {\r\n  description = \"The public key to inject to instances launched in the VPC\"\r\n  type        = string\r\n}\r\n\r\n# Reference: https://docs.aws.amazon.com/autoscaling/ec2/userguide/auto-scaling-dedicated-instances.html\r\nvariable \"vpc_instance_tenancy\" {\r\n  description = \"How are instances distributed across the underlying physical hardware\"\r\n  type        = string\r\n  default     = \"default\"\r\n}\r\n\r\nvariable \"vpc_az1\" {\r\n  description = \"The AZ where *-subnet1 will reside\"\r\n  type        = string\r\n}\r\n\r\nvariable \"vpc_az2\" {\r\n  description = \"The AZ where *-subnet2 will reside\"\r\n  type        = string\r\n}\r\n\r\nvariable \"vpc_public_subnet1_cidr\" {\r\n  description = \"The cidr block to use for public-subnet1\"\r\n  type        = string\r\n}\r\n\r\nvariable \"vpc_public_subnet2_cidr\" {\r\n  description = \"The cidr block to use for public-subnet2\"\r\n  type        = string\r\n}\r\n\r\nvariable \"vpc_private_subnet1_cidr\" {\r\n  description = \"The cidr block to use for private-subnet1\"\r\n  type        = string\r\n}\r\n\r\nvariable \"vpc_private_subnet2_cidr\" {\r\n  description = \"The cidr block to use for private-subnet2\"\r\n  type        = string\r\n}\r\n\r\nvariable \"db_engine\" {\r\n  description = \"The underlying database engine to use\"\r\n  type        = string\r\n  default     = \"postgres\"\r\n}\r\n\r\nvariable \"db_instance_class\" {\r\n  description = \"The instance type to use for the database instances\"\r\n  type        = string\r\n  default     = \"db.t2.micro\"\r\n}\r\n\r\nvariable \"db_multi_az\" {\r\n  description = \"Should the database be multi AZ or not?\"\r\n  type        = bool\r\n  default     = true\r\n}\r\n\r\nvariable \"db_skip_final_snapshot\" {\r\n  description = \"Should we skip snapshot creation just before deleting the DB?\"\r\n  type        = bool\r\n  default     = false\r\n}\r\n\r\nvariable \"db_storage_size_in_gb\" {\r\n  description = \"Size of the database in GB\"\r\n  type        = number\r\n  default     = 20\r\n}\r\n\r\nvariable \"k8s_desired_size\" {\r\n  description = \"Desired number of worker nodes\"\r\n  type        = number\r\n  default     = 2\r\n}\r\n\r\nvariable \"k8s_min_size\" {\r\n  description = \"Minimum number of worker nodes\"\r\n  type        = number\r\n  default     = 2\r\n}\r\n\r\nvariable \"k8s_max_size\" {\r\n  description = \"Maximum number of worker nodes\"\r\n  type        = number\r\n  default     = 2\r\n}\r\n\r\nvariable \"k8s_node_instance_types\" {\r\n  description = \"List of instance types associated with the EKS Node Group\"\r\n  type        = list(any)\r\n  default     = [\"t3.medium\"]\r\n}\r\nresource \"aws_vpc\" \"main\" {\r\n  cidr_block       = var.vpc_cidr\r\n  instance_tenancy = var.vpc_instance_tenancy\r\n\r\n  tags = {\r\n    Name = \"${var.cluster_name}\"\r\n  }\r\n}\r\n\r\nresource \"aws_internet_gateway\" \"gw\" {\r\n  vpc_id = aws_vpc.main.id\r\n\r\n  tags = {\r\n    Name = \"${var.cluster_name}\"\r\n  }\r\n}\r\n\r\nresource \"aws_route\" \"egress\" {\r\n  route_table_id         = aws_vpc.main.main_route_table_id\r\n  destination_cidr_block = \"0.0.0.0/0\"\r\n  gateway_id             = aws_internet_gateway.gw.id\r\n}\r\n\r\n\r\n#\r\n# PUBLIC SUBNET 1 RESOURCES\r\n#\r\n\r\nresource \"aws_subnet\" \"public_subnet1\" {\r\n  vpc_id                  = aws_vpc.main.id\r\n  cidr_block              = var.vpc_public_subnet1_cidr\r\n  availability_zone       = var.vpc_az1\r\n  map_public_ip_on_launch = true\r\n\r\n  tags = {\r\n    Name = \"${var.cluster_name}-public1\"\r\n    # https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.2/deploy/subnet_discovery/\r\n    \"kubernetes.io/role/elb\" = 1\r\n  }\r\n}\r\n\r\nresource \"aws_eip\" \"nat_gw1\" {\r\n  vpc        = true\r\n  depends_on = [aws_internet_gateway.gw]\r\n}\r\n\r\nresource \"aws_nat_gateway\" \"nat_gw1\" {\r\n  allocation_id = aws_eip.nat_gw1.id\r\n  subnet_id     = aws_subnet.public_subnet1.id\r\n  depends_on    = [aws_internet_gateway.gw]\r\n\r\n  tags = {\r\n    Name = \"${var.cluster_name}-1\"\r\n  }\r\n}\r\n\r\n\r\n#\r\n# PUBLIC SUBNET 2 RESOURCES\r\n#\r\n\r\nresource \"aws_subnet\" \"public_subnet2\" {\r\n  vpc_id                  = aws_vpc.main.id\r\n  cidr_block              = var.vpc_public_subnet2_cidr\r\n  availability_zone       = var.vpc_az2\r\n  map_public_ip_on_launch = true\r\n\r\n  tags = {\r\n    Name = \"${var.cluster_name}-public2\"\r\n    # https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.2/deploy/subnet_discovery/\r\n    \"kubernetes.io/role/elb\" = 1\r\n  }\r\n}\r\n\r\nresource \"aws_eip\" \"nat_gw2\" {\r\n  vpc        = true\r\n  depends_on = [aws_internet_gateway.gw]\r\n}\r\n\r\n\r\nresource \"aws_nat_gateway\" \"nat_gw2\" {\r\n  allocation_id = aws_eip.nat_gw2.id\r\n  subnet_id     = aws_subnet.public_subnet2.id\r\n  depends_on    = [aws_internet_gateway.gw]\r\n\r\n  tags = {\r\n    Name = \"${var.cluster_name}-2\"\r\n  }\r\n}\r\n\r\n\r\n#\r\n# PRIVATE SUBNET 1 RESOURCES\r\n#\r\n\r\nresource \"aws_subnet\" \"private_subnet1\" {\r\n  vpc_id                  = aws_vpc.main.id\r\n  cidr_block              = var.vpc_private_subnet1_cidr\r\n  availability_zone       = var.vpc_az1\r\n  map_public_ip_on_launch = false\r\n\r\n  tags = {\r\n    Name = \"${var.cluster_name}-private1\"\r\n    # https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.2/deploy/subnet_discovery/\r\n    \"kubernetes.io/role/internal-elb\" = 1\r\n  }\r\n}\r\n\r\nresource \"aws_route_table\" \"private_subnet1_egress\" {\r\n  vpc_id = aws_vpc.main.id\r\n\r\n  route {\r\n    cidr_block     = \"0.0.0.0/0\"\r\n    nat_gateway_id = aws_nat_gateway.nat_gw1.id\r\n  }\r\n\r\n  tags = {\r\n    Name = \"${var.cluster_name}-private-subnet1-egress\"\r\n  }\r\n}\r\n\r\nresource \"aws_route_table_association\" \"private_subnet1_egress\" {\r\n  subnet_id      = aws_subnet.private_subnet1.id\r\n  route_table_id = aws_route_table.private_subnet1_egress.id\r\n}\r\n\r\n\r\n#\r\n# PRIVATE SUBNET 2 RESOURCES\r\n#\r\n\r\nresource \"aws_subnet\" \"private_subnet2\" {\r\n  vpc_id                  = aws_vpc.main.id\r\n  cidr_block              = var.vpc_private_subnet2_cidr\r\n  availability_zone       = var.vpc_az2\r\n  map_public_ip_on_launch = false\r\n\r\n  tags = {\r\n    Name = \"${var.cluster_name}-private2\"\r\n    # https://kubernetes-sigs.github.io/aws-load-balancer-controller/v2.2/deploy/subnet_discovery/\r\n    \"kubernetes.io/role/internal-elb\" = 1\r\n  }\r\n}\r\n\r\nresource \"aws_route_table\" \"private_subnet2_egress\" {\r\n  vpc_id = aws_vpc.main.id\r\n\r\n  route {\r\n    cidr_block     = \"0.0.0.0/0\"\r\n    nat_gateway_id = aws_nat_gateway.nat_gw2.id\r\n  }\r\n\r\n  tags = {\r\n    Name = \"${var.cluster_name}-private-subnet2-egress\"\r\n  }\r\n}\r\n\r\nresource \"aws_route_table_association\" \"private_subnet2_egress\" {\r\n  subnet_id      = aws_subnet.private_subnet2.id\r\n  route_table_id = aws_route_table.private_subnet2_egress.id\r\n}\r\nresource \"aws_security_group\" \"bastion\" {\r\n  vpc_id = aws_vpc.main.id\r\n\r\n  ingress {\r\n    description = \"SSH from the Internet\"\r\n    from_port   = 22\r\n    to_port     = 22\r\n    protocol    = \"tcp\"\r\n    cidr_blocks = [\"0.0.0.0/0\"]\r\n  }\r\n\r\n  egress {\r\n    description = \"SSH to VPC instances\"\r\n    from_port   = 22\r\n    to_port     = 22\r\n    protocol    = \"tcp\"\r\n    cidr_blocks = [var.vpc_cidr]\r\n  }\r\n\r\n  tags = {\r\n    Name = \"${var.cluster_name}-bastion\"\r\n  }\r\n}\r\n\r\n\r\nresource \"aws_instance\" \"bastion\" {\r\n  ami                    = data.aws_ami.ubuntu.id\r\n  instance_type          = \"t2.micro\"\r\n  subnet_id              = aws_subnet.public_subnet1.id\r\n  key_name               = var.ec2_key_name\r\n  vpc_security_group_ids = [aws_security_group.bastion.id]\r\n\r\n  tags = {\r\n    Name = \"${var.cluster_name}-bastion\"\r\n  }\r\n}\r\n# Create a policy that will later allow cert-manager running on the k8s\r\n# cluster to manage certain AWS resources on our behalf.\r\n#\r\n# Reference: https://cert-manager.io/docs/configuration/acme/dns01/route53/\r\nresource \"aws_iam_role\" \"cert_manager\" {\r\n  name = \"${var.cluster_name}-cert-manager\"\r\n\r\n  assume_role_policy = jsonencode({\r\n    Version = \"2012-10-17\"\r\n    Statement = [\r\n      {\r\n        Action = \"sts:AssumeRole\"\r\n        Effect = \"Allow\"\r\n        Sid    = \"\"\r\n        Principal = {\r\n          Service = \"ec2.amazonaws.com\"\r\n        }\r\n      },\r\n      {\r\n        Action = \"sts:AssumeRole\"\r\n        Effect = \"Allow\"\r\n        Sid    = \"\"\r\n        Principal = {\r\n          AWS = \"${resource.aws_iam_role.k8s_node_group.arn}\"\r\n        }\r\n      }\r\n    ]\r\n  })\r\n\r\n  inline_policy {\r\n    name = \"manage_route53_zones\"\r\n    policy = jsonencode({\r\n      \"Version\" = \"2012-10-17\",\r\n      \"Statement\" = [\r\n        {\r\n          \"Effect\"   = \"Allow\",\r\n          \"Action\"   = \"route53:GetChange\",\r\n          \"Resource\" = \"arn:aws:route53:::change/*\"\r\n        },\r\n        {\r\n          \"Effect\" = \"Allow\",\r\n          \"Action\" = [\r\n            \"route53:ChangeResourceRecordSets\",\r\n            \"route53:ListResourceRecordSets\"\r\n          ],\r\n          \"Resource\" = \"arn:aws:route53:::hostedzone/*\"\r\n        }\r\n      ]\r\n    })\r\n  }\r\n}\r\ndata \"aws_secretsmanager_secret_version\" \"db_creds\" {\r\n  secret_id = \"${var.cluster_name}-db-creds\"\r\n}\r\n\r\n\r\nlocals {\r\n  db_creds = jsondecode(\r\n    data.aws_secretsmanager_secret_version.db_creds.secret_string\r\n  )\r\n\r\n  # MakeDatabaseNameCamelCased\r\n  db_name = replace(title(replace(\"${var.cluster_name}\", \"-\", \" \")), \" \", \"\")\r\n}\r\n\r\n\r\nresource \"aws_db_subnet_group\" \"db\" {\r\n  name = var.cluster_name\r\n  subnet_ids = [\r\n    aws_subnet.private_subnet1.id,\r\n    aws_subnet.private_subnet2.id\r\n  ]\r\n\r\n  tags = {\r\n    Name = \"${var.cluster_name}\"\r\n  }\r\n}\r\n\r\n\r\nresource \"aws_security_group\" \"database\" {\r\n  vpc_id = aws_vpc.main.id\r\n\r\n  ingress {\r\n    description = \"Incoming access\"\r\n    from_port   = 5432\r\n    to_port     = 5432\r\n    protocol    = \"tcp\"\r\n    cidr_blocks = [\r\n      var.vpc_private_subnet1_cidr,\r\n      var.vpc_private_subnet2_cidr\r\n    ]\r\n  }\r\n\r\n  tags = {\r\n    Name = \"${var.cluster_name}-database\"\r\n  }\r\n}\r\n\r\n\r\nresource \"aws_db_instance\" \"db\" {\r\n  identifier           = var.cluster_name\r\n  allocated_storage    = var.db_storage_size_in_gb\r\n  engine               = var.db_engine\r\n  instance_class       = var.db_instance_class\r\n  name                 = local.db_name\r\n  db_subnet_group_name = aws_db_subnet_group.db.name\r\n  username             = local.db_creds.db_user\r\n  password             = local.db_creds.db_pass\r\n  multi_az             = var.db_multi_az\r\n  skip_final_snapshot  = var.db_skip_final_snapshot\r\n  vpc_security_group_ids = [\r\n    aws_security_group.database.id\r\n  ]\r\n\r\n  depends_on = [aws_db_subnet_group.db]\r\n}\r\n#\r\n# Control Plane Resources\r\n#\r\n\r\nresource \"aws_iam_role\" \"k8s\" {\r\n  name = \"${var.cluster_name}-k8s-role\"\r\n\r\n  assume_role_policy = <<POLICY\r\n{\r\n  \"Version\": \"2012-10-17\",\r\n  \"Statement\": [\r\n    {\r\n      \"Effect\": \"Allow\",\r\n      \"Principal\": {\r\n        \"Service\": \"eks.amazonaws.com\"\r\n      },\r\n      \"Action\": \"sts:AssumeRole\"\r\n    }\r\n  ]\r\n}\r\nPOLICY\r\n}\r\n\r\nresource \"aws_iam_role_policy_attachment\" \"k8s_policy_attachment1\" {\r\n  policy_arn = \"arn:aws:iam::aws:policy/AmazonEKSClusterPolicy\"\r\n  role       = aws_iam_role.k8s.name\r\n}\r\n\r\nresource \"aws_eks_cluster\" \"k8s\" {\r\n  name     = var.cluster_name\r\n  role_arn = aws_iam_role.k8s.arn\r\n\r\n  vpc_config {\r\n    subnet_ids = [\r\n      aws_subnet.private_subnet1.id,\r\n      aws_subnet.private_subnet2.id\r\n    ]\r\n  }\r\n\r\n  depends_on = [\r\n    aws_iam_role_policy_attachment.k8s_policy_attachment1,\r\n  ]\r\n}\r\n\r\n\r\n#\r\n# Worker Node Resources\r\n#\r\n\r\nresource \"aws_iam_role\" \"k8s_node_group\" {\r\n  name = var.cluster_name\r\n\r\n  assume_role_policy = jsonencode({\r\n    Statement = [\r\n      {\r\n        Action = \"sts:AssumeRole\"\r\n        Effect = \"Allow\"\r\n        Principal = {\r\n          Service = \"ec2.amazonaws.com\"\r\n        }\r\n      }\r\n    ]\r\n    Version = \"2012-10-17\"\r\n  })\r\n}\r\n\r\nresource \"aws_iam_role_policy_attachment\" \"worker_node_policy\" {\r\n  policy_arn = \"arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy\"\r\n  role       = aws_iam_role.k8s_node_group.name\r\n}\r\n\r\nresource \"aws_iam_role_policy_attachment\" \"cni_policy\" {\r\n  policy_arn = \"arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy\"\r\n  role       = aws_iam_role.k8s_node_group.name\r\n}\r\n\r\nresource \"aws_iam_role_policy_attachment\" \"ecr_read_only\" {\r\n  policy_arn = \"arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly\"\r\n  role       = aws_iam_role.k8s_node_group.name\r\n}\r\n\r\nresource \"aws_security_group\" \"workers\" {\r\n  vpc_id = aws_vpc.main.id\r\n\r\n  # Based on https://docs.aws.amazon.com/eks/latest/userguide/sec-group-reqs.html\r\n\r\n  ingress {\r\n    description = \"Inbound traffic from other workers\"\r\n    from_port   = 0\r\n    to_port     = 0\r\n    protocol    = \"all\"\r\n    self        = true\r\n  }\r\n\r\n  ingress {\r\n    description = \"Inbound HTTPS traffic\"\r\n    from_port   = 443\r\n    to_port     = 443\r\n    protocol    = \"tcp\"\r\n    cidr_blocks = [\"0.0.0.0/0\"]\r\n  }\r\n\r\n  ingress {\r\n    description = \"All other inbound traffic\"\r\n    from_port   = 1025\r\n    to_port     = 65535\r\n    protocol    = \"tcp\"\r\n    cidr_blocks = [\"0.0.0.0/0\"]\r\n  }\r\n\r\n  egress {\r\n    description = \"Outbound traffic\"\r\n    from_port   = 0\r\n    to_port     = 0\r\n    protocol    = \"all\"\r\n    cidr_blocks = [\"0.0.0.0/0\"]\r\n  }\r\n\r\n  # Additional worker rules\r\n\r\n  ingress {\r\n    description     = \"SSH from bastion\"\r\n    from_port       = 22\r\n    to_port         = 22\r\n    protocol        = \"tcp\"\r\n    security_groups = [aws_security_group.bastion.id]\r\n  }\r\n\r\n  tags = {\r\n    Name = \"${var.cluster_name}-workers\"\r\n  }\r\n}\r\n\r\nresource \"aws_launch_template\" \"k8s\" {\r\n  name     = var.cluster_name\r\n  key_name = var.ec2_key_name\r\n\r\n  vpc_security_group_ids = [\r\n    aws_eks_cluster.k8s.vpc_config[0].cluster_security_group_id,\r\n    aws_security_group.workers.id\r\n  ]\r\n\r\n  tag_specifications {\r\n    resource_type = \"instance\"\r\n    tags = {\r\n      Name = \"${var.cluster_name}\"\r\n    }\r\n  }\r\n}\r\n\r\nresource \"aws_eks_node_group\" \"k8s\" {\r\n  cluster_name    = aws_eks_cluster.k8s.name\r\n  node_group_name = var.cluster_name\r\n  node_role_arn   = aws_iam_role.k8s_node_group.arn\r\n  instance_types  = var.k8s_node_instance_types\r\n  subnet_ids = [\r\n    aws_subnet.private_subnet1.id,\r\n    aws_subnet.private_subnet2.id\r\n  ]\r\n\r\n  launch_template {\r\n    id      = aws_launch_template.k8s.id\r\n    version = aws_launch_template.k8s.latest_version\r\n  }\r\n\r\n  scaling_config {\r\n    desired_size = var.k8s_desired_size\r\n    min_size     = var.k8s_min_size\r\n    max_size     = var.k8s_max_size\r\n  }\r\n\r\n  # Allow external changes without causing plan diffs\r\n  lifecycle {\r\n    ignore_changes = [scaling_config[0].desired_size]\r\n  }\r\n\r\n  depends_on = [\r\n    aws_iam_role_policy_attachment.worker_node_policy,\r\n    aws_iam_role_policy_attachment.cni_policy,\r\n    aws_iam_role_policy_attachment.ecr_read_only,\r\n  ]\r\n}\r\n\r\n\r\n#\r\n# Registries\r\n#\r\n\r\nresource \"aws_ecr_repository\" \"frontend\" {\r\n  name                 = \"${var.cluster_name}-frontend\"\r\n  image_tag_mutability = \"IMMUTABLE\"\r\n\r\n  image_scanning_configuration {\r\n    scan_on_push = true\r\n  }\r\n}\r\n\r\nresource \"aws_ecr_repository\" \"api\" {\r\n  name                 = \"${var.cluster_name}-api\"\r\n  image_tag_mutability = \"IMMUTABLE\"\r\n\r\n  image_scanning_configuration {\r\n    scan_on_push = true\r\n  }\r\n}\r\n"}]}
{"messages": [{"role": "user", "content": "Create a Microsoft Azure provider configuration in Terraform with a version requirement. Set up a resource group, a virtual network with an address space, and a subnet within that network. Establish a public IP address and a network security group that allows SSH access. Create a network interface with dynamic IP allocation linked to the public IP, then provision a Linux virtual machine with specified OS settings. Define necessary variables for location, admin credentials, a prefix, tagging, and the OS SKU options."}, {"role": "assistant", "content": "\n#File: main.tf\n# Copyright (c) HashiCorp, Inc.\n# SPDX-License-Identifier: MPL-2.0\n\n# Configure the Microsoft Azure Provider.\nterraform {\n  required_providers {\n    azurerm = {\n      source  = \"hashicorp/azurerm\"\n      version = \">= 2.26\"\n    }\n  }\n\n  required_version = \">= 0.14.9\"\n}\n\nprovider \"azurerm\" {\n  features {}\n}\n\n# Create a resource group\nresource \"azurerm_resource_group\" \"rg\" {\n  name     = \"${var.prefix}TFRG\"\n  location = var.location\n  tags     = var.tags\n}\n\n# Create virtual network\nresource \"azurerm_virtual_network\" \"vnet\" {\n  name                = \"${var.prefix}TFVnet\"\n  address_space       = [\"10.0.0.0/16\"]\n  location            = var.location\n  resource_group_name = azurerm_resource_group.rg.name\n  tags                = var.tags\n}\n\n# Create subnet\nresource \"azurerm_subnet\" \"subnet\" {\n  name                 = \"${var.prefix}TFSubnet\"\n  resource_group_name  = azurerm_resource_group.rg.name\n  virtual_network_name = azurerm_virtual_network.vnet.name\n  address_prefixes     = [\"10.0.1.0/24\"]\n}\n\n# Create public IP\nresource \"azurerm_public_ip\" \"publicip\" {\n  name                = \"${var.prefix}TFPublicIP\"\n  location            = var.location\n  resource_group_name = azurerm_resource_group.rg.name\n  allocation_method   = \"Dynamic\"\n  tags                = var.tags\n}\n\n# Create Network Security Group and rule\nresource \"azurerm_network_security_group\" \"nsg\" {\n  name                = \"${var.prefix}TFNSG\"\n  location            = var.location\n  resource_group_name = azurerm_resource_group.rg.name\n  tags                = var.tags\n\n  security_rule {\n    name                       = \"SSH\"\n    priority                   = 1001\n    direction                  = \"Inbound\"\n    access                     = \"Allow\"\n    protocol                   = \"Tcp\"\n    source_port_range          = \"*\"\n    destination_port_range     = \"22\"\n    source_address_prefix      = \"*\"\n    destination_address_prefix = \"*\"\n  }\n}\n\n# Create network interface\nresource \"azurerm_network_interface\" \"nic\" {\n  name                = \"${var.prefix}NIC\"\n  location            = var.location\n  resource_group_name = azurerm_resource_group.rg.name\n  tags                = var.tags\n\n  ip_configuration {\n    name                          = \"${var.prefix}NICConfg\"\n    subnet_id                     = azurerm_subnet.subnet.id\n    private_ip_address_allocation = \"dynamic\"\n    public_ip_address_id          = azurerm_public_ip.publicip.id\n  }\n}\n\n# Create a Linux virtual machine\nresource \"azurerm_virtual_machine\" \"vm\" {\n  name                  = \"${var.prefix}TFVM\"\n  location              = var.location\n  resource_group_name   = azurerm_resource_group.rg.name\n  network_interface_ids = [azurerm_network_interface.nic.id]\n  vm_size               = \"Standard_DS1_v2\"\n  tags                  = var.tags\n\n  storage_os_disk {\n    name              = \"${var.prefix}OsDisk\"\n    caching           = \"ReadWrite\"\n    create_option     = \"FromImage\"\n    managed_disk_type = \"Premium_LRS\"\n  }\n\n  storage_image_reference {\n    publisher = \"Canonical\"\n    offer     = \"UbuntuServer\"\n    sku       = lookup(var.sku, var.location)\n    version   = \"latest\"\n  }\n\n  os_profile {\n    computer_name  = \"${var.prefix}TFVM\"\n    admin_username = var.admin_username\n    admin_password = var.admin_password\n  }\n\n  os_profile_linux_config {\n    disable_password_authentication = false\n  }\n\n}\n\ndata \"azurerm_public_ip\" \"ip\" {\n  name                = azurerm_public_ip.publicip.name\n  resource_group_name = azurerm_virtual_machine.vm.resource_group_name\n  depends_on          = [\"azurerm_virtual_machine.vm\"]\n}\n\noutput \"os_sku\" {\n  value = lookup(var.sku, var.location)\n}\n\n#File: variables.tf\n# Copyright (c) HashiCorp, Inc.\n# SPDX-License-Identifier: MPL-2.0\n\nvariable \"location\" {}\n\nvariable \"admin_username\" {\n  type        = string\n  description = \"Administrator user name for virtual machine\"\n}\n\nvariable \"admin_password\" {\n  type        = string\n  description = \"Password must meet Azure complexity requirements\"\n}\n\nvariable \"prefix\" {\n  type    = string\n  default = \"my\"\n}\n\nvariable \"tags\" {\n  type = map\n\n  default = {\n    Environment = \"Terraform GS\"\n    Dept        = \"Engineering\"\n  }\n}\n\nvariable \"sku\" {\n  default = {\n    westus2 = \"16.04-LTS\"\n    eastus  = \"18.04-LTS\"\n  }\n}\n"}]}
{"messages": [{"role": "user", "content": "Create a Google Compute network named \"main-network.\" Set up a subnetwork called \"sub-network\" in the specified region with an IP CIDR range of \"10.0.60.0/24.\" Allocate a static IPv4 address named \"ipv4-address\" in the specified region. Establish a firewall named \"main-firewall\" on the network to allow ICMP and TCP traffic on ports 80, 8080, and 22, targeting instances with the tag \"allow-ssh\" and accepting traffic from sources with the \"web\" tag. Define the necessary variables for project ID, region, and zone."}, {"role": "assistant", "content": "\n#File: main.tf\n\nresource \"google_compute_network\" \"main_network\" {\n  name = \"main-network\"\n}\n\nresource \"google_compute_subnetwork\" \"sub_network\" {\n  name = \"sub-network\"\n  region = var.region\n  network = google_compute_network.main_network.id\n  ip_cidr_range = \"10.0.60.0/24\"\n}\n\nresource \"google_compute_address\" \"static\" {\n  name = \"ipv4-address\"\n  region = var.region\n}\n\nresource \"google_compute_firewall\" \"main_firewall\" {\n  name = \"main-firewall\"\n  network = google_compute_network.main_network.name\n  target_tags = [ \"allow-ssh\" ]\n\n  allow {\n    protocol = \"icmp\"\n  }\n\n  allow {\n    protocol = \"tcp\"\n    ports    = [\"80\", \"8080\", \"22\"]\n  }\n\n  source_tags = [\"web\"]\n}\n\n#File: variables.tf\n# variable \"credential_path\" {\n#   description = \"The path to the Google Cloud credentials file.\"\n# }\n\nvariable \"project_id\" {\n  description = \"Google Project ID.\"\n  type        = string\n}\n\nvariable \"region\" {\n  description = \"Google Cloud region\"\n  type        = string\n  default     = \"us-central1\"\n}\n\nvariable \"zone\" {\n  description = \"Google Cloud region zone\"\n  type        = string\n  default     = \"us-central1-c\"\n}\n\n#File: outputs.tf\noutput \"network_id\" {\n  value = google_compute_network.main_network.id\n}\n\noutput \"subnetwork_id\" {\n  value = google_compute_subnetwork.sub_network.id\n}\n\noutput \"ip_address\" {\n  value = google_compute_address.static.address\n}"}]}
{"messages": [{"role": "user", "content": "Create a Google Cloud Project service to enable the Cloud Run API. Activate the Artifact Registry API for the same project. Set up a Cloud Run service named \"hello-cloudrun\" with a specified container image. Grant public access to the Cloud Run service by assigning the \"roles/run.invoker\" role to all users. Output the URL of the Cloud Run service for access."}, {"role": "assistant", "content": "\n#File: apis.tf\n# Active Google Cloud Run API\nresource \"google_project_service\" \"run_api\" {\n  project            = local.project_id\n  service            = \"run.googleapis.com\"\n  disable_on_destroy = false\n}\n\n# Active Artifact Registry API\nresource \"google_project_service\" \"artifact_registry_api\" {\n  project            = local.project_id\n  service            = \"artifactregistry.googleapis.com\"\n  disable_on_destroy = false\n}\n\n#File: cloudrun.tf\n# Terraform configuration to create a Cloud Run service\nresource \"google_cloud_run_v2_service\" \"service\" {\n  name     = \"hello-cloudrun\"\n  location = local.region\n  ingress  = \"INGRESS_TRAFFIC_ALL\"\n\n  template {\n    containers {\n      image = \"europe-west1-docker.pkg.dev/premium-oven-425714-n3/docker-repository/cloudrun101:latest\"\n    }\n  }\n\n}\n\n# Grant public access to the Cloud Run service\nresource \"google_cloud_run_v2_service_iam_member\" \"public_access\" {\n  project  = google_cloud_run_v2_service.service.project\n  location = google_cloud_run_v2_service.service.location\n  name     = google_cloud_run_v2_service.service.name\n  role     = \"roles/run.invoker\"\n  member   = \"allUsers\"\n}\n\n#File: constants.tf\nlocals {\n  # The project ID where the Cloud Run service will be created\n  project_id = \"premium-oven-425714-n3\"\n  region     = \"europe-west1\"\n}\n\n#File: output.tf\n# This file contains the output configuration for the Cloud Run service\noutput \"cloudrun_url\" {\n  value       = google_cloud_run_v2_service.service.uri\n  description = \"The URL of the Cloud Run service\"\n}\n \n#File: provider.tf\nterraform {\n  required_providers {\n    google = {\n      version = \"~> 5.32.0\"\n    }\n  }\n}\n\nprovider \"google\" {\n  project = local.project_id\n}\n\n#File: artifact_registry.tf\nresource \"google_artifact_registry_repository\" \"artifact_registry\" {\n  location      = local.region\n  repository_id = \"docker-repository\"\n  description   = \"Docker Repository for CloudRun\"\n  format        = \"DOCKER\"\n\n  cleanup_policies {\n    id     = \"delete\"\n    action = \"DELETE\"\n    condition {\n      older_than   = \"3600s\"\n    }\n  }\n}"}]}
{"messages": [{"role": "user", "content": "Create a network security group to allow RDP and HTTPS access from the Internet to your API VM. Associate the network security group with the designated subnet. Allocate a static public IP address for the API VM and create a network interface that connects to the subnet and the public IP. Deploy a Windows virtual machine using the specified size, computer name, and admin credentials. Add a custom script extension to execute setup scripts during the VM provisioning process."}, {"role": "assistant", "content": "\n#File: api-vm-main.tf\n###################\n## API VM - Main ##\n###################\n\n# Create Network Security Group to Access the API VM from Internet\nresource \"azurerm_network_security_group\" \"api-vm-nsg\" {\n  name                = \"${var.app_name}-${var.environment}-vm-nsg\"\n  location            = azurerm_resource_group.network-rg.location\n  resource_group_name = azurerm_resource_group.network-rg.name\n\n  security_rule {\n    name                       = \"allow-rdp\"\n    description                = \"allow-rdp\"\n    priority                   = 100\n    direction                  = \"Inbound\"\n    access                     = \"Allow\"\n    protocol                   = \"Tcp\"\n    source_port_range          = \"*\"\n    destination_port_range     = \"3389\"\n    source_address_prefix      = \"Internet\"\n    destination_address_prefix = \"*\" \n  }\n\n  security_rule {\n    name                       = \"allow-https\"\n    description                = \"allow-https\"\n    priority                   = 110\n    direction                  = \"Inbound\"\n    access                     = \"Allow\"\n    protocol                   = \"Tcp\"\n    source_port_range          = \"*\"\n    destination_port_range     = \"443\"\n    source_address_prefix      = \"Internet\"\n    destination_address_prefix = \"*\"\n  }\n\n  tags = {\n    application = var.app_name\n    environment = var.environment \n  }\n}\n\n# Associate the NSG with the Subnet\nresource \"azurerm_subnet_network_security_group_association\" \"api-vm-nsg-association\" {\n  depends_on=[azurerm_network_security_group.api-vm-nsg]\n\n  subnet_id                 = azurerm_subnet.network-subnet.id\n  network_security_group_id = azurerm_network_security_group.api-vm-nsg.id\n}\n\n# Get a Static Public IP for the API VM\nresource \"azurerm_public_ip\" \"api-vm-ip\" {\n  name                = \"${var.app_name}-${var.environment}-vm-pip\"\n  location            = azurerm_resource_group.network-rg.location\n  resource_group_name = azurerm_resource_group.network-rg.name\n  allocation_method   = \"Static\"\n  \n  tags = { \n    application = var.app_name\n    environment = var.environment \n  }\n}\n\n# Create Network Card for the API VM\nresource \"azurerm_network_interface\" \"api-vm-nic\" {\n  depends_on=[azurerm_public_ip.api-vm-ip]\n\n  name                = \"${var.app_name}-${var.environment}-vm-nic\"\n  location            = azurerm_resource_group.network-rg.location\n  resource_group_name = azurerm_resource_group.network-rg.name\n\n  ip_configuration {\n    name                          = \"internal\"\n    subnet_id                     = azurerm_subnet.network-subnet.id\n    private_ip_address_allocation = \"Dynamic\"\n    public_ip_address_id          = azurerm_public_ip.api-vm-ip.id\n  }\n\n  tags = { \n    application = var.app_name\n    environment = var.environment \n  }\n}\n\n# Create API Server\nresource \"azurerm_windows_virtual_machine\" \"api-vm\" {\n  depends_on=[azurerm_network_interface.api-vm-nic]\n\n  name                  = \"${var.app_name}-${var.environment}-vm\"\n  location              = azurerm_resource_group.network-rg.location\n  resource_group_name   = azurerm_resource_group.network-rg.name\n  size                  = var.api_vm_size\n  network_interface_ids = [azurerm_network_interface.api-vm-nic.id]\n  \n  computer_name  = var.api_vm_name\n  admin_username = var.api_admin_username\n  admin_password = var.api_admin_password\n\n  os_disk {\n    name                 = \"${var.app_name}-${var.environment}-vm-os-disk\"\n    caching              = \"ReadWrite\"\n    storage_account_type = \"Standard_LRS\"\n  }\n\n  source_image_reference {\n    publisher = \"MicrosoftWindowsServer\"\n    offer     = \"WindowsServer\"\n    sku       = \"2019-Datacenter\"\n    version   = \"latest\"\n  }\n\n  enable_automatic_updates = true\n  provision_vm_agent       = true\n\n  tags = {\n    application = var.app_name\n    environment = var.environment \n  }\n}\n\n# Add Azure VM extension\nresource \"azurerm_virtual_machine_extension\" \"api-extension\" {\n  name                 = \"${var.app_name}-${var.environment}-vm-extension\"\n  virtual_machine_id   = azurerm_windows_virtual_machine.api-vm.id\n  publisher            = \"Microsoft.Compute\"\n  type                 = \"CustomScriptExtension\"\n  type_handler_version = \"1.9\"\n\n  settings = <<SETTINGS\n      {\n          \"fileUris\": [\"https://raw.githubusercontent.com/KopiCloud-AD-API/kopicloud-ad-api-setup-scripts/main/setup-win2019.ps1\"],\n          \"commandToExecute\": \"powershell -ExecutionPolicy Unrestricted -File setup-win2019.ps1\"\n      }\n  SETTINGS\n}\n\n#File: api-vm-output.tf\n#####################\n## API VM - Output ##\n#####################\n\n# API VM ID\noutput \"api_vm_id\" {\n  value = azurerm_windows_virtual_machine.api-vm.id\n}\n\n# API VM Name\noutput \"api_vm_name\" {\n  value = azurerm_windows_virtual_machine.api-vm.name\n}\n\n# API VM Admin Username\noutput \"api_vm_admin_username\" {\n  value = var.api_admin_username\n}\n\n# API VM Admin Password\noutput \"api_vm_admin_password\" {\n  value = var.api_admin_password\n}\n\n# API VM Public IP\noutput \"api_vm_public_ip\" {\n  value = azurerm_public_ip.api-vm-ip.ip_address\n}\n#File: api-vm-variables.tf\n########################\n## API VM - Variables ##\n########################\n\n# API VM Admin User\nvariable \"api_admin_username\" {\n  type        = string\n  description = \"API VM Admin User\"\n  default     = \"kopiadmin\"\n}\n\n# API VM Admin Password\nvariable \"api_admin_password\" {\n  type        = string\n  description = \"API VM Admin Password\"\n  default     = \"S3cr3ts24\"\n}\n\n# API Virtual Machine Name\nvariable \"api_vm_name\" {\n  type        = string\n  description = \"API VM Size\"\n  default     = \"kopiadapi01\"\n  validation {\n    condition     = length(var.api_vm_name) < 16\n    error_message = \"VM Name must be a 15 character long name or less\"\n  }\n}\n\n# API Virtual Machine Size\nvariable \"api_vm_size\" {\n  type        = string\n  description = \"API VM Size\"\n  default     = \"Standard_B2s\"\n}\n\n\n#File: app-variables.tf\n#############################\n## Application - Variables ##\n#############################\n\n# application name \nvariable \"app_name\" {\n  type        = string\n  description = \"This variable defines the application name used to build resources\"\n  default     = \"kopicloud-ad-api-2019\"\n}\n\n# environment\nvariable \"environment\" {\n  type        = string\n  description = \"This variable defines the environment to be built\"\n}\n\n# azure region\nvariable \"location\" {\n  type        = string\n  description = \"Azure region where the resource group will be created\"\n  default     = \"north europe\"\n}\n#File: network-main.tf\n####################\n## Network - Main ##\n####################\n\n# Create a resource group for network\nresource \"azurerm_resource_group\" \"network-rg\" {\n  name     = \"${var.app_name}-${var.environment}-rg\"\n  location = var.location\n  tags = {\n    application = var.app_name\n    environment = var.environment\n  }\n}\n\n# Create the network VNET\nresource \"azurerm_virtual_network\" \"network-vnet\" {\n  name                = \"${var.app_name}-${var.environment}-vnet\"\n  address_space       = [var.network-vnet-cidr]\n  resource_group_name = azurerm_resource_group.network-rg.name\n  location            = azurerm_resource_group.network-rg.location\n  tags = {\n    application = var.app_name\n    environment = var.environment\n  }\n}\n\n# Create a subnet for Network\nresource \"azurerm_subnet\" \"network-subnet\" {\n  name                 = \"${var.app_name}-${var.environment}-subnet\"\n  address_prefixes     = [var.network-subnet-cidr]\n  virtual_network_name = azurerm_virtual_network.network-vnet.name\n  resource_group_name  = azurerm_resource_group.network-rg.name\n}\n\n\n#File: network-output.tf\n######################\n## Network - Output ##\n######################\n\noutput \"network_resource_group_id\" {\n  value = azurerm_resource_group.network-rg.id\n}\n\noutput \"network_vnet_id\" {\n  value = azurerm_virtual_network.network-vnet.id\n}\n\noutput \"network_subnet_id\" {\n  value = azurerm_subnet.network-subnet.id\n}\n\n\n#File: network-variables.tf\n##############################\n## Core Network - Variables ##\n##############################\n\nvariable \"network-vnet-cidr\" {\n  type        = string\n  description = \"The CIDR of the network VNET\"\n}\n\nvariable \"network-subnet-cidr\" {\n  type        = string\n  description = \"The CIDR for the network subnet\"\n}\n\n#File: provider-main.tf\n###########################\n## Azure Provider - Main ##\n###########################\n\n# Define Terraform and Azure provider\nterraform {\n  required_providers {\n    azurerm = {\n      source  = \"hashicorp/azurerm\"\n      version = \"~> 3.5\"\n    }  \n  }\n  required_version = \">= 1.3\"\n}\n\n# Configure the Azure provider\nprovider \"azurerm\" { \n  features {}  \n  environment     = \"public\"\n  subscription_id = var.azure-subscription-id\n  client_id       = var.azure-client-id\n  client_secret   = var.azure-client-secret\n  tenant_id       = var.azure-tenant-id\n}\n\n#File: provider-variables.tf\n################################\n## Azure Provider - Variables ##\n################################\n\n# Azure authentication variables\n\nvariable \"azure-subscription-id\" {\n  type        = string\n  description = \"Azure Subscription ID\"\n}\n\nvariable \"azure-client-id\" {\n  type        = string\n  description = \"Azure Client ID\"\n}\n\nvariable \"azure-client-secret\" {\n  type        = string\n  description = \"Azure Client Secret\"\n}\n\nvariable \"azure-tenant-id\" {\n  type        = string\n  description = \"Azure Tenant ID\"\n}\n"}]}
{"messages": [{"role":"user","content":"Set up an AWS S3 bucket for storing deployment packages and configures IAM roles and policies to enable Jenkins worker EC2 instances to interact with S3 and update Lambda functions. It creates an IAM role and instance profile for Jenkins workers with permissions to push objects to S3 and deploy Lambda updates. Additionally, it provisions a Lambda function named \"Fibonacci\" with a Go runtime, linked to a dedicated IAM role allowing Lambda service execution"},{"role":"assistant","content":"// Provider configuration\r\nprovider \"aws\" {\r\n  region = \"${var.region}\"\r\n}\r\n\r\n// S3 bucket\r\nresource \"aws_s3_bucket\" \"bucket\" {\r\n  bucket = \"${var.bucket}\"\r\n}\r\n\r\n// Jenkins slave instance profile\r\nresource \"aws_iam_instance_profile\" \"worker_profile\" {\r\n  name = \"JenkinsWorkerProfile\"\r\n  role = \"${aws_iam_role.worker_role.name}\"\r\n}\r\n\r\nresource \"aws_iam_role\" \"worker_role\" {\r\n  name = \"JenkinsBuildRole\"\r\n  path = \"/\"\r\n\r\n  assume_role_policy = <<EOF\r\n{\r\n    \"Statement\": [\r\n        {\r\n            \"Action\": \"sts:AssumeRole\",\r\n            \"Principal\": {\r\n               \"Service\": \"ec2.amazonaws.com\"\r\n            },\r\n            \"Effect\": \"Allow\",\r\n            \"Sid\": \"\"\r\n        }\r\n    ]\r\n}\r\nEOF\r\n}\r\n\r\nresource \"aws_iam_policy\" \"s3_policy\" {\r\n  name = \"PushToS3Policy\"\r\n  path = \"/\"\r\n\r\n  policy = <<EOF\r\n{\r\n  \"Statement\": [\r\n    {\r\n      \"Action\": [\r\n        \"s3:PutObject\",\r\n        \"s3:GetObject\"\r\n      ],\r\n      \"Effect\": \"Allow\",\r\n      \"Resource\": \"${aws_s3_bucket.bucket.arn}/*\"\r\n    }\r\n  ]\r\n}\r\nEOF\r\n}\r\n\r\nresource \"aws_iam_policy\" \"lambda_policy\" {\r\n  name = \"DeployLambdaPolicy\"\r\n  path = \"/\"\r\n\r\n  policy = <<EOF\r\n{\r\n  \"Statement\": [\r\n    {\r\n      \"Action\": [\r\n        \"lambda:UpdateFunctionCode\",\r\n        \"lambda:PublishVersion\",\r\n        \"lambda:UpdateAlias\"\r\n      ],\r\n      \"Effect\": \"Allow\",\r\n      \"Resource\": \"*\"\r\n    }\r\n  ]\r\n}\r\nEOF\r\n}\r\n\r\nresource \"aws_iam_role_policy_attachment\" \"worker_s3_attachment\" {\r\n  role       = \"${aws_iam_role.worker_role.name}\"\r\n  policy_arn = \"${aws_iam_policy.s3_policy.arn}\"\r\n}\r\n\r\nresource \"aws_iam_role_policy_attachment\" \"worker_lambda_attachment\" {\r\n  role       = \"${aws_iam_role.worker_role.name}\"\r\n  policy_arn = \"${aws_iam_policy.lambda_policy.arn}\"\r\n}\r\n\r\n// Lambda IAM role\r\nresource \"aws_iam_role\" \"lambda_role\" {\r\n  name = \"FibonacciFunctionRole\"\r\n  path = \"/\"\r\n\r\n  assume_role_policy = <<EOF\r\n{\r\n    \"Statement\": [\r\n        {\r\n            \"Action\": \"sts:AssumeRole\",\r\n            \"Principal\": {\r\n               \"Service\": \"lambda.amazonaws.com\"\r\n            },\r\n            \"Effect\": \"Allow\",\r\n            \"Sid\": \"\"\r\n        }\r\n    ]\r\n}\r\nEOF\r\n}\r\n\r\n// Lambda function\r\nresource \"aws_lambda_function\" \"function\" {\r\n  filename      = \"deployment.zip\"\r\n  function_name = \"Fibonacci\"\r\n  role          = \"${aws_iam_role.lambda_role.arn}\"\r\n  handler       = \"main\"\r\n  runtime       = \"go1.x\"\r\n}\r\nvariable \"region\" {\r\n  default = \"eu-west-3\"\r\n}\r\n\r\nvariable \"bucket\" {\r\n  default = \"deployment-packages-mlabouardy\"\r\n}\r\n"}]}
{"messages": [{"role":"user","content":"Sets up a WireGuard VPN server using AWS Lightsail, including secure key generation, port management, and automatic network configuration."},{"role":"assistant","content":"variable \"SERVER_PRIVATEKEY\" {}\r\nvariable \"SERVER_PUBLICKEY\" {}\r\nvariable \"ROUTER_PRIVATEKEY\" {}\r\nvariable \"ROUTER_PUBLICKEY\" {}\r\nvariable \"PHONE_PRIVATEKEY\" {}\r\nvariable \"PHONE_PUBLICKEY\" {}\r\n\r\n\r\nprovider \"aws\" {\r\n  region = \"us-west-2\"\r\n\tprofile = \"terraform\"\r\n}\r\n\r\nresource \"random_integer\" \"wg_port\" {\r\n  min = 20000\r\n  max = 60000\r\n}\r\n\r\nlocals {\r\n  name     = \"lightsail-wireguard\"\r\n  AZ       = \"us-west-2a\"\r\n  OS       = \"ubuntu_20_04\"\r\n  Size     = \"nano_2_0\"\r\n  KeyBits  = \"4096\"\r\n}\r\nresource \"aws_lightsail_static_ip_attachment\" \"wireguard\" {\r\n\tstatic_ip_name = aws_lightsail_static_ip.wireguard.id\r\n\tinstance_name = aws_lightsail_instance.wireguard.id\r\n}\r\n\r\nresource \"aws_lightsail_static_ip\" \"wireguard\" {\r\n\tname = \"wireguard-static-ip\"\r\n}\r\n\r\nresource \"aws_lightsail_instance\" \"wireguard\" {\r\n  name              = local.name\r\n  availability_zone = local.AZ\r\n  blueprint_id      = local.OS\r\n  bundle_id         = local.Size\r\n  key_pair_name     = aws_lightsail_key_pair.key.name\r\n  depends_on        = [aws_lightsail_key_pair.key]\r\n\r\n  provisioner \"local-exec\" {\r\n    command = \"aws --profile terraform lightsail put-instance-public-ports --instance-name ${aws_lightsail_instance.wireguard.name} --port-infos fromPort=${random_integer.wg_port.result},toPort=${random_integer.wg_port.result},protocol=udp fromPort=22,toPort=22,protocol=tcp\"\r\n  }\r\n}\r\n\r\n\r\nresource \"tls_private_key\" \"key\" {\r\n  algorithm   = \"RSA\"\r\n\trsa_bits    = local.KeyBits\r\n}\r\n\r\nresource \"aws_lightsail_key_pair\" \"key\" {\r\n  name       = \"${local.name}-key\"\r\n  public_key = tls_private_key.key.public_key_openssh\r\n  depends_on = [tls_private_key.key]\r\n}\r\n"}]}
{"messages": [{"role": "user", "content": "Create a data source for the GCP certificate using `ns_connection`. Define local variables to manage external certificate details and determine if a new certificate should be created. Add a module to create an SSL certificate when not disabled and when no existing certificate details are found. Configure Google Cloud DNS by creating a managed zone and a DNS record set, ensuring dependencies are correctly set. Output the relevant details like domain name, FQDN, and certificate IDs for further usage."}, {"role": "assistant", "content": "\n#File: cert.tf\ndata \"ns_connection\" \"certificate\" {\n  name     = \"certificate\"\n  contract = \"block/gcp/certificate-manager\"\n  optional = true\n}\n\nlocals {\n  ext_certificate_id       = try(data.ns_connection.certificate.outputs.certificate_id, \"\")\n  ext_certificate_map_id   = try(data.ns_connection.certificate.outputs.certificate_map_id, \"\")\n  ext_certificate_map_name = try(data.ns_connection.certificate.outputs.certificate_map_name, \"\")\n  ext_certificate_domains  = try(data.ns_connection.certificate.outputs.certificate_domains, [])\n\n  create_cert = !var.disable_certificate && local.ext_certificate_map_id == \"\"\n}\n\n// If user specifies \"certificate\" connection, we use that certificate\n// Otherwise, we use var.disable_certificate to determine if we should create a certificate\nmodule \"cert\" {\n  source  = \"nullstone-modules/sslcert/gcp\"\n  version = \"~> 0.1.0\"\n\n  enabled = local.create_cert\n  name    = local.resource_name\n  labels  = local.labels\n  scope   = \"\"\n\n  subdomains = {\n    (local.subdomain_name) = local.subdomain_zone_id\n  }\n}\n\nlocals {\n  certificate_id       = coalesce(local.ext_certificate_id, module.cert.certificate_id)\n  certificate_map_id   = coalesce(local.ext_certificate_map_id, module.cert.certificate_map_id)\n  certificate_map_name = coalesce(local.ext_certificate_map_name, module.cert.certificate_map_name)\n  certificate_domains  = coalesce(local.ext_certificate_domains, module.cert.certificate_domains)\n}\n\n#File: dns.tf\nresource \"google_project_service\" \"dns\" {\n  service                    = \"dns.googleapis.com\"\n  disable_dependent_services = false\n  disable_on_destroy         = false\n}\n\nresource \"google_dns_managed_zone\" \"this\" {\n  name     = local.resource_name\n  dns_name = local.fqdn\n  labels   = local.labels\n  count    = !local.is_passthrough ? 1 : 0\n\n  depends_on = [google_project_service.dns]\n}\n\nresource \"google_dns_record_set\" \"this-delegation\" {\n  provider = google.domain\n\n  managed_zone = local.domain_zone_id\n  name         = local.fqdn\n  rrdatas      = google_dns_managed_zone.this[count.index].name_servers\n  type         = \"NS\"\n  ttl          = 300\n\n  count = !local.is_passthrough ? 1 : 0\n}\n\n#File: domain.tf\ndata \"ns_connection\" \"domain\" {\n  name     = \"domain\"\n  contract = \"domain/gcp/cloud-dns\"\n}\n\n// We will need to be able to support secondary providers since the root domain\n//   is typically managed in a separate account from non-production environments\nprovider \"google\" {\n  alias       = \"domain\"\n  credentials = local.delegator_key_file\n  project     = local.delegator_project_id\n}\n\nlocals {\n  domain_dns_name      = data.ns_connection.domain.outputs.name\n  domain_fqdn          = data.ns_connection.domain.outputs.fqdn\n  domain_zone_id       = data.ns_connection.domain.outputs.zone_id\n  domain_nameservers   = data.ns_connection.domain.outputs.nameservers\n  delegator_key_file   = base64decode(data.ns_connection.domain.outputs.delegator[\"key_file\"])\n  delegator_project_id = lookup(jsondecode(local.delegator_key_file), \"project_id\")\n}\n\n#File: nullstone.tf\nterraform {\n  required_providers {\n    ns = {\n      source = \"nullstone-io/ns\"\n    }\n  }\n}\n\ndata \"ns_workspace\" \"this\" {}\n\n// Generate a random suffix to ensure uniqueness of resources\nresource \"random_string\" \"resource_suffix\" {\n  length  = 5\n  lower   = true\n  upper   = false\n  numeric = false\n  special = false\n}\n\nlocals {\n  tags          = data.ns_workspace.this.tags\n  labels        = { for key, value in local.tags : lower(key) => value }\n  block_name    = data.ns_workspace.this.block_name\n  block_ref     = data.ns_workspace.this.block_ref\n  resource_name = \"${local.block_ref}-${random_string.resource_suffix.result}\"\n}\n\n#File: outputs.tf\noutput \"name\" {\n  value       = local.subdomain_name\n  description = \"string ||| The name of the created subdomain. (Format: '{{dns_name}}[.{{env}}].{{domain}}')\"\n}\n\noutput \"fqdn\" {\n  value       = local.fqdn\n  description = \"string ||| The FQDN (fully-qualified domain name) for the created domain including the trailing '.'. (Format: '{{dns_name}}[.{{env}}].{{domain}}.')\"\n}\n\noutput \"zone_id\" {\n  value       = local.subdomain_zone_id\n  description = \"string |||  Google DNS Managed Zone ID (Format: projects/{{project}}/managedZones/{{name}}).\"\n}\n\noutput \"nameservers\" {\n  value       = local.subdomain_nameservers\n  description = \"list(string) ||| List of Nameservers for Google DNS Managed Zone.\"\n}\n\noutput \"domain_name\" {\n  value       = local.domain_dns_name\n  description = \"string ||| The full DNS name of the domain for this subdomain.\"\n}\n\noutput \"domain_zone_id\" {\n  value       = local.domain_zone_id\n  description = \"string ||| The zone ID of the root domain.\"\n}\n\noutput \"certificate_id\" {\n  value       = local.certificate_id\n  description = \"string ||| The ID of the Certificate in GCP Certificate Manager.\"\n}\n\noutput \"certificate_map_id\" {\n  value       = local.certificate_map_id\n  description = \"string ||| The ID of the Certificate Map in GCP Certificate Manager.\"\n}\n\noutput \"certificate_map_name\" {\n  value       = local.certificate_map_name\n  description = \"string ||| The name of the Certificate Map in GCP Certificate Manager.\"\n}\n\n#File: subdomain.tf\ndata \"ns_subdomain\" \"this\" {\n  stack_id = data.ns_workspace.this.stack_id\n  block_id = data.ns_workspace.this.block_id\n  env_id   = data.ns_workspace.this.env_id\n}\n\nlocals {\n  // If we detect that the certificate is a wildcard (e.g. `*.acme.com`), we need to flatten our subdomains\n  // This is because an SSL cert on `*.acme.com` will not work for `a.b.acme.com`\n  // To flatten our subdomain, we're going to replace all `.` with `-` in the `subdomain_name` (i.e. the subdomain fqdn without the domain suffix)\n  // This detection only works when using an external certificate with `ns_connection.certificate`\n  needs_flattened = anytrue([for domain in local.ext_certificate_domains : strcontains(domain, \"*\")])\n  // Normally, we rely on ns_subdomain to construct the fqdn\n  // However, if we're flattening, we need to manually construct it\n  // It should look like this: replace(subdomain_name, \".\", \"-\") + \".\" + domain_name + \".\"\n  flattened_fqdn = \"${replace(data.ns_subdomain.this.subdomain_name, \".\", \"-\")}.${data.ns_subdomain.this.domain_name}.\"\n  fqdn           = local.needs_flattened ? local.flattened_fqdn : data.ns_subdomain.this.fqdn\n  is_passthrough = data.ns_subdomain.this.subdomain_name == \"\"\n\n  // created_zone_id refers to google_dns_managed_zone.this.name; however, we need this variable to wait on the resource to be created\n  // We're going to take google_dns_managed_zone.this.id and parse out the name (since id is computed during creation)\n  // Format: projects/{{project}}/managedZones/{{name}}\n  created_zone_id     = try(regex(\"^projects/[^/]+/managedZones/([^/]+)$\", google_dns_managed_zone.this[0].id)[0], \"\")\n  created_name        = try(trimsuffix(google_dns_managed_zone.this[0].dns_name, \".\"), \"\")\n  created_nameservers = [for ns in try(google_dns_managed_zone.this[0].name_servers, []) : trimsuffix(ns, \".\")]\n\n  subdomain_name        = local.is_passthrough ? local.domain_dns_name : local.created_name\n  subdomain_zone_id     = local.is_passthrough ? local.domain_zone_id : local.created_zone_id\n  subdomain_nameservers = local.is_passthrough ? local.domain_nameservers : local.created_nameservers\n}\n\n#File: variables.tf\nvariable \"create_vanity\" {\n  type        = bool\n  description = <<EOF\nEnable this to create vanity subdomain instead of environmental.\nThis is typically enabled on the production environment.\nIf dns-name is set to '.' and create_vanity is enabled, this will module act as a passthrough; outputs from the connected domain are used for outputs.\nEOF\n  default     = false\n}\n\nvariable \"disable_certificate\" {\n  type        = bool\n  default     = false\n  description = \"Specify true to disable SSL certificate creation\"\n}\n"}]}
{"messages": [{"role": "user", "content": "Create a Terraform configuration for an Azure environment using the `azurerm`, `kubernetes`, and `azuread` providers. Define a local variable for the resource group, key vault, AKS cluster, and service account names using a given application name. Configure a Kubernetes service account linked to an Azure AD application for workload identity and deploy a Kubernetes pod that uses this service account. Output the resource group name, AKS cluster name, and a command to get AKS credentials after deployment. Ensure to include environment variables for Key Vault and secret usage within the pod."}, {"role": "assistant", "content": "\n#File: main.tf\nterraform {\n  required_providers {\n    azurerm = {\n      source  = \"hashicorp/azurerm\"\n      version = \"3.34.0\"\n    }\n    kubernetes = {\n      source  = \"hashicorp/kubernetes\"\n      version = \"2.16.0\"\n    }\n    azuread = {\n      source  = \"hashicorp/azuread\"\n      version = \"2.31.0\"\n    }\n  }\n  backend \"local\" {\n    path = \"./.workspace/terraform.tfstate\"\n  }\n}\n\nprovider \"azurerm\" {\n  features {\n  }\n}\n\n### Local Variables\n\nlocals {\n  resource_group_name   = \"rg-${var.app_name}\"\n  keyvault_name         = \"kv-${var.app_name}\"\n  aks_name              = \"aks-${var.app_name}\"\n  app_registration_name = \"aks-${var.app_name}-service-principal\"\n  service_account_name  = \"workload-identity-sa\"\n}\n\n### Connect to Kubernetes with Interpoation\n\ndata \"azurerm_client_config\" \"current\" {}\n\ndata \"azurerm_key_vault\" \"main\" {\n  name                = local.keyvault_name\n  resource_group_name = local.resource_group_name\n}\n\ndata \"azurerm_kubernetes_cluster\" \"main\" {\n  name                = local.aks_name\n  resource_group_name = local.resource_group_name\n}\n\nprovider \"kubernetes\" {\n  host = data.azurerm_kubernetes_cluster.main.kube_config[0].host\n\n  client_certificate     = base64decode(data.azurerm_kubernetes_cluster.main.kube_config[0].client_certificate)\n  client_key             = base64decode(data.azurerm_kubernetes_cluster.main.kube_config[0].client_key)\n  cluster_ca_certificate = base64decode(data.azurerm_kubernetes_cluster.main.kube_config[0].cluster_ca_certificate)\n}\n\n\n### App Registration for the Workload Identity\n\ndata \"azuread_application\" \"default\" {\n  display_name = local.app_registration_name\n}\n\nresource \"kubernetes_service_account\" \"default\" {\n  metadata {\n    name      = local.service_account_name\n    namespace = var.aks_namespace\n    annotations = {\n      \"azure.workload.identity/client-id\" = data.azuread_application.default.application_id\n    }\n    labels = {\n      \"azure.workload.identity/use\" : \"true\"\n    }\n  }\n}\n\n### Deploy the Pod to Kubernetes\n\nresource \"kubernetes_pod\" \"quick_start\" {\n  metadata {\n    name      = \"quick-start\"\n    namespace = var.aks_namespace\n  }\n\n  spec {\n    service_account_name = local.service_account_name\n    container {\n      image = var.container_image\n      name  = \"oidc\"\n\n      env {\n        name  = \"KEYVAULT_URL\"\n        value = data.azurerm_key_vault.main.vault_uri\n      }\n\n      env {\n        name  = \"SECRET_NAME\"\n        value = \"my-secret\"\n      }\n    }\n    node_selector = {\n      \"kubernetes.io/os\" : \"linux\"\n    }\n  }\n\n  depends_on = [\n    kubernetes_service_account.default\n  ]\n\n  lifecycle {\n    ignore_changes = [\n      spec[0].container[0].env[\"AZURE_CLIENT_ID\"],\n      spec[0].container[0].env[\"AZURE_TENANT_ID\"],\n      spec[0].container[0].env[\"AZURE_FEDERATED_TOKEN_FILE\"],\n      spec[0].container[0].env[\"AZURE_AUTHORITY_HOST\"],\n      spec[0].container[0].volume_mount\n    ]\n  }\n}\n\n#File: output.tf\noutput \"resource_group_name\" {\n  value = local.resource_group_name\n}\n\noutput \"aks_name\" {\n  value = local.aks_name\n}\n\noutput \"aks_get_credentials_command\" {\n  value = \"az aks get-credentials -g ${local.resource_group_name} -n ${local.aks_name}\"\n}\n\n#File: variables.tf\nvariable \"app_name\" {\n  type = string\n}\n\nvariable \"aks_namespace\" {\n  type    = string\n  default = \"default\"\n}\n\nvariable \"container_image\" {\n  type    = string\n  default = \"ghcr.io/azure/azure-workload-identity/msal-python\"\n}\n"}]}
{"messages": [{"role": "user", "content": "Create a Google Cloud Storage bucket named \"incident-logs-bucket\" in the EU location. Create a Google Pub/Sub topic called \"incident-notifications\" for incident alerts. Set up a logging project sink named \"incident-log-sink\" to filter logs with severity greater than or equal to ERROR and direct them to the storage bucket. Establish a monitoring alert policy named \"High Error Rate Alert\" to trigger notifications when the error count exceeds 5 within a minute. Finally, configure an email notification channel for incident responses, assigning the \"roles/incidentresponder\" role to the group with the email address \"admin@gmail.com\"."}, {"role": "assistant", "content": "\n#File: main.tf\nresource \"google_logging_project_sink\" \"incident_sink\" {\n  name        = \"incident-log-sink\"\n  destination = \"storage.googleapis.com/${google_storage_bucket.incident_logs.name}\"\n  filter      = \"severity>=ERROR\"\n\n  unique_writer_identity = true\n}\n\nresource \"google_storage_bucket\" \"incident_logs\" {\n  name     = \"incident-logs-bucket\"\n  location = \"EU\"\n}\n\nresource \"google_pubsub_topic\" \"incident_topic\" {\n  name = \"incident-notifications\"\n}\n\nresource \"google_monitoring_alert_policy\" \"high_error_rate\" {\n  display_name = \"High Error Rate Alert\"\n\n  combiner = \"OR\"\n  conditions {\n    display_name = \"High error rate on API\"\n    condition_threshold {\n      filter     = \"metric.type=\\\"logging.googleapis.com/user/error_count\\\"\"\n      duration   = \"60s\"\n      comparison = \"COMPARISON_GT\"\n      threshold_value = 5\n\n      aggregations {\n        alignment_period     = \"60s\"\n        per_series_aligner   = \"ALIGN_RATE\"\n        cross_series_reducer = \"REDUCE_SUM\"\n        group_by_fields      = [\"resource.label.project_id\"]\n      }\n    }\n  }\n\n  notification_channels = [google_monitoring_notification_channel.email.id]\n  enabled               = true\n}\n\nresource \"google_monitoring_notification_channel\" \"email\" {\n  display_name = \"Incident Response Email\"\n  type         = \"email\"\n  labels = {\n    email_address = \"admin@gmail.com\"\n  }\n}\n\nresource \"google_project_iam_member\" \"incident_response_team\" {\n  project = \"yariksvitlytskyi-learning\"\n  role    = \"roles/incidentresponder\"\n  member  = \"group:admin@gmail.com\"\n}\n\n\n\n\n#File: versions.tf\nterraform {\n\trequired_providers {\n\t\tgoogle = {\n\t\t\tsource = \"google\"\n\t\t\tversion = \"6.31.0\"\n\t\t}\n\t}\n}\n\n\n#File: variables.tf\ndata \"google_project\" \"project\" {\n  project_id = \"evident-factor-397909\"\n}"}]}
{"messages": [{"role": "user", "content": "Create a Google Cloud provider configuration with the necessary project ID and region. Define local variables to store configurations such as subnet CIDRs and VM-Series image details. Create three VPC networks: management, untrust, and trust, each with specific configurations. Set up subnets for each network along with ingress firewall rules to allow appropriate traffic. Finally, provision VM-Series instances within these subnets, ensuring they have the correct service accounts and network configurations."}, {"role": "assistant", "content": "\n#File: main.tf\n# --------------------------------------------------------------------------------------------\n# Provider configuration\n# --------------------------------------------------------------------------------------------\n\nterraform {}\n\nprovider \"google\" {\n  project = local.project_id\n  region  = local.region\n}\n\ndata \"google_compute_zones\" \"main\" {}\n\n# --------------------------------------------------------------------------------------------\n# Local variables\n# --------------------------------------------------------------------------------------------\n\nlocals {\n  project_id             = var.project_id\n  region                 = var.region\n  vmseries_image         = var.vmseries_image\n  public_key_path        = var.public_key_path\n  mgmt_allow_ips         = var.mgmt_allow_ips\n  prefix                 = var.prefix\n  subnet_cidr_mgmt       = var.subnet_cidr_mgmt\n  subnet_cidr_untrust    = var.subnet_cidr_untrust\n  subnet_cidr_untrust_lb = var.subnet_cidr_untrust_lb\n  subnet_cidr_trust      = var.subnet_cidr_trust\n  subnet_cidr_web        = var.subnet_cidr_web\n  subnet_cidr_external   = var.subnet_cidr_external\n  create_test_vms        = var.create_test_vms\n}\n\n# --------------------------------------------------------------------------------------------\n# Create VPC networks\n# --------------------------------------------------------------------------------------------\n\nresource \"google_compute_network\" \"mgmt\" {\n  name                     = \"${local.prefix}mgmt-vpc\"\n  routing_mode             = \"GLOBAL\"\n  auto_create_subnetworks  = false\n  enable_ula_internal_ipv6 = true\n}\n\n\nresource \"google_compute_network\" \"untrust\" {\n  name                     = \"${local.prefix}untrust-vpc\"\n  routing_mode             = \"GLOBAL\"\n  auto_create_subnetworks  = false\n  enable_ula_internal_ipv6 = true\n}\n\n\nresource \"google_compute_network\" \"trust\" {\n  name                            = \"${local.prefix}trust-vpc\"\n  routing_mode                    = \"GLOBAL\"\n  auto_create_subnetworks         = false\n  enable_ula_internal_ipv6        = true\n  delete_default_routes_on_create = true\n}\n\n# --------------------------------------------------------------------------------------------\n# Create subnets\n# --------------------------------------------------------------------------------------------\n\nresource \"google_compute_subnetwork\" \"mgmt\" {\n  name             = \"${local.prefix}mgmt-subnet\"\n  ip_cidr_range    = local.subnet_cidr_mgmt\n  region           = local.region\n  stack_type       = \"IPV4_IPV6\"\n  ipv6_access_type = \"EXTERNAL\"\n  network          = google_compute_network.mgmt.id\n}\n\n\nresource \"google_compute_subnetwork\" \"untrust\" {\n  name             = \"${local.prefix}untrust-subnet\"\n  ip_cidr_range    = local.subnet_cidr_untrust\n  region           = local.region\n  stack_type       = \"IPV4_IPV6\"\n  ipv6_access_type = \"EXTERNAL\"\n  network          = google_compute_network.untrust.id\n}\n\n\nresource \"google_compute_subnetwork\" \"untrust_lb\" {\n  name             = \"${local.prefix}untrust-lb-subnet\"\n  ip_cidr_range    = local.subnet_cidr_untrust_lb\n  region           = local.region\n  stack_type       = \"IPV4_IPV6\"\n  ipv6_access_type = \"EXTERNAL\"\n  network          = google_compute_network.untrust.id\n}\n\n\nresource \"google_compute_subnetwork\" \"trust\" {\n  name             = \"${local.prefix}trust-subnet\"\n  ip_cidr_range    = local.subnet_cidr_trust\n  region           = local.region\n  stack_type       = \"IPV4_IPV6\"\n  ipv6_access_type = \"INTERNAL\"\n  network          = google_compute_network.trust.id\n}\n\nresource \"google_compute_subnetwork\" \"web\" {\n  name             = \"${local.prefix}web-subnet\"\n  ip_cidr_range    = local.subnet_cidr_web\n  region           = local.region\n  stack_type       = \"IPV4_IPV6\"\n  ipv6_access_type = \"INTERNAL\"\n  network          = google_compute_network.trust.id\n}\n\n# --------------------------------------------------------------------------------------------\n# Create ingress firewall rules\n# --------------------------------------------------------------------------------------------\n\nresource \"google_compute_firewall\" \"mgmt_ipv4\" {\n  name          = \"${local.prefix}all-ingress-mgmt\"\n  network       = google_compute_network.mgmt.id\n  source_ranges = var.mgmt_allow_ips\n\n  allow {\n    protocol = \"tcp\"\n    ports    = [\"443\", \"22\"]\n  }\n}\n\n\nresource \"google_compute_firewall\" \"untrust_ipv4\" {\n  name          = \"${local.prefix}all-ingress-untrust\"\n  network       = google_compute_network.untrust.id\n  source_ranges = [\"0.0.0.0/0\"]\n\n  allow {\n    protocol = \"all\"\n  }\n}\n\n\nresource \"google_compute_firewall\" \"untrust_ipv6\" {\n  name          = \"${local.prefix}all-ingress-untrust-ipv6\"\n  network       = google_compute_network.untrust.id\n  source_ranges = [\"::/0\"]\n  direction     = \"INGRESS\"\n\n  allow {\n    protocol = \"all\"\n  }\n}\n\n\nresource \"google_compute_firewall\" \"trust_ipv4\" {\n  name          = \"${local.prefix}all-ingress-trust\"\n  network       = google_compute_network.trust.id\n  source_ranges = [\"0.0.0.0/0\"]\n\n  allow {\n    protocol = \"all\"\n  }\n}\n\n\nresource \"google_compute_firewall\" \"trust_ipv6\" {\n  name          = \"${local.prefix}all-ingress-trust-ipv6\"\n  network       = google_compute_network.trust.id\n  source_ranges = [\"::/0\"]\n  direction     = \"INGRESS\"\n\n  allow {\n    protocol = \"all\"\n  }\n}\n\n\n# --------------------------------------------------------------------------------------------\n# Create VM-Series\n# --------------------------------------------------------------------------------------------\n\n# Service account for bootstrapping\nmodule \"iam_service_account\" {\n  source             = \"github.com/PaloAltoNetworks/terraform-google-vmseries-modules//modules/iam_service_account?ref=main\"\n  service_account_id = \"${local.prefix}vmseries-mig-sa\"\n  project_id         = local.project_id\n}\n\n\n# # Create the bootstrap storage bucket.\n# module \"bootstrap\" {\n#   source          = \"PaloAltoNetworks/vmseries-modules/google//modules/bootstrap\"\n#   service_account = module.iam_service_account.email\n#   location        = \"US\"\n#   files = {\n#     \"bootstrap_files/init-cfg.txt\"  = \"config/init-cfg.txt\"\n#     \"bootstrap_files/bootstrap.xml\" = \"config/bootstrap.xml\"\n#     \"bootstrap_files/authcodes\"     = \"license/authcodes\"\n#   }\n# }\n\n# Create VM-Series\nresource \"google_compute_instance\" \"vmseries\" {\n  name                      = \"${local.prefix}vmseries\"\n  zone                      = data.google_compute_zones.main.names[0]\n  machine_type              = \"n2-standard-4\"\n  can_ip_forward            = true\n  allow_stopping_for_update = true\n\n  metadata = {\n    mgmt-interface-swap = \"enable\"\n    # vmseries-bootstrap-gce-storagebucket = module.bootstrap.bucket_name\n    serial-port-enable = true\n    ssh-keys           = \"admin:${file(local.public_key_path)}\"\n  }\n\n  network_interface {\n    subnetwork = google_compute_subnetwork.untrust.id\n    stack_type = \"IPV4_IPV6\"\n    access_config {\n      network_tier = \"PREMIUM\"\n    }\n    ipv6_access_config {\n      network_tier = \"PREMIUM\"\n    }\n  }\n\n  network_interface {\n    subnetwork = google_compute_subnetwork.mgmt.id\n    stack_type = \"IPV4_IPV6\"\n    access_config {\n      network_tier = \"PREMIUM\"\n    }\n    ipv6_access_config {\n      network_tier = \"PREMIUM\"\n    }\n  }\n\n  network_interface {\n    subnetwork = google_compute_subnetwork.trust.id\n    stack_type = \"IPV4_IPV6\"\n  }\n\n  boot_disk {\n    initialize_params {\n      image = local.vmseries_image\n      type  = \"pd-standard\"\n    }\n  }\n\n  service_account {\n    email = module.iam_service_account.email\n    scopes = [\n      \"https://www.googleapis.com/auth/compute.readonly\",\n      \"https://www.googleapis.com/auth/cloud.useraccounts.readonly\",\n      \"https://www.googleapis.com/auth/devstorage.read_only\",\n      \"https://www.googleapis.com/auth/logging.write\",\n      \"https://www.googleapis.com/auth/monitoring.write\"\n    ]\n  }\n\n  depends_on = [\n    # module.bootstrap,\n    module.iam_service_account\n  ]\n}\n\n\n# Create instance group\nresource \"google_compute_instance_group\" \"vmseries\" {\n  name = \"${local.prefix}vmseries\"\n  zone = data.google_compute_zones.main.names[0]\n\n  instances = [\n    google_compute_instance.vmseries.id\n  ]\n}\n\n\n# --------------------------------------------------------------------------------------------\n# Create an external load balancer to distribute traffic to VM-Series trust interfaces.\n# --------------------------------------------------------------------------------------------\n\nresource \"google_compute_region_health_check\" \"extlb\" {\n  name                = \"${local.prefix}vmseries-extlb-hc\"\n  project             = var.project_id\n  region              = var.region\n  check_interval_sec  = 3\n  healthy_threshold   = 1\n  timeout_sec         = 1\n  unhealthy_threshold = 1\n\n  http_health_check {\n    port         = 80\n    request_path = \"/php/login.php\"\n  }\n}\n\n\nresource \"google_compute_address\" \"extlb_ipv4\" {\n  name         = \"${local.prefix}vmseries-extlb-pip-ipv4\"\n  region       = local.region\n  network_tier = \"PREMIUM\"\n  address_type = \"EXTERNAL\"\n}\n\n\nresource \"google_compute_address\" \"extlb_ipv6\" {\n  name               = \"${local.prefix}vmseries-extlb-pip-ipv6\"\n  region             = local.region\n  network_tier       = \"PREMIUM\"\n  address_type       = \"EXTERNAL\"\n  ip_version         = \"IPV6\"\n  ipv6_endpoint_type = \"NETLB\"\n  subnetwork         = google_compute_subnetwork.untrust_lb.id\n}\n\n\nresource \"google_compute_forwarding_rule\" \"extlb_ipv4\" {\n  name                  = \"${local.prefix}vmseries-extlb-rule-ipv4\"\n  project               = var.project_id\n  region                = var.region\n  network_tier          = \"PREMIUM\"\n  load_balancing_scheme = \"EXTERNAL\"\n  ip_protocol           = \"L3_DEFAULT\"\n  all_ports             = true\n  backend_service       = google_compute_region_backend_service.extlb.self_link\n  ip_address            = google_compute_address.extlb_ipv4.address\n}\n\n\nresource \"google_compute_forwarding_rule\" \"extlb_ipv6\" {\n  name                  = \"${local.prefix}vmseries-extlb-rule-ipv6\"\n  project               = var.project_id\n  region                = var.region\n  network_tier          = \"PREMIUM\"\n  load_balancing_scheme = \"EXTERNAL\"\n  ip_protocol           = \"L3_DEFAULT\"\n  all_ports             = true\n  backend_service       = google_compute_region_backend_service.extlb.self_link\n  ip_address            = google_compute_address.extlb_ipv6.id\n  ip_version            = \"IPV6\"\n  subnetwork            = google_compute_subnetwork.untrust_lb.id\n}\n\n\nresource \"google_compute_region_backend_service\" \"extlb\" {\n  provider              = google-beta\n  name                  = \"${local.prefix}vmseries-extlb\"\n  project               = var.project_id\n  region                = var.region\n  load_balancing_scheme = \"EXTERNAL\"\n  health_checks         = [google_compute_region_health_check.extlb.self_link]\n  protocol              = \"UNSPECIFIED\"\n\n  connection_tracking_policy {\n    tracking_mode                                = \"PER_SESSION\"\n    connection_persistence_on_unhealthy_backends = \"NEVER_PERSIST\"\n  }\n\n  backend {\n    group = google_compute_instance_group.vmseries.self_link\n  }\n}\n\n#File: outputs.tf\n\n# --------------------------------------------------------------------------------------------\n# Outputs\n# --------------------------------------------------------------------------------------------\n\noutput \"EXTLB_IPv4\" {\n  value = \"${google_compute_address.extlb_ipv4.address}/32\"\n}\n\noutput \"EXTLB_IPv6\" {\n  value = \"${google_compute_address.extlb_ipv6.address}/32\"\n}\n\noutput \"VMSERIES_CLI\" {\n  value = \"ssh admin@${google_compute_instance.vmseries.network_interface.1.access_config.0.nat_ip} -i ${trim(local.public_key_path, \".pub\")}\"\n}\n\noutput \"VMSERIES_GUI\" {\n  value = \"https://${google_compute_instance.vmseries.network_interface.1.access_config.0.nat_ip}\"\n}\n\noutput \"SSH_INTERNAL_VM\" {\n  value = (var.create_test_vms == true ? \"gcloud compute ssh paloalto@${google_compute_instance.internal_vm.0.name} --zone=${data.google_compute_zones.main.names[0]}\" : \"\")\n}\noutput \"SSH_EXTERNAL_VM\" {\n  value = (var.create_test_vms == true ? \"gcloud compute ssh paloalto@${google_compute_instance.external_vm.0.name} --zone=${data.google_compute_zones.main.names[0]}\" : \"\")\n}\n\n# output \"vmseries_untrust_ipv6\" {\n#   value = google_compute_instance.vmseries.network_interface.0.ipv6_access_config.0.external_ipv6\n# }\n\n# data \"google_compute_network\" \"trust\" {\n#   name = \"${local.prefix}trust-vpc\"\n# }\n\n\n\n\n\n\n\n# data google_compute_instance \"vmseries\" {\n#   name = \"vmseries\"\n#   zone = local.zone\n# }\n# output \"test2\" {\n#   value = data.google_compute_instance.vmseries\n#  # sensitive = true\n# }\n\n# output \"test3\" {\n#   value = google_compute_instance.vmseries.network_interface.0.addresses[0].address_v6\n# }\n# VM IP : fd20:d42:dc76:0:0:0:0:0\n\n# FW IP : 2600:1900:4000:eba6:0:0:0:0      | 2600:1900:4000:eba6::7c32:0        |  test nptv6 cks-neutral source-ip fd20:d42:dc76:0:0:0:0:0 dest-network 2600:1900:4000:eba6:0:0:0:0/96 \n# LB IP : 2600:1900:4000:b1d3:8000:0:0:0   | 2600:1900:4000:b1d3:8000:0:3605:0  |  test nptv6 cks-neutral source-ip fd20:d42:dc76:0:0:0:0:0 dest-network 2600:1900:4000:b1d3:8000:0:0:0/96 \n\n# FW\n## curl -6 'http://[2600:1900:4000:eba6:0:0:0:0]:80/'\n## curl -6 'http://[2600:1900:4000:eba6::7c32:0]:80/'\n\n# LB\n## curl -6 'http://[2600:1900:4000:b1d3:8000:0:0:0]:80/'\n## curl -6 'http://[2600:1900:4000:b1d3:8000:0:3605:0]:80/'\n\n#File: variables.tf\nvariable \"project_id\" {\n  description = \"GCP Project ID\"\n  type        = string\n}\n\nvariable \"public_key_path\" {\n  description = \"Local path to public SSH key. To generate the key pair use `ssh-keygen -t rsa -C admin -N '' -f id_rsa`  If you do not have a public key, run `ssh-keygen -f ~/.ssh/demo-key -t rsa -C admin`\"\n  type        = string\n}\n\nvariable \"mgmt_allow_ips\" {\n  description = \"A list of IP addresses to be added to the management network's ingress firewall rule. The IP addresses will be able to access to the VM-Series management interface.\"\n  type        = list(string)\n}\n\nvariable \"create_test_vms\" {\n  description = \"If set to true, test workloads will be deployed to test IPv6 and IPv4 traffic.\"\n  type        = bool\n}\n\nvariable \"vmseries_image\" {\n  description = \"Name of the VM-Series image within the paloaltonetworksgcp-public project.  To list available images, run: `gcloud compute images list --project paloaltonetworksgcp-public --no-standard-images`. If you are using a custom image in a different project, please update `local.vmseries_iamge_url` in `main.tf`.\"\n  type        = string\n}\n\n\n\nvariable \"region\" {\n  description = \"GCP Region\"\n  default     = \"us-central1\"\n  type        = string\n}\n\nvariable \"prefix\" {\n  description = \"Prefix to GCP resource names, an arbitrary string\"\n  default     = \"\"\n  type        = string\n}\n\nvariable \"subnet_cidr_mgmt\" {\n  description = \"IPv4 CIDR for the VM-Series mgmt subnetwork.\"\n  default     = \"10.0.0.0/28\"\n  type        = string\n}\n\nvariable \"subnet_cidr_untrust\" {\n  description = \"IPv4 CIDR for the VM-Series untrust subnetwork.\"\n  default     = \"10.0.1.0/28\"\n  type        = string\n}\n\nvariable \"subnet_cidr_untrust_lb\" {\n  description = \"IPv4 CIDR for the external load balancer subnetwork.\"\n  default     = \"10.0.1.16/28\"\n  type        = string\n}\n\nvariable \"subnet_cidr_trust\" {\n  description = \"IPv4 CIDR for the VM-Series trust subnetwork.\"\n  default     = \"10.0.2.0/28\"\n  type        = string\n}\n\nvariable \"subnet_cidr_web\" {\n  description = \"IPv4 CIDR for the external network for ingress testing.\"\n  default     = \"10.0.3.0/28\"\n  type        = string\n}\n\n\nvariable \"subnet_cidr_external\" {\n  description = \"IPv4 CIDR for the external network for ingress testing.\"\n  default     = \"192.168.0.0/28\"\n  type        = string\n}\n\n\n\n#File: vms.tf\n# --------------------------------------------------------------------------------------------\n# Create external VPC & subnet\n# --------------------------------------------------------------------------------------------\n\nresource \"google_compute_network\" \"external\" {\n  count                    = (local.create_test_vms ? 1 : 0)\n  name                     = \"${local.prefix}external-vpc\"\n  routing_mode             = \"GLOBAL\"\n  auto_create_subnetworks  = false\n  enable_ula_internal_ipv6 = true\n}\n\nresource \"google_compute_subnetwork\" \"external\" {\n  count            = (local.create_test_vms ? 1 : 0)\n  name             = \"${local.prefix}external-subnet\"\n  ip_cidr_range    = local.subnet_cidr_external\n  region           = local.region\n  stack_type       = \"IPV4_IPV6\"\n  ipv6_access_type = \"EXTERNAL\"\n  network          = google_compute_network.external[0].id\n}\n\n# --------------------------------------------------------------------------------------------\n# Create ingress firewall rules\n# --------------------------------------------------------------------------------------------\n\nresource \"google_compute_firewall\" \"external_ipv4\" {\n  count         = (local.create_test_vms ? 1 : 0)\n  name          = \"${local.prefix}all-ingress-external\"\n  network       = google_compute_network.external[0].id\n  source_ranges = [\"0.0.0.0/0\"]\n\n  allow {\n    protocol = \"all\"\n  }\n}\n\nresource \"google_compute_firewall\" \"external_ipv6\" {\n  count         = (local.create_test_vms ? 1 : 0)\n  name          = \"${local.prefix}all-ingress-external-ipv6\"\n  network       = google_compute_network.external[0].id\n  source_ranges = [\"::/0\"]\n  direction     = \"INGRESS\"\n\n  allow {\n    protocol = \"all\"\n  }\n}\n\n# --------------------------------------------------------------------------------------------\n# External VM\n# --------------------------------------------------------------------------------------------\n\nresource \"google_compute_instance\" \"external_vm\" {\n  count                     = (local.create_test_vms ? 1 : 0)\n  name                      = \"${local.prefix}external-vm\"\n  project                   = local.project_id\n  zone                      = data.google_compute_zones.main.names[0]\n  machine_type              = \"f1-micro\"\n  allow_stopping_for_update = true\n\n  metadata = {\n    serial-port-enable = true\n  }\n\n  boot_disk {\n    initialize_params {\n      image = \"https://www.googleapis.com/compute/v1/projects/panw-gcp-team-testing/global/images/ubuntu-2004-lts-apache\"\n    }\n  }\n\n  network_interface {\n    subnetwork = google_compute_subnetwork.external[0].id\n    stack_type = \"IPV4_IPV6\"\n    access_config {\n      network_tier = \"PREMIUM\"\n    }\n    ipv6_access_config {\n      network_tier = \"PREMIUM\"\n    }\n  }\n}\n\n# --------------------------------------------------------------------------------------------\n# Internal VM\n# --------------------------------------------------------------------------------------------\n\nresource \"google_compute_instance\" \"internal_vm\" {\n  count                     = (local.create_test_vms ? 1 : 0)\n  name                      = \"${local.prefix}internal-vm\"\n  project                   = local.project_id\n  zone                      = data.google_compute_zones.main.names[0]\n  machine_type              = \"f1-micro\"\n  allow_stopping_for_update = true\n\n  metadata = {\n    serial-port-enable = true\n  }\n\n  boot_disk {\n    initialize_params {\n      image = \"https://www.googleapis.com/compute/v1/projects/panw-gcp-team-testing/global/images/ubuntu-2004-lts-jenkins\"\n    }\n  }\n\n  network_interface {\n    subnetwork = google_compute_subnetwork.web.id\n    network_ip = cidrhost(local.subnet_cidr_web, 10)\n    stack_type = \"IPV4_IPV6\"\n  }\n}"}]}
{"messages": [{"role": "user", "content": "Create a resource group named \"terraformtesting\" in the \"westeurope\" region. Establish a virtual network called \"terraformtesting-vnet\" with an address space of \"10.0.0.0/16\". Set up a subnet named \"default\" with an address prefix of \"10.0.0.0/24\". Create a public IP address named \"WIN-ip\" with dynamic allocation in the same resource group. Configure a network security group \"WIN-nsg\" to include security rules that allow and deny inbound traffic on port 3389 from specified source addresses."}, {"role": "assistant", "content": "\n#File: main.tf\nresource \"azurerm_network_security_rule\" \"res-5\" {\n  access                      = \"Allow\"\n  description                 = \"ASC JIT Network Access rule created by an initiation request for policy 'default' of VM 'WIN'.\"\n  destination_address_prefix  = \"10.0.0.4\"\n  destination_port_range      = \"3389\"\n  direction                   = \"Inbound\"\n  name                        = \"SecurityCenter-JITRule-1170687618-8C18BF8921F041989344B4F1E3A0C370\"\n  network_security_group_name = \"WIN-nsg\"\n  priority                    = 100\n  protocol                    = \"*\"\n  resource_group_name         = \"terraformtesting\"\n  source_address_prefix       = \"xx.xx.xx.xxx\"\n  source_port_range           = \"*\"\n  depends_on = [\n    azurerm_network_security_group.res-0,\n  ]\n}\nresource \"azurerm_subnet\" \"res-6\" {\n  address_prefixes     = [\"10.0.0.0/24\"]\n  name                 = \"default\"\n  resource_group_name  = \"terraformtesting\"\n  virtual_network_name = \"terraformtesting-vnet\"\n  depends_on = [\n    azurerm_virtual_network.res-2,\n  ]\n}\nresource \"azurerm_network_interface\" \"res-7\" {\n  location            = \"westeurope\"\n  name                = \"win548\"\n  resource_group_name = \"terraformtesting\"\n  ip_configuration {\n    name                          = \"ipconfig1\"\n    private_ip_address_allocation = \"Dynamic\"\n    public_ip_address_id          = \"/subscriptions/xxxxxxxx-xxxx-xxxx-xxxxxxxxxx/resourceGroups/terraformtesting/providers/Microsoft.Network/publicIPAddresses/WIN-ip\"\n    subnet_id                     = \"/subscriptions/xxxxxxxx-xxxx-xxxx-xxxxxxxxxx/resourceGroups/terraformtesting/providers/Microsoft.Network/virtualNetworks/terraformtesting-vnet/subnets/default\"\n  }\n  depends_on = [\n    azurerm_public_ip.res-1,\n    azurerm_subnet.res-6,\n    azurerm_network_security_group.res-0,\n  ]\n}\nresource \"azurerm_resource_group\" \"res-8\" {\n  location = \"westeurope\"\n  name     = \"terraformtesting\"\n}\nresource \"azurerm_network_security_group\" \"res-0\" {\n  location            = \"westeurope\"\n  name                = \"WIN-nsg\"\n  resource_group_name = \"terraformtesting\"\n  depends_on = [\n    azurerm_resource_group.res-8,\n  ]\n}\nresource \"azurerm_public_ip\" \"res-1\" {\n  allocation_method   = \"Dynamic\"\n  location            = \"westeurope\"\n  name                = \"WIN-ip\"\n  resource_group_name = \"terraformtesting\"\n  depends_on = [\n    azurerm_resource_group.res-8,\n  ]\n}\nresource \"azurerm_virtual_network\" \"res-2\" {\n  address_space       = [\"10.0.0.0/16\"]\n  location            = \"westeurope\"\n  name                = \"terraformtesting-vnet\"\n  resource_group_name = \"terraformtesting\"\n  depends_on = [\n    azurerm_resource_group.res-8,\n  ]\n}\nresource \"azurerm_network_security_rule\" \"res-4\" {\n  access                      = \"Deny\"\n  description                 = \"ASC JIT Network Access rule for policy 'default' of VM 'WIN'.\"\n  destination_address_prefix  = \"10.0.0.4\"\n  destination_port_range      = \"3389\"\n  direction                   = \"Inbound\"\n  name                        = \"SecurityCenter-JITRule_1170687618_62799A5740DE464DB71C4F619369BBAD\"\n  network_security_group_name = \"WIN-nsg\"\n  priority                    = 4096\n  protocol                    = \"*\"\n  resource_group_name         = \"terraformtesting\"\n  source_address_prefix       = \"*\"\n  source_port_range           = \"*\"\n  depends_on = [\n    azurerm_network_security_group.res-0,\n  ]\n}\n#File: provider.tf\nterraform {\n  backend \"local\" {}\n  required_providers {\n    azurerm = {\n      source = \"hashicorp/azurerm\"\n      version = \"3.3.0\"\n    }\n  }\n}\n\nprovider \"azurerm\" {\n  features {}\n}\n"}]}
{"messages": [{"role": "user", "content": "Create an Azure Cosmos DB account configured for MongoDB with a bounded staleness consistency policy. Establish a virtual network and a subnet for secure access. Implement an Azure Web App for LibreChat with the necessary app settings including API keys and URIs. Set up a Meilisearch instance connected privately to LibreChat. Ensure all resources are deployed within the specified Azure resource group and location."}, {"role": "assistant", "content": "\n#File: db.tf\nresource \"azurerm_cosmosdb_account\" \"librechat\" {\n  name                      = \"librechatdb${random_string.random_postfix.result}\"\n  resource_group_name       = azurerm_resource_group.this.name\n  location                  = azurerm_resource_group.this.location\n  offer_type                = \"Standard\"\n  kind                      = \"MongoDB\"\n  enable_automatic_failover = false\n  enable_free_tier          = var.use_cosmosdb_free_tier\n\n\n  consistency_policy {\n    consistency_level       = \"BoundedStaleness\"\n    max_interval_in_seconds = 10\n    max_staleness_prefix    = 200\n  }\n\n  geo_location {\n    location          = azurerm_resource_group.this.location\n    failover_priority = 0\n  }\n  capabilities {\n    name = \"MongoDBv3.4\"\n  }\n  capabilities {\n    name = \"EnableServerless\"\n  }\n  capabilities {\n    name = \"EnableMongo\"\n  }\n\n  virtual_network_rule {\n    id = azurerm_subnet.librechat_subnet.id\n  }\n\n  # enable_multiple_write_locations = false\n  is_virtual_network_filter_enabled = true\n  public_network_access_enabled     = true\n}\n\n#File: network.tf\nresource \"azurerm_virtual_network\" \"librechat_network\" {\n  name                = \"librechat_network\"\n  address_space       = [\"10.0.0.0/16\"]\n  location            = azurerm_resource_group.this.location\n  resource_group_name = azurerm_resource_group.this.name\n}\n\nresource \"azurerm_subnet\" \"librechat_subnet\" {\n  name                 = \"librechat_subnet\"\n  resource_group_name  = azurerm_resource_group.this.name\n  virtual_network_name = azurerm_virtual_network.librechat_network.name\n  address_prefixes     = [\"10.0.1.0/24\"]\n\n  service_endpoints = [\"Microsoft.AzureCosmosDB\", \"Microsoft.Web\"]\n\n  delegation {\n    name = \"delegation\"\n    service_delegation {\n      name = \"Microsoft.Web/serverFarms\"\n    }\n  }\n}\n\n#File: openai.tf\nmodule \"openai\" {\n  # application_name = \"openai_service_librechat\"\n  source                        = \"Azure/openai/azurerm\"\n  version                       = \"0.1.1\"\n  resource_group_name           = azurerm_resource_group.this.name\n  location                      = azurerm_resource_group.this.location\n  public_network_access_enabled = true\n  # private_endpoint = {\n  #   \"pe_endpoint\" = {\n  #     private_dns_entry_enabled       = true\n  #     dns_zone_virtual_network_link   = \"dns_zone_link_openai\"\n  #     is_manual_connection            = false\n  #     name                            = \"openai_pe\"\n  #     private_service_connection_name = \"openai_pe_connection\"\n  #     subnet_name                     = \"subnet0\"\n  #     vnet_name                       = module.vnet.vnet_name\n  #     vnet_rg_name                    = azurerm_resource_group.this.name\n  #   }\n  # }\n  deployment = var.deployments\n  depends_on = [\n    azurerm_resource_group.this,\n    # module.vnet\n  ]\n}\n\n\n# resource \"azurerm_cognitive_account\" \"openai\" {\n#   name                          = \"openai_service_librechat\"\n#   location                      = azurerm_resource_group.this.location\n#   resource_group_name           = azurerm_resource_group.this.name\n#   kind                          = \"OpenAI\"\n# #   custom_subdomain_name         = var.custom_subdomain_name\n#   sku_name                      = \"S0\"\n#   public_network_access_enabled = var.public_network_access_enabled\n# #   tags                          = var.tags\n\n#   private_endpoint = {\n#     \"pe_endpoint\" = {\n#       private_dns_entry_enabled       = true\n#       dns_zone_virtual_network_link   = \"dns_zone_link_openai\"\n#       is_manual_connection            = false\n#       name                            = \"openai_pe\"\n#       private_service_connection_name = \"openai_pe_connection\"\n#       subnet_name                     = \"subnet0\"\n#       vnet_name                       = module.vnet.vnet_name\n#       vnet_rg_name                    = azurerm_resource_group.this.name\n#     }\n#   }\n\n# #   identity {\n# #     type = \"SystemAssigned\"\n# #   }\n\n# #   lifecycle {\n# #     ignore_changes = [\n# #       tags\n# #     ]\n# #   }\n# }\n\n# resource \"azurerm_cognitive_deployment\" \"deployment\" {\n#   for_each             = {for deployment in var.deployments: deployment.name => deployment}\n\n#   name                 = each.key\n#   cognitive_account_id = azurerm_cognitive_account.openai.id\n\n#   model {\n#     format  = \"OpenAI\"\n#     name    = each.value.model.name\n#     version = each.value.model.version\n#   }\n\n#   scale {\n#     type = \"Standard\"\n#   }\n# }\n\n#File: outputs.tf\n# output \"mongo_connection_string\" {\n#   description = \"Connection string for the MongoDB\"\n#   value       = azurerm_cosmosdb_account.librechat.connection_strings[0]\n#   sensitive = true\n# }\n\noutput \"ressource_group_name\" {\n  description = \"name of the created ressource group\"\n  value       = azurerm_resource_group.this.name\n}\n\noutput \"libre_chat_url\" {\n  value = \"${azurerm_linux_web_app.librechat.name}.azurewebsites.net\"\n}\n\noutput \"meilisearch_url\" {\n  value = \"${azurerm_linux_web_app.meilisearch.name}.azurewebsites.net\"\n}\n\noutput \"azure_openai_api_key\" {\n  value     = module.openai.openai_primary_key\n  sensitive = true\n}\n\noutput \"azure_openai_endpoint\" {\n  value     = module.openai.openai_endpoint\n  sensitive = true\n}\n\n\n# output \"meilisearch_master_key\" {\n#   description = \"MeiliSearch Master Key\"\n#   value       = random_string.meilisearch_master_key\n# }\n\n#File: providers.tf\n# Azure provider version\nterraform {\n  required_version = \">= 1.3.0\"\n\n  required_providers {\n    azurerm = {\n      source  = \"hashicorp/azurerm\"\n      version = \"~> 3.0, < 4.0\"\n    }\n    random = {\n      source  = \"hashicorp/random\"\n      version = \"3.3.2\"\n    }\n  }\n}\n\nprovider \"azurerm\" {\n  features {}\n}\n\nprovider \"random\" {}\n#File: resource_group.tf\nresource \"azurerm_resource_group\" \"this\" {\n  name     = \"rg-librechat-${random_string.random_postfix.result}\"\n  location = var.location\n}\n#File: strings.tf\n\nresource \"random_string\" \"random_postfix\" {\n  length  = 8\n  lower   = true\n  upper   = false\n  special = false\n}\n\nresource \"random_string\" \"jwt_secret\" {\n  length  = 64\n  lower   = true\n  upper   = false\n  special = false\n}\n\nresource \"random_string\" \"jwt_refresh_secret\" {\n  length  = 64\n  lower   = true\n  upper   = false\n  special = false\n}\n\nresource \"random_string\" \"creds_key\" {\n  length  = 64\n  lower   = true\n  upper   = false\n  special = false\n}\n\nresource \"random_string\" \"creds_iv\" {\n  length  = 32\n  lower   = true\n  upper   = false\n  special = false\n}\n\nresource \"random_string\" \"meilisearch_master_key\" {\n  length  = 20\n  special = false\n}\n\nresource \"random_string\" \"mongo_root_password\" {\n  length  = 32\n  lower   = true\n  upper   = false\n  special = false\n}\n#File: variables.tf\nvariable \"location\" {\n  description = \"The location where all resources will be deployed\"\n  default     = \"australiaeast\"\n}\n\nvariable \"app_title\" {\n  description = \"The title that librechat will display\"\n  default     = \"librechat\"\n}\n\nvariable \"openai_key\" {\n  description = \"OpenAI API Key\"\n  default     = \"\"\n  sensitive   = true\n}\n\nvariable \"chatgpt_token\" {\n  description = \"ChatGPT Token\"\n  default     = \"user_provided\"\n  sensitive   = true\n}\n\nvariable \"anthropic_api_key\" {\n  description = \"Anthropic API Key\"\n  default     = \"user_provided\"\n  sensitive   = true\n}\n\nvariable \"bingai_token\" {\n  description = \"BingAI Token\"\n  default     = \"user_provided\"\n  sensitive   = true\n}\n\nvariable \"palm_key\" {\n  description = \"PaLM Key\"\n  default     = \"user_provided\"\n  sensitive   = true\n}\n\nvariable \"app_service_sku_name\" {\n  description = \"size of the VM that runs the librechat app. F1 is free but limited to 1h per day.\"\n  default     = \"B1\"\n}\n\nvariable \"mongo_uri\" {\n  description = \"Connection string for the mongodb\"\n  default     = \"\"\n  sensitive   = true\n}\n\nvariable \"use_cosmosdb_free_tier\" {\n  description = \"Flag to enable/disable free tier of cosmosdb. This needs to be false if another instance already uses free tier.\"\n  default     = true\n}\n\nvariable \"deployments\" {\n  description = \"(Optional) Specifies the deployments of the Azure OpenAI Service\"\n  type = map(object({\n    name            = string\n    rai_policy_name = string\n    model_format    = string\n    model_name      = string\n    model_version   = string\n    scale_type      = string\n  }))\n  default = {\n    \"gpt-35-turbo\" = {\n      name            = \"gpt-35-turbo\"\n      rai_policy_name = \"Microsoft.Default\"\n      model_name      = \"gpt-35-turbo\"\n      model_format    = \"OpenAI\"\n      model_version   = \"0613\"\n      scale_type      = \"Standard\"\n    },\n    \"gpt-35-turbo-16k\" = {\n      name            = \"gpt-35-turbo-16k\"\n      rai_policy_name = \"Microsoft.Default\"\n      model_name      = \"gpt-35-turbo-16k\"\n      model_format    = \"OpenAI\"\n      model_version   = \"0613\"\n      scale_type      = \"Standard\"\n    },\n    # \"gpt-35-turbo-1106\" = {\n    #   name = \"gpt-35-turbo-1106\"\n    #   rai_policy_name = \"Microsoft.Default\"\n    #   model_name = \"gpt-35-turbo\"\n    #   model_format = \"OpenAI\"\n    #   model_version = \"1106\"\n    #   scale_type = \"Standard\"\n    # },\n    \"gpt-4\" = {\n      name            = \"gpt-4\"\n      rai_policy_name = \"Microsoft.Default\"\n      model_name      = \"gpt-4\"\n      model_format    = \"OpenAI\"\n      model_version   = \"0613\"\n      scale_type      = \"Standard\"\n    },\n    \"gpt-4-32k\" = {\n      name            = \"gpt-4-32k\"\n      rai_policy_name = \"Microsoft.Default\"\n      model_name      = \"gpt-4-32k\"\n      model_format    = \"OpenAI\"\n      model_version   = \"0613\"\n      scale_type      = \"Standard\"\n    },\n    # \"gpt-4-1106-preview\" = {\n    #   name = \"gpt-4-1106-preview\"\n    #   rai_policy_name = \"Microsoft.Default\"\n    #   model_name = \"gpt-4\"\n    #   model_format = \"OpenAI\"\n    #   model_version = \"1106-Preview\"\n    #   scale_type = \"Standard\"\n    # },\n    # \"gpt-4-vision-preview\" = {\n    #   name = \"gpt-4-vision-preview\"\n    #   rai_policy_name = \"Microsoft.Default\"\n    #   model_name = \"gpt-4\"\n    #   model_format = \"OpenAI\"\n    #   model_version = \"vision-preview\"\n    #   scale_type = \"Standard\"\n    # },\n    \"text-embedding-ada-002\" = {\n      name            = \"text-embedding-ada-002\"\n      rai_policy_name = \"Microsoft.Default\"\n      model_name      = \"text-embedding-ada-002\"\n      model_format    = \"OpenAI\"\n      model_version   = \"2\"\n      scale_type      = \"Standard\"\n    },\n  }\n}\n\nvariable \"azure_openai_api_deployment_name\" {\n  description = \"(Optional) The deployment name of your Azure OpenAI API; if deployments.chat_model.name is defined, the default value is that value.\"\n  default     = \"\"\n}\n\nvariable \"azure_openai_api_completions_deployment_name\" {\n  description = \"(Optional) The deployment name for completion; if deployments.chat_model.name is defined, the default value is that value.\"\n  default     = \"\"\n}\n\nvariable \"azure_openai_api_version\" {\n  description = \"The version of your Azure OpenAI API\"\n  default     = \"2024-02-01\"\n}\n\nvariable \"azure_openai_api_embeddings_deployment_name\" {\n  description = \"(Optional) The deployment name for embedding; if deployments.embedding_model.name is defined, the default value is that value.\"\n  default     = \"\"\n}\n\nvariable \"public_network_access_enabled\" {\n  description = \"(Optional) Specifies whether public network access is allowed for the Azure OpenAI Service\"\n  type        = bool\n  default     = false\n}\n\n#File: webapps.tf\nresource \"azurerm_service_plan\" \"librechat\" {\n  name                = \"librechat-asp${random_string.random_postfix.result}\"\n  location            = azurerm_resource_group.this.location\n  resource_group_name = azurerm_resource_group.this.name\n  os_type             = \"Linux\"\n\n  sku_name = var.app_service_sku_name\n}\n\nresource \"azurerm_linux_web_app\" \"librechat\" {\n  name                          = \"librechatapp${random_string.random_postfix.result}\"\n  location                      = azurerm_resource_group.this.location\n  resource_group_name           = azurerm_resource_group.this.name\n  service_plan_id               = azurerm_service_plan.librechat.id\n  public_network_access_enabled = true\n  https_only                    = true\n\n  site_config {\n    minimum_tls_version = \"1.2\"\n\n  }\n\n  logs {\n    http_logs {\n      file_system {\n        retention_in_days = 7\n        retention_in_mb   = 35\n      }\n    }\n    application_logs {\n      file_system_level = \"Information\"\n    }\n  }\n\n  app_settings = {\n    #==================================================#\n    #               Server Configuration               #\n    #==================================================#\n\n    APP_TITLE = var.app_title\n    # CUSTOM_FOOTER=\"My custom footer\"\n    HOST = \"0.0.0.0\"\n    PORT = 80\n\n    MONGO_URI = azurerm_cosmosdb_account.librechat.connection_strings[0]\n\n    DOMAIN_CLIENT = \"http://localhost:3080\"\n    DOMAIN_SERVER = \"http://localhost:3080\"\n\n    #===============#\n    # Debug Logging #\n    #===============#\n    DEBUG_LOGGING = true\n    DEBUG_CONSOLE = false\n\n    #=============#\n    # Permissions #\n    #=============#\n\n    # UID=1000\n    # GID=1000\n\n    #===================================================#\n    #                     Endpoints                     #\n    #===================================================#\n\n    ENDPOINTS = \"azureOpenAI\" #openAI,azureOpenAI,bingAI,chatGPTBrowser,google,gptPlugins,anthropic\n\n    # PROXY=\n\n    #============#\n    # Anthropic  #\n    #============#\n\n    # ANTHROPIC_API_KEY = \"user_provided\"\n    # ANTHROPIC_MODELS  = \"claude-1,claude-instant-1,claude-2\"\n    # ANTHROPIC_REVERSE_PROXY=\n\n    #============#\n    # Azure      #\n    #============#\n\n    AZURE_API_KEY       = module.openai.openai_primary_key\n    AZURE_OPENAI_MODELS = \"gpt-3.5-turbo,gpt-4\"\n    # AZURE_OPENAI_DEFAULT_MODEL = \"gpt-3.5-turbo\"\n    # PLUGINS_USE_AZURE = true\n\n    AZURE_USE_MODEL_AS_DEPLOYMENT_NAME = true\n\n    AZURE_OPENAI_API_INSTANCE_NAME = split(\"//\", split(\".\", module.openai.openai_endpoint)[0])[1]\n    # AZURE_OPENAI_API_DEPLOYMENT_NAME =\n    AZURE_OPENAI_API_VERSION = var.azure_openai_api_version\n    # AZURE_OPENAI_API_COMPLETIONS_DEPLOYMENT_NAME =\n    # AZURE_OPENAI_API_EMBEDDINGS_DEPLOYMENT_NAME  =\n\n    #============#\n    # BingAI     #\n    #============#\n\n    BINGAI_TOKEN = var.bingai_token\n    # BINGAI_HOST  = \"https://cn.bing.com\"\n\n    #============#\n    # ChatGPT    #\n    #============#\n\n    CHATGPT_TOKEN  = var.chatgpt_token\n    CHATGPT_MODELS = \"text-davinci-002-render-sha\"\n    # CHATGPT_REVERSE_PROXY = \"<YOUR REVERSE PROXY>\"\n\n    #============#\n    # Google     #\n    #============#\n\n    GOOGLE_KEY = \"user_provided\"\n    # GOOGLE_MODELS=\"gemini-pro,gemini-pro-vision,chat-bison,chat-bison-32k,codechat-bison,codechat-bison-32k,text-bison,text-bison-32k,text-unicorn,code-gecko,code-bison,code-bison-32k\"\n    # GOOGLE_REVERSE_PROXY= \"<YOUR REVERSE PROXY>\"\n\n    #============#\n    # OpenAI     #\n    #============#\n\n    # OPENAI_API_KEY = var.openai_key\n    # OPENAI_MODELS = \"gpt-3.5-turbo-1106,gpt-4-1106-preview,gpt-3.5-turbo,gpt-3.5-turbo-16k,gpt-3.5-turbo-0301,text-davinci-003,gpt-4,gpt-4-0314,gpt-4-0613\"\n\n    DEBUG_OPENAI = false\n\n    # TITLE_CONVO        = false\n    # OPENAI_TITLE_MODEL = \"gpt-3.5-turbo\"\n\n    # OPENAI_SUMMARIZE     = true\n    # OPENAI_SUMMARY_MODEL = \"gpt-3.5-turbo\"\n\n    # OPENAI_FORCE_PROMPT  = true\n\n    # OPENAI_REVERSE_PROXY = \"<YOUR REVERSE PROXY>\"\n\n    #============#\n    # OpenRouter #\n    #============#\n\n    # OPENROUTER_API_KEY =\n\n    #============#\n    # Plugins    #\n    #============#\n\n    # PLUGIN_MODELS = \"gpt-3.5-turbo,gpt-3.5-turbo-16k,gpt-3.5-turbo-0301,gpt-4,gpt-4-0314,gpt-4-0613\"\n\n    DEBUG_PLUGINS = true\n\n    CREDS_KEY = random_string.creds_key.result\n    CREDS_IV  = random_string.creds_iv.result\n\n    # Azure AI Search\n    #-----------------\n    # AZURE_AI_SEARCH_SERVICE_ENDPOINT=\n    # AZURE_AI_SEARCH_INDEX_NAME=\n    # AZURE_AI_SEARCH_API_KEY=\n\n    # AZURE_AI_SEARCH_API_VERSION=\n    # AZURE_AI_SEARCH_SEARCH_OPTION_QUERY_TYPE=\n    # AZURE_AI_SEARCH_SEARCH_OPTION_TOP=\n    # AZURE_AI_SEARCH_SEARCH_OPTION_SELECT=\n\n    # DALL·E 3\n    #----------------\n    # DALLE_API_KEY=\n    # DALLE3_SYSTEM_PROMPT=\"Your System Prompt here\"\n    # DALLE_REVERSE_PROXY=\n\n    # Google\n    #-----------------\n    # GOOGLE_API_KEY=\n    # GOOGLE_CSE_ID=\n\n    # SerpAPI\n    #-----------------\n    # SERPAPI_API_KEY=\n\n    # Stable Diffusion\n    #-----------------\n    # SD_WEBUI_URL=http://host.docker.internal:7860\n\n    # WolframAlpha\n    #-----------------\n    # WOLFRAM_APP_ID=\n\n    # Zapier\n    #-----------------\n    # ZAPIER_NLA_API_KEY=\n\n    #==================================================#\n    #                      Search                      #\n    #==================================================#\n\n    SEARCH             = true\n    MEILI_NO_ANALYTICS = true\n    MEILI_HOST         = \"${azurerm_linux_web_app.meilisearch.name}.azurewebsites.net\"\n    # MEILI_HTTP_ADDR=0.0.0.0:7700\n    MEILI_MASTER_KEY = random_string.meilisearch_master_key.result\n\n    #===================================================#\n    #                    User System                    #\n    #===================================================#\n\n    #========================#\n    # Moderation             #\n    #========================#\n\n    BAN_VIOLATIONS = true\n    BAN_DURATION   = 1000 * 60 * 60 * 2\n    BAN_INTERVAL   = 20\n\n    LOGIN_VIOLATION_SCORE        = 1\n    REGISTRATION_VIOLATION_SCORE = 1\n    CONCURRENT_VIOLATION_SCORE   = 1\n    MESSAGE_VIOLATION_SCORE      = 1\n    NON_BROWSER_VIOLATION_SCORE  = 20\n\n    LOGIN_MAX       = 7\n    LOGIN_WINDOW    = 5\n    REGISTER_MAX    = 5\n    REGISTER_WINDOW = 60\n\n    LIMIT_CONCURRENT_MESSAGES = true\n    CONCURRENT_MESSAGE_MAX    = 2\n\n    LIMIT_MESSAGE_IP  = true\n    MESSAGE_IP_MAX    = 40\n    MESSAGE_IP_WINDOW = 1\n\n    LIMIT_MESSAGE_USER  = false\n    MESSAGE_USER_MAX    = 40\n    MESSAGE_USER_WINDOW = 1\n\n    #========================#\n    # Balance                #\n    #========================#\n\n    CHECK_BALANCE = false\n\n    #========================#\n    # Registration and Login #\n    #========================#\n\n    ALLOW_EMAIL_LOGIN         = true\n    ALLOW_REGISTRATION        = true\n    ALLOW_SOCIAL_LOGIN        = false\n    ALLOW_SOCIAL_REGISTRATION = false\n\n    SESSION_EXPIRY       = 1000 * 60 * 15\n    REFRESH_TOKEN_EXPIRY = (1000 * 60 * 60 * 24) * 7\n\n    JWT_SECRET         = random_string.jwt_secret.result\n    JWT_REFRESH_SECRET = random_string.jwt_refresh_secret.result\n\n    # Discord\n    # DISCORD_CLIENT_ID=\n    # DISCORD_CLIENT_SECRET=\n    # DISCORD_CALLBACK_URL=/oauth/discord/callback\n\n    # Facebook\n    # FACEBOOK_CLIENT_ID=\n    # FACEBOOK_CLIENT_SECRET=\n    # FACEBOOK_CALLBACK_URL=/oauth/facebook/callback\n\n    # GitHub\n    # GITHUB_CLIENT_ID=\n    # GITHUB_CLIENT_SECRET=\n    # GITHUB_CALLBACK_URL=/oauth/github/callback\n\n    # Google\n    # GOOGLE_CLIENT_ID=\n    # GOOGLE_CLIENT_SECRET=\n    # GOOGLE_CALLBACK_URL=/oauth/google/callback\n\n    # OpenID\n    # OPENID_CLIENT_ID=\n    # OPENID_CLIENT_SECRET=\n    # OPENID_ISSUER=\n    # OPENID_SESSION_SECRET=\n    # OPENID_SCOPE=\"openid profile email\"\n    # OPENID_CALLBACK_URL=/oauth/openid/callback\n\n    # OPENID_BUTTON_LABEL=\n    # OPENID_IMAGE_URL=\n\n    #========================#\n    # Email Password Reset   #\n    #========================#\n\n    # EMAIL_SERVICE=                  \n    # EMAIL_HOST=                     \n    # EMAIL_PORT=25                   \n    # EMAIL_ENCRYPTION=               \n    # EMAIL_ENCRYPTION_HOSTNAME=      \n    # EMAIL_ALLOW_SELFSIGNED=         \n    # EMAIL_USERNAME=                 \n    # EMAIL_PASSWORD=                 \n    # EMAIL_FROM_NAME=                \n    # EMAIL_FROM=noreply@librechat.ai\n\n    #==================================================#\n    #                      Others                      #\n    #==================================================#\n    #   You should leave the following commented out   #\n\n    # NODE_ENV=\n\n    # REDIS_URI=\n    # USE_REDIS=\n\n    # E2E_USER_EMAIL=\n    # E2E_USER_PASSWORD=\n\n    #=============================================================#\n    #                   Azure App Service Configuration           #\n    #=============================================================#\n\n    WEBSITE_RUN_FROM_PACKAGE            = \"1\"\n    DOCKER_REGISTRY_SERVER_URL          = \"https://index.docker.io\"\n    WEBSITES_ENABLE_APP_SERVICE_STORAGE = false\n    DOCKER_ENABLE_CI                    = false\n    WEBSITES_PORT                       = 80\n    PORT                                = 80\n    DOCKER_CUSTOM_IMAGE_NAME            = \"ghcr.io/danny-avila/librechat-dev-api:latest\"\n    NODE_ENV                            = \"production\"\n  }\n  virtual_network_subnet_id = azurerm_subnet.librechat_subnet.id\n\n  depends_on = [azurerm_linux_web_app.meilisearch, azurerm_cosmosdb_account.librechat, module.openai]\n  # depends_on = [azurerm_linux_web_app.meilisearch]\n}\n\n#  Deploy code from a public GitHub repo\n# resource \"azurerm_app_service_source_control\" \"sourcecontrol\" {\n#   app_id                 = azurerm_linux_web_app.librechat.id\n#   repo_url               = \"https://github.com/danny-avila/LibreChat\"\n#   branch                 = \"main\"    \n#   type = \"Github\"\n\n#   # use_manual_integration = true\n#   # use_mercurial          = false\n#   depends_on = [\n#     azurerm_linux_web_app.librechat,\n#   ]\n# }\n\n# resource \"azurerm_app_service_virtual_network_swift_connection\" \"librechat\" {\n#   app_service_id = azurerm_linux_web_app.librechat.id\n#   subnet_id      = module.vnet.vnet_subnets_name_id[\"subnet0\"]\n\n#   depends_on = [\n#     azurerm_linux_web_app.librechat,\n#     module.vnet\n#   ]\n# }\n\n#TODO: privately communicate between librechat and meilisearch, right now it is via public internet\nresource \"azurerm_linux_web_app\" \"meilisearch\" {\n  name                = \"meilisearchapp${random_string.random_postfix.result}\"\n  location            = azurerm_resource_group.this.location\n  resource_group_name = azurerm_resource_group.this.name\n  service_plan_id     = azurerm_service_plan.librechat.id\n\n  app_settings = {\n    WEBSITES_ENABLE_APP_SERVICE_STORAGE = false\n\n    MEILI_MASTER_KEY   = random_string.meilisearch_master_key.result\n    MEILI_NO_ANALYTICS = true\n\n    DOCKER_REGISTRY_SERVER_URL          = \"https://index.docker.io\"\n    WEBSITES_ENABLE_APP_SERVICE_STORAGE = false\n    DOCKER_ENABLE_CI                    = false\n    WEBSITES_PORT                       = 7700\n    PORT                                = 7700\n    DOCKER_CUSTOM_IMAGE_NAME            = \"getmeili/meilisearch:latest\"\n  }\n\n  site_config {\n    always_on = \"true\"\n    ip_restriction {\n      virtual_network_subnet_id = azurerm_subnet.librechat_subnet.id\n      priority                  = 100\n      name                      = \"Allow from LibreChat subnet\"\n      action                    = \"Allow\"\n    }\n  }\n\n  logs {\n    http_logs {\n      file_system {\n        retention_in_days = 7\n        retention_in_mb   = 35\n      }\n    }\n    application_logs {\n      file_system_level = \"Information\"\n    }\n  }\n\n  # identity {\n  #   type = \"SystemAssigned\"\n  # }\n\n}\n"}]}
{"messages": [{"role": "user", "content": "Create Azure Storage Account Network Rules with Terraform by defining the resource in your `main.tf` file using `azurerm_storage_account_network_rules`. Set the `storage_account_name` and `resource_group_name` variables accordingly, and configure the `default_action` to \"Deny\". Specify allowed IPs and subnet IDs with the corresponding variables. Output the network rules ID in `outputs.tf` for reference. Ensure you declare necessary provider versions in `providers.tf` and set the required Terraform version in `versions.tf`."}, {"role": "assistant", "content": "\n#File: main.tf\nresource \"azurerm_storage_account_network_rules\" \"adls-gen2-rules\" {\n  storage_account_name       = var.storage_account_name\n  resource_group_name        = var.resource_group_name\n  default_action             = \"Deny\"\n  bypass                     = [\"AzureServices\"]\n  ip_rules                   = var.allowed_ips\n  virtual_network_subnet_ids = var.allowed_subnet_ids\n}\n\n#File: outputs.tf\noutput \"network_rules_id\" {\n  value       = azurerm_storage_account_network_rules.adls-gen2-rules.id\n  description = \"ID of the ADLS Gen2 storage account network rules\"\n}\n\n#File: variables.tf\nvariable \"storage_account_name\" {\n  description = \"Name of storage account on which to create rules\"\n  type        = string\n}\n\nvariable \"resource_group_name\" {\n  description = \"Name of resource group containing the storage account\"\n  type        = string\n}\n\nvariable \"allowed_ips\" {\n  description = \"List of allowed IPs\"\n  type        = list(string)\n  default     = null\n}\n\nvariable \"allowed_subnet_ids\" {\n  description = \"List of allowed subnet IDs. Subnets must have Microsoft.Storage service endpoint\"\n  type        = list(string)\n  default     = null\n}\n\n#File: versions.tf\nterraform {\n  required_version = \">= 0.12\"\n  required_providers {\n    azurerm = \">= 2.60.0\"\n  }\n}\n\n#File: providers.tf\nprovider \"azurerm\" {\n  version = \"=2.60.0\"\n  features {}\n}\n\nprovider \"azuread\" {\n  version = \"=1.5.0\"\n}\n"}]}
{"messages": [{"role":"user","content":"Set up a static website hosted on an S3 bucket with a custom domain managed via Route 53 and secured with an ACM SSL certificate. Create a CloudFront distribution to serve the website content over HTTPS, including a secret user-agent header for request authentication to the S3 origin. The setup includes DNS validation for the certificate, bucket policies for public read access, and uses variables and locals for flexible domain and bucket naming."},{"role":"assistant","content":"# Simple website serving at naked domain / www. subdomain\r\nprovider \"aws\" {\r\n  profile = var.aws_profile\r\n  region  = var.aws_region\r\n}\r\n\r\n\r\nmodule \"website\" {\r\n  source  = \"worldofprasanna/staticwebsite/aws\"\r\n  version = \"1.0.0\"\r\n  domain  = var.domain\r\n}\r\n\r\n# AWS Specific variables\r\nvariable \"aws_region\" {\r\n  type        = string\r\n  description = \"AWS Region to create the resource\"\r\n  default     = \"us-east-1\"\r\n}\r\n\r\nvariable \"aws_profile\" {\r\n  type        = string\r\n  description = \"AWS Profile to choose\"\r\n  default     = \"default\"\r\n}\r\nlocals {\r\n  route53_domain = var.route53_domain != \"\" ? var.route53_domain : var.domain\r\n}\r\n\r\nresource \"aws_route53_zone\" \"main\" {\r\n  name = \"${local.route53_domain}\"\r\n}\r\n\r\nresource \"aws_route53_record\" \"app\" {\r\n  zone_id = \"${aws_route53_zone.main.zone_id}\"\r\n  name    = \"${local.bucket_name}\"\r\n  type    = \"A\"\r\n\r\n  alias {\r\n    name                   = \"${aws_cloudfront_distribution.main.domain_name}\"\r\n    zone_id                = \"${aws_cloudfront_distribution.main.hosted_zone_id}\"\r\n    evaluate_target_health = false\r\n  }\r\n}\r\n\r\nresource \"aws_route53_record\" \"cert_validation\" {\r\n  name    = \"${aws_acm_certificate.cert.domain_validation_options.0.resource_record_name}\"\r\n  type    = \"${aws_acm_certificate.cert.domain_validation_options.0.resource_record_type}\"\r\n  zone_id = \"${aws_route53_zone.main.id}\"\r\n  records = [\"${aws_acm_certificate.cert.domain_validation_options.0.resource_record_value}\"]\r\n  ttl     = 60\r\n}\r\nlocals {\r\n  bucket_name = var.bucket_name != \"\" ? var.bucket_name : var.domain\r\n}\r\n\r\nresource \"aws_s3_bucket\" \"main\" {\r\n  bucket = local.bucket_name\r\n  acl    = \"private\"\r\n  policy = data.aws_iam_policy_document.bucket_policy.json\r\n\r\n  website {\r\n    index_document = var.index_document\r\n    error_document = var.error_document\r\n  }\r\n\r\n  force_destroy = var.s3_force_destroy\r\n\r\n  tags = {\r\n    \"Name\" = local.bucket_name\r\n  }\r\n}\r\n\r\ndata \"aws_iam_policy_document\" \"bucket_policy\" {\r\n  statement {\r\n    sid = \"AllowReadFromAll\"\r\n\r\n    actions = [\r\n      \"s3:GetObject\",\r\n    ]\r\n\r\n    resources = [\r\n      \"arn:aws:s3:::${local.bucket_name}/*\",\r\n    ]\r\n\r\n    principals {\r\n      type        = \"*\"\r\n      identifiers = [\"*\"]\r\n    }\r\n  }\r\n}\r\n\r\n# Refactor it to use loop\r\nresource \"aws_s3_bucket_object\" \"index\" {\r\n  bucket       = local.bucket_name\r\n  key          = \"index.html\"\r\n  source       = \"initial_files/index.html\"\r\n  content_type = \"text/html\"\r\n}\r\n\r\nresource \"aws_s3_bucket_object\" \"error\" {\r\n  bucket       = local.bucket_name\r\n  key          = \"error.html\"\r\n  source       = \"initial_files/error.html\"\r\n  content_type = \"text/html\"\r\n}\r\nvariable \"bucket_name\" {\r\n  type        = string\r\n  description = \"The Fully Qualified domain name should be the bucket name\"\r\n  default     = \"\"\r\n}\r\n\r\nvariable \"route53_domain\" {\r\n  type        = string\r\n  description = \"Route53 hostedzone name\"\r\n  default     = \"\"\r\n}\r\n\r\nvariable \"domain\" {\r\n  type        = string\r\n  description = \"simple website where route53 hosted zone and bucket name are same. Naked domain\"\r\n  default     = \"\"\r\n}\r\n\r\nvariable \"s3_force_destroy\" {\r\n  type        = string\r\n  description = \"Destroy the s3 bucket inspite of contents in it.\"\r\n  default     = \"false\"\r\n}\r\n\r\nvariable \"index_document\" {\r\n  type        = string\r\n  description = \"Index page to be used for website. Defaults to index.html\"\r\n  default     = \"index.html\"\r\n}\r\n\r\nvariable \"error_document\" {\r\n  type        = string\r\n  description = \"Error page to be used for website. Defaults to error.html\"\r\n  default     = \"error.html\"\r\n}\r\n\r\nvariable \"secret_user_agent\" {\r\n  type        = string\r\n  description = \"secret to authenticate CF requests to s3\"\r\n  default     = \"SECRET-STRING\"\r\n}\r\nresource \"aws_acm_certificate\" \"cert\" {\r\n  domain_name       = \"${local.bucket_name}\"\r\n  validation_method = \"DNS\"\r\n}\r\n\r\nresource \"aws_acm_certificate_validation\" \"cert\" {\r\n  certificate_arn         = \"${aws_acm_certificate.cert.arn}\"\r\n  validation_record_fqdns = [\"${aws_route53_record.cert_validation.fqdn}\"]\r\n}\r\n\r\nresource \"aws_cloudfront_distribution\" \"main\" {\r\n  http_version = \"http2\"\r\n\r\n  origin {\r\n    origin_id   = \"origin-${local.bucket_name}\"\r\n    domain_name = aws_s3_bucket.main.website_endpoint\r\n\r\n    custom_origin_config {\r\n      origin_protocol_policy = \"http-only\"\r\n      http_port              = \"80\"\r\n      https_port             = \"443\"\r\n      origin_ssl_protocols   = [\"TLSv1.2\"]\r\n    }\r\n\r\n    custom_header {\r\n      name  = \"User-Agent\"\r\n      value = var.secret_user_agent\r\n    }\r\n  }\r\n\r\n  enabled             = true\r\n  default_root_object = var.index_document\r\n\r\n  aliases = concat([local.bucket_name])\r\n\r\n  restrictions {\r\n    geo_restriction {\r\n      restriction_type = \"none\"\r\n    }\r\n  }\r\n\r\n  default_cache_behavior {\r\n    target_origin_id = \"origin-${local.bucket_name}\"\r\n    allowed_methods  = [\"GET\", \"HEAD\"]\r\n    cached_methods   = [\"GET\", \"HEAD\"]\r\n    compress         = true\r\n\r\n    forwarded_values {\r\n      query_string = false\r\n\r\n      cookies {\r\n        forward = \"none\"\r\n      }\r\n    }\r\n\r\n    viewer_protocol_policy = \"redirect-to-https\"\r\n    min_ttl                = 0\r\n    default_ttl            = 300\r\n    max_ttl                = 1200\r\n  }\r\n\r\n  viewer_certificate {\r\n    acm_certificate_arn      = \"${aws_acm_certificate_validation.cert.certificate_arn}\"\r\n    ssl_support_method       = \"sni-only\"\r\n    minimum_protocol_version = \"TLSv1\"\r\n  }\r\n}\r\n"}]}
{"messages": [{"role":"user","content":"Provision a basic Amazon EC2 instance in the us-west-2 region. Use an Ubuntu AMI and a t2.micro instance type. Ensure SSH access via a key pair."},{"role":"assistant","content":"provider \"aws\" {\r\n  region = \"us-west-2\"\r\n}\r\n\r\nresource \"aws_instance\" \"web\" {\r\n  ami           = \"ami-0c5204531f799e0c6\"\r\n  instance_type = \"t2.micro\"\r\n  key_name      = \"my-key\"\r\n\r\n  tags = {\r\n    Name = \"MyWebServer\"\r\n  }\r\n}\r\n"}]}
{"messages": [{"role": "user", "content": "Create an Azure SQL Server named \"satc-sqlserver-001\" in the specified resource group and location. Set the SQL Server version to \"12.0\" and configure the administrator login credentials. Create an Azure SQL Database named \"dados\" associated with the SQL Server, specifying collation and performance options. Establish a firewall rule for the SQL Server using your public IP address. Output the SQL Server name, database name, username, password, and public IP address."}, {"role": "assistant", "content": "\n#File: azure_sql_server 2.tf\n# resource \"azurerm_mssql_server\" \"sql_002\" {\n#   name                         = \"satc-sqlserver-002\"\n#   resource_group_name          = var.resource_group_name\n#   location                     = var.location_002\n#   version                      = \"12.0\"\n#   administrator_login          = var.usuario_admin\n#   administrator_login_password = var.password\n# }\n\n# resource \"azurerm_mssql_database\" \"sql_002\" {\n#   name                        = \"dados\"\n#   server_id                   = azurerm_mssql_server.sql_002.id\n#   collation                   = \"SQL_Latin1_General_CP1_CI_AS\"\n#   auto_pause_delay_in_minutes = -1\n#   max_size_gb                 = 64\n#   min_capacity                = 10\n#   read_replica_count          = 0\n#   read_scale                  = false\n#   sku_name                    = \"GP_S_Gen5_10\"\n#   zone_redundant              = false\n#   geo_backup_enabled          = false\n\n# }\n\n# data \"http\" \"meuip_002\" {\n#   url = \"https://api.ipify.org\"\n\n#   # Opcional: header da requisição\n#   request_headers = {\n#     Accept = \"application/text\"\n#   }\n# }\n\n# resource \"azurerm_mssql_firewall_rule\" \"sql_002\" {\n#   name             = \"RegraFWInternet\"\n#   server_id        = azurerm_mssql_server.sql_002.id\n#   start_ip_address = data.http.meuip_002.body\n#   end_ip_address   = data.http.meuip_002.body\n# }\n\n#File: azure_sql_server.tf\nresource \"azurerm_mssql_server\" \"sql\" {\n  name                         = \"satc-sqlserver-001\"\n  resource_group_name          = var.resource_group_name\n  location                     = var.location\n  version                      = \"12.0\"\n  administrator_login          = var.usuario_admin\n  administrator_login_password = var.password\n}\n\nresource \"azurerm_mssql_database\" \"sql\" {\n  name                        = \"dados\"\n  server_id                   = azurerm_mssql_server.sql.id\n  collation                   = \"SQL_Latin1_General_CP1_CI_AS\"\n  auto_pause_delay_in_minutes = -1\n  max_size_gb                 = 64\n  min_capacity                = 10\n  read_replica_count          = 0\n  read_scale                  = false\n  sku_name                    = \"GP_S_Gen5_10\"\n  zone_redundant              = false\n  geo_backup_enabled          = false\n\n}\n\ndata \"ipify_ip\" \"public\" {}\n\n\nresource \"azurerm_mssql_firewall_rule\" \"sql\" {\n  name             = \"RegraFWInternet\"\n  server_id        = azurerm_mssql_server.sql.id\n  start_ip_address = data.ipify_ip.public.ip\n  end_ip_address   = data.ipify_ip.public.ip\n}\n\n#File: output.tf\noutput \"sqlserver_001\" {\n  description = \"Nome do SQL Server\"\n  value       = azurerm_mssql_server.sql.name\n}\n\n# output \"sqlserver_002\" {\n#   value = azurerm_mssql_server.sql_002.name\n# }\n\n\noutput \"database_001\" {\n  description = \"Nome do Banco de Dados\"\n  value       = azurerm_mssql_database.sql.name\n}\n\n# output \"database_002\" {\n#   value = azurerm_mssql_database.sql_002.name\n# }\n\noutput \"username\" {\n  description = \"Usuário SQL Server\"\n  value       = var.usuario_admin\n}\n\noutput \"password\" {\n  description = \"Senha SQL Server\"\n  value       = var.password\n}\n\noutput \"public_ip\" {\n  description = \"Meu IP Público\"\n  value       = data.ipify_ip.public.ip_cidr\n}\n\n#File: provider.tf\nterraform {\n  required_providers {\n    azurerm = {\n      source  = \"hashicorp/azurerm\"\n      version = \"=3.0.0\"\n    }\n    ipify = {\n      source  = \"rerichardjr/ipify\"\n      version = \"1.0.0\"\n    }\n  }\n}\n\nprovider \"azurerm\" {\n  features {}\n}\n\nprovider \"ipify\" {\n  # Configuration options\n}\n#File: variables.tf\n# Lista de variaveis utilizadas nos arquivos de terraform\nvariable \"resource_group_name\" {\n  default = \"learn-877e311a-66ab-401b-9372-06326c9bd083\"\n}\n\nvariable \"location\" {\n  default = \"westus\"\n}\n\nvariable \"location_002\" {\n  default = \"Brazil South\"\n}\n\nvariable \"usuario_admin\" {\n  default = \"admin_user\"\n}\n\nvariable \"password\" {\n  default = \"senha@2022\"\n}"}]}
{"messages": [{"role": "user", "content": "Create a DNS managed zone in Google Cloud. Define DNS records for both public and private endpoints based on provided variables. Set up managed SSL certificates for the public and private domains. Configure global addresses and forwarding rules for HTTP and HTTPS load balancers. Establish backend services and health checks for efficient traffic management."}, {"role": "assistant", "content": "\n#File: dns.tf\n/**\n * Copyright 2020 Quortex\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nlocals {\n  # Remove the point at the end of private fqdns.\n  private_domains = { for k, v in google_dns_record_set.private : k => regex(\"(.*).$\", v.name)[0] }\n  # Remove the point at the end of public fqdns.\n  public_domains = { for k, v in google_dns_record_set.public : k => regex(\"(.*).$\", v.name)[0] }\n}\n\n# Get the provided managed zone reference.\ndata \"google_dns_managed_zone\" \"zone\" {\n  provider = google-beta\n  name     = var.dns_managed_zone\n}\n\n# A list of DNS records for public purpose.\nresource \"google_dns_record_set\" \"public\" {\n  for_each = var.dns_records_public\n\n  name = \"${each.value}.${data.google_dns_managed_zone.zone.dns_name}\"\n  type = \"A\"\n  ttl  = 300\n\n  managed_zone = var.dns_managed_zone\n\n  rrdatas = [google_compute_global_address.public.address]\n}\n\n# A list of DNS records for private purpose.\nresource \"google_dns_record_set\" \"private\" {\n  for_each = var.dns_records_private\n\n  name = \"${each.value}.${data.google_dns_managed_zone.zone.dns_name}\"\n  type = \"A\"\n  ttl  = 300\n\n  managed_zone = var.dns_managed_zone\n\n  rrdatas = [google_compute_global_address.private.address]\n}\n\n# SSL certificates for public domains.\nresource \"google_compute_managed_ssl_certificate\" \"public\" {\n  provider = google-beta\n  for_each = var.dns_records_public\n\n  name = replace(\"${var.ssl_certificates_name_prefix}-${each.value}\", \".\", \"-\")\n\n  managed {\n    domains = [google_dns_record_set.public[each.key].name]\n  }\n}\n\n# SSL certificates for private domains.\nresource \"google_compute_managed_ssl_certificate\" \"private\" {\n  provider = google-beta\n  for_each = var.dns_records_private\n\n  name = replace(\"${var.ssl_certificates_name_prefix}-${each.value}\", \".\", \"-\")\n\n  managed {\n    domains = [google_dns_record_set.private[each.key].name]\n  }\n}\n\n#File: loadbalancer_private.tf\n/**\n * Copyright 2020 Quortex\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n# The Quortex private IP used for private HTTP(S) load balancing.\nresource \"google_compute_global_address\" \"private\" {\n  # google beta required for labels atm.\n  provider = google-beta\n\n  name        = length(var.private_ip_name) > 0 ? var.private_ip_name : \"${var.name}-private\"\n  description = var.private_ip_description\n\n  address_type = \"EXTERNAL\"\n  ip_version   = var.private_ip_version\n\n  labels = var.labels\n}\n\n# The private HTTP forwarding rule.\n# It is used to forward traffic to the private load balancer for HTTP load balancing.\nresource \"google_compute_global_forwarding_rule\" \"private_http\" {\n  # google beta required for labels atm.\n  provider = google-beta\n\n  name        = length(var.private_http_forwarding_rule_name) > 0 ? var.private_http_forwarding_rule_name : \"${var.name}-private-http\"\n  description = var.private_http_forwarding_rule_description\n\n  # The URL of the target resource to receive the matched traffic.\n  target                = google_compute_target_http_proxy.private.self_link\n  load_balancing_scheme = \"EXTERNAL\"\n  ip_address            = google_compute_global_address.private.address\n  ip_protocol           = \"TCP\"\n  port_range            = \"80\"\n\n  labels = var.labels\n}\n\n# The private http proxy\n# It is used by one or more global forwarding rule to route incoming HTTP requests to the URL map.\nresource \"google_compute_target_http_proxy\" \"private\" {\n  name        = length(var.private_http_proxy_name) > 0 ? var.private_http_proxy_name : \"${var.name}-private-http\"\n  description = var.private_http_proxy_description\n  url_map     = google_compute_url_map.private.self_link\n}\n\n# The private HTTPS forwarding rule.\n# It is used to forward traffic to the private load balancer for HTTPS load balancing.\nresource \"google_compute_global_forwarding_rule\" \"private_https\" {\n  # google beta required for labels atm.\n  provider = google-beta\n\n  name        = length(var.private_https_forwarding_rule_name) > 0 ? var.private_https_forwarding_rule_name : \"${var.name}-private-https\"\n  description = var.private_https_forwarding_rule_description\n\n  # The URL of the target resource to receive the matched traffic.\n  target                = google_compute_target_https_proxy.private.self_link\n  load_balancing_scheme = \"EXTERNAL\"\n  ip_address            = google_compute_global_address.private.address\n  ip_protocol           = \"TCP\"\n  port_range            = \"443\"\n\n  labels = var.labels\n}\n\n# The private https proxy\n# It is used by one or more global forwarding rule to route incoming HTTPS requests to the URL map.\nresource \"google_compute_target_https_proxy\" \"private\" {\n  name        = length(var.private_https_proxy_name) > 0 ? var.private_https_proxy_name : \"${var.name}-private-https\"\n  description = var.private_https_proxy_description\n\n  url_map          = google_compute_url_map.private.self_link\n  ssl_certificates = [for k, v in var.dns_records_private : google_compute_managed_ssl_certificate.private[k].self_link]\n}\n\n# The private UrlMap, used to route requests to Quortex backend service for private purpose.\nresource \"google_compute_url_map\" \"private\" {\n  name        = length(var.private_url_map_name) > 0 ? var.private_url_map_name : \"${var.name}-private\"\n  description = var.private_url_map_description\n\n  # The backend service or backend bucket to use when none of the given rules match.\n  default_service = google_compute_backend_service.private.self_link\n}\n\n# The backend service associated to private loadbalancer.\nresource \"google_compute_backend_service\" \"private\" {\n  name        = length(var.private_backend_service_name) > 0 ? var.private_backend_service_name : \"${var.name}-private\"\n  description = var.private_backend_service_description\n\n  load_balancing_scheme = \"EXTERNAL\"\n\n  health_checks = [google_compute_health_check.private.self_link]\n\n  # Whether or not Cloud CDN is enabled on the Backend Service.\n  enable_cdn = false\n\n  # The protocol for incoming requests.\n  protocol = \"HTTP\"\n\n  # The backend configuration.\n  dynamic \"backend\" {\n    for_each = var.private_backend_service_config\n\n    content {\n      group                        = lookup(backend.value, \"group\", null)\n      description                  = lookup(backend.value, \"description\", null)\n      balancing_mode               = lookup(backend.value, \"balancing_mode\", null)\n      capacity_scaler              = lookup(backend.value, \"capacity_scaler\", null)\n      max_connections              = lookup(backend.value, \"max_connections\", null)\n      max_connections_per_instance = lookup(backend.value, \"max_connections_per_instance\", null)\n      max_connections_per_endpoint = lookup(backend.value, \"max_connections_per_endpoint\", null)\n      max_rate                     = lookup(backend.value, \"max_rate\", null)\n      max_rate_per_instance        = lookup(backend.value, \"max_rate_per_instance\", null)\n      max_rate_per_endpoint        = lookup(backend.value, \"max_rate_per_endpoint\", null)\n      max_utilization              = lookup(backend.value, \"max_utilization\", null)\n    }\n  }\n\n  security_policy = google_compute_security_policy.policy.self_link\n}\n\n# The private backend service health check configuration.\nresource \"google_compute_health_check\" \"private\" {\n  name        = length(var.private_http_health_check_name) > 0 ? var.private_http_health_check_name : \"${var.name}-private\"\n  description = var.private_http_health_check_description\n\n  http_health_check {\n    port         = var.private_http_health_check_config.port\n    request_path = var.private_http_health_check_config.request_path\n  }\n}\n\n# The security policy associated to private loadbalancer.\n# Set the IP ranges whitelisted for private loadbalancer access.\nresource \"google_compute_security_policy\" \"policy\" {\n  name        = length(var.private_security_policy_name) > 0 ? var.private_security_policy_name : \"${var.name}-private\"\n  description = var.private_security_policy_description\n\n  # Reject all traffic that hasn't been whitelisted.\n  rule {\n    action   = \"deny(403)\"\n    priority = \"2147483647\"\n\n    match {\n      versioned_expr = \"SRC_IPS_V1\"\n\n      config {\n        src_ip_ranges = [\"*\"]\n      }\n    }\n\n    description = \"Default rule, higher priority overrides it\"\n  }\n\n  # Whitelist traffic from certain ip address\n  rule {\n    action   = \"allow\"\n    priority = \"1000\"\n\n    match {\n      versioned_expr = \"SRC_IPS_V1\"\n\n      config {\n        src_ip_ranges = var.private_security_policy_whitelisted_ips\n      }\n    }\n\n    description = \"whitelisted IP ranges\"\n  }\n}\n\n#File: loadbalancer_public.tf\n/**\n * Copyright 2020 Quortex\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n# The Quortex public IP used for public HTTP(S) load balancing.\nresource \"google_compute_global_address\" \"public\" {\n  # google beta required for labels atm.\n  provider = google-beta\n\n  name        = length(var.public_ip_name) > 0 ? var.public_ip_name : \"${var.name}-public\"\n  description = var.public_ip_description\n\n  address_type = \"EXTERNAL\"\n  ip_version   = var.public_ip_version\n\n  labels = var.labels\n}\n\n# The public HTTP forwarding rule.\n# It is used to forward traffic to the public load balancer for HTTP load balancing.\nresource \"google_compute_global_forwarding_rule\" \"public_http\" {\n  # google beta required for labels atm.\n  provider = google-beta\n\n  name        = length(var.public_http_forwarding_rule_name) > 0 ? var.public_http_forwarding_rule_name : \"${var.name}-public-http\"\n  description = var.public_http_forwarding_rule_description\n\n  # The URL of the target resource to receive the matched traffic.\n  target                = google_compute_target_http_proxy.public.self_link\n  load_balancing_scheme = \"EXTERNAL\"\n  ip_address            = google_compute_global_address.public.address\n  ip_protocol           = \"TCP\"\n  port_range            = \"80\"\n\n  labels = var.labels\n}\n\n# The public HTTP proxy\n# It is used by one or more global forwarding rule to route incoming HTTP requests to the URL map.\nresource \"google_compute_target_http_proxy\" \"public\" {\n  name        = length(var.public_http_proxy_name) > 0 ? var.public_http_proxy_name : \"${var.name}-public-http\"\n  description = var.public_http_proxy_description\n  url_map     = google_compute_url_map.public.self_link\n}\n\n# The public HTTPS forwarding rule.\n# It is used to forward traffic to the public load balancer for HTTPS load balancing.\nresource \"google_compute_global_forwarding_rule\" \"public_https\" {\n  # google beta required for labels atm.\n  provider = google-beta\n\n  name        = length(var.public_https_forwarding_rule_name) > 0 ? var.public_https_forwarding_rule_name : \"${var.name}-public-https\"\n  description = var.public_https_forwarding_rule_description\n\n  # The URL of the target resource to receive the matched traffic.\n  target                = google_compute_target_https_proxy.public.self_link\n  load_balancing_scheme = \"EXTERNAL\"\n  ip_address            = google_compute_global_address.public.address\n  ip_protocol           = \"TCP\"\n  port_range            = \"443\"\n\n  labels = var.labels\n}\n\n# The public HTTPS proxy\n# It is used by one or more global forwarding rule to route incoming HTTPS requests to the URL map.\nresource \"google_compute_target_https_proxy\" \"public\" {\n  name             = length(var.public_https_proxy_name) > 0 ? var.public_https_proxy_name : \"${var.name}-public-https\"\n  description      = var.public_https_proxy_description\n  url_map          = google_compute_url_map.public.self_link\n  ssl_certificates = [for k, v in var.dns_records_public : google_compute_managed_ssl_certificate.public[k].self_link]\n}\n\n# The public UrlMap, used to route requests to Quortex backend service for public purpose.\nresource \"google_compute_url_map\" \"public\" {\n  name        = length(var.public_url_map_name) > 0 ? var.public_url_map_name : \"${var.name}-public\"\n  description = var.public_url_map_description\n\n  # The backend service or backend bucket to use when none of the given rules match.\n  default_service = google_compute_backend_service.public.self_link\n}\n\n# The backend service associated to public loadbalancer.\nresource \"google_compute_backend_service\" \"public\" {\n  name        = length(var.public_backend_service_name) > 0 ? var.public_backend_service_name : \"${var.name}-public\"\n  description = var.public_backend_service_description\n\n  load_balancing_scheme = \"EXTERNAL\"\n\n  # health_checks = [google_compute_http_health_check.public.self_link]\n  health_checks = [google_compute_health_check.public.self_link]\n\n  # Whether or not Cloud CDN is enabled on the Backend Service.\n  enable_cdn = false\n\n  # The protocol for incoming requests.\n  protocol = \"HTTP\"\n\n  # The backend configuration.\n  dynamic \"backend\" {\n    for_each = var.public_backend_service_config\n\n    content {\n      group                        = lookup(backend.value, \"group\", null)\n      description                  = lookup(backend.value, \"description\", null)\n      balancing_mode               = lookup(backend.value, \"balancing_mode\", null)\n      capacity_scaler              = lookup(backend.value, \"capacity_scaler\", null)\n      max_connections              = lookup(backend.value, \"max_connections\", null)\n      max_connections_per_instance = lookup(backend.value, \"max_connections_per_instance\", null)\n      max_connections_per_endpoint = lookup(backend.value, \"max_connections_per_endpoint\", null)\n      max_rate                     = lookup(backend.value, \"max_rate\", null)\n      max_rate_per_instance        = lookup(backend.value, \"max_rate_per_instance\", null)\n      max_rate_per_endpoint        = lookup(backend.value, \"max_rate_per_endpoint\", null)\n      max_utilization              = lookup(backend.value, \"max_utilization\", null)\n    }\n  }\n}\n\n# The public backend service health check configuration.\nresource \"google_compute_health_check\" \"public\" {\n  name        = length(var.public_http_health_check_name) > 0 ? var.public_http_health_check_name : \"${var.name}-public\"\n  description = var.public_http_health_check_description\n\n  http_health_check {\n    port         = var.public_http_health_check_config.port\n    request_path = var.public_http_health_check_config.request_path\n  }\n}\n\n#File: main.tf\n/**\n * Copyright 2020 Quortex\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n# google provider configuration\n# versions constrints defined in versions.tf\nprovider \"google\" {\n  project = var.project_id\n  region  = var.region\n}\n\n# google-beta provider configuration.\n# versions constrints defined in versions.tf\nprovider \"google-beta\" {\n  project = var.project_id\n  region  = var.region\n}\n\n#File: outputs.tf\n/**\n * Copyright 2020 Quortex\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\noutput \"dns_records_public\" {\n  value       = local.public_domains\n  description = \"A map with dns records in given dns zone for each dns_records_public provided in variables.\"\n}\n\noutput \"dns_records_private\" {\n  value       = local.private_domains\n  description = \"A map with dns records in given dns zone for each dns_records_private provided in variables.\"\n}\n\n#File: variables.tf\n/**\n * Copyright 2020 Quortex\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvariable \"project_id\" {\n  type        = string\n  description = \"The GCP project in which to create resources.\"\n}\n\nvariable \"region\" {\n  type        = string\n  description = \"The region in wich to create regional resources.\"\n}\n\nvariable \"name\" {\n  type        = string\n  description = \"A name from which the name of the resources will be chosen. Note that each resource name can be set individually.\"\n}\n\nvariable \"public_ip_name\" {\n  type        = string\n  description = \"The public load balancer external IP name.\"\n  default     = \"\"\n}\n\nvariable \"public_ip_description\" {\n  type        = string\n  description = \"A description for the public load balancer external IP.\"\n  default     = \"Quortex public load balancer IP.\"\n}\n\nvariable \"public_ip_version\" {\n  type        = string\n  description = \"The IP Version that will be used by the public load balancer address.\"\n  default     = \"IPV4\"\n}\n\nvariable \"public_http_forwarding_rule_name\" {\n  type        = string\n  description = \"The public load balancer http forwarding rule name.\"\n  default     = \"\"\n}\n\nvariable \"public_http_forwarding_rule_description\" {\n  type        = string\n  description = \"A description for the public load balancer http forwarding rule.\"\n  default     = \"Quortex public load balancer HTTP forwarding rule.\"\n}\n\nvariable \"public_https_forwarding_rule_name\" {\n  type        = string\n  description = \"The public load balancer https forwarding rule name.\"\n  default     = \"\"\n}\n\nvariable \"public_https_forwarding_rule_description\" {\n  type        = string\n  description = \"A description for the public load balancer https forwarding rule.\"\n  default     = \"Quortex public load balancer HTTPS forwarding rule.\"\n}\n\nvariable \"public_http_proxy_name\" {\n  type        = string\n  description = \"The public load balancer http proxy name.\"\n  default     = \"\"\n}\n\nvariable \"public_http_proxy_description\" {\n  type        = string\n  description = \"A description for the public load balancer http proxy.\"\n  default     = \"Quortex public load balancer HTTP proxy.\"\n}\n\nvariable \"public_https_proxy_name\" {\n  type        = string\n  description = \"The public load balancer https proxy name.\"\n  default     = \"\"\n}\n\nvariable \"public_https_proxy_description\" {\n  type        = string\n  description = \"A description for the public load balancer https proxy.\"\n  default     = \"Quortex public load balancer HTTPS proxy.\"\n}\n\nvariable \"public_url_map_name\" {\n  type        = string\n  description = \"The public load balancer url map name.\"\n  default     = \"\"\n}\n\nvariable \"public_url_map_description\" {\n  type        = string\n  description = \"A description for the public load balancer url map.\"\n  default     = \"Quortex public load balancer url map.\"\n}\n\nvariable \"public_backend_service_name\" {\n  type        = string\n  description = \"The public load balancer backend service name.\"\n  default     = \"\"\n}\n\nvariable \"public_backend_service_description\" {\n  type        = string\n  description = \"A description for the public load balancer backend service.\"\n  default     = \"Quortex public load balancer url map.\"\n}\n\nvariable \"public_backend_service_config\" {\n  type        = list\n  description = \"The backend configuration for public loadbalancer backend. The available keys follows backend configuration described here => https://www.terraform.io/docs/providers/google/r/compute_backend_service.html#backend.\"\n  default     = []\n}\n\nvariable \"public_http_health_check_name\" {\n  type        = string\n  description = \"The public load balancer backend service http health check name.\"\n  default     = \"\"\n}\n\nvariable \"public_http_health_check_description\" {\n  type        = string\n  description = \"A description for the public load balancer backend service http health check.\"\n  default     = \"Quortex public load balancer backend service http health check.\"\n}\n\nvariable \"public_http_health_check_config\" {\n  type = object({\n    port         = number\n    request_path = string\n  })\n  description = \"The public http health check configuration (port and request path).\"\n}\n\nvariable \"private_ip_name\" {\n  type        = string\n  description = \"The private load balancer external IP name.\"\n  default     = \"\"\n}\n\nvariable \"private_ip_description\" {\n  type        = string\n  description = \"A description for the private load balancer external IP.\"\n  default     = \"Quortex private load balancer IP.\"\n}\n\nvariable \"private_ip_version\" {\n  type        = string\n  description = \"The IP Version that will be used by the private load balancer address.\"\n  default     = \"IPV4\"\n}\n\nvariable \"private_http_forwarding_rule_name\" {\n  type        = string\n  description = \"The private load balancer http forwarding rule name.\"\n  default     = \"\"\n}\n\nvariable \"private_http_forwarding_rule_description\" {\n  type        = string\n  description = \"A description for the private load balancer http forwarding rule.\"\n  default     = \"Quortex private load balancer HTTP forwarding rule.\"\n}\n\nvariable \"private_https_forwarding_rule_name\" {\n  type        = string\n  description = \"The private load balancer https forwarding rule name.\"\n  default     = \"\"\n}\n\nvariable \"private_https_forwarding_rule_description\" {\n  type        = string\n  description = \"A description for the private load balancer https forwarding rule.\"\n  default     = \"Quortex private load balancer HTTPS forwarding rule.\"\n}\n\nvariable \"private_http_proxy_name\" {\n  type        = string\n  description = \"The private load balancer http proxy name.\"\n  default     = \"\"\n}\n\nvariable \"private_http_proxy_description\" {\n  type        = string\n  description = \"A description for the private load balancer http proxy.\"\n  default     = \"Quortex private load balancer HTTP proxy.\"\n}\n\nvariable \"private_https_proxy_name\" {\n  type        = string\n  description = \"The private load balancer https proxy name.\"\n  default     = \"\"\n}\n\nvariable \"private_https_proxy_description\" {\n  type        = string\n  description = \"A description for the private load balancer https proxy.\"\n  default     = \"Quortex private load balancer HTTPS proxy.\"\n}\n\nvariable \"private_url_map_name\" {\n  type        = string\n  description = \"The private load balancer url map name.\"\n  default     = \"\"\n}\n\nvariable \"private_url_map_description\" {\n  type        = string\n  description = \"A description for the private load balancer url map.\"\n  default     = \"Quortex private load balancer url map.\"\n}\n\nvariable \"private_backend_service_name\" {\n  type        = string\n  description = \"The private load balancer backend service name.\"\n  default     = \"\"\n}\n\nvariable \"private_backend_service_description\" {\n  type        = string\n  description = \"A description for the private load balancer backend service.\"\n  default     = \"Quortex private load balancer url map.\"\n}\n\nvariable \"private_backend_service_config\" {\n  type        = list\n  description = \"The backend configuration for private loadbalancer backend. The available keys follows backend configuration described here => https://www.terraform.io/docs/providers/google/r/compute_backend_service.html#backend.\"\n  default     = []\n}\n\nvariable \"private_http_health_check_name\" {\n  type        = string\n  description = \"The private load balancer backend service http health check name.\"\n  default     = \"\"\n}\n\nvariable \"private_http_health_check_description\" {\n  type        = string\n  description = \"A description for the private load balancer backend service http health check.\"\n  default     = \"Quortex private load balancer backend service http health check.\"\n}\n\nvariable \"private_http_health_check_config\" {\n  type = object({\n    port         = number\n    request_path = string\n  })\n  description = \"The private http health check configuration (port and request path).\"\n}\n\nvariable \"private_security_policy_name\" {\n  type        = string\n  description = \"The private load balancer backend service security policy name.\"\n  default     = \"\"\n}\n\nvariable \"private_security_policy_description\" {\n  type        = string\n  description = \"A description for the private load balancer backend service security policy.\"\n  default     = \"Quortex private load balancer backend service security policy.\"\n}\n\nvariable \"private_security_policy_whitelisted_ips\" {\n  type        = list(string)\n  description = \"A list of IP ranges to whitelist for private load balancer access.\"\n  default     = []\n}\n\nvariable \"dns_managed_zone\" {\n  type        = string\n  description = \"The name of an available DNS zone in which to create DNS records.\"\n}\n\nvariable \"dns_records_private\" {\n  type        = map(string)\n  description = \"A map with dns records to add in dns_managed_zone for private endpoints set as value. Full domain names will be exported in a map for the given key.\"\n  default     = {}\n}\n\nvariable \"dns_records_public\" {\n  type        = map(string)\n  description = \"A map with dns records to add in dns_managed_zone for public endpoints set as value. Full domain names will be exported in a map for the given key.\"\n  default     = {}\n}\n\nvariable \"ssl_certificates_name_prefix\" {\n  type        = string\n  description = \"A prefix for compute managed SSL certificates names. Managed SSL certificates names will be computed from this prefix and the associated DNS record.\"\n  default     = \"quortex\"\n}\n\nvariable \"labels\" {\n  type        = map\n  description = \"Labels to apply to resources. A list of key->value pairs.\"\n  default     = {}\n}\n\n#File: versions.tf\n/**\n * Copyright 2020 Quortex\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nterraform {\n  required_version = \">= 0.12\"\n\n  required_providers {\n    google      = \">= 3\"\n    google-beta = \">= 3\"\n  }\n}\n"}]}
{"messages": [{"role": "user", "content": "Create a Google Cloud provider configuration with specified project and authentication details. Configure two providers, one for Google and another for Google Beta. Create a static IP address for the Classic VPN. Set up a Classic VPN gateway, forwarding rules for ESP and UDP protocols, a VPN router, and a VPN tunnel. Finally, establish router interfaces and peers for the VPN as specified by the defined variables."}, {"role": "assistant", "content": "\n#File: provider-main.tf\n#####################\n## Provider - Main ##\n#####################\n\nterraform {\n  required_version = \">= 0.13\"\n  # backend \"gcs\" {\n  #   credentials = \"account.json\"\n  #   bucket  = \"kopicloud-gcp-tfstate\"\n  #   prefix  = \"core/core-state\"\n  # }\n}\n\nprovider \"google\" {\n  project     = var.gcp_project\n  credentials = file(var.gcp_auth_file)\n  region      = var.gcp_region\n}\n\nprovider \"google-beta\" {\n  project     = var.gcp_project\n  credentials = file(var.gcp_auth_file)\n  region      = var.gcp_region\n}\n\n#File: provider-variables.tf\n##########################\n## Provider - Variables ##\n##########################\n\n# GCP authentication file\nvariable \"gcp_auth_file\" {\n  type        = string\n  description = \"GCP authentication file\"\n  default     = \"\"\n}\n\n# define GCP region\nvariable \"gcp_region\" {\n  type        = string\n  description = \"GCP region\"\n}\n\n# define GCP project name\nvariable \"gcp_project\" {\n  type        = string\n  description = \"GCP project name\"\n}\n\n#File: vpn-classic-main.tf\n############################\n## Classic VPN GCP - Main ##\n############################\n\n# Create a Static IP for Classic VPN\nresource \"google_compute_address\" \"vpn-static-ip\" {\n  name    = \"${var.prefix}-vpn-gateway-classic-ip\"\n  project = google_project.vpn-classic.project_id\n}\n\n# Create a Classic VPN\nresource \"google_compute_vpn_gateway\" \"vpn-gateway-classic\" {\n  depends_on = [google_compute_network.vpn-network-classic]\n\n  name    = \"${var.prefix}-vpn-gateway-classic\"\n  project = google_project.vpn-classic.project_id\n  network = google_compute_network.vpn-network-classic.id\n}\n\n# VPN Forwarding Rule ESP\nresource \"google_compute_forwarding_rule\" \"vpn-fr-esp-classic\" {\n  name        = \"${var.prefix}-vpn-gateway-fr-esp\"\n  project     = google_project.vpn-classic.project_id\n  ip_protocol = \"ESP\"\n  ip_address  = google_compute_address.vpn-static-ip.address\n  target      = google_compute_vpn_gateway.vpn-gateway-classic.id\n}\n\n# VPN Forwarding Rule UDP 500\nresource \"google_compute_forwarding_rule\" \"vpn-fr-udp500-classic\" {\n  name        = \"${var.prefix}-vpn-gateway-fr-udp500\"\n  project     = google_project.vpn-classic.project_id\n  ip_protocol = \"UDP\"\n  port_range  = \"500\"\n  ip_address  = google_compute_address.vpn-static-ip.address\n  target      = google_compute_vpn_gateway.vpn-gateway-classic.id\n}\n\n# VPN Forwarding Rule UDP 4500\nresource \"google_compute_forwarding_rule\" \"vpn-fr-udp4500-classic\" {\n  name        = \"${var.prefix}-vpn-gateway-fr-udp4500\"\n  project     = google_project.vpn-classic.project_id\n  ip_protocol = \"UDP\"\n  port_range  = \"4500\"\n  ip_address  = google_compute_address.vpn-static-ip.address\n  target      = google_compute_vpn_gateway.vpn-gateway-classic.id\n}\n\n# VPN Router\nresource \"google_compute_router\" \"vpn-router-classic\" {\n  name    = \"${var.prefix}-vpn-router-classic\"\n  project = google_project.vpn-classic.project_id\n  network = google_compute_network.vpn-network-classic.name\n\n  bgp {\n    asn = var.classic_vpn_router_asn\n  }\n}\n\n# VPN Tunnel\nresource \"google_compute_vpn_tunnel\" \"vpn-tunnel-classic\" {\n  depends_on = [\n    google_compute_forwarding_rule.vpn-fr-esp-classic,\n    google_compute_forwarding_rule.vpn-fr-udp500-classic,\n    google_compute_forwarding_rule.vpn-fr-udp4500-classic,\n    google_compute_vpn_gateway.vpn-gateway-classic\n  ]\n\n  provider           = google-beta\n  name               = \"${var.prefix}-vpn-tunnel-classic\"\n  project            = google_project.vpn-classic.project_id\n  region             = var.gcp_region\n  peer_ip            = var.classic_vpn_ext_gateway_ip\n  shared_secret      = var.classic_vpn_shared_secret\n  target_vpn_gateway = google_compute_vpn_gateway.vpn-gateway-classic.id\n  router             = google_compute_router.vpn-router-classic.name\n }\n\n# Create Router Interfaces\nresource \"google_compute_router_interface\" \"vpn-interface-classic\" {\n  depends_on = [google_compute_vpn_tunnel.vpn-tunnel-classic]\n\n  name       = \"${var.prefix}-vpn-router-interface-classic\"\n  project    = google_project.vpn-classic.project_id  \n  router     = google_compute_router.vpn-router-classic.name\n  region     = var.gcp_region\n  ip_range   = var.classic_vpn_router_interface_ip_range\n  vpn_tunnel = google_compute_vpn_tunnel.vpn-tunnel-classic.name\n}\n\n# Create Peers\nresource \"google_compute_router_peer\" \"vpn-peer-classic\" {\n  depends_on = [google_compute_router_interface.vpn-interface-classic]\n\n  name                      = \"${var.prefix}-vpn-router-peer-classic\"\n  project                   = google_project.vpn-classic.project_id \n  router                    = google_compute_router.vpn-router-classic.name\n  region                    = var.gcp_region\n  peer_ip_address           = var.classic_vpn_router_peer_ip_address\n  peer_asn                  = var.classic_vpn_peer_asn\n  advertised_route_priority = 100\n  interface                 = google_compute_router_interface.vpn-interface-classic.name\n}\n#File: vpn-classic-network.tf\n################################\n## Classic VPN Network - Main ##\n################################\n\n# random ID for project\nresource \"random_integer\" \"random-classic\" {\n  max = 2000\n  min = 1000\n}\n\n# Create the NPR VPN Project\nresource \"google_project\" \"vpn-classic\" {\n  name                = \"${var.prefix}-vpn-classic\"\n  project_id          = \"${var.prefix}-vpn-classic-${random_integer.random-classic.id}\"\n  folder_id           = var.classic_vpn_folder_id \n  auto_create_network = false\n  billing_account     = var.billing_account_id\n}\n\n# Create the Network for VPN Project\nresource \"google_compute_network\" \"vpn-network-classic\" {\n  name    = \"${var.prefix}-vpn-network-classic\"\n  project = google_project.vpn-classic.project_id\n  routing_mode            = \"GLOBAL\"\n  auto_create_subnetworks = \"false\"\n}\n\n# Create a Subnet \nresource \"google_compute_subnetwork\" \"vpn-network-subnet-classic\" {\n  depends_on = [google_compute_network.vpn-network-classic]\n \n  name          = \"${var.prefix}-vpn-subnet-classic\"\n  project       = google_project.vpn-classic.project_id\n  ip_cidr_range = var.classic_vpn_subnet_cidr\n  region        = var.gcp_region\n  network       = google_compute_network.vpn-network-classic.name\n}\n\n\n#File: vpn-classic-variables.tf\n#############################\n## Classic VPN - Variables ##\n#############################\n\nvariable \"billing_account_id\" {\n  description = \"Billing account id used as default for new projects\"\n  type        = string\n}\n\nvariable \"prefix\" {\n  description = \"Prefix used for resources that need unique names\"\n  type        = string\n}\n\nvariable \"classic_vpn_folder_id\" {\n  type        = string\n  description = \"Folder to host the VPN Project\"\n}\n\nvariable \"classic_vpn_subnet_cidr\" {\n  type        = string\n  description = \"VPN Network Subnet 1\"\n  default     = \"10.0.1.0/24\"\n}\n\nvariable \"classic_vpn_ext_gateway_ip\" {\n  type        = string\n  description = \"Public IP of the external VPN Gateway\"\n}\n\nvariable \"classic_vpn_router_asn\" {\n  description = \"ASN for local side of BGP sessions\"\n  type        = string\n  default     = \"64514\"\n}\n\nvariable \"classic_vpn_peer_asn\" {\n  description = \"ASN for local side of BGP sessions\"\n  type        = string\n  default     = \"64515\"\n}\n\nvariable \"classic_vpn_shared_secret\" {\n  description = \"Tunnel shared secret\"\n  type        = string\n}\n\nvariable \"classic_vpn_router_interface_ip_range\" {\n  description = \"Router Interface IP Range\"\n  type        = string\n}\n\nvariable \"classic_vpn_router_peer_ip_address\" {\n  description = \"Router Peer IP Address\"\n  type        = string\n}\n\n"}]}
{"messages": [{"role":"user","content":"Deploy a producer-consumer system on AWS using Lambda functions with Docker images, API Gateway, SQS, and S3. The producer Lambda function is triggered via an HTTP API Gateway route and sends messages to an SQS queue, while the consumer Lambda function processes messages from the queue. IAM roles and policies ensure the necessary permissions for Lambda functions to interact with S3 and SQS, and CloudWatch log groups are set up for monitoring."},{"role":"assistant","content":"provider \"aws\" {\r\n    region = var.aws_region\r\n\r\n    default_tags {\r\n        tags = var.default_tags\r\n    }\r\n}\r\n# variable \"aws_account_id\" {\r\n#     description = \"AWS Account ID\"\r\n\r\n#     type = string\r\n# }\r\n\r\nvariable \"aws_region\" {\r\n    description = \"AWS region for all resources\"\r\n\r\n    type = string\r\n    default = \"us-east-1\"\r\n}\r\n\r\nvariable \"producer_ecr_repo\" {\r\n    description = \"ECR repository name for producer function\"\r\n\r\n    type = string\r\n}\r\n\r\nvariable \"consumer_ecr_repo\" {\r\n    description = \"ECR repository name for consumer function\"\r\n\r\n    type = string\r\n}\r\n\r\nvariable \"lambda_bucket\" {\r\n    description = \"Bucket for all lambda archives\"\r\n\r\n    type = string\r\n    default = \"temp-lambda-archive-bucket\"\r\n}\r\n\r\nvariable \"default_tags\" {\r\n    type = map\r\n    description = \"Default tags to apply to all resources\"\r\n    default = {}\r\n}\r\n\r\nvariable \"producer_lambda_function_name\" {\r\n    description = \"Name of the producer lambda function\"\r\n\r\n    type = string\r\n    default = \"producer-lambda-function\"\r\n}\r\n\r\nvariable \"producer_api_gateway_name\" {\r\n    description = \"Name of the producer api gateway\"\r\n\r\n    type = string\r\n    default = \"producer-api-gateway\"\r\n}\r\n\r\nvariable \"producer_lambda_source_path\" {\r\n    description = \"Path to the producer lambda source\"\r\n\r\n    type = string\r\n    default = \"./producer_function\"\r\n}\r\n\r\nvariable \"producer_lambda_runtime\" {\r\n    description = \"Runtime for the producer lambda\"\r\n\r\n    type = string\r\n    default = \"python3.8\"\r\n}\r\n\r\nvariable \"producer_lambda_handler\" {\r\n    description = \"Handler for the producer lambda\"\r\n\r\n    type = string\r\n    default = \"producer_function.lambda_handler\"\r\n}\r\n\r\nvariable \"producer_apigateway_stage_name\" {\r\n    description = \"Name of the API gateway stage for the producer lambda\"\r\n\r\n    type = string\r\n    default = \"prod\"\r\n}\r\n\r\nvariable \"producer_invocation_route_key\" {\r\n    description = \"Route key for the producer lambda\"\r\n\r\n    type = string\r\n    default = \"POST /queue\"\r\n}\r\n\r\nvariable \"consumer_lambda_function_name\" {\r\n    description = \"Name of the consumer lambda\"\r\n\r\n    type = string\r\n    default = \"consumer-lambda-function\"\r\n}\r\n\r\nvariable \"consumer_lambda_runtime\" {\r\n    description = \"Runtime for the consumer lambda\"\r\n\r\n    type = string\r\n    default = \"python3.8\"\r\n}\r\n\r\nvariable \"consumer_lambda_handler\" {\r\n    description = \"Handler for the consumer lambda\"\r\n\r\n    type = string\r\n    default = \"consumer_function.lambda_handler\"\r\n}\r\n\r\nvariable \"consumer_lambda_source_path\" {\r\n    description = \"Path to the consumer lambda source\"\r\n\r\n    type = string\r\n    default = \"./consumer_function\"\r\n}\r\n\r\nvariable \"queue_name\" {\r\n    description = \"Name of the queue\"\r\n\r\n    type = string\r\n    default = \"producer-consumer-queue\"\r\n}\r\n\r\nvariable \"consumer_timeout_seconds\" {\r\n    description = \"Timeout for the consumer lambda\"\r\n\r\n    type = number\r\n    default = 900\r\n}\r\nmodule \"producer_docker_image\" {\r\n    source = \"terraform-aws-modules/lambda/aws//modules/docker-build\"\r\n\r\n    create_ecr_repo = true\r\n    ecr_repo = var.producer_ecr_repo\r\n    source_path = abspath(var.producer_lambda_source_path)\r\n}\r\n\r\nresource \"aws_lambda_function\" \"producer_lambda\" {\r\n    function_name = var.producer_lambda_function_name\r\n\r\n    package_type = \"Image\"\r\n    image_uri = module.producer_docker_image.image_uri\r\n    role = aws_iam_role.lambda_exec.arn\r\n    timeout = 120\r\n\r\n    environment {\r\n        variables = {\r\n            \"QUEUE_NAME\" = aws_sqs_queue.queue.name,\r\n            \"S3_BUCKET_NAME\" = aws_s3_bucket.lambda_bucket.id,\r\n        }\r\n    }\r\n}\r\n\r\nresource \"aws_cloudwatch_log_group\" \"producer_lambda_log_group\" {\r\n    name = \"/aws/lambda/${aws_lambda_function.producer_lambda.function_name}\"\r\n\r\n    retention_in_days = 30\r\n}\r\n\r\nresource \"aws_apigatewayv2_api\" \"lambda\" {\r\n    name = var.producer_api_gateway_name\r\n    protocol_type = \"HTTP\"\r\n}\r\n\r\nresource \"aws_apigatewayv2_stage\" \"lambda\" {\r\n    api_id = aws_apigatewayv2_api.lambda.id\r\n\r\n    name = var.producer_apigateway_stage_name\r\n    auto_deploy = true\r\n\r\n    access_log_settings {\r\n        destination_arn = aws_cloudwatch_log_group.api_gw.arn\r\n\r\n        format = jsonencode({\r\n            requestId = \"$context.requestId\",\r\n            sourceIp = \"$context.identity.sourceIp\",\r\n            requestTime = \"$context.requestTime\",\r\n            protocol = \"$context.protocol\",\r\n            httpMethod = \"$context.httpMethod\",\r\n            resourcePath = \"$context.resourcePath\",\r\n            routeKey = \"$context.routeKey\",\r\n            status = \"$context.status\",\r\n            responseLength = \"$context.responseLength\",\r\n            integrationErrorMessage = \"$context.integrationErrorMessage\",\r\n        })\r\n    }\r\n}\r\n\r\nresource \"aws_apigatewayv2_integration\" \"queue\" {\r\n    api_id = aws_apigatewayv2_api.lambda.id\r\n\r\n    integration_uri = aws_lambda_function.producer_lambda.invoke_arn\r\n    integration_type = \"AWS_PROXY\"\r\n    integration_method = \"POST\"\r\n}\r\n\r\nresource \"aws_apigatewayv2_route\" \"queue\" {\r\n    api_id = aws_apigatewayv2_api.lambda.id\r\n\r\n    route_key = var.producer_invocation_route_key\r\n    target = \"integrations/${aws_apigatewayv2_integration.queue.id}\"\r\n}\r\n\r\nresource \"aws_cloudwatch_log_group\" \"api_gw\" {\r\n    name = \"/aws/api_gw/${aws_apigatewayv2_api.lambda.name}\"\r\n\r\n    retention_in_days = 30\r\n}\r\n\r\nresource \"aws_lambda_permission\" \"api_gw\" {\r\n    statement_id = \"AllowExecutionFromAPIGateway\"\r\n    action = \"lambda:InvokeFunction\"\r\n    function_name = aws_lambda_function.producer_lambda.function_name\r\n    principal = \"apigateway.amazonaws.com\"\r\n\r\n    source_arn = \"${aws_apigatewayv2_api.lambda.execution_arn}/*/*\"\r\n}\r\nresource \"aws_s3_bucket\" \"lambda_bucket\" {\r\n    bucket = var.lambda_bucket\r\n    acl = \"private\"\r\n    force_destroy = true\r\n}\r\n\r\nresource \"aws_iam_role\" \"lambda_exec\" {\r\n    name = \"lambda_role\"\r\n\r\n    assume_role_policy = jsonencode({\r\n        Version = \"2012-10-17\",\r\n        Statement = [{\r\n            Action = \"sts:AssumeRole\",\r\n            Effect = \"Allow\",\r\n            Sid = \"\",\r\n            Principal = {\r\n                Service = \"lambda.amazonaws.com\"\r\n            }\r\n        }]\r\n    })\r\n}\r\n\r\ndata \"aws_iam_policy_document\" \"lambda_policy_document\" {\r\n    statement {\r\n        sid = \"LambdaPolicyQueueAccess\"\r\n        actions = [\r\n            \"sqs:ReceiveMessage\",\r\n            \"sqs:DeleteMessage\",\r\n            \"sqs:GetQueueAttributes\",\r\n            \"sqs:SendMessage\",\r\n            \"sqs:GetQueueUrl\"\r\n        ]\r\n        resources = [\r\n            aws_sqs_queue.queue.arn\r\n        ]\r\n    }\r\n\r\n    statement {\r\n        sid = \"LambdaPolicyS3Access\"\r\n        actions = [\r\n            \"s3:GetObject\",\r\n            \"s3:PutObject\",\r\n            \"s3:DeleteObject\",\r\n            \"s3:ListBucket\",\r\n            \"s3:GetBucketLocation\",\r\n            \"s3:GetBucketPolicy\",\r\n            \"s3:GetBucketTagging\",\r\n            \"s3:GetBucketVersioning\",\r\n            \"s3:GetBucketWebsite\",\r\n            \"s3:GetLifecycleConfiguration\",\r\n        ]\r\n        resources = [\r\n            aws_s3_bucket.lambda_bucket.arn,\r\n            format(\"%s%s\", aws_s3_bucket.lambda_bucket.arn, \"/*\")\r\n        ]\r\n    }\r\n}\r\n\r\nresource \"aws_iam_policy\" \"lambda_policy\" {\r\n    name = \"lambda_policy\"\r\n    policy = data.aws_iam_policy_document.lambda_policy_document.json\r\n}\r\n\r\nresource \"aws_iam_role_policy_attachment\" \"lambda_sqs_policy\" {\r\n    role = aws_iam_role.lambda_exec.name\r\n    policy_arn = aws_iam_policy.lambda_policy.arn\r\n}\r\n\r\nresource \"aws_iam_role_policy_attachment\" \"lambda_basic_policy\" {\r\n    role = aws_iam_role.lambda_exec.name\r\n    policy_arn = \"arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\"\r\n}\r\n\r\nresource \"aws_sqs_queue\" \"queue\" {\r\n    name = var.queue_name\r\n\r\n    visibility_timeout_seconds = var.consumer_timeout_seconds\r\n}\r\nmodule \"consumer_docker_image\" {\r\n    source = \"terraform-aws-modules/lambda/aws//modules/docker-build\"\r\n\r\n    create_ecr_repo = true\r\n    ecr_repo = var.consumer_ecr_repo\r\n    source_path = abspath(var.consumer_lambda_source_path)\r\n}\r\n\r\nresource \"aws_lambda_function\" \"consumer_lambda\" {\r\n    function_name = var.consumer_lambda_function_name\r\n\r\n    package_type = \"Image\"\r\n    image_uri = module.consumer_docker_image.image_uri\r\n    role = aws_iam_role.lambda_exec.arn\r\n    timeout = var.consumer_timeout_seconds\r\n    memory_size = 3009\r\n\r\n    environment {\r\n        variables = {\r\n            \"QUEUE_NAME\" = aws_sqs_queue.queue.name,\r\n            \"S3_BUCKET_NAME\" = aws_s3_bucket.lambda_bucket.id,\r\n        }\r\n    }\r\n}\r\n\r\nresource \"aws_lambda_event_source_mapping\" \"event_source_mapping\" {\r\n    event_source_arn = aws_sqs_queue.queue.arn\r\n    enabled = true\r\n    function_name = aws_lambda_function.consumer_lambda.arn\r\n    batch_size = 1\r\n}\r\n\r\n\r\nresource \"aws_cloudwatch_log_group\" \"consumer_lambda_log_group\" {\r\n    name = \"/aws/lambda/${aws_lambda_function.consumer_lambda.function_name}\"\r\n\r\n    retention_in_days = 30\r\n}\r\n"}]}
{"messages": [{"role":"user","content":"Creates an AWS Elastic File System (EFS) with configurable options such as availability zone, encryption, performance mode, and throughput settings, including support for provisioned throughput. Define lifecycle policies to transition files to infrequent access storage and applies tags for resource identification. Additionally, it sets up local ingress and egress network rules specifying allowed ports and protocols for security group configuration."},{"role":"assistant","content":"resource \"aws_efs_file_system\" \"efs_fs\" {\r\n  creation_token = var.token_name\r\n  availability_zone_name = var.availability_zone_name\r\n\r\n  encrypted = var.encryption\r\n  throughput_mode = var.throughput_mode\r\n\r\n  performance_mode = var.performance_mode\r\n\r\n  provisioned_throughput_in_mibps = var.throughput_mode == \"provisioned\" ? var.provisioned_throughput_in_mibps_val : null\r\n\r\n  lifecycle_policy {\r\n    transition_to_ia = var.infrequent_access_transition_dur\r\n  }\r\n\r\n  tags = {\r\n    Name = var.tag_name\r\n  }\r\n}\r\n\r\nlocals {\r\n  ingress_rules = [{\r\n    port        = 443\r\n    description = \"Ingress rules for port 443\"\r\n    protocol    = \"tcp\"\r\n    },\r\n    {\r\n      port        = 80\r\n      description = \"Ingree rules for port 80\"\r\n      protocol    = \"tcp\"\r\n\r\n    },\r\n    {\r\n      port        = -1\r\n      description = \"ICMP PROTOCOL\"\r\n      protocol    = \"icmp\"\r\n\r\n    },\r\n\r\n    {\r\n      port        = 22\r\n      description = \"SSH\"\r\n      protocol    = \"tcp\"\r\n\r\n    },\r\n  ]\r\n}\r\n\r\nlocals {\r\n  egress_rules = [{\r\n    port     = 0\r\n    protocol = \"-1\"\r\n    }\r\n  ]\r\n}\r\n# ---------------------------------------------------------------------------------------------------------------------\r\n# OPTIONAL PARAMETERS\r\n# These parameters have reasonable defaults.\r\n# ---------------------------------------------------------------------------------------------------------------------\r\n\r\nvariable \"availability_zone_name\" {\r\n  description = \"Avalability zone name (used for one zone efs).\"\r\n  type        = string\r\n  default     = null\r\n}\r\n\r\nvariable \"performance_mode\" {\r\n  description = \"The file system performance mode.\"\r\n  type        = string\r\n  default     = \"generalPurpose\"\r\n}\r\n\r\nvariable \"throughput_mode\" {\r\n  description = \"Throughput mode for the file system.\"\r\n  type        = string\r\n  default     = \"provisioned\"\r\n}\r\n\r\nvariable \"provisioned_throughput_in_mibps_val\" {\r\n  description = \"The throughput, measured in MiB/s, that you want to provision for the file system.\"\r\n  type        = number\r\n  default     = 10\r\n}\r\n\r\n# ---------------------------------------------------------------------------------------------------------------------\r\n# REQUIRED PARAMETERS\r\n# You must provide a value for each of these parameters.\r\n# ---------------------------------------------------------------------------------------------------------------------\r\n\r\nvariable \"token_name\" {\r\n  description = \"A unique name used as reference when creating the Elastic File System to ensure idempotent file system creation.\"\r\n  type        = string\r\n}\r\n\r\nvariable \"encryption\" {\r\n  description = \"EFS encryption status.\"\r\n  type        = bool\r\n}\r\n\r\nvariable \"infrequent_access_transition_dur\" {\r\n  description = \"How long it takes to transition files to the IA storage class.\"\r\n  type        = string\r\n}\r\n\r\nvariable \"tag_name\" {\r\n  description = \"EFS tag name.\"\r\n  type        = string\r\n}"}]}
{"messages": [{"role":"user","content":"Create a public S3 bucket for hosting a static website. Set the index document to index.html. Allow read access to everyone"},{"role":"assistant","content":"provider \"aws\" {\r\n  region = \"us-east-1\"\r\n}\r\n\r\nresource \"aws_s3_bucket\" \"site\" {\r\n  bucket = \"static-site-${random_id.id.hex}\"\r\n\r\n  website {\r\n    index_document = \"index.html\"\r\n  }\r\n}\r\n\r\nresource \"random_id\" \"id\" {\r\n  byte_length = 4\r\n}\r\n\r\nresource \"aws_s3_bucket_policy\" \"public_read\" {\r\n  bucket = aws_s3_bucket.site.id\r\n\r\n  policy = jsonencode({\r\n    Version = \"2012-10-17\",\r\n    Statement = [{\r\n      Sid       = \"PublicReadGetObject\",\r\n      Effect    = \"Allow\",\r\n      Principal = \"*\",\r\n      Action    = [\"s3:GetObject\"],\r\n      Resource  = [\"${aws_s3_bucket.site.arn}/*\"]\r\n    }]\r\n  })\r\n}\r\n"}]}
{"messages": [{"role": "user", "content": "Create an Azure Resource Group with a name derived from a random identifier. Generate an Azure Active Directory application and service principal with required permissions for Microsoft Graph. Set up a Log Analytics Workspace for monitoring. Establish an Azure Linux Web App configured with authentication and application settings. Enable diagnostic logging for the web app to capture various log categories and metrics."}, {"role": "assistant", "content": "\n#File: main.tf\nterraform {\n  required_providers {\n    azurerm = {\n      source  = \"hashicorp/azurerm\"\n      version = \"3.48.0\"\n    }\n    azuread = {\n      source  = \"hashicorp/azuread\"\n      version = \"2.36.0\"\n    }\n    azapi = {\n      source = \"azure/azapi\"\n    }\n  }\n}\n\nprovider \"azurerm\" {\n  features {\n    resource_group {\n      prevent_deletion_if_contains_resources = false\n    }\n  }\n}\n\nprovider \"azuread\" {}\nprovider \"azapi\" {}\n\n\n### Variables ###\n\nresource \"random_id\" \"app_affix\" {\n  byte_length = 8\n}\n\nlocals {\n  app_name       = \"myprivateapp${lower(random_id.app_affix.hex)}\"\n  app_url        = \"https://${local.app_name}.azurewebsites.net\"\n  identifier_uri = \"api://${local.app_name}\"\n}\n\n\n### Group ###\n\nresource \"azurerm_resource_group\" \"main\" {\n  name     = \"rg-${local.app_name}\"\n  location = var.location\n}\n\n\n### Authentication ###\n\ndata \"azuread_client_config\" \"current\" {}\ndata \"azuread_application_published_app_ids\" \"well_known\" {}\n\nresource \"azuread_service_principal\" \"msgraph\" {\n  application_id = data.azuread_application_published_app_ids.well_known.result.MicrosoftGraph\n  use_existing   = true\n}\n\nresource \"random_uuid\" \"oauth2_permission_scope\" {}\n\nresource \"azuread_application\" \"app\" {\n  display_name     = \"app-${local.app_name}\"\n  identifier_uris  = [local.identifier_uri]\n  sign_in_audience = \"AzureADMyOrg\"\n  owners           = [data.azuread_client_config.current.object_id]\n\n  web {\n    homepage_url  = local.app_url\n    redirect_uris = [\"${local.app_url}/.auth/login/aad/callback\"]\n\n    implicit_grant {\n      id_token_issuance_enabled = true\n    }\n  }\n\n  api {\n    requested_access_token_version = 2\n\n    oauth2_permission_scope {\n      id                         = random_uuid.oauth2_permission_scope.result\n      enabled                    = true\n      type                       = \"User\"\n      admin_consent_display_name = \"Access File Upload\"\n      admin_consent_description  = \"Allow the application to access File Upload on behalf of the signed-in user.\"\n      user_consent_display_name  = \"Access File Upload\"\n      user_consent_description   = \"Allow the application to access File Upload on your behalf.\"\n      value                      = \"user_impersonation\"\n    }\n  }\n\n  required_resource_access {\n    resource_app_id = data.azuread_application_published_app_ids.well_known.result.MicrosoftGraph\n\n    resource_access {\n      id   = azuread_service_principal.msgraph.oauth2_permission_scope_ids[\"User.Read\"]\n      type = \"Scope\"\n    }\n  }\n}\n\nresource \"azuread_service_principal\" \"app\" {\n  application_id               = azuread_application.app.application_id\n  app_role_assignment_required = false\n  owners                       = [data.azuread_client_config.current.object_id]\n  feature_tags {\n    enterprise = true\n  }\n}\n\nresource \"azuread_application_password\" \"app\" {\n  application_object_id = azuread_application.app.object_id\n  display_name          = \"Generated by Terraform\"\n}\n\n### Log Analytics ###\n\nresource \"azurerm_log_analytics_workspace\" \"main\" {\n  name                = \"log-${local.app_name}\"\n  location            = azurerm_resource_group.main.location\n  resource_group_name = azurerm_resource_group.main.name\n  sku                 = \"PerGB2018\"\n  retention_in_days   = 30\n}\n\n### App Services ###\n\nresource \"azurerm_service_plan\" \"main\" {\n  name                = \"plan-${local.app_name}\"\n  resource_group_name = azurerm_resource_group.main.name\n  location            = azurerm_resource_group.main.location\n  os_type             = \"Linux\"\n  sku_name            = var.app_sku_name\n  worker_count        = var.app_worker_count\n}\n\n\n### AAD Domain ###\ndata \"azuread_domains\" \"aad_domains\" {\n  only_default = true\n}\n\nresource \"azurerm_linux_web_app\" \"main\" {\n  name                = local.app_name\n  resource_group_name = azurerm_resource_group.main.name\n  location            = azurerm_service_plan.main.location\n  service_plan_id     = azurerm_service_plan.main.id\n  https_only          = true\n\n  site_config {\n    always_on         = true\n    health_check_path = \"/healthz\"\n\n    application_stack {\n      dotnet_version = \"7.0\"\n    }\n  }\n\n  app_settings = {\n    APP_REGISTRATION_SECRET  = azuread_application_password.app.value\n    WEBSITE_RUN_FROM_PACKAGE = 1\n\n    # Microsoft.Identity.Web\n    AzureAd__Domain   = data.azuread_domains.aad_domains.domains[0].domain_name\n    AzureAd__TenantId = data.azuread_client_config.current.tenant_id\n    AzureAd__ClientId = azuread_application.app.application_id\n  }\n}\n\ndata \"azurerm_subscription\" \"current\" {\n}\n\nresource \"azapi_update_resource\" \"auth_settings_v2\" {\n  type      = \"Microsoft.Web/sites/config@2022-03-01\"\n  name      = \"authsettingsV2\"\n  parent_id = azurerm_linux_web_app.main.id\n\n  body = jsonencode({\n    properties = {\n      \"globalValidation\" : {\n        \"excludedPaths\" : [\n          \"/api/dogs\",\n          \"/healthz\"\n        ],\n        \"requireAuthentication\" : var.require_authentication,\n        \"unauthenticatedClientAction\" : var.unauthenticated_client_action,\n        \"redirectToProvider\" : \"azureactivedirectory\"\n      },\n      \"httpSettings\" : {\n        \"forwardProxy\" : {\n          \"convention\" : \"NoProxy\"\n        },\n        \"requireHttps\" : true,\n        \"routes\" : {\n          \"apiPrefix\" : \"/.auth\"\n        }\n      },\n      \"identityProviders\" : {\n        \"azureActiveDirectory\" : {\n          \"enabled\" : true,\n          \"login\" : {\n            \"disableWWWAuthenticate\" : false,\n            \"loginParameters\" : [\n              \"response_type=code id_token\",\n              \"scope=openid offline_access profile https://graph.microsoft.com/User.Read\"\n            ]\n          },\n          \"registration\" : {\n            \"clientId\" : \"${azuread_application.app.application_id}\",\n            \"clientSecretSettingName\" : \"APP_REGISTRATION_SECRET\",\n            \"openIdIssuer\" : \"https://sts.windows.net/${data.azurerm_subscription.current.tenant_id}/v2.0\"\n          },\n          \"validation\" : {\n            \"allowedAudiences\" : [\n              local.identifier_uri\n            ],\n            \"defaultAuthorizationPolicy\" : {\n              \"allowedPrincipals\" : {}\n            },\n            \"jwtClaimChecks\" : {}\n          }\n        }\n      },\n      \"login\" : {\n        \"cookieExpiration\" : {\n          \"convention\" : \"FixedTime\",\n          \"timeToExpiration\" : \"08:00:00\"\n        },\n        \"nonce\" : {\n          \"nonceExpirationInterval\" : \"00:05:00\",\n          \"validateNonce\" : true\n        },\n        \"preserveUrlFragmentsForLogins\" : false,\n        \"routes\" : {},\n        \"tokenStore\" : {\n          \"azureBlobStorage\" : {},\n          \"enabled\" : true,\n          \"fileSystem\" : {},\n          \"tokenRefreshExtensionHours\" : 72.0\n        }\n      },\n      \"platform\" : {\n        \"enabled\" : true,\n        \"runtimeVersion\" : \"~1\"\n      }\n    }\n  })\n}\n\nresource \"azurerm_monitor_diagnostic_setting\" \"app\" {\n  name                       = \"Application Diagnostics\"\n  target_resource_id         = azurerm_linux_web_app.main.id\n  log_analytics_workspace_id = azurerm_log_analytics_workspace.main.id\n\n  enabled_log {\n    category = \"AppServiceHTTPLogs\"\n\n    retention_policy {\n      days    = 7\n      enabled = true\n    }\n  }\n\n  enabled_log {\n    category = \"AppServiceConsoleLogs\"\n\n    retention_policy {\n      days    = 7\n      enabled = true\n    }\n  }\n\n  enabled_log {\n    category = \"AppServiceAppLogs\"\n\n    retention_policy {\n      days    = 7\n      enabled = true\n    }\n  }\n\n  enabled_log {\n    category = \"AppServiceAuditLogs\"\n\n    retention_policy {\n      days    = 7\n      enabled = true\n    }\n  }\n\n  enabled_log {\n    category = \"AppServiceIPSecAuditLogs\"\n\n    retention_policy {\n      days    = 7\n      enabled = true\n    }\n  }\n\n  enabled_log {\n    category = \"AppServicePlatformLogs\"\n\n    retention_policy {\n      days    = 7\n      enabled = true\n    }\n  }\n\n  metric {\n    category = \"AllMetrics\"\n    enabled  = true\n\n    retention_policy {\n      days    = 7\n      enabled = true\n    }\n  }\n}\n\n#File: output.tf\noutput \"app_default_hostname\" {\n  value = azurerm_linux_web_app.main.default_hostname\n}\n\n#File: variables.tf\nvariable \"location\" {\n  type    = string\n  default = \"eastus2\"\n}\n\nvariable \"app_sku_name\" {\n  type    = string\n  default = \"B1\"\n}\n\nvariable \"app_worker_count\" {\n  type    = number\n  default = 1\n}\n\nvariable \"require_authentication\" {\n  type    = bool\n  default = true\n}\n\nvariable \"unauthenticated_client_action\" {\n  type    = string\n  default = \"RedirectToLoginPage\" # For API, use Return401\n}\n"}]}
{"messages": [{"role": "user", "content": "Create a random integer between 10000 and 9999999 to use as a prefix for a Google Cloud Storage bucket. Deploy a GCS bucket using the Terraform Google Cloud Storage module with the specified project ID, bucket name, and the generated prefix. Configure the bucket to be located in \"US\" with a \"STANDARD\" storage class and enable website features for \"index.html\" and \"404.html\". Grant public access to the bucket by setting the IAM role for \"allUsers\" to \"roles/storage.objectViewer\". Output the created bucket's details for future reference."}, {"role": "assistant", "content": "\n#File: main.tf\nresource \"random_integer\" \"bucket_name_prefix\" {\n  min = 10000\n  max = 9999999\n}\n\nmodule \"gcs_buckets\" {\n  source        = \"git::https://github.com/terraform-google-modules/terraform-google-cloud-storage.git?ref=66e472b56cd21b45a3939883a66ccfcf5ec1b9ed\"\n  project_id    = var.project_id\n  names         = [var.bucket_name]\n  prefix        = random_integer.bucket_name_prefix.result\n  location      = \"US\"\n  storage_class = \"STANDARD\"\n  force_destroy = { (var.bucket_name) = true }\n  website = {\n    main_page_suffix = \"index.html\"\n    not_found_page   = \"404.html\"\n  }\n}\n\n# Make bucket public by granting allUsers storage.objectViewer access\nresource \"google_storage_bucket_iam_member\" \"public_rule\" {\n  bucket = module.gcs_buckets.bucket.id\n  role   = \"roles/storage.objectViewer\"\n  #checkov:skip=CKV_GCP_28:Skip public bucket access check, required for static website hosting\n  member = \"allUsers\"\n}\n\n#File: outputs.tf\noutput \"bucket\" {\n  description = \"The bucket created by the module\"\n  value       = module.gcs_buckets.bucket\n}\n#File: variables.tf\nvariable \"project_id\" {\n  description = \"The ID of the project in which to create the bucket.\"\n  type        = string\n}\n\nvariable \"bucket_name\" {\n  description = \"The name of the bucket to create.\"\n  type        = string\n}\n#File: versions.tf\nterraform {\n  required_version = \"~> 1.11.0\"\n\n  required_providers {\n    google = {\n      source  = \"hashicorp/google\"\n      version = \"~> 6.30.0\"\n    }\n    random = {\n      source  = \"hashicorp/random\"\n      version = \"~> 3.7.0\"\n    }\n  }\n}"}]}
{"messages": [{"role": "user", "content": "Create a Terraform configuration with a `main.tf` file that provisions an EC2 instance in AWS. Define the necessary variables in a `variables.tf` file, including instance type and AMI ID. Ensure to set appropriate access permissions for the EC2 instance. Output the public IP address of the instance after creation. Initialize and apply the configuration to provision the resources."}, {"role": "assistant", "content": "\n#File: main.tf\n\n#File: variables.tf\n"}]}
{"messages": [{"role": "user", "content": "Create a Google Compute Engine instance by defining the resource in Terraform. Specify the instance name, machine type, and zone using the provided variables. Configure the boot disk with an image sourced from the variables. Set up a network interface and an ephemeral IP by indicating the subnetwork. Finally, include metadata for the instance using the specified values."}, {"role": "assistant", "content": "\n#File: main.tf\nresource \"google_compute_instance\" \"virtual-machine\" {\n  name         = var.instance_name\n  machine_type = var.machine_type\n  zone         = var.vm_zone\n\n  tags = var.network_tags\n\n  boot_disk {\n    initialize_params {\n      image = var.machine_image\n    }\n  }\n\n  network_interface {\n    subnetwork = var.subnetwork\n\n    access_config {\n      // Ephemeral IP\n    }\n  }\n\n  metadata = {\n    Name = var.metadata_Name_value\n  }\n}  \n#File: variables.tf\nvariable \"project_name\" {\n  type = string\n}\n\nvariable \"region\" {\n  type = string\n}\n\nvariable \"zone\" {\n  type = string\n}\n\nvariable \"bucket_name\" {\n  type = string\n}\n\nvariable \"prefix\" {\n  type = string\n}\n\nvariable \"token_path\" {\n  type = string\n}\n\nvariable \"storage_class\" {\n  type = string\n}\n\n#File: inputs.tf\nvariable \"instance_name\" {\n    type = string\n}\n\nvariable \"machine_type\" {\n    type = string\n}\n\nvariable \"vm_zone\" {\n    type = string \n}\n\nvariable \"machine_image\" {\n    type = string\n}\n\nvariable \"subnetwork\" {\n    type = string\n}\n\nvariable \"network_tags\" {\n    type = list\n}\n\nvariable \"metadata_Name_value\" {\n    type = string\n}\n#File: outputs.tf\noutput \"target_tags\" {\n    value = google_compute_instance.virtual-machine.tags\n}"}]}
{"messages": [{"role":"user","content":"Set up an AWS EC2 instance in the eu-central-1 region with a security group allowing inbound traffic on common ports like SSH, HTTP, HTTPS, DNS, and LDAP. The instance runs an Ubuntu AMI, installs Docker via user data, and launches the Interactsh server Docker container configured with domain and token variables, optionally updating GoDaddy DNS records if credentials are provided. It outputs the instance’s public and private IP addresses along with the Interactsh access token for further use"},{"role":"assistant","content":"provider \"aws\" {\r\n  region = \"eu-central-1\"\r\n}\r\n\r\nvariable \"public_ip\" {\r\n  type = string\r\n  default=\"\"\r\n}\r\n\r\nvariable \"domain\" {\r\n  type = string\r\n}\r\n\r\nvariable \"interactsh_access_token\" {\r\n  type = string\r\n}\r\n\r\nvariable \"interactsh_version\" {\r\n  type = string\r\n  default=\"latest\"\r\n}\r\n\r\nvariable \"godaddy_access_token\" {\r\n  type = string\r\n  default=\"\"\r\n}\r\n\r\nvariable \"godaddy_ns1\" {\r\n  type = string\r\n  default=\"\"\r\n}\r\n\r\nvariable \"godaddy_ns2\" {\r\n  type = string\r\n  default=\"\"\r\n}\r\n\r\nvariable \"aws_ssh_key_tag\" {\r\n  type = string\r\n  default = \"tag:InteractSh\"\r\n}\r\n\r\nlocals {\r\n  cidr_ipv4_allow_all = \"0.0.0.0/0\"\r\n  cidr_ipv6_allow_all = \"::/0\"\r\n}\r\n\r\nresource \"aws_default_vpc\" \"default\" {\r\n  tags = {\r\n    Name = \"Default VPC\"\r\n  }\r\n}\r\n\r\nresource \"aws_security_group\" \"basic_interactsh\" {\r\n  name        = \"basic_interactsh\"\r\n  description = \"Allow inbound traffic for Interactsh Server\"\r\n  vpc_id      = aws_default_vpc.default.id\r\n\r\n  ingress {\r\n    description      = \"SSH from Anywhere\"\r\n    from_port        = 22\r\n    to_port          = 22\r\n    protocol         = \"tcp\"\r\n    cidr_blocks      = [local.cidr_ipv4_allow_all]\r\n    ipv6_cidr_blocks = [local.cidr_ipv6_allow_all]\r\n  }\r\n\r\n  ingress {\r\n    description      = \"HTTPS from Anywhere\"\r\n    from_port        = 443\r\n    to_port          = 443\r\n    protocol         = \"tcp\"\r\n    cidr_blocks      = [local.cidr_ipv4_allow_all]\r\n    ipv6_cidr_blocks = [local.cidr_ipv6_allow_all]\r\n  }\r\n\r\n  ingress {\r\n    description      = \"HTTP from Anywhere\"\r\n    from_port        = 80\r\n    to_port          = 80\r\n    protocol         = \"tcp\"\r\n    cidr_blocks      = [local.cidr_ipv4_allow_all]\r\n    ipv6_cidr_blocks = [local.cidr_ipv6_allow_all]\r\n  }\r\n\r\n  ingress {\r\n    description      = \"DNS/tcp from Anywhere\"\r\n    from_port        = 53\r\n    to_port          = 53\r\n    protocol         = \"tcp\"\r\n    cidr_blocks      = [local.cidr_ipv4_allow_all]\r\n    ipv6_cidr_blocks = [local.cidr_ipv6_allow_all]\r\n  }\r\n\r\n  ingress {\r\n    description      = \"DNS/udp from Anywhere\"\r\n    from_port        = 53\r\n    to_port          = 53\r\n    protocol         = \"udp\"\r\n    cidr_blocks      = [local.cidr_ipv4_allow_all]\r\n    ipv6_cidr_blocks = [local.cidr_ipv6_allow_all]\r\n  }\r\n\r\n  ingress {\r\n    description      = \"LDAP from Anywhere\"\r\n    from_port        = 389\r\n    to_port          = 389\r\n    protocol         = \"tcp\"\r\n    cidr_blocks      = [local.cidr_ipv4_allow_all]\r\n    ipv6_cidr_blocks = [local.cidr_ipv6_allow_all]\r\n  }\r\n\r\n  egress {\r\n    from_port        = 0\r\n    to_port          = 0\r\n    protocol         = \"-1\"\r\n    cidr_blocks      = [local.cidr_ipv4_allow_all]\r\n    ipv6_cidr_blocks = [local.cidr_ipv6_allow_all]\r\n  }\r\n\r\n  tags = {\r\n    Name = \"basic_interactsh\"\r\n  }\r\n}\r\n\r\ndata \"aws_key_pair\" \"maintainer\" {\r\n  filter {\r\n    name   = var.aws_ssh_key_tag\r\n    values = [\"\"]\r\n  }\r\n}\r\n\r\nresource \"aws_instance\" \"interactsh\" {\r\n  ami           = \"ami-0a49b025fffbbdac6\" # Ubuntu\r\n  instance_type = \"t2.micro\"\r\n  vpc_security_group_ids = [aws_security_group.basic_interactsh.id]\r\n  key_name = data.aws_key_pair.maintainer.key_name\r\n  tags = {\r\n    Name = \"InteractshServerInstance\"\r\n    Type = \"InteractshServer\"\r\n  }\r\n\r\n  # Output on EC2: cat /var/log/cloud-init-output.log\r\n  user_data = <<-EOF\r\n    #!/bin/bash\r\n    sudo apt-get update\r\n\r\n    sudo apt-get install -y \\\r\n        ca-certificates \\\r\n        curl \\\r\n        gnupg \\\r\n        lsb-release\r\n\r\n    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg\r\n\r\n    echo \\\r\n    \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \\\r\n    $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null\r\n\r\n    sudo apt-get update\r\n\r\n    sudo apt-get install -y docker-ce docker-ce-cli containerd.io\r\n\r\n    docker --version\r\n\r\n    export PUBLIC_IPV4=${var.public_ip}\r\n    if [ -z \"$PUBLIC_IPV4\" ]; then      \r\n      export PUBLIC_IPV4=$(curl http://169.254.169.254/latest/meta-data/public-ipv4)\r\n      echo \"No public ip specified, using public ip: $PUBLIC_IPV4\"\r\n    fi\r\n    \r\n    export LOCAL_IPV4=$(curl http://169.254.169.254/latest/meta-data/local-ipv4)\r\n\r\n    if [ \"${var.godaddy_access_token}\" ]; then\r\n      echo \"godaddy access token found; Setting public ip to NS Servers: $PUBLIC_IPV4\"      \r\n      curl -X PUT -H 'Authorization: sso-key ${var.godaddy_access_token}' 'https://api.godaddy.com/v1/domains/${var.godaddy_ns1}' -d \"[{\\\"data\\\":\\\"$PUBLIC_IPV4\\\"}]\" -H \"Content-Type: application/json\"           \r\n      curl -X PUT -H 'Authorization: sso-key ${var.godaddy_access_token}' 'https://api.godaddy.com/v1/domains/${var.godaddy_ns2}' -d \"[{\\\"data\\\":\\\"$PUBLIC_IPV4\\\"}]\" -H \"Content-Type: application/json\"      \r\n    fi\r\n    \r\n    sudo docker run -d --name interactsh -p $LOCAL_IPV4:80:80 -p $LOCAL_IPV4:443:443 -p $LOCAL_IPV4:53:53 -p $LOCAL_IPV4:53:53/udp projectdiscovery/interactsh-server:${var.interactsh_version} -token '${var.interactsh_access_token}' -domain '${var.domain}' -ip $PUBLIC_IPV4 -root-tld  -origin-url 'http://localhost:3000' -eviction 30 -hostmaster 'admin@${var.domain}'\r\n  EOF\r\n\r\n}\r\n\r\noutput \"public_ip\" {\r\n  value = aws_instance.interactsh.*.public_ip\r\n}\r\n\r\noutput \"private_ip\" {\r\n  value = aws_instance.interactsh.*.private_ip\r\n}\r\n\r\noutput \"interactsh_access_token\" {\r\n  value = var.interactsh_access_token\r\n}"}]}
{"messages": [{"role": "user", "content": "Create a Google Cloud project using a random password as the project ID. Create a Google Kubernetes Engine (GKE) cluster named \"devopsteam-gke-cluster\" in the \"us-central1\" region and remove the default node pool. Create a preemptible node pool named \"devopsteam-pool\" with one node in the GKE cluster. Enable essential Google Cloud services including Compute, DNS, Storage, and Container APIs for the project. Output the cluster ID, self-link, endpoint, master version, and project ID after the resources are created."}, {"role": "assistant", "content": "\n#File: gke.tf\nresource \"google_container_cluster\" \"primary\" {\n  name     = \"devopsteam-gke-cluster\"\n  location = \"us-central1\"\n\n  # We can't create a cluster with no node pool defined, but we want to only use\n  # separately managed node pools. So we create the smallest possible default\n  # node pool and immediately delete it.\n  remove_default_node_pool = true\n  initial_node_count       = 1\n}\n\nresource \"google_container_node_pool\" \"primary_preemptible_nodes\" {\n  name       = \"devopsteam-pool\"\n  location   = \"us-central1\"\n  cluster    = google_container_cluster.primary.name\n  node_count = 1\n\n  node_config {\n    preemptible  = true\n    machine_type = \"e2-medium\"\n\n    oauth_scopes    = [\n      \"https://www.googleapis.com/auth/cloud-platform\"\n    ]\n  }\n}\n#File: output.tf\noutput ID {\n    value = google_container_cluster.primary.id\n}\noutput self_link {\n    value = google_container_cluster.primary.self_link\n}\n\n\noutput endpoint {\n    value = google_container_cluster.primary.endpoint\n}\n\noutput master_version {\n    value = google_container_cluster.primary.master_version\n}\noutput project_id {\n    value = google_container_cluster.primary.project\n}\n#File: project.tf\ndata \"google_billing_account\" \"acct\" {\n\tdisplay_name = \"dev\"\n\topen = true\n}\n\nresource \"random_password\" \"password\" {\n\tlength = 16\n\tnumber = false\n\tspecial = false\n\tlower = true\n\tupper = false\n}\n\nresource \"google_project\" \"gkeproject\" {\n\tname = \"gkeproject\"\n\tproject_id = random_password.password.result\n\tbilling_account = data.google_billing_account.acct.id\n}\n\nresource \"null_resource\" \"set-project\" {\n\tprovisioner \"local-exec\" {\n\tcommand = \"gcloud config set project ${google_project.gkeproject.project_id}\"\n\t}\n}\n\nresource \"null_resource\" \"enable-compute-services\" {\n    depends_on = [\n      google_project.gkeproject\n    ]\n\tprovisioner \"local-exec\" {\n\tcommand = <<-EOT\n        gcloud services enable compute.googleapis.com\n        EOT\n\t}\n}\n\nresource \"null_resource\" \"enable-dns-services\" {\n    depends_on = [\n      google_project.gkeproject\n    ]\n\tprovisioner \"local-exec\" {\n\tcommand = <<-EOT\n        gcloud services enable dns.googleapis.com\n        EOT\n\t}\n}\n\nresource \"null_resource\" \"enable-storage-services\" {\n    depends_on = [\n      google_project.gkeproject\n    ]\n\tprovisioner \"local-exec\" {\n\tcommand = <<-EOT\n        gcloud services enable storage-api.googleapis.com\n        EOT\n\t}\n}\n\nresource \"null_resource\" \"enable-container-services\" {\n    depends_on = [\n      google_project.gkeproject\n    ]\n\tprovisioner \"local-exec\" {\n\tcommand = <<-EOT\n        gcloud services enable container.googleapis.com\n        EOT\n\t}\n}\n\n#File: provider.tf\nprovider \"google\" {\n  project     = \"gke-cluster-333223\"\n  region      = \"us-central1\"\n}\n\n#enter your project id to \"project\"\n#File: variables.tf\nvariable \"gke_config\" {\n\ttype = map(any)\n\tdefault = {\n\t\tregion = \"us-central1\"\n\t\tzone = \"us-central1-c\"\n\t\tcluster_name = \"my-gke-cluster\"\n\t\tmachine_type = \"e2-medium\"\n\t\tnode_count = 1\n\t\tnode_pool_name = \"my-node-pool\"\n\t\tpreemptible = true\n\t}\n}"}]}
{"messages": [{"role":"user","content":"Create a VPC with a specified CIDR block, a public subnet, and an internet gateway to enable internet access. Define a route table for the public subnet, associating it with the internet gateway, and sets up a security group allowing inbound traffic on ports 22 (SSH), 80 (HTTP), and 8080 from anywhere. Finally, launche an EC2 instance in the public subnet with the defined security group and outputs its public IP address."},{"role":"assistant","content":"variable \"cidr_vpc\" {\r\n  description = \"CIDR block for the VPC\"\r\n  default     = \"10.1.0.0/16\"\r\n}\r\nvariable \"cidr_subnet\" {\r\n  description = \"CIDR block for the subnet\"\r\n  default     = \"10.1.0.0/24\"\r\n}\r\n\r\nvariable \"environment_tag\" {\r\n  description = \"Environment tag\"\r\n  default     = \"Learn\"\r\n}\r\n\r\nvariable \"region\"{\r\n  description = \"The region Terraform deploys your instance\"\r\n}\r\n\r\nprovider \"aws\" {\r\n  region = var.region\r\n}\r\n\r\nresource \"aws_vpc\" \"vpc\" {\r\n  cidr_block           = var.cidr_vpc\r\n  enable_dns_support   = true\r\n  enable_dns_hostnames = true\r\n}\r\n\r\nresource \"aws_internet_gateway\" \"igw\" {\r\n  vpc_id = aws_vpc.vpc.id\r\n}\r\n\r\nresource \"aws_subnet\" \"subnet_public\" {\r\n  vpc_id     = aws_vpc.vpc.id\r\n  cidr_block = var.cidr_subnet\r\n}\r\n\r\nresource \"aws_route_table\" \"rtb_public\" {\r\n  vpc_id = aws_vpc.vpc.id\r\n\r\n  route {\r\n    cidr_block = \"0.0.0.0/0\"\r\n    gateway_id = aws_internet_gateway.igw.id\r\n  }\r\n}\r\n\r\nresource \"aws_route_table_association\" \"rta_subnet_public\" {\r\n  subnet_id      = aws_subnet.subnet_public.id\r\n  route_table_id = aws_route_table.rtb_public.id\r\n}\r\n\r\nresource \"aws_security_group\" \"sg_22_80\" {\r\n  name   = \"sg_22\"\r\n  vpc_id = aws_vpc.vpc.id\r\n\r\n  # SSH access from the VPC\r\n  ingress {\r\n    from_port   = 22\r\n    to_port     = 22\r\n    protocol    = \"tcp\"\r\n    cidr_blocks = [\"0.0.0.0/0\"]\r\n  }\r\n\r\n  ingress {\r\n    from_port   = 8080\r\n    to_port     = 8080\r\n    protocol    = \"tcp\"\r\n    cidr_blocks = [\"0.0.0.0/0\"]\r\n  }\r\n\r\n  ingress {\r\n    from_port   = 80\r\n    to_port     = 80\r\n    protocol    = \"tcp\"\r\n    cidr_blocks = [\"0.0.0.0/0\"]\r\n  }\r\n\r\n  egress {\r\n    from_port   = 0\r\n    to_port     = 0\r\n    protocol    = \"-1\"\r\n    cidr_blocks = [\"0.0.0.0/0\"]\r\n  }\r\n}\r\n\r\nresource \"aws_instance\" \"web\" {\r\n  ami                         = \"ami-YOUR-AMI-ID\"\r\n  instance_type               = \"t2.micro\"\r\n  subnet_id                   = aws_subnet.subnet_public.id\r\n  vpc_security_group_ids      = [aws_security_group.sg_22_80.id]\r\n  associate_public_ip_address = true\r\n\r\n  tags = {\r\n    Name = \"Learn-Packer\"\r\n  }\r\n}\r\n\r\noutput \"public_ip\" {\r\n  value = aws_instance.web.public_ip\r\n}\r\n"}]}
{"messages": [{"role": "user", "content": "Create a public IP address on Google Cloud. Create a virtual network named \"user-network-1\" with no auto-created subnetworks. Create a subnet within the virtual network using the CIDR range \"10.0.1.0/24\". Set up an internal IP address \"10.0.1.10\" in the subnet and configure firewall rules to allow SSH, HTTP, HTTPS, and ICMP traffic. Launch a virtual machine using a Debian image, ensuring it's connected to the subnet and has a public IP for external access."}, {"role": "assistant", "content": "\n#File: main.tf\n#####################################################################\n# network(s), address(es), firewall(s)\n\n# public IP\nresource \"google_compute_address\" \"pub_addr_1\" {\n  name         = \"public-address-1\"\n  address_type = \"EXTERNAL\"\n  network_tier = \"STANDARD\"\n}\n\n# network\nresource \"google_compute_network\" \"net_1\" {\n  name = \"${var.prefix}-network-1\"\n  auto_create_subnetworks = false\n}\n\n# subnet in network\nresource \"google_compute_subnetwork\" \"net_1_subnet_1\" {\n  name          = \"${var.prefix}-network-1-subnet-1\"\n  ip_cidr_range = \"10.0.1.0/24\"\n  network       = google_compute_network.net_1.self_link\n}\n\n# private IP in subnet of network\nresource \"google_compute_address\" \"net_1_subnet_1_privateIP_1\" {\n  name         = \"${var.prefix}-network-1-subnet-1-privateip-1\"\n  subnetwork   = google_compute_subnetwork.net_1_subnet_1.self_link\n  address_type = \"INTERNAL\"\n  address      = \"10.0.1.10\"\n}\n\n# network firewall\n#     - if no target_tags are specified, the firewall rule applies\n#       to all instances on the specified network.\nresource \"google_compute_firewall\" \"net_1_firewall\" {\n  name    = \"${var.prefix}-network-1-firewall\"\n  network = google_compute_network.net_1.self_link\n\n  allow {\n    protocol = \"tcp\"\n    ports    = [\n      \"22\",  # ssh\n      \"80\",  # http\n      \"443\", # https\n    ]\n  }\n\n  allow {\n    protocol = \"icmp\"\n  }\n\n  source_ranges = var.accessible_from\n}\n\n#####################################################################\n# machine(s)\n\n# boot image\ndata \"google_compute_image\" \"debian_image\" {\n  family  = \"debian-10\"\n  project = \"debian-cloud\"\n}\n\n# virtual machine\nresource \"google_compute_instance\" \"virtual_machine\" {\n  name         = \"${var.prefix}-virtual-machine\"\n  zone         = var.gcp_zone\n  machine_type = \"n1-standard-4\"\n\n  can_ip_forward            = true\n  allow_stopping_for_update = true\n\n  boot_disk {\n    initialize_params {\n      image = data.google_compute_image.debian_image.self_link\n    }\n  }\n\n  network_interface {\n    subnetwork = google_compute_subnetwork.net_1_subnet_1.self_link\n    network_ip = google_compute_address.net_1_subnet_1_privateIP_1.self_link\n\n    access_config {\n      nat_ip       = google_compute_address.pub_addr_1.address\n      network_tier = \"STANDARD\"\n    }\n  }\n\n  metadata = {\n    ssh-keys = \"root:${file(var.ssh_public_key_path)}\"\n  }\n\n  metadata_startup_script = <<-EOT\n    sudo apt-get -y update;\n    sudo apt-get -y upgrade;\n    sudo apt-get -y dist-upgrade;\n    sudo apt-get -y install nginx;\n    sudo systemctl enable nginx;\n    sudo systemctl start nginx;\n  EOT\n}\n\n#File: outputs.tf\nlocals {\n  ip_address = google_compute_instance.virtual_machine.network_interface[0].access_config[0].nat_ip\n}\n\noutput \"informations\" {\n  value = {\n    http   = \"http://${local.ip_address}/\"\n    https  = \"https://${local.ip_address}/\"\n    ip     = local.ip_address,\n    prefix = var.prefix\n    ssh    = \"ssh -i ./ssh/key root@${local.ip_address}\"\n  }\n}\n\n#File: provider.tf\nprovider \"google\" {\n  zone        = var.gcp_zone\n  region      = var.gcp_region\n  project     = var.gcp_project_id\n}\n\n#File: variables.tf\nvariable \"prefix\" {\n  description = <<-EOT\n    Prefix for all resources created by this configuration. Use an\n    abbreviation of your name. For example, 'jdoe' for John Doe.\n  EOT\n\n  type        = string\n  default     = \"user\"\n}\n\nvariable \"gcp_zone\" {\n  description = \"GCP zone to launch servers in.\"\n\n  type        = string\n  default     = \"europe-west3-b\" # E2,N2,N1,M1,M2,C2\n}\n\nvariable \"gcp_region\" {\n  description = \"GCP region to launch servers in.\"\n\n  type        = string\n  default     = \"europe-west3\" # Frankfurt (Germany)\n}\n\nvariable \"gcp_project_id\" {\n  description = \"Identifier of GCP project to use for the deployment.\"\n\n  type        = string\n  default     = null\n}\n\nvariable \"accessible_from\" {\n  description = <<-EOT\n    A list of networks from which the entire deployment will be accessible,\n    specified in CIDR format.\n  EOT\n\n  type        = list(string)\n  default     = null\n}\n\nvariable \"ssh_public_key_path\" {\n  description = <<-EOT\n    Path to the SSH public key to be used for authentication. Ensure this\n    keypair is added to your local SSH agent so provisioners can connect.\n  EOT\n\n  type        = string\n  default     = \"./ssh/key.pub\"\n}\n\n#File: versions.tf\nterraform {\n  required_version = \">= 0.13\"\n\n  required_providers {\n    google = {\n      source  = \"hashicorp/google\"\n      version = \"~> 3.28\"\n    }\n  }\n}\n"}]}
{"messages": [{"role":"user","content":"Set up an AWS infrastructure to host a static website with a main domain and optional additional domains, using S3 buckets for content storage and logging, ACM for SSL certificates, and CloudFront distributions for CDN and HTTPS support. Include automatic DNS management with Route 53 for both the main site and an optional redirect domain (e.g., www to non-www). Additionally, it supports optional SPA behavior, custom Lambda@Edge functions, and detailed resource tagging with lifecycle management."},{"role":"assistant","content":"## Providers definition\r\nvariable \"website-domain-main\" {\r\n  description = \"Main website domain, e.g. cloudmaniac.net\"\r\n  type        = string\r\n}\r\n\r\nvariable \"website-additional-domains\" {\r\n  description = \"Main website additional domains (e.g., additional.cloudmaniac.net) that don't need redirection\"\r\n  type        = list(string)\r\n  default = []\r\n}\r\n\r\nvariable \"website-domain-redirect\" {\r\n  description = \"Secondary FQDN that will redirect to the main URL (e.g., www.cloudmaniac.net)\"\r\n  default     = null\r\n  type        = string\r\n}\r\n\r\nvariable \"domains-zone-root\" {\r\n  description = \"Root zone under which the domains should be registered\"\r\n  type        = string\r\n  default     = null\r\n}\r\n\r\nvariable \"tags\" {\r\n  description = \"Tags added to resources\"\r\n  default     = {}\r\n  type        = map(string)\r\n}\r\n\r\nvariable \"support-spa\" {\r\n  description = \"Support SPA (Single-Page Application) website with redirect to index.html\"\r\n  default = false\r\n  type = bool\r\n}\r\n\r\nvariable \"cloudfront_lambda_function_arn\" {\r\n  description = <<EOF\r\n                The optional ARN of AWS Lambda Function that can be associated with the CloudFront\r\n                distribution that can provide custom behaviour. For more information read:\r\n                https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/cloudfront_distribution#lambda_function_association\r\n                EOF\r\n  default     = null\r\n  type        = string\r\n}\r\n\r\nvariable \"cloudfront_lambda_function_event_type\" {\r\n  description = <<EOF\r\n                The type of event that triggers the above Lambda Function. For possible types, see:\r\n                https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/cloudfront_distribution#lambda_function_association\r\n                EOF\r\n  default     = \"origin-request\"\r\n  type        = string\r\n}\r\n\r\n\r\nprovider \"aws\" {\r\n  alias  = \"us-east-1\"\r\n  region = \"us-east-1\"\r\n}\r\n\r\n## Route 53\r\n# Provides details about the zone\r\ndata \"aws_route53_zone\" \"main\" {\r\n  name         = var.domains-zone-root\r\n  private_zone = false\r\n}\r\n\r\n## ACM (AWS Certificate Manager)\r\n# Creates the wildcard certificate *.<yourdomain.com>\r\nresource \"aws_acm_certificate\" \"wildcard_website\" {\r\n  provider                  = aws.us-east-1\r\n  domain_name               = var.domains-zone-root\r\n  subject_alternative_names = [\"*.${var.domains-zone-root}\"]\r\n  validation_method         = \"DNS\"\r\n\r\n  tags = merge(var.tags, {\r\n    ManagedBy = \"terraform\"\r\n    Changed   = formatdate(\"YYYY-MM-DD hh:mm ZZZ\", timestamp())\r\n  })\r\n\r\n  lifecycle {\r\n    ignore_changes = [tags[\"Changed\"]]\r\n  }\r\n\r\n}\r\n\r\n# Validates the ACM wildcard by creating a Route53 record (as `validation_method` is set to `DNS` in the aws_acm_certificate resource)\r\nresource \"aws_route53_record\" \"wildcard_validation\" {\r\n  for_each = {\r\n    for dvo in aws_acm_certificate.wildcard_website.domain_validation_options : dvo.domain_name => {\r\n      name   = dvo.resource_record_name\r\n      record = dvo.resource_record_value\r\n      type   = dvo.resource_record_type\r\n    }\r\n  }\r\n  name            = each.value.name\r\n  type            = each.value.type\r\n  zone_id         = data.aws_route53_zone.main.zone_id\r\n  records         = [each.value.record]\r\n  allow_overwrite = true\r\n  ttl             = \"60\"\r\n}\r\n\r\n# Triggers the ACM wildcard certificate validation event\r\nresource \"aws_acm_certificate_validation\" \"wildcard_cert\" {\r\n  provider                = aws.us-east-1\r\n  certificate_arn         = aws_acm_certificate.wildcard_website.arn\r\n  validation_record_fqdns = [for k, v in aws_route53_record.wildcard_validation : v.fqdn]\r\n}\r\n\r\n\r\n# Get the ARN of the issued certificate\r\ndata \"aws_acm_certificate\" \"wildcard_website\" {\r\n  provider = aws.us-east-1\r\n\r\n  depends_on = [\r\n    aws_acm_certificate.wildcard_website,\r\n    aws_route53_record.wildcard_validation,\r\n    aws_acm_certificate_validation.wildcard_cert,\r\n  ]\r\n\r\n  domain      = var.website-domain-main\r\n  statuses    = [\"ISSUED\"]\r\n  most_recent = true\r\n}\r\n\r\n## S3\r\n# Creates bucket to store logs\r\nresource \"aws_s3_bucket\" \"website_logs\" {\r\n  bucket = \"${var.website-domain-main}-logs\"\r\n  acl    = \"log-delivery-write\"\r\n\r\n  # Comment the following line if you are uncomfortable with Terraform destroying the bucket even if this one is not empty\r\n  force_destroy = true\r\n\r\n\r\n  tags = merge(var.tags, {\r\n    ManagedBy = \"terraform\"\r\n    Changed   = formatdate(\"YYYY-MM-DD hh:mm ZZZ\", timestamp())\r\n  })\r\n\r\n  lifecycle {\r\n    ignore_changes = [tags[\"Changed\"]]\r\n  }\r\n}\r\n\r\n# Creates bucket to store the static website\r\nresource \"aws_s3_bucket\" \"website_root\" {\r\n  bucket = \"${var.website-domain-main}-root\"\r\n  acl    = \"public-read\"\r\n\r\n  # Comment the following line if you are uncomfortable with Terraform destroying the bucket even if not empty\r\n  force_destroy = true\r\n\r\n  logging {\r\n    target_bucket = aws_s3_bucket.website_logs.bucket\r\n    target_prefix = \"${var.website-domain-main}/\"\r\n  }\r\n\r\n  website {\r\n    index_document = \"index.html\"\r\n    error_document = var.support-spa ? \"\" : \"404.html\"\r\n  }\r\n\r\n  tags = merge(var.tags, {\r\n    ManagedBy = \"terraform\"\r\n    Changed   = formatdate(\"YYYY-MM-DD hh:mm ZZZ\", timestamp())\r\n  })\r\n\r\n  lifecycle {\r\n    ignore_changes = [tags[\"Changed\"]]\r\n  }\r\n}\r\n\r\n# Creates bucket for the website handling the redirection (if required), e.g. from https://www.example.com to https://example.com\r\nresource \"aws_s3_bucket\" \"website_redirect\" {\r\n  bucket        = \"${var.website-domain-main}-redirect\"\r\n  acl           = \"public-read\"\r\n  force_destroy = true\r\n\r\n  logging {\r\n    target_bucket = aws_s3_bucket.website_logs.bucket\r\n    target_prefix = \"${var.website-domain-main}-redirect/\"\r\n  }\r\n\r\n  website {\r\n    redirect_all_requests_to = \"https://${var.website-domain-main}\"\r\n  }\r\n\r\n  tags = merge(var.tags, {\r\n    ManagedBy = \"terraform\"\r\n    Changed   = formatdate(\"YYYY-MM-DD hh:mm ZZZ\", timestamp())\r\n  })\r\n\r\n  lifecycle {\r\n    ignore_changes = [tags[\"Changed\"]]\r\n  }\r\n}\r\n\r\n## CloudFront\r\n# Creates the CloudFront distribution to serve the static website\r\nresource \"aws_cloudfront_distribution\" \"website_cdn_root\" {\r\n  enabled     = true\r\n  price_class = \"PriceClass_All\"\r\n  # Select the correct PriceClass depending on who the CDN is supposed to serve (https://docs.aws.amazon.com/AmazonCloudFront/ladev/DeveloperGuide/PriceClass.html)\r\n  aliases = concat([var.website-domain-main], var.website-additional-domains)\r\n\r\n  origin {\r\n    origin_id   = \"origin-bucket-${aws_s3_bucket.website_root.id}\"\r\n    domain_name = aws_s3_bucket.website_root.website_endpoint\r\n\r\n    custom_origin_config {\r\n      origin_protocol_policy = \"http-only\"\r\n      # The protocol policy that you want CloudFront to use when fetching objects from the origin server (a.k.a S3 in our situation). HTTP Only is the default setting when the origin is an Amazon S3 static website hosting endpoint, because Amazon S3 doesn’t support HTTPS connections for static website hosting endpoints.\r\n      http_port            = 80\r\n      https_port           = 443\r\n      origin_ssl_protocols = [\"TLSv1.2\", \"TLSv1.1\", \"TLSv1\"]\r\n    }\r\n  }\r\n\r\n  default_root_object = \"index.html\"\r\n\r\n  logging_config {\r\n    bucket = aws_s3_bucket.website_logs.bucket_domain_name\r\n    prefix = \"${var.website-domain-main}/\"\r\n  }\r\n\r\n  default_cache_behavior {\r\n    allowed_methods  = [\"GET\", \"HEAD\", \"OPTIONS\"]\r\n    cached_methods   = [\"GET\", \"HEAD\", \"OPTIONS\"]\r\n    target_origin_id = \"origin-bucket-${aws_s3_bucket.website_root.id}\"\r\n    min_ttl          = \"0\"\r\n    default_ttl      = \"300\"\r\n    max_ttl          = \"1200\"\r\n\r\n    viewer_protocol_policy = \"redirect-to-https\" # Redirects any HTTP request to HTTPS\r\n    compress               = true\r\n\r\n    forwarded_values {\r\n      query_string = false\r\n      cookies {\r\n        forward = \"none\"\r\n      }\r\n    }\r\n\r\n    # An optional AWS Lambda Function for customising CloudFront behaviour.\r\n    dynamic \"lambda_function_association\" {\r\n      for_each = var.cloudfront_lambda_function_arn == null ? [] : [1]\r\n      content {\r\n        event_type = var.cloudfront_lambda_function_event_type\r\n        lambda_arn = var.cloudfront_lambda_function_arn\r\n      }\r\n    }\r\n  }\r\n\r\n  restrictions {\r\n    geo_restriction {\r\n      restriction_type = \"none\"\r\n    }\r\n  }\r\n\r\n  viewer_certificate {\r\n    acm_certificate_arn = data.aws_acm_certificate.wildcard_website.arn\r\n    ssl_support_method  = \"sni-only\"\r\n  }\r\n\r\n  custom_error_response {\r\n    error_caching_min_ttl = 300\r\n    error_code            = 404\r\n    response_page_path    = var.support-spa ? \"/index.html\" : \"/404.html\"\r\n    response_code         = var.support-spa ? 200 : 404\r\n  }\r\n\r\n  tags = merge(var.tags, {\r\n    ManagedBy = \"terraform\"\r\n    Changed   = formatdate(\"YYYY-MM-DD hh:mm ZZZ\", timestamp())\r\n  })\r\n\r\n  lifecycle {\r\n    ignore_changes = [\r\n      tags[\"Changed\"],\r\n      viewer_certificate,\r\n    ]\r\n  }\r\n}\r\n\r\n# Creates the DNS record to point on the main CloudFront distribution ID\r\nresource \"aws_route53_record\" \"website_cdn_root_record\" {\r\n  zone_id = data.aws_route53_zone.main.zone_id\r\n  name    = var.website-domain-main\r\n  type    = \"A\"\r\n\r\n  alias {\r\n    name                   = aws_cloudfront_distribution.website_cdn_root.domain_name\r\n    zone_id                = aws_cloudfront_distribution.website_cdn_root.hosted_zone_id\r\n    evaluate_target_health = false\r\n  }\r\n}\r\n\r\n\r\n# Creates policy to allow public access to the S3 bucket\r\nresource \"aws_s3_bucket_policy\" \"update_website_root_bucket_policy\" {\r\n  bucket = aws_s3_bucket.website_root.id\r\n\r\n  policy = <<POLICY\r\n{\r\n  \"Version\": \"2012-10-17\",\r\n  \"Id\": \"PolicyForWebsiteEndpointsPublicContent\",\r\n  \"Statement\": [\r\n    {\r\n      \"Sid\": \"PublicRead\",\r\n      \"Effect\": \"Allow\",\r\n      \"Principal\": \"*\",\r\n      \"Action\": [\r\n        \"s3:GetObject\"\r\n      ],\r\n      \"Resource\": [\r\n        \"${aws_s3_bucket.website_root.arn}/*\",\r\n        \"${aws_s3_bucket.website_root.arn}\"\r\n      ]\r\n    }\r\n  ]\r\n}\r\nPOLICY\r\n}\r\n\r\n# Creates the CloudFront distribution to serve the redirection website (if redirection is required)\r\nresource \"aws_cloudfront_distribution\" \"website_cdn_redirect\" {\r\n  enabled     = true\r\n  price_class = \"PriceClass_All\"\r\n  # Select the correct PriceClass depending on who the CDN is supposed to serve (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/PriceClass.html)\r\n  aliases = [var.website-domain-redirect]\r\n\r\n  origin {\r\n    origin_id   = \"origin-bucket-${aws_s3_bucket.website_redirect.id}\"\r\n    domain_name = aws_s3_bucket.website_redirect.website_endpoint\r\n\r\n    custom_origin_config {\r\n      http_port              = 80\r\n      https_port             = 443\r\n      origin_protocol_policy = \"http-only\"\r\n      origin_ssl_protocols   = [\"TLSv1\", \"TLSv1.1\", \"TLSv1.2\"]\r\n    }\r\n  }\r\n\r\n  logging_config {\r\n    bucket = aws_s3_bucket.website_logs.bucket_domain_name\r\n    prefix = \"${var.website-domain-main}-redirect/\"\r\n  }\r\n\r\n  default_cache_behavior {\r\n    allowed_methods  = [\"GET\", \"HEAD\", \"OPTIONS\", \"PATCH\", \"POST\", \"PUT\", \"DELETE\"]\r\n    cached_methods   = [\"GET\", \"HEAD\"]\r\n    target_origin_id = \"origin-bucket-${aws_s3_bucket.website_redirect.id}\"\r\n    min_ttl          = \"0\"\r\n    default_ttl      = \"300\"\r\n    max_ttl          = \"1200\"\r\n\r\n    viewer_protocol_policy = \"redirect-to-https\" # Redirects any HTTP request to HTTPS\r\n    compress               = true\r\n\r\n    forwarded_values {\r\n      query_string = false\r\n      cookies {\r\n        forward = \"none\"\r\n      }\r\n    }\r\n  }\r\n\r\n  restrictions {\r\n    geo_restriction {\r\n      restriction_type = \"none\"\r\n    }\r\n  }\r\n\r\n  viewer_certificate {\r\n    acm_certificate_arn = data.aws_acm_certificate.wildcard_website.arn\r\n    ssl_support_method  = \"sni-only\"\r\n  }\r\n\r\n  tags = merge(var.tags, {\r\n    ManagedBy = \"terraform\"\r\n    Changed   = formatdate(\"YYYY-MM-DD hh:mm ZZZ\", timestamp())\r\n  })\r\n\r\n  lifecycle {\r\n    ignore_changes = [\r\n      tags[\"Changed\"],\r\n      viewer_certificate,\r\n    ]\r\n  }\r\n}\r\n\r\n# Creates the DNS record to point on the CloudFront distribution ID that handles the redirection website\r\nresource \"aws_route53_record\" \"website_cdn_redirect_record\" {\r\n  zone_id = data.aws_route53_zone.main.zone_id\r\n  name    = var.website-domain-redirect\r\n  type    = \"A\"\r\n\r\n  alias {\r\n    name                   = aws_cloudfront_distribution.website_cdn_redirect.domain_name\r\n    zone_id                = aws_cloudfront_distribution.website_cdn_redirect.hosted_zone_id\r\n    evaluate_target_health = false\r\n  }\r\n}\r\n\r\n"}]}
{"messages": [{"role": "user", "content": "Create a Google Cloud provider configuration. Define a Google Compute Engine instance named according to the given variable, with a specified machine type and boot disk settings. Implement a firewall rule to allow TCP traffic on port 7200 for the GraphDB application. Ensure project-level SSH key usage is blocked and enable secure boot with VTPM. Output the external IP address and access URL for the GraphDB instance."}, {"role": "assistant", "content": "\n#File: main.tf\nprovider \"google\" {\n  project = var.project_id\n}\n\nresource \"google_compute_instance\" \"graphdb\" {\n  name         = var.goog_cm_deployment_name\n  machine_type = var.machine_type\n  zone         = var.zone\n\n  boot_disk {\n    initialize_params {\n      # The boot disk must be set to the variable declared in Producer Portal\n      image = var.source_image\n      size  = var.boot_disk_size\n      type  = var.boot_disk_type\n    }\n  }\n\n  network_interface {\n    network = var.network_interface\n\n    access_config {\n      // Ephemeral public IP\n    }\n  }\n\n  # Block the usage of project-level SSH keys\n  metadata = {\n    block-project-ssh-keys = true\n  }\n\n  # Enable VTPM module\n  shielded_instance_config {\n    enable_secure_boot          = true\n    enable_vtpm                 = true\n    enable_integrity_monitoring = true\n  }\n\n  tags = [var.goog_cm_deployment_name]\n}\n\nresource \"google_compute_firewall\" \"rules\" {\n  name        = \"${var.goog_cm_deployment_name}-graphdb-allow-ingress\"\n  network     = var.network_interface\n  description = \"Allow inbound access to GraphDB\"\n\n  allow {\n    protocol = \"tcp\"\n    ports    = [\"7200\"]\n  }\n\n  source_ranges = var.allowed_ingress_cidrs\n  target_tags   = [var.goog_cm_deployment_name]\n}\n\n#File: outputs.tf\nlocals {\n  network_interface = google_compute_instance.graphdb.network_interface[0]\n  instance_nat_ip   = length(local.network_interface.access_config) > 0 ? local.network_interface.access_config[0].nat_ip : null\n}\n\noutput \"instance_ip\" {\n  description = \"External IP address for the GraphDB VM instance\"\n  value       = local.instance_nat_ip\n}\n\noutput \"graphdb_address\" {\n  description = \"External URL address for accessing GraphDB\"\n  value       = \"http://${local.instance_nat_ip}:7200\"\n}\n\n#File: providers.tf\nterraform {\n  required_providers {\n    google = {\n      source  = \"hashicorp/google\"\n      version = \"6.0.1\"\n    }\n  }\n}\n\n#File: variables.tf\n# The variable \"image\" is declared in Producer Portal\n\nvariable \"source_image\" {\n  description = \"Defines the VM image passed from the GCP Marketplace\"\n  type        = string\n  # Set the default value to your image. Marketplace will overwrite this value\n  # to a Marketplace owned image on publishing the product\n  default = \"projects/graphdb-public/global/images/ontotext-graphdb-11-0-0-202504080820\"\n}\n\nvariable \"goog_cm_deployment_name\" {\n  description = \"Deployment name\"\n  type        = string\n  default     = \"graphdb\"\n}\n\nvariable \"project_id\" {\n  description = \"Project in which the VM will be created\"\n  type        = string\n}\n\nvariable \"zone\" {\n  description = \"The zone where the VM will be created\"\n  type        = string\n  default     = \"us-central1-a\"\n}\n\nvariable \"machine_type\" {\n  description = \"Type of the VM that will be created\"\n  type        = string\n  default     = \"n2-highmem-8\"\n}\n\nvariable \"boot_disk_size\" {\n  description = \"Boot disk size in GBs\"\n  type        = number\n  default     = 500\n}\n\nvariable \"boot_disk_type\" {\n  description = \"Type of the boot disk\"\n  type        = string\n  default     = \"pd-ssd\"\n}\n\nvariable \"network_interface\" {\n  description = \"The network interface to attach the VM to\"\n  type        = string\n  default     = \"default\"\n}\n\nvariable \"allowed_ingress_cidrs\" {\n  description = \"CIDR blocks that are allowed to access the GraphDB port\"\n  type        = list(string)\n  default     = [\"0.0.0.0/0\"]\n}\n"}]}
{"messages": [{"role": "user", "content": "Create a Terraform configuration for an Azure environment that defines a resource group, Log Analytics workspace, and an Azure Kubernetes Service (AKS) cluster. Set the location of resources using the variable `location` and specify Kubernetes version and VM size with their respective variables. Implement auto-scaling for the node pool with minimum and maximum node counts defined by the variables `aks_min_count` and `aks_max_count`. Enable detailed logging for multiple services in the AKS cluster and configure the Azure Monitor Diagnostic settings to retain logs for seven days. Finally, output the command to retrieve the AKS credentials."}, {"role": "assistant", "content": "\n#File: main.tf\nterraform {\n  required_providers {\n    azurerm = {\n      source  = \"hashicorp/azurerm\"\n      version = \"3.8.0\"\n    }\n  }\n  backend \"local\" {\n    path = \"./.workspace/terraform.tfstate\"\n  }\n}\n\nprovider \"azurerm\" {\n  features {\n    resource_group {\n      prevent_deletion_if_contains_resources = false\n    }\n  }\n}\n\n### Variables ###\n\nvariable \"location\" {\n  description = \"Set .auto.tfvars to a location near you.\"\n  type        = string\n  default     = \"brazilsouth\"\n  sensitive   = false\n}\n\nvariable \"aks_version\" {\n  description = \"Kubernetes version\"\n  type        = string\n  default     = \"1.23.5\"\n  sensitive   = false\n}\n\nvariable \"aks_auto_upgrade_channel\" {\n  type      = string\n  default   = \"rapid\"\n  sensitive = false\n}\n\nvariable \"aks_vm_size\" {\n  description = \"Kubernetes VM size\"\n  type        = string\n  default     = \"Standard_B2s\"\n  sensitive   = false\n}\n\nvariable \"aks_min_count\" {\n  description = \"Kubernetes Min Node Count\"\n  type        = number\n  default     = 1\n  sensitive   = false\n}\n\nvariable \"aks_max_count\" {\n  description = \"Kubernetes Max Node Count\"\n  type        = number\n  default     = 3\n  sensitive   = false\n}\n\n\nlocals {\n  workload_affix = \"icecream\"\n  aks_namespace  = \"default\"\n}\n\n### Client Config Data Source ###\n\ndata \"azurerm_client_config\" \"current\" {\n}\n\n### Resources ###\n\n# Group\n\nresource \"azurerm_resource_group\" \"default\" {\n  name     = \"rg-${local.workload_affix}\"\n  location = var.location\n}\n\n\n# Log Analytics Workspace\n\nresource \"azurerm_log_analytics_workspace\" \"default\" {\n  name                = \"log-${local.workload_affix}\"\n  location            = azurerm_resource_group.default.location\n  resource_group_name = azurerm_resource_group.default.name\n  sku                 = \"PerGB2018\"\n}\n\n\n# AKS\n\nresource \"azurerm_kubernetes_cluster\" \"default\" {\n  name                      = \"aks-${local.workload_affix}\"\n  location                  = azurerm_resource_group.default.location\n  resource_group_name       = azurerm_resource_group.default.name\n  dns_prefix                = \"cluster\"\n  node_resource_group       = \"k8s-aks-${local.workload_affix}\"\n  automatic_channel_upgrade = var.aks_auto_upgrade_channel\n  kubernetes_version        = var.aks_version\n\n  oms_agent {\n    log_analytics_workspace_id = azurerm_log_analytics_workspace.default.id\n  }\n\n  default_node_pool {\n    name                = local.aks_namespace\n    vm_size             = var.aks_vm_size\n    enable_auto_scaling = true\n    min_count           = var.aks_min_count\n    max_count           = var.aks_max_count\n  }\n\n  identity {\n    type = \"SystemAssigned\"\n  }\n\n  lifecycle {\n    ignore_changes = [\n      default_node_pool[0].node_count\n    ]\n  }\n}\n\n# Update Container insights to enable metrics\n# https://docs.microsoft.com/en-us/azure/azure-monitor/containers/container-insights-update-metrics\nresource \"azurerm_role_assignment\" \"example\" {\n  scope                = azurerm_kubernetes_cluster.default.id\n  role_definition_name = \"Monitoring Metrics Publisher\"\n  principal_id         = azurerm_kubernetes_cluster.default.oms_agent[0].oms_agent_identity[0].object_id\n}\n\n\n# Container Insights\n\nresource \"azurerm_log_analytics_solution\" \"default\" {\n  solution_name         = \"ContainerInsights\"\n  location              = azurerm_resource_group.default.location\n  resource_group_name   = azurerm_resource_group.default.name\n  workspace_resource_id = azurerm_log_analytics_workspace.default.id\n  workspace_name        = azurerm_log_analytics_workspace.default.name\n\n  plan {\n    publisher = \"Microsoft\"\n    product   = \"OMSGallery/ContainerInsights\"\n  }\n}\n\n\n# Azure Monitor Diagnostic Settings\n\nresource \"azurerm_monitor_diagnostic_setting\" \"aks\" {\n  name                       = \"Kubernetes Logs\"\n  target_resource_id         = azurerm_kubernetes_cluster.default.id\n  log_analytics_workspace_id = azurerm_log_analytics_workspace.default.id\n\n  log {\n    category = \"kube-apiserver\"\n    enabled  = true\n\n    retention_policy {\n      days    = 7\n      enabled = true\n    }\n  }\n\n  log {\n    category = \"kube-audit\"\n    enabled  = true\n\n    retention_policy {\n      days    = 7\n      enabled = true\n    }\n  }\n\n  log {\n    category = \"kube-audit-admin\"\n    enabled  = true\n\n    retention_policy {\n      days    = 7\n      enabled = true\n    }\n  }\n\n  log {\n    category = \"kube-controller-manager\"\n    enabled  = true\n\n    retention_policy {\n      days    = 7\n      enabled = true\n    }\n  }\n\n  log {\n    category = \"kube-scheduler\"\n    enabled  = true\n\n    retention_policy {\n      days    = 7\n      enabled = true\n    }\n  }\n\n  log {\n    category = \"cluster-autoscaler\"\n    enabled  = true\n\n    retention_policy {\n      days    = 7\n      enabled = true\n    }\n  }\n\n  log {\n    category = \"cloud-controller-manager\"\n    enabled  = true\n\n    retention_policy {\n      days    = 7\n      enabled = true\n    }\n  }\n\n  log {\n    category = \"guard\"\n    enabled  = true\n\n    retention_policy {\n      days    = 7\n      enabled = true\n    }\n  }\n\n  log {\n    category = \"csi-azuredisk-controller\"\n    enabled  = true\n\n    retention_policy {\n      days    = 7\n      enabled = true\n    }\n  }\n\n  log {\n    category = \"csi-azurefile-controller\"\n    enabled  = true\n\n    retention_policy {\n      days    = 7\n      enabled = true\n    }\n  }\n\n  log {\n    category = \"csi-snapshot-controller\"\n    enabled  = true\n\n    retention_policy {\n      days    = 7\n      enabled = true\n    }\n  }\n\n  metric {\n    category = \"AllMetrics\"\n    enabled  = true\n\n    retention_policy {\n      days    = 7\n      enabled = true\n    }\n  }\n}\n\n\n### Output ###\n\noutput \"az_get_credentials\" {\n  value     = \"az aks get-credentials -n ${azurerm_kubernetes_cluster.default.name} -g ${azurerm_resource_group.default.name}\"\n  sensitive = false\n}\n"}]}
{"messages": [{"role": "user", "content": "Create a resource group named \"rg-azure-key-vault-secret-tfvars\" in Southeast Asia. Set up a Linux-based service plan called \"asp-azure-key-vault-secret-tfvars\" within the resource group. Deploy a Linux web app named \"app-azure-key-vault-secret-tfvars\" using the created service plan. Configure the app with settings, including the application name and an API key sourced from an Azure Key Vault secret. Ensure you set up the required AzureRM provider with the specified subscription ID."}, {"role": "assistant", "content": "\n#File: main.tf\nresource \"azurerm_resource_group\" \"example\" {\n  name     = \"rg-azure-key-vault-secret-tfvars\"\n  location = \"Southeast Asia\"\n}\n\nresource \"azurerm_service_plan\" \"example\" {\n  name                = \"asp-azure-key-vault-secret-tfvars\"\n  location            = azurerm_resource_group.example.location\n  resource_group_name = azurerm_resource_group.example.name\n  os_type             = \"Linux\"\n  sku_name            = \"F1\"\n}\n\nresource \"azurerm_linux_web_app\" \"example\" {\n  name                = \"app-azure-key-vault-secret-tfvars\"\n  location            = azurerm_resource_group.example.location\n  resource_group_name = azurerm_resource_group.example.name\n  service_plan_id     = azurerm_service_plan.example.id\n\n  site_config {\n    always_on = false\n  }\n\n  app_settings = {\n    APP_NAME    = \"Azure Key Vault Secret tfvars\"\n    APP_API_KEY = data.azurerm_key_vault_secret.example.value\n  }\n}\n\ndata \"azurerm_key_vault_secret\" \"example\" {\n  name         = \"app-api-key\"\n  key_vault_id = \"/subscriptions/28bd5fa2-47f8-46e7-9fc9-690213f03d8c/resourceGroups/rg-azure-key-vault-secret-tfvars/providers/Microsoft.KeyVault/vaults/kv-secret-tfvars\"\n}\n\n#File: provider.tf\nterraform {\n  required_providers {\n    azurerm = {\n      source  = \"hashicorp/azurerm\"\n      version = \"~> 4.16.0\"\n    }\n  }\n}\n\nprovider \"azurerm\" {\n  subscription_id = \"28bd5fa2-47f8-46e7-9fc9-690213f03d8c\"\n  features {}\n}\n"}]}
{"messages": [{"role": "user", "content": "Create an Azure Kubernetes Service (AKS) cluster using Terraform with a specified configuration. Set up the AKS with user-assigned identities for authentication and role assignments for proper access control. Integrate monitoring by configuring diagnostic settings and log analytics workspaces. Deploy the Dapr and Flux extensions for enhanced application management. Configure networking with subnets and security groups to control traffic and ensure proper resource allocation."}, {"role": "assistant", "content": "\n#File: cluster-mgmt-dapr.tf\nresource \"azurerm_kubernetes_cluster_extension\" \"dapr\" {\n  depends_on = [\n    azurerm_kubernetes_cluster_extension.flux,\n  ]\n  name              = \"dapr\"\n  cluster_id        = azurerm_kubernetes_cluster.crossplane.id\n  extension_type    = \"microsoft.dapr\"\n  release_namespace = \"dapr-system\"\n}\n\n#File: cluster-mgmt-diag.tf\nresource \"azurerm_monitor_diagnostic_setting\" \"aks\" {\n  name                       = \"${local.crossplane_name}-diag\"\n  target_resource_id         = azurerm_kubernetes_cluster.crossplane.id\n  log_analytics_workspace_id = azurerm_log_analytics_workspace.this.id\n\n  enabled_log  {\n    category = \"kube-apiserver\"\n  }\n\n  enabled_log  {\n    category = \"kube-audit\"\n  }\n\n  enabled_log  {\n    category = \"kube-audit-admin\"\n  }\n\n  enabled_log  {\n    category = \"kube-controller-manager\"\n  }\n\n  enabled_log  {\n    category = \"kube-scheduler\"\n  }\n\n  enabled_log  {\n    category = \"cluster-autoscaler\"\n  }\n\n  enabled_log  {\n    category = \"guard\"\n  }\n\n  metric {\n    category = \"AllMetrics\"\n  }\n}\n\n#File: cluster-mgmt-flux.tf\nresource \"azurerm_kubernetes_cluster_extension\" \"flux\" {\n  depends_on = [\n        azurerm_kubernetes_cluster.crossplane\n  ]\n  name           = \"flux\"\n  cluster_id     = azurerm_kubernetes_cluster.crossplane.id\n  extension_type = \"microsoft.flux\"\n}\n\nresource \"azurerm_kubernetes_flux_configuration\" \"flux_config\" {\n  depends_on = [\n    azurerm_kubernetes_cluster_extension.flux\n  ]\n\n  name       = \"aks-flux-extension\"\n  cluster_id = azurerm_kubernetes_cluster.crossplane.id\n  namespace  = \"flux-system\"\n  scope      = \"cluster\"\n\n  git_repository {\n    url                      = local.flux_repository\n    reference_type           = \"branch\"\n    reference_value          = \"main\"\n    timeout_in_seconds       = 600\n    sync_interval_in_seconds = 30\n  }\n\n  kustomizations {\n    name                       = \"addons\"\n    path                       = local.mgmt_cluster_cfg_path\n    timeout_in_seconds         = 600\n    sync_interval_in_seconds   = 120\n    retry_interval_in_seconds  = 300\n    garbage_collection_enabled = true\n    depends_on                 = []\n  }\n\n  kustomizations {\n    name                       = \"crossplane-cfg\"\n    path                       = local.crossplane_cfg_path\n    timeout_in_seconds         = 600\n    sync_interval_in_seconds   = 120\n    retry_interval_in_seconds  = 300\n    garbage_collection_enabled = true\n    depends_on = [\n      \"addons\"\n    ]\n  }\n\n  kustomizations {\n    name                       = \"crossplane-compositions\"\n    path                       = local.crossplane_compositions_path\n    timeout_in_seconds         = 600\n    sync_interval_in_seconds   = 120\n    retry_interval_in_seconds  = 300\n    garbage_collection_enabled = true\n    depends_on = [\n      \"crossplane-cfg\"\n    ]\n  }\n  \n}\n\n#File: cluster-mgmt.tf\ndata \"azurerm_kubernetes_service_versions\" \"current\" {\n  location = azurerm_resource_group.this.location\n}\n\nlocals {\n  kubernetes_version = data.azurerm_kubernetes_service_versions.current.versions[length(data.azurerm_kubernetes_service_versions.current.versions) - 1]\n  allowed_ip_range   = [\"${chomp(data.http.myip.response_body)}/32\"]\n  zones              = var.region == \"northcentralus\" ? null : [\"1\", \"2\", \"3\"]\n}\n\nresource \"tls_private_key\" \"rsa\" {\n  algorithm = \"RSA\"\n  rsa_bits  = 4096\n}\n\nresource \"azurerm_kubernetes_cluster\" \"crossplane\" {\n  lifecycle {\n    ignore_changes = [\n      default_node_pool.0.node_count,\n    ]\n  }\n\n  name                              = local.crossplane_name\n  resource_group_name               = azurerm_resource_group.this.name\n  location                          = azurerm_resource_group.this.location\n  node_resource_group               = \"${local.resource_name}_crossplane_nodes_rg\"\n  dns_prefix                        = local.crossplane_name\n  sku_tier                          = \"Standard\"\n  automatic_channel_upgrade         = \"patch\"\n  node_os_channel_upgrade           = \"NodeImage\"\n  oidc_issuer_enabled               = true\n  workload_identity_enabled         = true\n  open_service_mesh_enabled         = false\n  azure_policy_enabled              = true\n  local_account_disabled            = true\n  role_based_access_control_enabled = true\n  kubernetes_version                = local.kubernetes_version\n  image_cleaner_enabled             = true\n  image_cleaner_interval_hours      = 48\n\n  api_server_access_profile {\n    vnet_integration_enabled = true\n    subnet_id                = azurerm_subnet.api.id\n    authorized_ip_ranges     = local.allowed_ip_range\n  }\n\n  linux_profile {\n    admin_username = \"manager\"\n    ssh_key {\n      key_data = tls_private_key.rsa.public_key_openssh\n    }\n  }\n\n  azure_active_directory_role_based_access_control {\n    managed            = true\n    azure_rbac_enabled = true\n    tenant_id          = data.azurerm_client_config.current.tenant_id\n  }\n\n  identity {\n    type         = \"UserAssigned\"\n    identity_ids = [azurerm_user_assigned_identity.crossplane_identity.id]\n  }\n\n  kubelet_identity {\n    client_id                 = azurerm_user_assigned_identity.crossplane_kubelet_identity.client_id\n    object_id                 = azurerm_user_assigned_identity.crossplane_kubelet_identity.principal_id\n    user_assigned_identity_id = azurerm_user_assigned_identity.crossplane_kubelet_identity.id\n  }\n\n  default_node_pool {\n    name                = \"system\"\n    node_count          = 1\n    vm_size             = var.vm_sku\n    zones               = local.zones\n    os_disk_size_gb     = 100\n    vnet_subnet_id      = azurerm_subnet.crossplane.id\n    os_sku              = \"Mariner\"\n    os_disk_type        = \"Ephemeral\"\n    type                = \"VirtualMachineScaleSets\"\n    enable_auto_scaling = true\n    min_count           = 1\n    max_count           = 9\n    max_pods            = 90\n    upgrade_settings {\n      max_surge = \"33%\"\n    }\n  }\n\n  network_profile {\n    dns_service_ip      = \"100.${random_integer.crossplane_services_cidr.id}.0.10\"\n    service_cidr        = \"100.${random_integer.crossplane_services_cidr.id}.0.0/16\"\n    pod_cidr            = \"100.${random_integer.crossplane_pod_cidr.id}.0.0/16\"\n    network_plugin      = \"azure\"\n    network_plugin_mode = \"overlay\"\n    load_balancer_sku   = \"standard\"\n  }\n\n  maintenance_window_auto_upgrade {\n    frequency = \"Weekly\"\n    interval  = 1\n    duration  = 4\n    day_of_week = \"Friday\"\n    utc_offset = \"-06:00\"\n    start_time = \"20:00\"\n  }\n\n  maintenance_window_node_os {\n    frequency = \"Weekly\"\n    interval  = 1\n    duration  = 4\n    day_of_week = \"Saturday\"\n    utc_offset = \"-06:00\"\n    start_time = \"20:00\"\n  }\n\n  auto_scaler_profile {\n    max_unready_nodes = \"1\"\n  }\n\n  workload_autoscaler_profile {\n    keda_enabled = true\n  }\n\n  storage_profile {\n    blob_driver_enabled = true\n    disk_driver_enabled = true\n    file_driver_enabled = true\n  }\n\n  oms_agent {\n    log_analytics_workspace_id      = azurerm_log_analytics_workspace.this.id\n  }\n\n  microsoft_defender {\n    log_analytics_workspace_id      = azurerm_log_analytics_workspace.this.id\n  }\n\n  monitor_metrics {\n  }\n  \n  key_vault_secrets_provider {\n    secret_rotation_enabled = true\n  }\n\n}\n\ndata \"azurerm_public_ip\" \"crossplane\" {\n  name                = reverse(split(\"/\", tolist(azurerm_kubernetes_cluster.crossplane.network_profile.0.load_balancer_profile.0.effective_outbound_ips)[0]))[0]\n  resource_group_name = azurerm_kubernetes_cluster.crossplane.node_resource_group\n}\n\n#File: identities.tf\nresource \"azurerm_user_assigned_identity\" \"crossplane_cluster_identity\" {\n  name                = \"${local.crossplane_name}-cluster-identity\"\n  resource_group_name = azurerm_resource_group.this.name\n  location            = azurerm_resource_group.this.location\n}\n\nresource \"azurerm_user_assigned_identity\" \"crossplane_kubelet_identity\" {\n  name                = \"${local.crossplane_name}-kubelet-identity\"\n  resource_group_name = azurerm_resource_group.this.name\n  location            = azurerm_resource_group.this.location\n}\n\nresource \"azurerm_user_assigned_identity\" \"crossplane_identity\" {\n  name                = \"${local.crossplane_name}-identity\"\n  resource_group_name = azurerm_resource_group.this.name\n  location            = azurerm_resource_group.this.location\n}\n#File: logging.tf\nresource \"azurerm_log_analytics_workspace\" \"this\" {\n  name                = \"${local.resource_name}-logs\"\n  location            = azurerm_resource_group.this.location\n  resource_group_name = azurerm_resource_group.this.name\n  sku                 = \"PerGB2018\"\n  daily_quota_gb      = 0.5\n}\n\nresource \"azurerm_log_analytics_solution\" \"this\" {\n  solution_name         = \"ContainerInsights\"\n  location              = azurerm_resource_group.this.location\n  resource_group_name   = azurerm_resource_group.this.name\n  workspace_resource_id = azurerm_log_analytics_workspace.this.id\n  workspace_name        = azurerm_log_analytics_workspace.this.name\n\n  plan {\n    publisher = \"Microsoft\"\n    product   = \"OMSGallery/ContainerInsights\"\n  }\n}\n\nresource \"azurerm_application_insights\" \"this\" {\n  name                = \"${local.resource_name}-appinsights\"\n  location            = azurerm_resource_group.this.location\n  resource_group_name = azurerm_resource_group.this.name\n  workspace_id        = azurerm_log_analytics_workspace.this.id\n  application_type    = \"web\"\n}\n#File: main.tf\ndata \"azurerm_client_config\" \"current\" {}\n\ndata \"http\" \"myip\" {\n  url = \"http://checkip.amazonaws.com/\"\n}\n\nresource \"random_id\" \"this\" {\n  byte_length = 2\n}\n\nresource \"random_pet\" \"this\" {\n  length    = 1\n  separator = \"\"\n}\n\nresource \"random_password\" \"password\" {\n  length  = 25\n  special = true\n}\n\nresource \"random_integer\" \"vnet_cidr\" {\n  min = 10\n  max = 250\n}\n\nresource \"random_integer\" \"crossplane_services_cidr\" {\n  min = 64\n  max = 99\n}\n\nresource \"random_integer\" \"crossplane_pod_cidr\" {\n  min = 100\n  max = 127\n}\n\nlocals {\n  location                     = var.region\n  resource_name                = \"${random_pet.this.id}-${random_id.this.dec}\"\n  crossplane_name              = \"${local.resource_name}-crossplane\"\n  aks_name                     = \"${local.resource_name}-workload\"\n  flux_repository              = \"https://github.com/briandenicola/crossplane-azure-demo\"\n  mgmt_cluster_cfg_path        = \"./cluster-configs/management\"\n  crossplane_cfg_path          = \"./cluster-configs/management/upbound-providers\"\n  crossplane_compositions_path = \"./cluster-configs/management/upbound-providers-config\"\n  crossplane_claims_path       = \"./cluster-configs/management/upbound-providers-claims\"\n  vnet_cidr                    = cidrsubnet(\"10.0.0.0/8\", 8, random_integer.vnet_cidr.result)\n  crossplane_nodes_subnet_cidr = cidrsubnet(local.vnet_cidr, 8, 2)\n  crossplane_api_subnet_cidir  = cidrsubnet(local.vnet_cidr, 12, 1)\n  tags                         = \"Crossplane Demo Application\"\n}\n\nresource \"azurerm_resource_group\" \"this\" {\n  name     = \"${local.resource_name}_rg\"\n  location = local.location\n\n  tags = {\n    Application =  local.tags\n    Components  = \"aks; kubevela; crossplane; upbound\"\n    DeployedOn  = timestamp()\n    Deployer    = data.azurerm_client_config.current.object_id\n  }\n}\n#File: network.tf\nresource \"azurerm_virtual_network\" \"this\" {\n  name                = \"${local.resource_name}-network\"\n  address_space       = [local.vnet_cidr]\n  location            = azurerm_resource_group.this.location\n  resource_group_name = azurerm_resource_group.this.name\n}\n\nresource \"azurerm_subnet\" \"crossplane\" {\n  name                 = \"crossplane\"\n  resource_group_name  = azurerm_resource_group.this.name\n  virtual_network_name = azurerm_virtual_network.this.name\n  address_prefixes     = [local.crossplane_nodes_subnet_cidr]\n}\n\nresource \"azurerm_subnet\" \"api\" {\n  name                 = \"api-severver\"\n  resource_group_name  = azurerm_resource_group.this.name\n  virtual_network_name = azurerm_virtual_network.this.name\n  address_prefixes     = [local.crossplane_api_subnet_cidir]\n\n  delegation {\n    name = \"aks-delegation\"\n\n    service_delegation {\n      name = \"Microsoft.ContainerService/managedClusters\"\n      actions = [\n        \"Microsoft.Network/virtualNetworks/subnets/join/action\",\n      ]\n    }\n  }\n}\n\nresource \"azurerm_network_security_group\" \"this\" {\n  name                = \"${local.resource_name}-nsg\"\n  location            = azurerm_resource_group.this.location\n  resource_group_name = azurerm_resource_group.this.name\n\n  security_rule {\n    name                       = \"port_443\"\n    priority                   = 100\n    direction                  = \"Inbound\"\n    access                     = \"Allow\"\n    protocol                   = \"Tcp\"\n    source_port_range          = \"*\"\n    destination_port_range     = \"443\"\n    source_address_prefix      = \"*\"\n    destination_address_prefix = \"*\"\n  }\n}\n\nresource \"azurerm_subnet_network_security_group_association\" \"crossplane\" {\n  subnet_id                 = azurerm_subnet.crossplane.id\n  network_security_group_id = azurerm_network_security_group.this.id\n}\n\nresource \"azurerm_subnet_network_security_group_association\" \"api\" {\n  subnet_id                 = azurerm_subnet.api.id\n  network_security_group_id = azurerm_network_security_group.this.id\n}\n\n#File: outputs.tf\noutput \"AKS_RESOURCE_GROUP\" {\n  value     = azurerm_kubernetes_cluster.crossplane.resource_group_name\n  sensitive = false\n}\n\noutput \"AKS_CLUSTER_NAME\" {\n  value     = azurerm_kubernetes_cluster.crossplane.name\n  sensitive = false\n}\n\noutput \"AKS_SUBSCRIPTION_ID\" {\n  value     = data.azurerm_client_config.current.subscription_id\n  sensitive = false\n}\n\noutput \"AKS_TENANT_ID\" {\n  value     = data.azurerm_client_config.current.tenant_id\n  sensitive = false\n}\n\noutput \"UMI_CLIENT_ID\" {\n  value     = azurerm_user_assigned_identity.crossplane_identity.client_id\n  sensitive = false\n}\n\noutput \"UMI_CLIENT_NAME\" {\n  value     = azurerm_user_assigned_identity.crossplane_identity.name\n  sensitive = false\n}\n\noutput \"NAMESPACE\" {\n  value = var.namespace\n}\n\n#File: providers.tf\nterraform {\n  required_version = \">= 1.0\"\n  required_providers {\n    azurerm = {\n      source  = \"hashicorp/azurerm\"\n      version = \"~> 3\"\n    }\n    azapi = {\n      source  = \"Azure/azapi\"\n      version = \"~> 1\"\n    }\n    kubernetes = {\n      source = \"hashicorp/kubernetes\"\n      version = \"~> 2\"\n    }\n  }\n}\n\nprovider \"azurerm\" {\n  features {}\n}\n\nprovider \"azapi\" {\n}\n\nprovider \"kubernetes\" {\n  host                   = azurerm_kubernetes_cluster.crossplane.kube_config.0.host\n  cluster_ca_certificate = base64decode(azurerm_kubernetes_cluster.crossplane.kube_config.0.cluster_ca_certificate)\n\n  exec {\n    api_version = \"client.authentication.k8s.io/v1beta1\"\n    args = [\n      \"get-token\",\n      \"--environment\",\n      \"AzurePublicCloud\",\n      \"--server-id\",\n      \"6dae42f8-4368-4678-94ff-3960e28e3630\",\n      \"--client-id\",\n      \"80faf920-1908-4b52-b5ef-a8e7bedfc67a\",\n      \"--tenant-id\",\n      data.azurerm_client_config.current.tenant_id,\n      \"--login\",\n      \"azurecli\",\n    ]\n    command = \"kubelogin\"\n  }\n}\n#File: roles.tf\nresource \"azurerm_role_assignment\" \"cluster_owner\" {\n  scope                = azurerm_resource_group.this.id\n  role_definition_name = \"Azure Kubernetes Service RBAC Cluster Admin\"\n  principal_id         = data.azurerm_client_config.current.object_id\n}\n\nresource \"azurerm_role_assignment\" \"crossplane_cluster_role_assignment_network_contributor\" {\n  scope                            = azurerm_virtual_network.this.id\n  role_definition_name             = \"Network Contributor\"\n  principal_id                     = azurerm_user_assigned_identity.crossplane_cluster_identity.principal_id\n  skip_service_principal_aad_check = true\n}\n\nresource \"azurerm_role_assignment\" \"crossplane_cluster_role_assignment_msi_owner\" {\n  scope                            = azurerm_user_assigned_identity.crossplane_kubelet_identity.id\n  role_definition_name             = \"Managed Identity Operator\"\n  principal_id                     = azurerm_user_assigned_identity.crossplane_cluster_identity.principal_id\n  skip_service_principal_aad_check = true\n}\n\nresource \"azurerm_role_assignment\" \"crossplane_role_assignment_msi\" {\n  scope                            = \"/subscriptions/${data.azurerm_client_config.current.subscription_id}\"\n  role_definition_name             = \"Contributor\"\n  principal_id                     = azurerm_user_assigned_identity.crossplane_identity.principal_id\n  skip_service_principal_aad_check = true\n}\n#File: variables.tf\nvariable \"region\" {\n  description = \"Region to deploy resources to\"\n  default     =  \"southcentralus\"\n}\n\nvariable \"namespace\" {\n  description = \"The namespace to deploy Crossplane to\"\n  default = \"upbound-system\"\n}\n\nvariable \"vm_sku\" {\n  description = \"The VM type for the system node pool\"\n  default     = \"Standard_D4ads_v5\"\n}\n"}]}
{"messages": [{"role": "user", "content": "Create a new Azure resource group using the specified workload and location. Define an Azure Active Directory service connector application and a corresponding service principal. Assign a Contributor role to the service principal in the primary subscription scope. Configure an Azure Service Plan for a Linux web application and create the web app with necessary settings. Establish an Azure Static Site for the frontend, using the designated workload."}, {"role": "assistant", "content": "\n#File: main.tf\nterraform {\n  required_providers {\n    azurerm = {\n      source  = \"hashicorp/azurerm\"\n      version = \"3.62.1\"\n    }\n    azuread = {\n      source  = \"hashicorp/azuread\"\n      version = \"2.39.0\"\n    }\n  }\n}\n\nprovider \"azurerm\" {\n  features {\n    resource_group {\n      prevent_deletion_if_contains_resources = false\n    }\n  }\n}\n\nprovider \"azuread\" {}\n\ndata \"azuread_client_config\" \"current\" {}\n\nlocals {\n  owner_object_id = data.azuread_client_config.current.object_id\n}\n\n### Group ###\n\nresource \"azurerm_resource_group\" \"main\" {\n  name     = \"rg-${var.workload}\"\n  location = var.location\n}\n\n### ADO Service Connector ###\n\nresource \"random_uuid\" \"oauth2_permission_scope_backend\" {}\n\nresource \"azuread_application\" \"ado_service_connector\" {\n  display_name     = \"ADO Service Connector\"\n  sign_in_audience = \"AzureADMyOrg\"\n  owners           = [local.owner_object_id]\n}\n\nresource \"azuread_service_principal\" \"ado_service_connector\" {\n  application_id               = azuread_application.ado_service_connector.application_id\n  app_role_assignment_required = false\n  owners                       = [local.owner_object_id]\n\n  feature_tags {\n    enterprise = true\n  }\n}\n\n### Role Assignment ###\n\ndata \"azurerm_subscription\" \"primary\" {\n}\n\nresource \"azurerm_role_assignment\" \"ado_service_connector\" {\n  scope                = data.azurerm_subscription.primary.id\n  role_definition_name = \"Contributor\"\n  principal_id         = azuread_service_principal.ado_service_connector.id\n}\n\n\n### Backend ###\n\nresource \"azurerm_service_plan\" \"main\" {\n  name                = \"plan-backend-${var.workload}\"\n  resource_group_name = azurerm_resource_group.main.name\n  location            = azurerm_resource_group.main.location\n  os_type             = \"Linux\"\n  sku_name            = \"B1\"\n  worker_count        = 1\n}\n\nresource \"azurerm_linux_web_app\" \"main\" {\n  name                = \"app-backend-${var.workload}\"\n  resource_group_name = azurerm_resource_group.main.name\n  location            = azurerm_service_plan.main.location\n  service_plan_id     = azurerm_service_plan.main.id\n  https_only          = true\n\n  site_config {\n    always_on = true\n\n    application_stack {\n      dotnet_version = \"7.0\"\n    }\n\n    cors {\n      allowed_origins = [\"*\"]\n    }\n  }\n\n  app_settings = {\n    ASPNETCORE_ENVIRONMENT   = \"Development\"\n    WEBSITE_RUN_FROM_PACKAGE = \"1\"\n  }\n\n  lifecycle {\n    ignore_changes = [\n      auth_settings_v2\n    ]\n  }\n}\n\n### Frontend  ###\n\nresource \"azurerm_static_site\" \"frontend\" {\n  name                = \"stapp-${var.workload}\"\n  resource_group_name = azurerm_resource_group.main.name\n  location            = \"West Europe\"\n  sku_size            = \"Free\"\n  sku_tier            = \"Free\"\n}\n\n#File: output.tf\noutput \"backend_url\" {\n  value = azurerm_linux_web_app.main.default_hostname\n}\n\noutput \"tenant_id\" {\n  value = data.azuread_client_config.current.tenant_id\n}\n\noutput \"subscription_id\" {\n  value = data.azurerm_subscription.primary.id\n}\n\noutput \"subscription_name\" {\n  value = data.azurerm_subscription.primary.display_name\n}\n\n### App Reg ###\n\noutput \"serviceprincipal_object_id\" {\n  value = azuread_service_principal.ado_service_connector.object_id\n}\n\noutput \"application_id\" {\n  value = azuread_application.ado_service_connector.application_id\n}\n\noutput \"application_object_id\" {\n  value = azuread_application.ado_service_connector.object_id\n}\n\n#File: variables.tf\nvariable \"workload\" {\n  type    = string\n  default = \"myapp789\"\n}\n\nvariable \"location\" {\n  type = string\n  default = \"eastus\"\n}\n"}]}
{"messages": [{"role": "user", "content": "Create a Google Cloud Virtual Private Cloud (VPC) network named \"test-min-vpc\". Configure a subnet called \"subnet1\" with the CIDR range \"10.1.0.0/24\" in the specified region. Create a Google Compute Engine instance named \"vm1-running-container\" in the zone \"us-central1-c\" with an e2-micro machine type and a Debian 11 image. Set up firewall rules to allow SSH access on port 22 and HTTP traffic on port 80 for the instance. Assign the appropriate tags to the instance to enable SSH and HTTP access accordingly."}, {"role": "assistant", "content": "\n#File: main.tf\nterraform {\n  required_providers {\n    google = {\n      source  = \"hashicorp/google\"\n      version = \"6.32.0\"\n    }\n  }\n}\n\nprovider \"google\" {\n  region  = var.gcp_region\n  project = var.project_id\n}\n#File: variables.tf\nvariable \"gcp_region\" {\n  default = \"us-central1\"\n}\n\nvariable \"project_id\" {\n  #   default = \"My First Project\"\n  default = \"utility-cathode-451011-t4\"\n}\n\nvariable \"vpc_network_name\" {\n  default = \"test-min-vpc\"\n}\n\nvariable \"subnet_name\" {\n  default = \"subnet1\"\n}\n\nvariable \"subnet_cidr\" {\n  default = \"10.1.0.0/24\"\n}\n\nvariable \"vpc_ssh_allow_tag\" {\n  default = \"allow-ssh\"\n}\n\nvariable \"vpc_allow_http_tag\" {\n  default = \"local-vm\"\n}\n\nvariable \"compute_engine_name\" {\n  default = \"vm1-running-container\"\n}\n\nvariable \"compute_engine_zone\" {\n  default = \"us-central1-c\"\n}\n\nvariable \"compute_engine_machine_type\" {\n  default     = \"e2-micro\"\n  description = \"micro - 1GB, e2-small (2 vCPUs, 2 GB Memory)\"\n}\n\nvariable \"compute_engine_arch\" {\n  default = \"X86_64\"\n}\n#File: vpc_network.tf\nresource \"google_compute_network\" \"vpc_network\" {\n  project                 = var.project_id\n  name                    = var.vpc_network_name\n  auto_create_subnetworks = false\n  mtu                     = 1460\n}\n\n# Subnets themselves don't have \"public\" or \"private\" flags like AWS.\n# Subnet is just a range of IP addresses inside a region — whether a VM is public or private depends on:\n# If the VM gets an external (public) IP ➔ it's \"public\".\n# If the VM only has internal IP ➔ it's \"private\".\n\nresource \"google_compute_subnetwork\" \"subnet1\" {\n  name                     = \"${var.vpc_network_name}-${var.subnet_name}\"\n  ip_cidr_range            = var.subnet_cidr\n  region                   = var.gcp_region\n  network                  = google_compute_network.vpc_network.id\n  private_ip_google_access = true # VMs without public IPs can still access Google APIs/services (like Cloud Storage, BigQuery, etc.) through internal IP.\n}\n\n\n#File: compute_engine.tf\n# resource \"google_service_account\" \"default\" {\n#   account_id   = \"my-custom-sa\"\n#   display_name = \"Custom SA for VM Instance\"\n# }\n\n\nresource \"google_compute_instance\" \"vm\" {\n  name         = var.compute_engine_name\n  machine_type = var.compute_engine_machine_type\n  zone         = var.compute_engine_zone\n\n  boot_disk {\n    initialize_params {\n      image = \"debian-cloud/debian-11\"\n      labels = {\n        my_label = \"value\"\n      }\n      architecture = var.compute_engine_arch\n    }\n  }\n\n  network_interface {\n    network    = google_compute_network.vpc_network.id\n    subnetwork = google_compute_subnetwork.subnet1.id\n\n    access_config {\n      // Ephemeral public IP\n    }\n  }\n\n  # metadata = {\n  #   foo = \"bar\"\n  # }\n  metadata = {\n    gce-container-declaration = <<-EOT\n      spec:\n        containers:\n          - name: my-app\n            image: nginx\n            ports:\n              - containerPort: 80\n        restartPolicy: Always\n    EOT\n  }\n\n  tags = [var.vpc_ssh_allow_tag, var.vpc_allow_http_tag] # if this tag matches, it will be ssh accessible\n\n  # metadata_startup_script = \"sudo apt-get install nginx -y\"\n\n  #   service_account {\n  #     # Google recommends custom service accounts that have cloud-platform scope and permissions granted via IAM Roles.\n  #     email  = google_service_account.default.email\n  #     scopes = [\"cloud-platform\"]\n  #   }\n}\n#File: firewall.tf\nresource \"google_compute_firewall\" \"vpc_firewall\" {\n  name    = \"allow-ssh\"\n  network = google_compute_network.vpc_network.id\n\n  allow {\n    protocol = \"tcp\"\n    ports    = [\"22\"]\n  }\n\n  source_ranges = [\"0.0.0.0/0\"]\n  target_tags   = [var.vpc_ssh_allow_tag] # <-- Only resources with this tag\n}\n\nresource \"google_compute_firewall\" \"allow_http\" {\n  name    = \"allow-http\"\n  network = google_compute_network.vpc_network.id\n\n  allow {\n    protocol = \"tcp\"\n    ports    = [\"80\"]\n  }\n  source_ranges = [\"0.0.0.0/0\"]\n  target_tags   = [var.vpc_allow_http_tag]\n}"}]}
{"messages": [{"role": "user", "content": "Create a new Azure Resource Group named \"rgmydatalake\" in the \"eastus\" location. Set up an Azure Storage Account called \"dlsmydatalake789\" within the created resource group, enabling hierarchical namespace for Data Lake Storage Gen2. Assign the role \"Storage Blob Data Contributor\" to the current Azure Active Directory client for the storage account. Finally, create a Data Lake Gen2 filesystem named \"myfilesystem001\" in the storage account, ensuring the role assignment is completed first. Configure the necessary provider and features for Azure resources."}, {"role": "assistant", "content": "\n#File: main.tf\nterraform {\n  required_providers {\n    azurerm = {\n      source  = \"hashicorp/azurerm\"\n      version = \"3.56.0\"\n    }\n  }\n}\n\nprovider \"azurerm\" {\n  features {\n    resource_group {\n      prevent_deletion_if_contains_resources = false\n    }\n  }\n}\n\ndata \"azuread_client_config\" \"current\" {}\n\n\n### Group ###\n\nresource \"azurerm_resource_group\" \"default\" {\n  name     = \"rgmydatalake\"\n  location = \"eastus\"\n}\n\n### Data Lake ###\n\nresource \"azurerm_storage_account\" \"lake\" {\n  name                     = \"dlsmydatalake789\"\n  resource_group_name      = azurerm_resource_group.default.name\n  location                 = azurerm_resource_group.default.location\n  account_tier             = \"Standard\"\n  account_replication_type = \"LRS\"\n  account_kind             = \"StorageV2\"\n\n  // Enable this for Gen2 Hierarchy\n  is_hns_enabled           = true\n}\n\nresource \"azurerm_role_assignment\" \"adlsv2\" {\n  scope                = azurerm_storage_account.lake.id\n  role_definition_name = \"Storage Blob Data Contributor\"\n  principal_id         = data.azuread_client_config.current.object_id\n}\n\nresource \"azurerm_storage_data_lake_gen2_filesystem\" \"default\" {\n  name               = \"myfilesystem001\"\n  storage_account_id = azurerm_storage_account.lake.id\n\n  depends_on = [\n    azurerm_role_assignment.adlsv2\n  ]\n}\n"}]}
{"messages": [{"role":"user","content":"Provisions an AWS VPC infrastructure with a public and private subnet, enabling internet access via an Internet Gateway and route table association for the public subnet. It configures a security group to allow SSH (port 22) access and launches a t2.micro EC2 instance in the public subnet with a root volume of 8 GB. The provider is explicitly set to the ap-south-1 region using hardcoded AWS credentials, which is a potential security risk."},{"role":"assistant","content":"provider \"aws\" {\r\n  region  = \"ap-south-1\"\r\n  # These must be given by  IAM Role here or AWS CLI for executing this file \r\n  access_key = \"AKIA375AC2OIS3UOS4HV\" \r\n  secret_key = \"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\"\r\n}\r\n\r\nresource \"aws_vpc\" \"vpc\" {\r\n  cidr_block = \"10.0.0.0/16\"\r\n  instance_tenancy = \"default\"\r\n  enable_dns_hostnames = true\r\n\r\n  tags = {\r\n    Name = \"MyVpc\"\r\n    \"purpose\" = \"Assignment\"\r\n  }\r\n}\r\n\r\nresource \"aws_subnet\" \"publicsubnet\" {\r\n  availability_zone = \"ap-south-1a\"\r\n    vpc_id = aws_vpc.vpc.id \r\n    cidr_block = \"10.0.1.0/24\"\r\n    tags = {\r\n        Name = \"MyPublicSubnet\"\r\n        \"purpose\" = \"Assignment\"\r\n    }\r\n}\r\n\r\nresource \"aws_subnet\" \"privatesubnet\" {\r\n    vpc_id = aws_vpc.vpc.id \r\n    cidr_block = \"10.0.2.0/24\"\r\n    tags = {\r\n        Name = \"MyPrivateSubnet\"\r\n        \"purpose\" = \"Assignment\"\r\n    }\r\n}\r\n\r\n#without InternetGateWay we cannot access the ec2 in public subnet\r\nresource \"aws_internet_gateway\" \"igw\"{\r\n    vpc_id = aws_vpc.vpc.id \r\n    tags = {\r\n        Name = \"InternetGateWayForPublicSubnet\"\r\n        \"purpose\" = \"Assignment\"\r\n    }\r\n}\r\n\r\nresource \"aws_route_table\" \"vpcRoutetable\"{\r\n  vpc_id = aws_vpc.vpc.id \r\n  tags = {\r\n    Name = \"Routetable for vpc\"\r\n    \"purpose\" = \"Assignment\"\r\n  }\r\n}\r\n\r\nresource \"aws_route\" \"vpcIn\"{\r\n  route_table_id = aws_route_table.vpcRoutetable.id \r\n  destination_cidr_block = \"0.0.0.0/0\"\r\n  gateway_id = aws_internet_gateway.igw.id\r\n  /*\r\n  tags = {\r\n    Name = \"Creating a inbound route for vpc by vpcRoutetable from IGW gateway to everywhere(0.0.0.0/0) inside vpc\"\r\n    \"purpose\" = \"Assignment\"\r\n  }*/\r\n}\r\n\r\nresource \"aws_route_table_association\" \"public_subnet_association_with_vpc\"{\r\n  subnet_id = aws_subnet.publicsubnet.id \r\n  route_table_id = aws_route_table.vpcRoutetable.id \r\n  /*tags = {\r\n    Name = \"public Subnet association with internetgateway by vpcroutetable\"\r\n    \"purpose\" = \"Assignment\"\r\n  }*/\r\n}\r\n\r\nresource \"aws_security_group\" \"instance_sg\"{\r\n  vpc_id = aws_vpc.vpc.id\r\n  name = \"instance-security-geoup\"\r\n  description = \"security group for ec2 instance\"\r\n  ingress {\r\n    from_port = 22\r\n    to_port = 22\r\n    protocol = \"tcp\"\r\n    cidr_blocks = [\"0.0.0.0/0\"]\r\n  }\r\n\r\n  egress{\r\n    from_port = 0\r\n    to_port = 0\r\n    protocol = \"-1\"\r\n    cidr_blocks = [\"0.0.0.0/0\"]\r\n  }\r\n  tags = {\r\n      \"purpose\" = \"Assignment\"\r\n    }\r\n} \r\n\r\nresource \"aws_instance\" \"ec2\" {\r\n    subnet_id = aws_subnet.publicsubnet.id \r\n    ami = \"ami-0da59f1af71ea4ad2\"\r\n    instance_type = \"t2.micro\"\r\n    security_groups = [aws_security_group.instance_sg.id]\r\n    availability_zone = \"ap-south-1a\"\r\n    associate_public_ip_address = true\r\n    root_block_device{\r\n      volume_type = \"gp2\"\r\n      #condition: volume_size >= snapshot size so volume_size>=8  \r\n      #volume_size = 5  This is not possible due to above condition \r\n      volume_size = 8\r\n      delete_on_termination = true\r\n      encrypted = false\r\n    }\r\n    tags = {\r\n      Name = \"Ec2ForAssignment\"\r\n      \"purpose\" = \"Assignment\"\r\n    }\r\n}\r\n\r\n"}]}
{"messages": [{"role": "user", "content": "Create a Terraform configuration to set up an Azure environment with a resource group. Set up a storage account with the specified parameters within that resource group. Establish a serverless CosmosDB account, a SQL database, and a container for storing data. Create an Azure Function App with Python 3.9, linking it to the storage account and application insights. Configure a command to deploy the function code using Azure CLI and output the function app's name and hostname."}, {"role": "assistant", "content": "\n#File: main.tf\nterraform {\n  required_providers {\n    azurerm = {\n      source  = \"hashicorp/azurerm\"\n      version = \"~> 2.96.0\"\n    }\n  }\n}\n\nprovider \"azurerm\" {\n  features {}\n}\n\nresource \"azurerm_resource_group\" \"resource_group\" {\n    name = \"${var.prefix}-rg\"\n    location = var.location\n}\n\nresource \"azurerm_storage_account\" \"storage_account\" {\n    name = \"${var.prefix}afpctsa1\"\n    location = var.location\n    resource_group_name = azurerm_resource_group.resource_group.name\n    account_tier = \"Standard\"\n    account_replication_type = \"LRS\"\n}\n\n# CosmosDB serverless account, database, and container\nresource \"azurerm_cosmosdb_account\" \"cosmosdb_account\" {\n  name = \"${var.prefix}-cosmosdb\"\n  location = var.location\n  resource_group_name = azurerm_resource_group.resource_group.name\n  offer_type = \"Standard\"\n  kind = \"GlobalDocumentDB\"\n\n  geo_location {\n    location = var.location\n    failover_priority = 0\n  }\n\n  enable_automatic_failover = false\n\n  consistency_policy {\n    consistency_level = \"Session\"\n  }\n\n  capabilities {\n    name = \"EnableServerless\"\n  }\n}\n\nresource \"azurerm_cosmosdb_sql_database\" \"cosmosdb_database\" {\n  name = \"db1\"\n  resource_group_name = azurerm_resource_group.resource_group.name\n  account_name = azurerm_cosmosdb_account.cosmosdb_account.name\n}\n\nresource \"azurerm_cosmosdb_sql_container\" \"cosmosdb_container\" {\n  name = \"container1\"\n  resource_group_name = azurerm_resource_group.resource_group.name\n  account_name = azurerm_cosmosdb_account.cosmosdb_account.name\n  database_name = azurerm_cosmosdb_sql_database.cosmosdb_database.name\n  partition_key_path = \"/id\"\n}\n\n# Azure Function (Linux and Python 3.9)\nresource \"azurerm_application_insights\" \"application_insights\" {\n    name = \"${var.prefix}-appinsights\"\n    location = var.location\n    resource_group_name = azurerm_resource_group.resource_group.name\n    application_type = \"other\"\n}\n\nresource \"azurerm_app_service_plan\" \"app_service_plan\" {\n  name = \"${var.prefix}-appsvcplan\"\n  resource_group_name = azurerm_resource_group.resource_group.name\n  location = var.location\n  kind = \"FunctionApp\"\n  reserved = true\n  sku {\n    tier = \"Dynamic\"\n    size = \"Y1\"\n  }\n}\n\nresource \"azurerm_function_app\" \"function_app\" {\n  name = \"${var.prefix}-function1\"\n  location = var.location\n  resource_group_name = azurerm_resource_group.resource_group.name\n  app_service_plan_id = azurerm_app_service_plan.app_service_plan.id\n  storage_account_name = azurerm_storage_account.storage_account.name\n  storage_account_access_key = azurerm_storage_account.storage_account.primary_access_key\n  os_type = \"linux\"\n  version = \"~4\"\n  app_settings = {\n    \"FUNCTIONS_WORKER_RUNTIME\" = \"python\",\n    \"APPINSIGHTS_INSTRUMENTATIONKEY\" = azurerm_application_insights.application_insights.instrumentation_key,\n    \"CosmosDbEndpoint\" = azurerm_cosmosdb_account.cosmosdb_account.endpoint,\n    \"CosmosDbKey\" = azurerm_cosmosdb_account.cosmosdb_account.primary_master_key\n  }\n  site_config {\n      linux_fx_version = \"python|3.9\"\n  }\n  lifecycle {\n    ignore_changes = [\n      app_settings[\"WEBSITE_RUN_FROM_PACKAGE\"],\n      app_settings[\"SCM_DO_BUILD_DURING_DEPLOYMENT\"],\n    ]\n  }\n}\n\n# NOTE: Usually you would separate the deployment of the code from the provisioning of infrastructure by using separate pipelines.\n# This example combines both steps into one Terraform for simplicity.\n\n# Create ZIP file containing the function code\ndata \"archive_file\" \"file_function_app\" {\n  type        = \"zip\"\n  source_dir  = \"../function1\"\n  output_path = \"function1.zip\"\n  excludes = [ \"local.settings.json\", \".funcignore\", \".gitignore\", \"getting_started.md\", \"README.md\" ]\n}\n\n# Use Azure CLI to push a Zip deployment using remote build https://docs.microsoft.com/en-us/azure/azure-functions/functions-deployment-technologies#key-concepts\nlocals {\n    publish_code_command = \"az functionapp deployment source config-zip --resource-group ${azurerm_resource_group.resource_group.name} --name ${azurerm_function_app.function_app.name} --src ${data.archive_file.file_function_app.output_path} --build-remote true\"\n}\n\nresource \"null_resource\" \"function_app_publish\" {\n  provisioner \"local-exec\" {\n    command = local.publish_code_command\n  }\n  depends_on = [local.publish_code_command]\n  triggers = {\n    # Only redeploy if zip file content changed\n    input_json = filemd5(data.archive_file.file_function_app.output_path)\n    publish_code_command = local.publish_code_command\n  }\n}\n#File: outputs.tf\noutput \"function_app_name\" {\n    value = azurerm_function_app.function_app.name\n}\n\noutput \"function_app_default_hostname\" {\n    value = azurerm_function_app.function_app.default_hostname\n}\n#File: variables.tf\nvariable \"prefix\" {\n    type = string\n    description = \"Resource name prefix\"\n}\n\nvariable \"location\" {\n    type = string\n    description = \"Azure region for the resource being deployed\"\n}"}]}
{"messages": [{"role": "user", "content": "Create a Key Vault in Azure using the provided resource group and specified configuration settings. Define certificates within the Key Vault by loading their content from PEM files. Set up role assignments for managed identities to grant them read access to the Key Vault. Ensure that the Key Vault is configured with soft delete retention and purge protection as needed. Output the Key Vault name, resource group, certificate IDs, and managed identity role assignments."}, {"role": "assistant", "content": "\n#File: main.tf\ndata \"azurerm_client_config\" \"current\" {}\n\n# ===========\n#  Key Vault\n# ===========\n\ndata \"azurerm_resource_group\" \"shared_rg\" {\n  name = var.resource_group\n}\n\nresource \"azurerm_key_vault\" \"kv\" {\n  name                = var.name\n  resource_group_name = data.azurerm_resource_group.shared_rg.name\n  location            = data.azurerm_resource_group.shared_rg.location\n  tenant_id           = data.azurerm_client_config.current.tenant_id\n\n  sku_name                   = var.sku\n  soft_delete_retention_days = var.soft_delete_retention_days\n  purge_protection_enabled   = var.purge_protection_enabled\n  enable_rbac_authorization  = var.enable_rbac_authorization\n\n  tags = var.tags\n}\n\n\n# ==============\n#  Certificates\n# ==============\n\nlocals {\n  # Create map for easier terraform state debugging\n  certificates = {\n    for cert in var.certificates :\n    \"${cert.name}\" => cert\n  }\n}\n\nresource \"azurerm_key_vault_certificate\" \"certs\" {\n  for_each     = local.certificates\n  name         = each.value.name\n  key_vault_id = azurerm_key_vault.kv.id\n\n  certificate {\n    contents = filebase64(each.value.pem_file)\n  }\n\n  certificate_policy {\n    issuer_parameters {\n      name = \"Unknown\"\n    }\n\n    key_properties {\n      exportable = true\n      key_size   = 2048\n      key_type   = \"RSA\"\n      reuse_key  = false\n    }\n\n    secret_properties {\n      content_type = \"application/x-pem-file\"\n    }\n  }\n}\n\n\n# ==================\n#  Role Assignments\n# ==================\n\n# Managed identities\n\ndata \"azurerm_user_assigned_identity\" \"managed_ids\" {\n  for_each            = var.reader_assignments\n  name                = each.value.identity_name\n  resource_group_name = each.value.resource_group\n}\n\nresource \"azurerm_role_assignment\" \"readers_on_kv\" {\n  for_each             = var.reader_assignments\n  scope                = azurerm_key_vault.kv.id\n  role_definition_name = \"Key Vault Secrets User\" # read-only role\n  principal_id         = data.azurerm_user_assigned_identity.managed_ids[each.key].principal_id\n}\n\n#File: outputs.tf\noutput \"name\" {\n  value = azurerm_key_vault.kv.name\n}\n\noutput \"resource_group\" {\n  value = data.azurerm_resource_group.shared_rg.name\n}\n\noutput \"certificates\" {\n  value = [for c in azurerm_key_vault_certificate.certs : c.id]\n}\n\noutput \"managed_identity_readers\" {\n  value = { for k, mi in azurerm_role_assignment.readers_on_kv :\n    \"${k}\" => {\n      assignment_id = mi.id\n      principal_id  = mi.principal_id\n      role_name     = mi.role_definition_name\n    }\n  }\n}\n\n#File: provider.tf\nterraform {\n  required_providers {\n    azurerm = {\n      source  = \"hashicorp/azurerm\"\n      version = \">=3.101.0\"\n    }\n  }\n}\n\n#File: variables.tf\nvariable \"name\" {\n  type        = string\n  description = \"Name of the Key Vault\"\n}\n\nvariable \"resource_group\" {\n  type        = string\n  description = \"Name of an existing Resource Group for this Key Vault\"\n}\n\nvariable \"sku\" {\n  type    = string\n  default = \"standard\"\n}\n\nvariable \"soft_delete_retention_days\" {\n  type    = number\n  default = 7 # minimum\n}\n\nvariable \"purge_protection_enabled\" {\n  type    = bool\n  default = false\n}\n\nvariable \"enable_rbac_authorization\" {\n  type    = bool\n  default = true\n}\n\nvariable \"tags\" {\n  type    = map(string)\n  default = {}\n}\n\nvariable \"certificates\" {\n  type    = list(map(string))\n  default = []\n}\n\nvariable \"reader_assignments\" {\n  type        = map(map(string))\n  description = \"Managed identities to grant read access to\"\n}\n"}]}
{"messages": [{"role": "user", "content": "Create a Google Compute Instance named \"rafael-vm\" with an \"e2-micro\" machine type in the \"us-central1-a\" zone. Set the tags to \"web\" and \"dev\". Initialize the boot disk with the \"debian-cloud/debian-11\" image. Connect the instance to the default network interface. Ensure the Google provider is set up for project \"rafael-450215\" in the \"us-central1\" region."}, {"role": "assistant", "content": "\n#File: main.tf\nresource \"google_compute_instance\" \"vm\" {\n  name         = \"rafael-vm\"\n  machine_type = \"e2-micro\"\n  zone         = \"us-central1-a\"\n  tags         = [\"web\", \"dev\"]\n  boot_disk {\n    initialize_params {\n      image = \"debian-cloud/debian-11\"\n    }\n  }\n  network_interface {\n    network = \"default\"\n  }\n}\n#File: providers.tf\nterraform {\n  required_providers {\n    google = {\n      source  = \"hashicorp/google\"\n      version = \"5.17.0\"\n    }\n  }\n}\nprovider \"google\" {\n  project = \"rafael-450215\"\n  region  = \"us-central1\"\n}"}]}
{"messages": [{"role":"user","content":"Creates an IAM role (ProwlerProSaaSScanRole) to allow the ProwlerPro SaaS security auditing tool to access an AWS account securely via an external ID and scoped permissions. It defines several inline policies and uses AWS-managed policies to grant read-only and security audit access, along with fine-grained S3 permissions for report storage. The role's trust policy restricts access to a specific ProwlerPro IAM role using a StringEquals and StringLike condition to enhance security."},{"role":"assistant","content":"variable \"external_id\" {\r\n  type        = string\r\n  description = \"ProwlerPro IAM Role External ID - Please input your External ID here below\"\r\n}\r\nvariable \"bucket_name\" {\r\n  type        = string\r\n  description = \"This is the name of the S3 Bucket where ProwlerPro SaaS will store the reports of your AWS Account(s).\"\r\n}\r\nvariable \"destination_bucket_account\" {\r\n  type        = string\r\n  description = \"This is the AWS Account ID of the S3 Bucket where ProwlerPro SaaS will store the reports of your AWS Account(s).\"\r\n}\r\n\r\nprovider \"aws\" {\r\n  region = \"us-east-1\"\r\n}\r\n\r\ndata \"aws_partition\" \"current\" {}\r\n\r\ndata \"aws_iam_policy_document\" \"prowler_pro_saas_assume_role_policy\" {\r\n  statement {\r\n    actions = [\"sts:AssumeRole\"]\r\n    principals {\r\n      type        = \"AWS\"\r\n      identifiers = [\"arn:aws:iam::232136659152:root\"]\r\n    }\r\n    condition {\r\n      test     = \"StringEquals\"\r\n      variable = \"sts:ExternalId\"\r\n      values = [\r\n        var.external_id,\r\n      ]\r\n    }\r\n    condition {\r\n      test     = \"StringLike\"\r\n      variable = \"aws:PrincipalArn\"\r\n      values = [\r\n        \"arn:aws:iam::232136659152:role/prowler-pro-saas*\"\r\n      ]\r\n    }\r\n  }\r\n}\r\ndata \"aws_iam_policy_document\" \"prowler_pro_saas_role_policy\" {\r\n  statement {\r\n    effect = \"Allow\"\r\n    actions = [\r\n      \"account:Get*\",\r\n      \"appstream:Describe*\",\r\n      \"appstream:List*\",\r\n      \"backup:List*\",\r\n      \"cloudtrail:GetInsightSelectors\",\r\n      \"codeartifact:List*\",\r\n      \"codebuild:BatchGet*\",\r\n      \"dlm:Get*\",\r\n      \"drs:Describe*\",\r\n      \"ds:Get*\",\r\n      \"ds:Describe*\",\r\n      \"ds:List*\",\r\n      \"ec2:GetEbsEncryptionByDefault\",\r\n      \"ecr:Describe*\",\r\n      \"ecr:GetRegistryScanningConfiguration\",\r\n      \"elasticfilesystem:DescribeBackupPolicy\",\r\n      \"glue:GetConnections\",\r\n      \"glue:GetSecurityConfiguration*\",\r\n      \"glue:SearchTables\",\r\n      \"lambda:GetFunction*\",\r\n      \"logs:FilterLogEvents\",\r\n      \"macie2:GetMacieSession\",\r\n      \"s3:GetAccountPublicAccessBlock\",\r\n      \"shield:DescribeProtection\",\r\n      \"shield:GetSubscriptionState\",\r\n      \"securityhub:BatchImportFindings\",\r\n      \"securityhub:GetFindings\",\r\n      \"ssm:GetDocument\",\r\n      \"ssm-incidents:List*\",\r\n      \"support:Describe*\",\r\n      \"tag:GetTagKeys\",\r\n      \"wellarchitected:List*\"\r\n    ]\r\n    resources = [\"*\"]\r\n  }\r\n}\r\n\r\ndata \"aws_iam_policy_document\" \"prowler_pro_saas_role_apigw_policy\" {\r\n  statement {\r\n    effect = \"Allow\"\r\n    actions = [\r\n      \"apigateway:GET\"\r\n    ]\r\n    resources = [\"arn:${data.aws_partition.current.partition}:apigateway:*::/restapis/*\", \"arn:${data.aws_partition.current.partition}:apigateway:*::/apis/*\"]\r\n  }\r\n}\r\n\r\ndata \"aws_iam_policy_document\" \"prowler_pro_saas_role_s3_integration_delete\" {\r\n  statement {\r\n    effect = \"Allow\"\r\n    actions = [\r\n      \"s3:DeleteObject\"\r\n    ]\r\n    resources = [\"arn:${data.aws_partition.current.partition}:s3:::${var.bucket_name}/*ProwlerProBeacon\"]\r\n    condition {\r\n      test     = \"StringEquals\"\r\n      variable = \"s3:ResourceAccount\"\r\n      values = [\r\n        var.destination_bucket_account,\r\n      ]\r\n    }\r\n  }\r\n}\r\n\r\ndata \"aws_iam_policy_document\" \"prowler_pro_saas_role_s3_integration_put\" {\r\n  statement {\r\n    effect = \"Allow\"\r\n    actions = [\r\n      \"s3:PutObject\"\r\n    ]\r\n    resources = [\"arn:${data.aws_partition.current.partition}:s3:::${var.bucket_name}/*\"]\r\n    condition {\r\n      test     = \"StringEquals\"\r\n      variable = \"s3:ResourceAccount\"\r\n      values = [\r\n        var.destination_bucket_account,\r\n      ]\r\n    }\r\n  }\r\n}\r\ndata \"aws_iam_policy_document\" \"prowler_pro_saas_role_s3_integration_location\" {\r\n  statement {\r\n    effect = \"Allow\"\r\n    actions = [\r\n      \"s3:PutObject\"\r\n    ]\r\n    resources = [\"arn:${data.aws_partition.current.partition}:s3:::${var.bucket_name}\"]\r\n    condition {\r\n      test     = \"StringEquals\"\r\n      variable = \"s3:GetBucketLocation\"\r\n      values = [\r\n        var.destination_bucket_account,\r\n      ]\r\n    }\r\n  }\r\n}\r\n\r\nresource \"aws_iam_role\" \"prowler_pro_saas_role\" {\r\n  name                = \"ProwlerProSaaSScanRole\"\r\n  assume_role_policy  = data.aws_iam_policy_document.prowler_pro_saas_assume_role_policy.json\r\n  managed_policy_arns = [\"arn:${data.aws_partition.current.partition}:iam::aws:policy/SecurityAudit\", \"arn:${data.aws_partition.current.partition}:iam::aws:policy/job-function/ViewOnlyAccess\"]\r\n  inline_policy {\r\n    name   = \"prowler-pro-saas-role-additional-view-privileges\"\r\n    policy = data.aws_iam_policy_document.prowler_pro_saas_role_policy.json\r\n  }\r\n  inline_policy {\r\n    name   = \"prowler-pro-saas-role-apigateway-view-privileges\"\r\n    policy = data.aws_iam_policy_document.prowler_pro_saas_role_apigw_policy.json\r\n  }\r\n  inline_policy {\r\n    name   = \"prowler-pro-saas-role-s3-integration-location\"\r\n    policy = data.aws_iam_policy_document.prowler_pro_saas_role_s3_integration_location.json\r\n  }\r\n  inline_policy {\r\n    name   = \"prowler-pro-saas-role-s3-integration-put\"\r\n    policy = data.aws_iam_policy_document.prowler_pro_saas_role_s3_integration_put.json\r\n  }\r\n  inline_policy {\r\n    name   = \"prowler-pro-saas-role-s3-integration-delete\"\r\n    policy = data.aws_iam_policy_document.prowler_pro_saas_role_s3_integration_delete.json\r\n  }\r\n  tags = tomap({\r\n    \"Name\"      = \"ProwlerProSaaSScanRole\",\r\n    \"Terraform\" = \"true\",\r\n    \"Service\"   = \"https://prowler.pro\",\r\n    \"Support\"   = \"help@prowler.pro\"\r\n  })\r\n}\r\n"}]}
{"messages": [{"role":"user","content":"Set up a AWS billing alert by creating CloudWatch alarms for specified cost thresholds and notifies users via an SNS topic with email subscriptions. Configure also a dead-letter queue for failed notifications and include per-service billing alerts, metric filters for billing logs, and outputs for monitoring."},{"role":"assistant","content":"provider \"aws\" {\r\n  region = var.aws_region # Dynamic AWS region\r\n}\r\n\r\n# Define variables for customization\r\nvariable \"aws_region\" {\r\n  description = \"The AWS region for setting up resources\"\r\n  type        = string\r\n}\r\n\r\nvariable \"sns_topic_name\" {\r\n  description = \"The name of the SNS topic for billing alerts\"\r\n  type        = string\r\n  default     = \"billing-alert\"\r\n}\r\n\r\nvariable \"alert_thresholds\" {\r\n  description = \"List of billing thresholds to create alarms for\"\r\n  type        = list(number)\r\n  default     = [100, 120]\r\n}\r\n\r\nvariable \"email_endpoints\" {\r\n  description = \"List of email addresses to receive billing alerts\"\r\n  type        = list(string)\r\n}\r\n\r\nvariable \"currency\" {\r\n  description = \"Currency for the billing alert (e.g., USD, EUR, GBP)\"\r\n  type        = string\r\n  default     = \"USD\"\r\n}\r\n\r\nvariable \"environment_tag\" {\r\n  description = \"Tag to define the environment (e.g., Production, Development)\"\r\n  type        = string\r\n  default     = \"Production\"\r\n}\r\n\r\nvariable \"auto_confirm_subscription\" {\r\n  description = \"Automatically confirm the SNS email subscription (true/false)\"\r\n  type        = bool\r\n  default     = false\r\n}\r\n\r\n# SNS Topic for Billing Alerts\r\nresource \"aws_sns_topic\" \"billing_alert\" {\r\n  name = var.sns_topic_name\r\n  tags = {\r\n    Environment = var.environment_tag\r\n    Purpose     = \"BillingAlerts\"\r\n  }\r\n}\r\n\r\n# SNS Dead-Letter Queue (DLQ) for failed notifications\r\nresource \"aws_sqs_queue\" \"sns_dlq\" {\r\n  name = \"${var.sns_topic_name}-dlq\"\r\n}\r\n\r\nresource \"aws_sns_topic_subscription\" \"sns_dlq_subscription\" {\r\n  topic_arn = aws_sns_topic.billing_alert.arn\r\n  protocol  = \"sqs\"\r\n  endpoint  = aws_sqs_queue.sns_dlq.arn\r\n}\r\n\r\n# CloudWatch Billing Alarms (Per-Service and Total)\r\nresource \"aws_cloudwatch_metric_alarm\" \"estimated_charges\" {\r\n  count               = length(var.alert_thresholds)\r\n  alarm_name          = \"estimated-charges-${var.alert_thresholds[count.index]}\"\r\n  comparison_operator = \"GreaterThanThreshold\"\r\n  evaluation_periods  = \"1\"\r\n  metric_name         = \"EstimatedCharges\"\r\n  namespace           = \"AWS/Billing\"\r\n  period              = \"86400\" # 24 hours in seconds\r\n  statistic           = \"Maximum\"\r\n  threshold           = var.alert_thresholds[count.index]\r\n  alarm_description   = \"Alarm when AWS charges exceed ${var.alert_thresholds[count.index]} ${var.currency}\"\r\n  alarm_actions       = [aws_sns_topic.billing_alert.arn]\r\n  treat_missing_data  = \"notBreaching\"\r\n  dimensions = {\r\n    Currency = var.currency\r\n  }\r\n  tags = {\r\n    Environment = var.environment_tag\r\n    Purpose     = \"BillingAlerts\"\r\n  }\r\n}\r\n\r\n# Billing Alerts per AWS Service\r\nresource \"aws_cloudwatch_metric_alarm\" \"service_billing_alert\" {\r\n  count               = length(var.alert_thresholds)\r\n  alarm_name          = \"service-billing-alert-${var.alert_thresholds[count.index]}\"\r\n  comparison_operator = \"GreaterThanThreshold\"\r\n  evaluation_periods  = \"1\"\r\n  metric_name         = \"EstimatedCharges\"\r\n  namespace           = \"AWS/Billing\"\r\n  period              = \"86400\"\r\n  statistic           = \"Maximum\"\r\n  threshold           = var.alert_thresholds[count.index]\r\n  alarm_description   = \"Alarm when AWS service-specific charges exceed ${var.alert_thresholds[count.index]} ${var.currency}\"\r\n  alarm_actions       = [aws_sns_topic.billing_alert.arn]\r\n  treat_missing_data  = \"notBreaching\"\r\n  dimensions = {\r\n    ServiceName = \"AmazonEC2\"\r\n    Currency    = var.currency\r\n  }\r\n  tags = {\r\n    Environment = var.environment_tag\r\n    Purpose     = \"BillingAlerts\"\r\n  }\r\n}\r\n\r\n# Add multiple email subscriptions to SNS topic\r\nresource \"aws_sns_topic_subscription\" \"email_alerts\" {\r\n  count     = length(var.email_endpoints)\r\n  topic_arn = aws_sns_topic.billing_alert.arn\r\n  protocol  = \"email\"\r\n  endpoint  = var.email_endpoints[count.index]\r\n}\r\n\r\n# CloudWatch Log Metric Filter for Billing Logs\r\nresource \"aws_cloudwatch_log_metric_filter\" \"billing_logs\" {\r\n  name           = \"EstimatedChargesFilter\"\r\n  log_group_name = \"/aws/billing\"\r\n  pattern        = \"{ $.EstimatedCharges > 0 }\"\r\n  metric_transformation {\r\n    name      = \"EstimatedChargesMetric\"\r\n    namespace = \"AWS/Billing\"\r\n    value     = \"$.EstimatedCharges\"\r\n  }\r\n}\r\n\r\n# Outputs for easier management and monitoring\r\noutput \"sns_topic_arn\" {\r\n  description = \"The ARN of the SNS topic for billing alerts\"\r\n  value       = aws_sns_topic.billing_alert.arn\r\n}\r\n\r\noutput \"cloudwatch_alarm_names\" {\r\n  description = \"List of CloudWatch alarm names\"\r\n  value       = [for alarm in aws_cloudwatch_metric_alarm.estimated_charges : alarm.alarm_name]\r\n}\r\n\r\noutput \"sns_dlq_arn\" {\r\n  description = \"The ARN of the SNS dead-letter queue\"\r\n  value       = aws_sqs_queue.sns_dlq.arn\r\n}\r\n"}]}
{"messages": [{"role": "user", "content": "Create a resource group named \"vm-resources\" in the \"West Europe\" location. Set up a virtual network called \"iaas-network\" with an address space of \"10.0.0.0/16\". Establish a subnet named \"internal\" within that virtual network, using the address prefix \"10.0.2.0/24\". Generate a network interface named \"vm01-nic\" and associate it with the created subnet. Finally, deploy a Windows virtual machine named \"vm-01\" with specified credentials and an OS disk configuration."}, {"role": "assistant", "content": "\n#File: main.tf\nprovider \"azurerm\" {\n  features {}\n}\n\nresource \"azurerm_resource_group\" \"vm_resource_group\" {\n  name     = \"vm-resources\"\n  location = \"West Europe\"\n}\n\nresource \"azurerm_virtual_network\" \"vm_vnet\" {\n  name                = \"iaas-network\"\n  address_space       = [\"10.0.0.0/16\"]\n  location            = azurerm_resource_group.vm_resource_group.location\n  resource_group_name = azurerm_resource_group.vm_resource_group.name\n  depends_on = [\n    azurerm_resource_group.vm_resource_group\n  ]\n}\n\nresource \"azurerm_subnet\" \"vm_subnet\" {\n  name                 = \"internal\"\n  resource_group_name  = azurerm_resource_group.vm_resource_group.name\n  virtual_network_name = azurerm_virtual_network.vm_vnet.name\n  address_prefixes     = [\"10.0.2.0/24\"]\n  depends_on = [\n    azurerm_virtual_network.vm_vnet\n  ]\n}\n\nresource \"azurerm_network_interface\" \"vm_nic\" {\n  name                = \"vm01-nic\"\n  location            = azurerm_resource_group.vm_resource_group.location\n  resource_group_name = azurerm_resource_group.vm_resource_group.name\n\n  ip_configuration {\n    name                          = \"internal\"\n    subnet_id                     = azurerm_subnet.vm_subnet.id\n    private_ip_address_allocation = \"Dynamic\"\n  }\n  depends_on = [\n    azurerm_subnet.vm_subnet\n  ]\n}\n\nresource \"azurerm_network_security_group\" \"vm_subnet_nsg\" {\n  name                = \"acceptanceTestSecurityGroup1\"\n  location            = azurerm_resource_group.vm_resource_group.location\n  resource_group_name = azurerm_resource_group.vm_resource_group.name\n  depends_on = [\n    azurerm_subnet.vm_subnet\n  ]\n\n  security_rule {\n    name                       = \"rdp\"\n    priority                   = 100\n    direction                  = \"Inbound\"\n    access                     = \"Allow\"\n    protocol                   = \"Tcp\"\n    source_port_range          = \"*\"\n    destination_port_range     = \"*\"\n    source_address_prefix      = \"*\"\n    destination_address_prefix = \"*\"\n  }\n\n  tags = {\n    environment = \"Production\"\n  }\n}\n\nresource \"azurerm_subnet_network_security_group_association\" \"vm_subnet_nsg_association\" {\n  subnet_id                 = azurerm_subnet.vm_subnet.id\n  network_security_group_id = azurerm_network_security_group.vm_subnet_nsg.id\n  depends_on = [\n    azurerm_network_security_group.vm_subnet_nsg\n  ]\n}\n\nresource \"azurerm_windows_virtual_machine\" \"vm_01\" {\n  name                = \"vm-01\"\n  resource_group_name = azurerm_resource_group.vm_resource_group.name\n  location            = azurerm_resource_group.vm_resource_group.location\n  size                = \"Standard_F2\"\n  admin_username      = \"adminuser\"\n  admin_password      = \"P@$$w0rd1234!\"\n  depends_on = [\n    azurerm_subnet.vm_subnet,azurerm_subnet_network_security_group_association.vm_subnet_nsg_association\n  ]\n  network_interface_ids = [\n    azurerm_network_interface.vm_nic.id,\n  ]\n\n  os_disk {\n    caching              = \"ReadWrite\"\n    storage_account_type = \"Standard_LRS\"\n  }\n\n  source_image_reference {\n    publisher = \"MicrosoftWindowsServer\"\n    offer     = \"WindowsServer\"\n    sku       = \"2019-Datacenter\"\n    version   = \"latest\"\n  }\n}"}]}
{"messages": [{"role":"user","content":"Set up an AWS environment including a VPC with a public subnet, internet gateway, and routing to enable internet access. Provide  a Windows Server EC2 instance with an attached Elastic IP, security group allowing HTTP and RDP access, and bootstraps the instance using a PowerShell script that renames the machine and installs IIS. Additionally, it generates an RSA key pair for SSH access and manages variables for flexible customization of instance type, storage, network settings, and application environment."},{"role":"assistant","content":"provider \"aws\" {\r\n  access_key = var.aws_access_key\r\n  secret_key = var.aws_secret_key\r\n  region     = var.aws_region\r\n}\r\n\r\n#####################################\r\n## AWS Provider Module - Variables ##\r\n#####################################\r\n\r\n# AWS connection & authentication\r\n\r\nvariable \"aws_access_key\" {\r\n  type = string\r\n  description = \"AWS access key\"\r\n}\r\n\r\nvariable \"aws_secret_key\" {\r\n  type = string\r\n  description = \"AWS secret key\"\r\n}\r\n\r\nvariable \"aws_region\" {\r\n  type = string\r\n  description = \"AWS region\"\r\n}\r\n\r\n################################################\r\n# Get latest Windows Server AMI with Terraform #\r\n################################################\r\n\r\n# Get latest Windows Server 2012R2 AMI\r\ndata \"aws_ami\" \"windows-2012-r2\" {\r\n  most_recent = true\r\n  owners      = [\"amazon\"]\r\n  filter {\r\n    name   = \"name\"\r\n    values = [\"Windows_Server-2012-R2_RTM-English-64Bit-Base-*\"]\r\n  }\r\n}\r\n\r\n# Get latest Windows Server 2016 AMI\r\ndata \"aws_ami\" \"windows-2016\" {\r\n  most_recent = true\r\n  owners      = [\"amazon\"]\r\n  filter {\r\n    name   = \"name\"\r\n    values = [\"Windows_Server-2016-English-Full-Base*\"]\r\n  }\r\n}\r\n\r\n# Get latest Windows Server 2019 AMI\r\ndata \"aws_ami\" \"windows-2019\" {\r\n  most_recent = true\r\n  owners      = [\"amazon\"]\r\n  filter {\r\n    name   = \"name\"\r\n    values = [\"Windows_Server-2019-English-Full-Base*\"]\r\n  }\r\n}\r\n\r\n# Get latest Windows Server 2022 AMI\r\ndata \"aws_ami\" \"windows-2022\" {\r\n  most_recent = true\r\n  owners      = [\"amazon\"]\r\n  filter {\r\n    name   = \"name\"\r\n    values = [\"Windows_Server-2022-English-Full-Base*\"]\r\n  }\r\n}\r\n###################################\r\n## Virtual Machine Module - Main ##\r\n###################################\r\n\r\n# Bootstrapping PowerShell Script\r\ndata \"template_file\" \"windows-userdata\" {\r\n  template = <<EOF\r\n<powershell>\r\n# Rename Machine\r\nRename-Computer -NewName \"${var.windows_instance_name}\" -Force;\r\n\r\n# Install IIS\r\nInstall-WindowsFeature -name Web-Server -IncludeManagementTools;\r\n\r\n# Restart machine\r\nshutdown -r -t 10;\r\n</powershell>\r\nEOF\r\n}\r\n\r\n# Create EC2 Instance\r\nresource \"aws_instance\" \"windows-server\" {\r\n  ami                         = data.aws_ami.windows-2019.id\r\n  instance_type               = var.windows_instance_type\r\n  subnet_id                   = aws_subnet.public-subnet.id\r\n  vpc_security_group_ids      = [aws_security_group.aws-windows-sg.id]\r\n  associate_public_ip_address = var.windows_associate_public_ip_address\r\n  source_dest_check           = false\r\n  key_name                    = aws_key_pair.key_pair.key_name\r\n  user_data                   = data.template_file.windows-userdata.rendered\r\n  \r\n  # root disk\r\n  root_block_device {\r\n    volume_size           = var.windows_root_volume_size\r\n    volume_type           = var.windows_root_volume_type\r\n    delete_on_termination = true\r\n    encrypted             = true\r\n  }\r\n\r\n  # extra disk\r\n  ebs_block_device {\r\n    device_name           = \"/dev/xvda\"\r\n    volume_size           = var.windows_data_volume_size\r\n    volume_type           = var.windows_data_volume_type\r\n    encrypted             = true\r\n    delete_on_termination = true\r\n  }\r\n  \r\n  tags = {\r\n    Name        = \"${lower(var.app_name)}-${var.app_environment}-windows-server\"\r\n    Environment = var.app_environment\r\n  }\r\n}\r\n\r\n# Create Elastic IP for the EC2 instance\r\nresource \"aws_eip\" \"windows-eip\" {\r\n  vpc  = true\r\n  tags = {\r\n    Name        = \"${lower(var.app_name)}-${var.app_environment}-windows-eip\"\r\n    Environment = var.app_environment\r\n  }\r\n}\r\n\r\n# Associate Elastic IP to Windows Server\r\nresource \"aws_eip_association\" \"windows-eip-association\" {\r\n  instance_id   = aws_instance.windows-server.id\r\n  allocation_id = aws_eip.windows-eip.id\r\n}\r\n\r\n# Define the security group for the Windows server\r\nresource \"aws_security_group\" \"aws-windows-sg\" {\r\n  name        = \"${lower(var.app_name)}-${var.app_environment}-windows-sg\"\r\n  description = \"Allow incoming connections\"\r\n  vpc_id      = aws_vpc.vpc.id\r\n\r\n  ingress {\r\n    from_port   = 80\r\n    to_port     = 80\r\n    protocol    = \"tcp\"\r\n    cidr_blocks = [\"0.0.0.0/0\"]\r\n    description = \"Allow incoming HTTP connections\"\r\n  }\r\n\r\n  ingress {\r\n    from_port   = 3389\r\n    to_port     = 3389\r\n    protocol    = \"tcp\"\r\n    cidr_blocks = [\"0.0.0.0/0\"]\r\n    description = \"Allow incoming RDP connections\"\r\n  }\r\n\r\n  egress {\r\n    from_port   = 0\r\n    to_port     = 0\r\n    protocol    = \"-1\"\r\n    cidr_blocks = [\"0.0.0.0/0\"]\r\n  }\r\n\r\n  tags = {\r\n    Name        = \"${lower(var.app_name)}-${var.app_environment}-windows-sg\"\r\n    Environment = var.app_environment\r\n  }\r\n}\r\n########################################\r\n## Virtual Machine Module - Variables ##\r\n########################################\r\n\r\nvariable \"windows_instance_type\" {\r\n  type        = string\r\n  description = \"EC2 instance type for Windows Server\"\r\n  default     = \"t2.micro\"\r\n}\r\n\r\nvariable \"windows_associate_public_ip_address\" {\r\n  type        = bool\r\n  description = \"Associate a public IP address to the EC2 instance\"\r\n  default     = true\r\n}\r\n\r\nvariable \"windows_root_volume_size\" {\r\n  type        = number\r\n  description = \"Volumen size of root volumen of Windows Server\"\r\n  default     = \"30\"\r\n}\r\n\r\nvariable \"windows_data_volume_size\" {\r\n  type        = number\r\n  description = \"Volumen size of data volumen of Windows Server\"\r\n  default     = \"10\"\r\n}\r\n\r\nvariable \"windows_root_volume_type\" {\r\n  type        = string\r\n  description = \"Volumen type of root volumen of Windows Server. Can be standard, gp3, gp2, io1, sc1 or st1\"\r\n  default     = \"gp2\"\r\n}\r\n\r\nvariable \"windows_data_volume_type\" {\r\n  type        = string\r\n  description = \"Volumen type of data volumen of Windows Server. Can be standard, gp3, gp2, io1, sc1 or st1\"\r\n  default     = \"gp2\"\r\n}\r\n\r\nvariable \"windows_instance_name\" {\r\n  type        = string\r\n  description = \"EC2 instance name for Windows Server\"\r\n  default     = \"tfwinsrv01\"\r\n}\r\n####################################\r\n## Application Module - Variables ##\r\n####################################\r\n\r\n# Application definition\r\n\r\nvariable \"app_name\" {\r\n  type        = string\r\n  description = \"Application name\"\r\n}\r\n\r\nvariable \"app_environment\" {\r\n  type        = string\r\n  description = \"Application environment\"\r\n}\r\n#####################\r\n## Key Pair - Main ##\r\n#####################\r\n\r\n# Generates a secure private key and encodes it as PEM\r\nresource \"tls_private_key\" \"key_pair\" {\r\n  algorithm = \"RSA\"\r\n  rsa_bits  = 4096\r\n}\r\n\r\n# Create the Key Pair\r\nresource \"aws_key_pair\" \"key_pair\" {\r\n  key_name   = \"${lower(var.app_name)}-${lower(var.app_environment)}-windows-${lower(var.aws_region)}\"  \r\n  public_key = tls_private_key.key_pair.public_key_openssh\r\n}\r\n\r\n# Save file\r\nresource \"local_file\" \"ssh_key\" {\r\n  filename = \"${aws_key_pair.key_pair.key_name}.pem\"\r\n  content  = tls_private_key.key_pair.private_key_pem\r\n}\r\n##########################################\r\n## Network Single AZ Public Only - Main ##\r\n##########################################\r\n\r\n# Create the VPC\r\nresource \"aws_vpc\" \"vpc\" {\r\n  cidr_block           = var.vpc_cidr\r\n  enable_dns_hostnames = true\r\n  tags = {\r\n    Name = \"${lower(var.app_name)}-${lower(var.app_environment)}-vpc\"\r\n    Environment = var.app_environment\r\n  }\r\n}\r\n\r\n# Define the public subnet\r\nresource \"aws_subnet\" \"public-subnet\" {\r\n  vpc_id            = aws_vpc.vpc.id\r\n  cidr_block        = var.public_subnet_cidr\r\n  availability_zone = var.aws_az\r\n  tags = {\r\n    Name = \"${lower(var.app_name)}-${lower(var.app_environment)}-public-subnet\"\r\n    Environment = var.app_environment\r\n  }\r\n}\r\n\r\n# Define the internet gateway\r\nresource \"aws_internet_gateway\" \"gw\" {\r\n  vpc_id = aws_vpc.vpc.id\r\n  tags = {\r\n    Name = \"${lower(var.app_name)}-${lower(var.app_environment)}-igw\"\r\n    Environment = var.app_environment\r\n  }\r\n}\r\n\r\n# Define the public route table\r\nresource \"aws_route_table\" \"public-rt\" {\r\n  vpc_id = aws_vpc.vpc.id\r\n  route {\r\n    cidr_block = \"0.0.0.0/0\"\r\n    gateway_id = aws_internet_gateway.gw.id\r\n  }\r\n  tags = {\r\n    Name = \"${lower(var.app_name)}-${lower(var.app_environment)}-public-subnet-rt\"\r\n    Environment = var.app_environment\r\n  }\r\n}\r\n\r\n# Assign the public route table to the public subnet\r\nresource \"aws_route_table_association\" \"public-rt-association\" {\r\n  subnet_id      = aws_subnet.public-subnet.id\r\n  route_table_id = aws_route_table.public-rt.id\r\n}\r\n##############################################\r\n## Network Single AZ Public Only - Variables #\r\n##############################################\r\n\r\n# AWS AZ\r\nvariable \"aws_az\" {\r\n  type        = string\r\n  description = \"AWS AZ\"\r\n  default     = \"eu-west-1c\"\r\n}\r\n\r\n# VPC Variables\r\nvariable \"vpc_cidr\" {\r\n  type        = string\r\n  description = \"CIDR for the VPC\"\r\n  default     = \"10.1.64.0/18\"\r\n}\r\n\r\n# Subnet Variables\r\nvariable \"public_subnet_cidr\" {\r\n  type        = string\r\n  description = \"CIDR for the public subnet\"\r\n  default     = \"10.1.64.0/24\"\r\n}"}]}
{"messages": [{"role": "user", "content": "Create a local file named `out.txt` with the content \"Hello, world!\". Create a Google Compute address named `pihole-address`. Create a Google Compute instance called `pihole` configured with the specified machine type and boot disk image. Write the static IP address of the pihole to a local file named `ip_address.txt`. Ensure to configure the Google provider with the appropriate project, region, and credentials."}, {"role": "assistant", "content": "\n#File: resource.tf\nresource \"local_file\" \"test\" {\n    content  = \"Hello, world!\"\n    filename = \"${path.module}/out.txt\"\n}\n#File: instance.tf\nresource \"google_compute_instance\" \"pihole\" {\n  name         = \"pihole\"\n  machine_type = \"f1-micro\"\n  zone         = \"us-east1-c\"\n\n  boot_disk {\n    initialize_params {\n      image = var.image\n    }\n  }\n\n  network_interface {\n    network = \"default\"\n    access_config {\n      nat_ip = var.ipv4_address\n    }\n  }\n}\n\n#File: network.tf\nresource \"google_compute_address\" \"ip_address\" {\n  name = \"pihole-address\"\n}\n\noutput \"ip_address\" {\n  value       = google_compute_address.ip_address.address\n  description = \"static ip for the pihole\"\n}\n\nresource \"local_file\" \"ip_address_output\" {\n    content  = google_compute_address.ip_address.address\n    filename = \"${path.module}/ip_address.txt\"\n}\n\n#File: provider.tf\nterraform {\n  required_providers {\n    google = {\n      source  = \"hashicorp/google\"\n      version = \"4.32.0\"\n    }\n    google-beta = {\n      source  = \"hashicorp/google-beta\"\n      version = \"4.32.0\"\n    }\n  }\n}\n\nprovider \"google\" {\n  project = var.project\n  region  = var.region\n  credentials = var.credentials\n}\n\nprovider \"google-beta\" {\n  project = var.project\n  region  = var.region\n  credentials = var.credentials\n}\n\n#File: variables.tf\nvariable \"project\" {\n  type = string\n}\n\nvariable \"region\" {\n  type    = string\n  default = \"us-east1\"\n}\n\nvariable \"credentials\" {\n  type      = string\n  sensitive = true\n}\n\nvariable \"image\" {\n  type = string\n  default = \"\"\n}\n\nvariable \"ipv4_address\" {\n  type = string\n  default = \"\"\n}\n"}]}
{"messages": [{"role":"user","content":"Define a data source aws_iam_policy_document named env_deployer that creates an IAM policy allowing the iam:GetRole action on a specified role ARN. The policy is dynamically generated using the ops_role_arn variable, which is assumed to be the ARN of an operational IAM role. The resulting policy document is output as JSON, enabling its reuse in other resources or modules."},{"role":"assistant","content":"data \"aws_iam_policy_document\" \"env_deployer\" {\r\n  statement {\r\n    actions   = [\"iam:GetRole\"]\r\n    resources = [var.ops_role_arn]\r\n  }\r\n}\r\n\r\nvariable \"account_id\" {}\r\nvariable \"ops_role_arn\" {}\r\nvariable \"region\" {}\r\n\r\noutput \"json\" {\r\n  value = data.aws_iam_policy_document.env_deployer.json\r\n}\r\n"}]}
{"messages": [{"role":"user","content":"Set up a high-availability AWS infrastructure with a VPC, public and private subnets across two availability zones, NAT gateways for private internet access, and an Application Load Balancer (ALB) for routing traffic. Include an Auto Scaling Group (ASG) behind the ALB, an EFS file system with mount targets in private subnets, and an S3 bucket for storage. Security groups and routing are configured to enable secure communication between components and access to the internet where needed."},{"role":"assistant","content":"locals {\r\n  common_tags = {\r\n    env      = \"Examples\"\r\n    archUUID = \"4f0dc4bd-6ed1-4426-b04e-da7a424bd0f3\"\r\n  }\r\n}\r\n\r\nresource \"aws_vpc\" \"main\" {\r\n  cidr_block = \"10.0.0.0/16\"\r\n\r\n  tags = merge(local.common_tags, {\r\n    Name = \"main\"\r\n  })\r\n}\r\n\r\nresource \"aws_internet_gateway\" \"igw\" {\r\n  vpc_id = aws_vpc.main.id\r\n\r\n  tags = merge(local.common_tags, {\r\n    Name = \"igw\"\r\n  })\r\n}\r\n\r\nresource \"aws_eip\" \"nat_eip_1\" {\r\n  tags = merge(local.common_tags, {\r\n    Name = \"nat_eip_1\"\r\n  })\r\n}\r\n\r\nresource \"aws_eip\" \"nat_eip_2\" {\r\n  tags = merge(local.common_tags, {\r\n    Name = \"nat_eip_2\"\r\n  })\r\n}\r\n\r\nresource \"aws_nat_gateway\" \"nat_gw_1\" {\r\n  subnet_id = aws_subnet.public_subnet_1.id\r\n  allocation_id = aws_eip.nat_eip_1.id\r\n\r\n  tags = merge(local.common_tags, {\r\n    Name = \"nat_gw_1\"\r\n  })\r\n}\r\n\r\nresource \"aws_nat_gateway\" \"nat_gw_2\" {\r\n  subnet_id = aws_subnet.public_subnet_2.id\r\n  allocation_id = aws_eip.nat_eip_2.id\r\n\r\n  tags = merge(local.common_tags, {\r\n    Name = \"nat_gw_2\"\r\n  })\r\n}\r\n\r\nresource \"aws_lb\" \"alb\" {\r\n  name               = \"enterprise-alb\"\r\n  internal           = false\r\n  load_balancer_type = \"application\"\r\n  subnets            = [aws_subnet.public_subnet_1.id, aws_subnet.public_subnet_2.id]\r\n\r\n  tags = merge(local.common_tags, {\r\n    Name = \"alb\"\r\n  })\r\n}\r\n\r\nresource \"aws_security_group\" \"web_sg\" {\r\n  name        = \"web_sg\"\r\n  description = \"Security group for web servers\"\r\n  vpc_id      = aws_vpc.main.id\r\n\r\n  tags = merge(local.common_tags, {\r\n    Name = \"web_sg\"\r\n  })\r\n}\r\n\r\nresource \"aws_security_group_rule\" \"web_sg_rule\" {\r\n  security_group_id = aws_security_group.web_sg.id\r\n\r\n  type        = \"ingress\"\r\n  from_port   = 80\r\n  to_port     = 80\r\n  protocol    = \"tcp\"\r\n  cidr_blocks = [\"0.0.0.0/0\"]\r\n}\r\n\r\nresource \"aws_subnet\" \"public_subnet_1\" {\r\n  vpc_id            = aws_vpc.main.id\r\n  cidr_block        = \"10.0.1.0/24\"\r\n  availability_zone = \"us-east-1a\"\r\n\r\n  tags = merge(local.common_tags, {\r\n    Name = \"public_subnet_1\"\r\n  })\r\n}\r\n\r\nresource \"aws_subnet\" \"public_subnet_2\" {\r\n  vpc_id            = aws_vpc.main.id\r\n  cidr_block        = \"10.0.2.0/24\"\r\n  availability_zone = \"us-east-1b\"\r\n\r\n  tags = merge(local.common_tags, {\r\n    Name = \"public_subnet_2\"\r\n  })\r\n}\r\n\r\nresource \"aws_subnet\" \"private_subnet_1\" {\r\n  vpc_id            = aws_vpc.main.id\r\n  cidr_block        = \"10.0.3.0/24\"\r\n  availability_zone = \"us-east-1a\"\r\n\r\n}\r\n\r\nresource \"aws_subnet\" \"private_subnet_2\" {\r\n  vpc_id            = aws_vpc.main.id\r\n  cidr_block        = \"10.0.4.0/24\"\r\n  availability_zone = \"us-east-1b\"\r\n\r\n  tags = merge(local.common_tags, {\r\n    Name = \"private_subnet_2\"\r\n  })\r\n}\r\n\r\nresource \"aws_route_table\" \"public_rt\" {\r\n  vpc_id = aws_vpc.main.id\r\n\r\n  tags = merge(local.common_tags, {\r\n    Name = \"public_rt\"\r\n  })\r\n}\r\n\r\nresource \"aws_route\" \"public_route\" {\r\n  route_table_id         = aws_route_table.public_rt.id\r\n  destination_cidr_block = \"0.0.0.0/0\"\r\n  gateway_id             = aws_internet_gateway.igw.id\r\n}\r\n\r\nresource \"aws_route_table_association\" \"public_rt_assoc_1\" {\r\n  subnet_id      = aws_subnet.public_subnet_1.id\r\n  route_table_id = aws_route_table.public_rt.id\r\n}\r\n\r\nresource \"aws_route_table_association\" \"public_rt_assoc_2\" {\r\n  subnet_id      = aws_subnet.public_subnet_2.id\r\n  route_table_id = aws_route_table.public_rt.id\r\n}\r\n\r\nresource \"aws_autoscaling_group\" \"asg\" {\r\n  name_prefix           = \"enterprise-asg-\"\r\n  max_size              = 5\r\n  min_size              = 2\r\n  desired_capacity      = 2\r\n  health_check_type     = \"ELB\"\r\n  health_check_grace_period = 300\r\n  force_delete          = true\r\n  launch_configuration  = aws_launch_configuration.lc.id\r\n  vpc_zone_identifier   = [aws_subnet.private_subnet_1.id, aws_subnet.private_subnet_2.id]\r\n\r\n  tag {\r\n    key                 = \"Name\"\r\n    value               = \"enterprise-asg\"\r\n    propagate_at_launch = true\r\n  }\r\n\r\n}\r\n\r\nresource \"aws_launch_configuration\" \"lc\" {\r\n  name_prefix     = \"enterprise-lc-\"\r\n  image_id        = \"ami-0c94855ba95b798c7\" # This is an example Amazon Linux 2 AMI ID; replace with the desired AMI ID\r\n  instance_type   = \"t2.micro\"\r\n  security_groups = [aws_security_group.web_sg.id]\r\n\r\n  lifecycle {\r\n    create_before_destroy = true\r\n  }\r\n}\r\n\r\nresource \"aws_lb_target_group\" \"alb_tg\" {\r\n  name     = \"enterprise-tg\"\r\n  port     = 80\r\n  protocol = \"HTTP\"\r\n  vpc_id   = aws_vpc.main.id\r\n\r\n  health_check {\r\n    enabled             = true\r\n    interval            = 30\r\n    path                = \"/\"\r\n    timeout             = 5\r\n    healthy_threshold   = 3\r\n    unhealthy_threshold = 3\r\n  }\r\n}\r\n\r\nresource \"aws_lb_listener\" \"alb_listener\" {\r\n  load_balancer_arn = aws_lb.alb.arn\r\n  port              = 80\r\n  protocol          = \"HTTP\"\r\n\r\n  default_action {\r\n    type             = \"forward\"\r\n    target_group_arn = aws_lb_target_group.alb_tg.arn\r\n  }\r\n}\r\n\r\nresource \"aws_s3_bucket\" \"s3_bucket\" {\r\n  tags = merge(local.common_tags, {\r\n    Name = \"enterprise-s3-bucket\"\r\n  })\r\n}\r\n\r\nresource \"aws_efs_file_system\" \"efs\" {\r\n  performance_mode      = \"generalPurpose\"\r\n  throughput_mode       = \"bursting\"\r\n  encrypted             = true\r\n\r\n  tags = merge(local.common_tags, {\r\n    Name = \"enterprise-efs\"\r\n  })\r\n}\r\n\r\nresource \"aws_efs_mount_target\" \"efs_mount_target_1\" {\r\n  file_system_id  = aws_efs_file_system.efs.id\r\n  subnet_id       = aws_subnet.private_subnet_1.id\r\n  security_groups = [aws_security_group.efs_sg.id]\r\n}\r\n\r\nresource \"aws_efs_mount_target\" \"efs_mount_target_2\" {\r\n  file_system_id  = aws_efs_file_system.efs.id\r\n  subnet_id       = aws_subnet.private_subnet_2.id\r\n  security_groups = [aws_security_group.efs_sg.id]\r\n}\r\n\r\nresource \"aws_security_group\" \"efs_sg\" {\r\n  name        = \"efs_sg\"\r\n  description = \"Security group for EFS\"\r\n  vpc_id      = aws_vpc.main.id\r\n\r\n  tags = merge(local.common_tags, {\r\n    Name = \"efs_sg\"\r\n  })\r\n}\r\n\r\nresource \"aws_security_group_rule\" \"efs_sg_rule\" {\r\n  security_group_id = aws_security_group.efs_sg.id\r\n\r\n  type        = \"ingress\"\r\n  from_port   = 2049\r\n  to_port     = 2049\r\n  protocol    = \"tcp\"\r\n  cidr_blocks = [\"10.0.0.0/8\"] # Replace with the required CIDR blocks\r\n}"}]}
{"messages": [{"role": "user", "content": "Create a data source for the Google Compute image using the Ubuntu 20.04 LTS family. Define a Google Compute instance resource with a specified name pattern and machine type, ensuring the boot disk uses the previously declared image. Configure the instance to count according to the variable `node_count`, and include a network interface with public IP access. Output the public IP addresses of the created VMs for easy access. Set up the Google provider with necessary configuration options to authenticate and specify the required Terraform version."}, {"role": "assistant", "content": "\n#File: data.tf\n###############################################################################\n# data.tf\n#\n# Contains any data sources\n###############################################################################\n\ndata \"google_compute_image\" \"ubuntu_image\" {\n  family  = \"ubuntu-2404-lts-amd64\"\n  project = \"ubuntu-os-cloud\"\n}\n\n#File: main.tf\n###############################################################################\n# main.tf\n#\n# Contains resources\n###############################################################################\nresource \"google_compute_instance\" \"simple_vm\" {\n  # checkov:skip=CKV_GCP_30: ADD REASON\n  # checkov:skip=CKV_GCP_32: ADD REASON\n  # checkov:skip=CKV_GCP_38: ADD REASON\n  # checkov:skip=CKV_GCP_39: ADD REASON\n  # checkov:skip=CKV_GCP_40: ADD REASON\n  count        = var.node_count\n  name         = \"${var.prefix}-${count.index}\"\n  machine_type = var.machine_type\n\n  boot_disk {\n    initialize_params {\n      image = data.google_compute_image.ubuntu_image.self_link\n    }\n  }\n\n  network_interface {\n    network = \"default\"\n    access_config {\n      # Ephemeral public IP\n    }\n  }\n}\n\n#File: outputs.tf\n############################\n# outputs.tf\n#\n# Module outputs\n############################\n\noutput \"public_ip\" {\n  value       = google_compute_instance.simple_vm[*].network_interface[*].access_config[*].nat_ip\n  description = \"Public IP address of the VMs\"\n}\n\n#File: providers.tf\n###############################################################################\n# providers.tf\n#\n# Provider blocks\n###############################################################################\n\nprovider \"google\" {\n  # Configuration options\n  # Environment variables needed for auth\n  # GOOGLE_OAUTH_ACCESS_TOKEN=\"...\"\n  # GOOGLE_PROJECT=\"...\"\n  # GOOGLE_REGION=\"...\"\n  # GOOGLE_ZONE=\"...\"\n}\n\n#File: terraform.tf\n###############################################################################\n# terraform.tf\n#\n# Terraform block\n###############################################################################\n\nterraform {\n  required_version = \"~> 1.0\"\n  required_providers {\n    google = {\n      source  = \"hashicorp/google\"\n      version = \"~>4.55\"\n    }\n  }\n}\n\n#File: variables.tf\n###############################################################################\n# variables.tf\n#\n# Variable definitions\n###############################################################################\n\n# Required Variables (no default values)\nvariable \"prefix\" {\n  type        = string\n  description = \"Prefix for VM names\"\n}\n\n# Variables with Defaults\nvariable \"machine_type\" {\n  type        = string\n  description = \"Machine type for VMs\"\n  default     = \"f1-micro\"\n}\n\nvariable \"node_count\" {\n  type        = number\n  description = \"Number of VMs to create\"\n  default     = 1\n}\n"}]}
{"messages": [{"role": "user", "content": "Create a random pet name for the resource group using a specified prefix. Set up an Azure resource group in a designated location. Build a virtual network with a specified address space and connect it to the resource group. Establish a subnet within the virtual network and create a public IP address. Create a Network Security Group with an inbound SSH rule, configure a network interface, and deploy a Linux virtual machine with SSH key authentication for secure access."}, {"role": "assistant", "content": "\n#File: main.tf\nresource \"random_pet\" \"rg-name\" {\n  prefix    = var.resource_group_name_prefix\n}\n\nresource \"azurerm_resource_group\" \"rg\" {\n  name      = random_pet.rg-name.id\n  location  = var.resource_group_location\n}\n\n# Create virtual network\nresource \"azurerm_virtual_network\" \"myterraformnetwork\" {\n  name                = \"myVnet\"\n  address_space       = [\"10.0.0.0/16\"]\n  location            = azurerm_resource_group.rg.location\n  resource_group_name = azurerm_resource_group.rg.name\n}\n\n# Create subnet\nresource \"azurerm_subnet\" \"myterraformsubnet\" {\n  name                 = \"mySubnet\"\n  resource_group_name  = azurerm_resource_group.rg.name\n  virtual_network_name = azurerm_virtual_network.myterraformnetwork.name\n  address_prefixes     = [\"10.0.1.0/24\"]\n}\n\n# Create public IPs\nresource \"azurerm_public_ip\" \"myterraformpublicip\" {\n  name                = \"myPublicIP\"\n  location            = azurerm_resource_group.rg.location\n  resource_group_name = azurerm_resource_group.rg.name\n  allocation_method   = \"Dynamic\"\n}\n\n# Create Network Security Group and rule\nresource \"azurerm_network_security_group\" \"myterraformnsg\" {\n  name                = \"myNetworkSecurityGroup\"\n  location            = azurerm_resource_group.rg.location\n  resource_group_name = azurerm_resource_group.rg.name\n\n  security_rule {\n    name                       = \"SSH\"\n    priority                   = 1001\n    direction                  = \"Inbound\"\n    access                     = \"Allow\"\n    protocol                   = \"Tcp\"\n    source_port_range          = \"*\"\n    destination_port_range     = \"22\"\n    source_address_prefix      = \"*\"\n    destination_address_prefix = \"*\"\n  }\n}\n\n# Create network interface\nresource \"azurerm_network_interface\" \"myterraformnic\" {\n  name                = \"myNIC\"\n  location            = azurerm_resource_group.rg.location\n  resource_group_name = azurerm_resource_group.rg.name\n\n  ip_configuration {\n    name                          = \"myNicConfiguration\"\n    subnet_id                     = azurerm_subnet.myterraformsubnet.id\n    private_ip_address_allocation = \"Dynamic\"\n    public_ip_address_id          = azurerm_public_ip.myterraformpublicip.id\n  }\n}\n\n# Connect the security group to the network interface\nresource \"azurerm_network_interface_security_group_association\" \"example\" {\n  network_interface_id      = azurerm_network_interface.myterraformnic.id\n  network_security_group_id = azurerm_network_security_group.myterraformnsg.id\n}\n\n# Generate random text for a unique storage account name\nresource \"random_id\" \"randomId\" {\n  keepers = {\n    # Generate a new ID only when a new resource group is defined\n    resource_group = azurerm_resource_group.rg.name\n  }\n\n  byte_length = 8\n}\n\n# Create storage account for boot diagnostics\nresource \"azurerm_storage_account\" \"mystorageaccount\" {\n  name                     = \"diag${random_id.randomId.hex}\"\n  location                 = azurerm_resource_group.rg.location\n  resource_group_name      = azurerm_resource_group.rg.name\n  account_tier             = \"Standard\"\n  account_replication_type = \"LRS\"\n}\n\n# Create (and display) an SSH key\nresource \"tls_private_key\" \"example_ssh\" {\n  algorithm = \"RSA\"\n  rsa_bits  = 4096\n}\n\n# Create virtual machine\nresource \"azurerm_linux_virtual_machine\" \"myterraformvm\" {\n  name                  = \"myVM\"\n  location              = azurerm_resource_group.rg.location\n  resource_group_name   = azurerm_resource_group.rg.name\n  network_interface_ids = [azurerm_network_interface.myterraformnic.id]\n  size                  = \"Standard_DS1_v2\"\n\n  os_disk {\n    name                 = \"myOsDisk\"\n    caching              = \"ReadWrite\"\n    storage_account_type = \"Premium_LRS\"\n  }\n\n  source_image_reference {\n    publisher = \"Canonical\"\n    offer     = \"UbuntuServer\"\n    sku       = \"18.04-LTS\"\n    version   = \"latest\"\n  }\n\n  computer_name                   = \"myvm\"\n  admin_username                  = \"azureuser\"\n  disable_password_authentication = true\n\n  admin_ssh_key {\n    username   = \"azureuser\"\n    public_key = tls_private_key.example_ssh.public_key_openssh\n  }\n\n  boot_diagnostics {\n    storage_account_uri = azurerm_storage_account.mystorageaccount.primary_blob_endpoint\n  }\n}\n\n#File: output.tf\noutput \"resource_group_name\" {\n  value = azurerm_resource_group.rg.name\n}\n\noutput \"public_ip_address\" {\n  value = azurerm_linux_virtual_machine.myterraformvm.public_ip_address\n}\n\noutput \"tls_private_key\" {\n  value     = tls_private_key.example_ssh.private_key_pem\n  sensitive = true\n}\n#File: variables.tf\nvariable \"resource_group_location\" {\n  default       = \"eastus\"\n  description   = \"Location of the resource group.\"\n}\n\nvariable \"resource_group_name_prefix\" {\n  default       = \"rg-\"\n  description   = \"Prefix of the resource group name that's combined with a random ID so name is unique in your Azure subscription.\"\n}\n#File: providers.tf\nterraform {\n\n  required_version = \">=0.12\"\n\n  required_providers {\n    azurerm = {\n      source = \"hashicorp/azurerm\"\n      version = \"~>2.0\"\n    }\n  }\n}\n\nprovider \"azurerm\" {\n  features {}\n}"}]}
{"messages": [{"role": "user", "content": "Create an Azure Resource Group using the specified name and location. Build a Virtual Network with a defined address space and associate it with the Resource Group. Establish a Subnet within the Virtual Network and assign an address prefix. Configure a Public IP with static allocation and link it to the Resource Group. Set up a Network Security Group with rules for SSH, HTTP, and HTTPS traffic, and create a Linux Virtual Machine that utilizes the Network Interface connected to this Public IP."}, {"role": "assistant", "content": "\n#File: main.tf\nprovider \"azurerm\" {\n  features {}\n}\n\nresource \"azurerm_resource_group\" \"main\" {\n  name     = var.resource_group_name\n  location = var.location\n}\n\nresource \"azurerm_virtual_network\" \"vnet\" {\n  name                = \"${var.project_prefix}-vnet\"\n  address_space       = [\"10.0.0.0/16\"]\n  location            = var.location\n  resource_group_name = azurerm_resource_group.main.name\n}\n\nresource \"azurerm_subnet\" \"subnet\" {\n  name                 = \"${var.project_prefix}-subnet\"\n  resource_group_name  = azurerm_resource_group.main.name\n  virtual_network_name = azurerm_virtual_network.vnet.name\n  address_prefixes     = [\"10.0.1.0/24\"]\n}\n\nresource \"azurerm_public_ip\" \"public_ip\" {\n  name                = \"${var.project_prefix}-ip\"\n  location            = var.location\n  resource_group_name = azurerm_resource_group.main.name\n  allocation_method   = \"Static\"\n  sku                 = \"Basic\"\n}\n\nresource \"azurerm_network_security_group\" \"nsg\" {\n  name                = \"${var.project_prefix}-nsg\"\n  location            = var.location\n  resource_group_name = azurerm_resource_group.main.name\n\n  security_rule {\n    name                       = \"SSH\"\n    priority                   = 1001\n    direction                  = \"Inbound\"\n    access                     = \"Allow\"\n    protocol                   = \"Tcp\"\n    source_port_range          = \"*\"\n    destination_port_range     = \"22\"\n    source_address_prefix      = \"*\"\n    destination_address_prefix = \"*\"\n  }\n\n  security_rule {\n    name                       = \"HTTP\"\n    priority                   = 1002\n    direction                  = \"Inbound\"\n    access                     = \"Allow\"\n    protocol                   = \"Tcp\"\n    source_port_range          = \"*\"\n    destination_port_range     = \"80\"\n    source_address_prefix      = \"*\"\n    destination_address_prefix = \"*\"\n  }\n\n  security_rule {\n    name                       = \"HTTPS\"\n    priority                   = 1003\n    direction                  = \"Inbound\"\n    access                     = \"Allow\"\n    protocol                   = \"Tcp\"\n    source_port_range          = \"*\"\n    destination_port_range     = \"443\"\n    source_address_prefix      = \"*\"\n    destination_address_prefix = \"*\"\n  }\n}\n\nresource \"azurerm_network_interface\" \"nic\" {\n  name                = \"${var.project_prefix}-nic\"\n  location            = var.location\n  resource_group_name = azurerm_resource_group.main.name\n\n  ip_configuration {\n    name                          = \"internal\"\n    subnet_id                     = azurerm_subnet.subnet.id\n    private_ip_address_allocation = \"Dynamic\"\n    public_ip_address_id          = azurerm_public_ip.public_ip.id\n  }\n}\n\nresource \"azurerm_linux_virtual_machine\" \"vm\" {\n  name                  = \"${var.project_prefix}-vm\"\n  resource_group_name   = azurerm_resource_group.main.name\n  location              = var.location\n  size                  = \"Standard_B1s\"\n  admin_username        = \"devops\"\n  network_interface_ids = [azurerm_network_interface.nic.id]\n  disable_password_authentication = true\n\n  admin_ssh_key {\n    username   = \"devops\"\n    public_key = file(var.public_ssh_key_path)\n  }\n\n  os_disk {\n    caching              = \"ReadWrite\"\n    storage_account_type = \"Standard_LRS\"\n  }\n\n  source_image_reference {\n    publisher = \"Canonical\"\n    offer     = \"0001-com-ubuntu-server-jammy\"\n    sku       = \"22_04-lts-gen2\"\n    version   = \"latest\"\n  }\n}\n\n#File: outputs.tf\noutput \"public_ip\" {\n  value = azurerm_public_ip.public_ip.ip_address\n}\n\noutput \"storage_account_name\" {\n  value = azurerm_storage_account.tfstate.name\n}\n\noutput \"container_name\" {\n  value = azurerm_storage_container.tfstate.name\n}\n\n#File: state-backend.tf\nresource \"azurerm_storage_account\" \"tfstate\" {\n  name                     = \"devopsstaticsitetfstate\"\n  resource_group_name      = azurerm_resource_group.main.name\n  location                 = azurerm_resource_group.main.location\n  account_tier             = \"Standard\"\n  account_replication_type = \"LRS\"\n\n  blob_properties {\n    versioning_enabled = true\n  }\n\n  tags = {\n    environment = \"dev\"\n  }\n}\n\nresource \"azurerm_storage_container\" \"tfstate\" {\n  name                  = \"tfstate\"\n  storage_account_name  = azurerm_storage_account.tfstate.name\n  container_access_type = \"private\"\n}\n\n#File: variables.tf\nvariable \"project_prefix\" {}\nvariable \"resource_group_name\" {}\nvariable \"location\" {}\nvariable \"public_ssh_key_path\" {}\n"}]}
{"messages": [{"role": "user", "content": "Create a new Azure virtual network using Terraform, setting its name and address space from variables. Establish peering between the hub and spoke virtual networks, allowing forwarded traffic. Define two subnets within the hub, one for internal and another for external use, specifying their address prefixes and names through variables. Implement route tables for each subnet, associating them with the necessary routing configurations. Finally, configure network security groups for both the internal and external subnets, adding relevant inbound and outbound security rules."}, {"role": "assistant", "content": "\n#File: hub-network.tf\nresource \"azurerm_virtual_network\" \"hub_virtual_network\" {\n  name                = \"hub_virtual_network\"\n  address_space       = [var.hub-virtual-network_address_prefix]\n  location            = azurerm_resource_group.azure_resource_group.location\n  resource_group_name = azurerm_resource_group.azure_resource_group.name\n}\n\nresource \"azurerm_virtual_network_peering\" \"hub-to-spoke_virtual_network_peering\" {\n  name                      = \"hub-to-spoke_virtual_network_peering\"\n  resource_group_name       = azurerm_resource_group.azure_resource_group.name\n  virtual_network_name      = azurerm_virtual_network.hub_virtual_network.name\n  remote_virtual_network_id = azurerm_virtual_network.spoke_virtual_network.id\n  allow_forwarded_traffic   = true\n  allow_gateway_transit     = true\n  depends_on                = [azurerm_virtual_network.hub_virtual_network, azurerm_virtual_network.spoke_virtual_network]\n}\n\nresource \"azurerm_subnet\" \"hub-external_subnet\" {\n  address_prefixes     = [var.hub-external-subnet_prefix]\n  name                 = var.hub-external-subnet_name\n  resource_group_name  = azurerm_resource_group.azure_resource_group.name\n  virtual_network_name = azurerm_virtual_network.hub_virtual_network.name\n}\n\nresource \"azurerm_subnet\" \"hub-internal_subnet\" {\n  address_prefixes     = [var.hub-internal-subnet_prefix]\n  name                 = var.hub-internal-subnet_name\n  resource_group_name  = azurerm_resource_group.azure_resource_group.name\n  virtual_network_name = azurerm_virtual_network.hub_virtual_network.name\n}\n\nresource \"azurerm_route_table\" \"hub_route_table\" {\n  name                = \"hub_route_table\"\n  location            = azurerm_resource_group.azure_resource_group.location\n  resource_group_name = azurerm_resource_group.azure_resource_group.name\n  route {\n    name           = \"default\"\n    address_prefix = \"0.0.0.0/0\"\n    next_hop_type  = \"Internet\"\n  }\n}\n\nresource \"azurerm_subnet_route_table_association\" \"hub-internal-routing-table_association\" {\n  subnet_id      = azurerm_subnet.hub-internal_subnet.id\n  route_table_id = azurerm_route_table.hub_route_table.id\n}\n\nresource \"azurerm_subnet_route_table_association\" \"hub-external-route-table_association\" {\n  subnet_id      = azurerm_subnet.hub-external_subnet.id\n  route_table_id = azurerm_route_table.hub_route_table.id\n}\n\nresource \"azurerm_network_security_group\" \"hub-external_network_security_group\" { #tfsec:ignore:azure-network-no-public-ingress\n  name                = \"hub-external_network_security_group\"\n  location            = azurerm_resource_group.azure_resource_group.location\n  resource_group_name = azurerm_resource_group.azure_resource_group.name\n  security_rule {\n    name                       = \"MGMT_rule\"\n    priority                   = 100\n    direction                  = \"Inbound\"\n    access                     = var.hub-nva-management-action\n    protocol                   = \"Tcp\"\n    source_port_range          = \"*\"\n    destination_port_range     = local.vm-image[var.hub-nva-image].management-port\n    source_address_prefix      = \"*\"\n    destination_address_prefix = var.hub-nva-management-ip\n  }\n  security_rule {\n    name                       = \"VIP_rule\"\n    priority                   = 101\n    direction                  = \"Inbound\"\n    access                     = \"Allow\"\n    protocol                   = \"Tcp\"\n    source_port_range          = \"*\"\n    destination_port_ranges    = var.spoke-k8s-node-pool-gpu == true ? [\"80\", \"443\", \"8080\", \"11434\"] : [\"80\", \"443\"] #checkov:skip=CKV_AZURE_160: Allow HTTP redirects\n    source_address_prefix      = \"*\"\n    destination_address_prefix = var.hub-nva-vip\n  }\n}\n\nresource \"azurerm_subnet_network_security_group_association\" \"hub-external-subnet-network-security-group_association\" {\n  subnet_id                 = azurerm_subnet.hub-external_subnet.id\n  network_security_group_id = azurerm_network_security_group.hub-external_network_security_group.id\n}\n\nresource \"azurerm_network_security_group\" \"hub-internal_network_security_group\" {\n  name                = \"hub-internal_network_security_group\"\n  location            = azurerm_resource_group.azure_resource_group.location\n  resource_group_name = azurerm_resource_group.azure_resource_group.name\n  security_rule {\n    name                    = \"aks-node_to_internet_rule\"\n    priority                = 100\n    direction               = \"Inbound\"\n    access                  = \"Allow\"\n    protocol                = \"Tcp\"\n    source_port_range       = \"*\"\n    destination_port_ranges = [\"80\", \"443\"]\n    #source_address_prefix      = var.spoke-aks-node-ip\n    source_address_prefix      = \"10.0.0.0/8\"\n    destination_address_prefix = \"*\"\n  }\n  security_rule {\n    name                   = \"icmp_to_google-dns_rule\"\n    priority               = 101\n    direction              = \"Inbound\"\n    access                 = \"Allow\"\n    protocol               = \"Icmp\"\n    source_port_range      = \"*\"\n    destination_port_range = \"*\"\n    #source_address_prefix      = var.spoke-aks-node-ip\n    source_address_prefix = \"*\"\n    #destination_address_prefix = var.spoke-check-internet-up-ip\n    destination_address_prefix = \"*\"\n  }\n  security_rule {\n    name                    = \"outbound-http_rule\"\n    priority                = 102\n    direction               = \"Outbound\"\n    access                  = \"Allow\"\n    protocol                = \"Tcp\"\n    source_port_range       = \"*\"\n    destination_port_ranges = [\"80\", \"81\"]\n    source_address_prefix   = \"*\"\n    #destination_address_prefix = var.spoke-aks-node-ip\n    destination_address_prefix = \"*\"\n  }\n}\n\nresource \"azurerm_subnet_network_security_group_association\" \"hub-internal-subnet-network-security-group_association\" {\n  subnet_id                 = azurerm_subnet.hub-internal_subnet.id\n  network_security_group_id = azurerm_network_security_group.hub-internal_network_security_group.id\n}\n\nresource \"azurerm_public_ip\" \"hub-nva-management_public_ip\" {\n  name                = \"hub-nva-management_public_ip\"\n  location            = azurerm_resource_group.azure_resource_group.location\n  resource_group_name = azurerm_resource_group.azure_resource_group.name\n  allocation_method   = \"Static\"\n  sku                 = \"Standard\"\n  domain_name_label   = \"${random_pet.admin_username.id}-management\"\n}\n\nresource \"azurerm_public_ip\" \"hub-nva-vip_public_ip\" {\n  name                = \"hub-nva-vip_public_ip\"\n  location            = azurerm_resource_group.azure_resource_group.location\n  resource_group_name = azurerm_resource_group.azure_resource_group.name\n  allocation_method   = \"Static\"\n  sku                 = \"Standard\"\n  domain_name_label   = random_pet.admin_username.id\n}\n\noutput \"etc_host\" {\n  value       = \"sudo sh -c 'echo ${azurerm_public_ip.hub-nva-vip_public_ip.ip_address} www.bankexample.com >> /etc/hosts'\"\n  description = \"The public IP address of the hub NVA.\"\n}\n\nresource \"azurerm_availability_set\" \"hub-nva_availability_set\" {\n  location                     = azurerm_resource_group.azure_resource_group.location\n  resource_group_name          = azurerm_resource_group.azure_resource_group.name\n  name                         = \"hub-nva_availability_set\"\n  platform_fault_domain_count  = 2\n  platform_update_domain_count = 2\n}\n\n#File: hub-nva.tf\nresource \"azurerm_network_interface\" \"hub-nva-external_network_interface\" {\n  name                           = \"hub-nva-external_network_interface\"\n  location                       = azurerm_resource_group.azure_resource_group.location\n  resource_group_name            = azurerm_resource_group.azure_resource_group.name\n  accelerated_networking_enabled = true\n  ip_configuration {\n    name                          = \"hub-nva-external-management_ip_configuration\"\n    primary                       = true\n    private_ip_address_allocation = \"Static\"\n    private_ip_address            = var.hub-nva-management-ip\n    subnet_id                     = azurerm_subnet.hub-external_subnet.id\n    public_ip_address_id          = azurerm_public_ip.hub-nva-management_public_ip.id #checkov:skip=CKV_AZURE_119:Fortigate gets a public IP\n  }\n  ip_configuration {\n    name                          = \"hub-nva-external-vip_configuration\"\n    private_ip_address_allocation = \"Static\"\n    private_ip_address            = var.hub-nva-vip\n    subnet_id                     = azurerm_subnet.hub-external_subnet.id\n    public_ip_address_id          = azurerm_public_ip.hub-nva-vip_public_ip.id #checkov:skip=CKV_AZURE_119:Fortigate gets a public IP\n  }\n}\n\nresource \"azurerm_network_interface\" \"hub-nva-internal_network_interface\" {\n  name                           = \"hub-nva-internal_network_interface\"\n  location                       = azurerm_resource_group.azure_resource_group.location\n  resource_group_name            = azurerm_resource_group.azure_resource_group.name\n  accelerated_networking_enabled = true\n  ip_forwarding_enabled          = true #checkov:skip=CKV_AZURE_118:Fortigate NIC needs IP forwarding.\n  ip_configuration {\n    name                          = \"hub-nva-internal_ip_configuration\"\n    private_ip_address_allocation = \"Static\"\n    private_ip_address            = var.hub-nva-gateway\n    subnet_id                     = azurerm_subnet.hub-internal_subnet.id\n  }\n}\n\nresource \"azurerm_linux_virtual_machine\" \"hub-nva_virtual_machine\" {\n  #checkov:skip=CKV_AZURE_178: Allow Fortigate to present HTTPS login UI instead of SSH\n  #checkov:skip=CKV_AZURE_149: Allow Fortigate to present HTTPS login UI instead of SSH\n  #checkov:skip=CKV_AZURE_1: Allow Fortigate to present HTTPS login UI instead of SSH\n  depends_on                      = [null_resource.marketplace_agreement]\n  name                            = \"hub-nva_virtual_machine\"\n  computer_name                   = \"hub-nva\"\n  availability_set_id             = azurerm_availability_set.hub-nva_availability_set.id\n  admin_username                  = random_pet.admin_username.id\n  disable_password_authentication = false #tfsec:ignore:AVD-AZU-0039\n  admin_password                  = random_password.admin_password.result\n  location                        = azurerm_resource_group.azure_resource_group.location\n  resource_group_name             = azurerm_resource_group.azure_resource_group.name\n  network_interface_ids           = [azurerm_network_interface.hub-nva-external_network_interface.id, azurerm_network_interface.hub-nva-internal_network_interface.id]\n  size                            = local.vm-image[var.hub-nva-image].size\n  allow_extension_operations      = false\n\n  identity {\n    type = \"SystemAssigned\"\n  }\n  os_disk {\n    caching              = \"ReadWrite\"\n    storage_account_type = \"Premium_LRS\"\n    #disk_size_gb         = 256\n  }\n  plan {\n    name      = local.vm-image[var.hub-nva-image].sku\n    product   = local.vm-image[var.hub-nva-image].offer\n    publisher = local.vm-image[var.hub-nva-image].publisher\n  }\n  source_image_reference {\n    offer     = local.vm-image[var.hub-nva-image].offer\n    publisher = local.vm-image[var.hub-nva-image].publisher\n    sku       = local.vm-image[var.hub-nva-image].sku\n    version   = \"latest\"\n  }\n  custom_data = base64encode(\n    templatefile(\"cloud-init/${var.hub-nva-image}.conf\",\n      {\n        VAR-hub-external-subnet-gateway          = var.hub-external-subnet-gateway\n        VAR-spoke-check-internet-up-ip           = var.spoke-check-internet-up-ip\n        VAR-spoke-default-gateway                = cidrhost(var.hub-internal-subnet_prefix, 1)\n        VAR-spoke-virtual-network_address_prefix = var.spoke-virtual-network_address_prefix\n        VAR-spoke-virtual-network_subnet         = cidrhost(var.spoke-virtual-network_address_prefix, 0)\n        VAR-spoke-virtual-network_netmask        = cidrnetmask(var.spoke-virtual-network_address_prefix)\n        VAR-spoke-aks-node-ip                    = var.spoke-aks-node-ip\n        VAR-hub-nva-vip                          = var.hub-nva-vip\n        VAR-admin-username                       = random_pet.admin_username.id\n        VAR-CERTIFICATE                          = tls_self_signed_cert.self_signed_cert.cert_pem\n        VAR-PRIVATEKEY                           = tls_private_key.private_key.private_key_pem\n        VAR-fwb_license_file                     = \"\"\n        VAR-fwb_license_fortiflex                = \"\"\n        VAR-spoke-aks-node-ollama-port           = var.spoke-aks-node-ollama-port\n        VAR-spoke-aks-node-ollama-webui-port     = var.spoke-aks-node-ollama-webui-port\n        VAR-spoke-aks-network                    = var.spoke-aks-subnet_prefix\n      }\n    )\n  )\n}\n\nresource \"azurerm_managed_disk\" \"log_disk\" {\n  name                 = \"hub-nva-log_disk\"\n  location             = azurerm_resource_group.azure_resource_group.location\n  resource_group_name  = azurerm_resource_group.azure_resource_group.name\n  storage_account_type = \"Standard_LRS\"\n  create_option        = \"Empty\"\n  disk_size_gb         = 10\n}\n\nresource \"azurerm_virtual_machine_data_disk_attachment\" \"log_disk\" {\n  managed_disk_id    = azurerm_managed_disk.log_disk.id\n  virtual_machine_id = azurerm_linux_virtual_machine.hub-nva_virtual_machine.id\n  lun                = \"0\"\n  caching            = \"ReadWrite\"\n}\n\n#File: locals.tf\nlocals {\n  vm-image = {\n    \"linux-server\" = {\n      publisher = \"Canonical\"\n      offer     = \"0001-com-ubuntu-server-jammy\"\n      size      = \"Standard_F16s_v2\"\n      #size_gpu     = \"Standard_NC24ads_A100_v4\"\n      size_gpu     = \"Standard_NC6s_v3\"\n      disk_size_gb = \"1024\"\n      sku          = \"22_04-lts-gen2\"\n      version      = \"latest\"\n      zone         = \"2\"\n      terms        = false\n    },\n    \"fortigate\" = {\n      publisher       = \"fortinet\"\n      offer           = \"fortinet_fortigate-vm_v5\"\n      size            = \"Standard_F16s_v2\"\n      version         = \"latest\"\n      sku             = \"fortinet_fg-vm_payg_2023\"\n      management-port = \"443\"\n      terms           = true\n    },\n    \"fortiweb\" = {\n      publisher       = \"fortinet\"\n      offer           = \"fortinet_fortiweb-vm_v5\"\n      size            = \"Standard_F16s_v2\"\n      version         = \"latest\"\n      #sku             = \"fortinet_fw-vm_payg_v3\"\n      sku = \"fortinet_fw-vm_payg_v2\"\n      #sku = \"fortinet_fw-vm\"\n      management-port = \"8443\"\n      terms           = true\n    },\n    \"fortiadc\" = {\n      publisher       = \"fortinet\"\n      offer           = \"fortinet-fortiadc\"\n      size            = \"Standard_F16s_v2\"\n      version         = \"latest\"\n      sku             = \"fortinet-fad-vm_payg-10gbps\"\n      management-port = \"443\"\n      terms           = true\n    },\n    \"aks\" = {\n      version   = \"latest\"\n      terms     = false\n      offer     = \"\"\n      sku       = \"\"\n      publisher = \"\"\n      size      = \"Standard_B8ms\"\n      #gpu-size  = \"Standard_NC6s_v3\" #16GB\n      gpu-size = \"Standard_NC24s_v3\"\n      #gpu-size      = \"Standard_NC4as_T4_v3\" # 16GB\n      #gpu-size      = \"Standard_ND40rs_v2\" # 32 GB vlink\n      #gpu-size      = \"Standard_NC24ads_A100_v4\" # 80GB - not supported by azure-linux\n    }\n  }\n}\n\n#File: main.tf\nresource \"azurerm_resource_group\" \"azure_resource_group\" {\n  #ts:skip=AC_AZURE_0389 in development we allow deletion of resource groups\n  name     = random_pet.admin_username.id\n  location = var.location\n  tags = {\n    Username = var.owner_email\n  }\n  lifecycle {\n    ignore_changes = [\n      tags[\"CreatedOnDate\"],\n    ]\n  }\n}\n\ndata \"external\" \"tenant_default_domain\" {\n  program = [\"sh\", \"-c\", \"az account show --query tenantDefaultDomain --output json | jq -r '{tenantDefaultDomain: .}'\"]\n}\n\noutput \"resource_group_url\" {\n  value       = \"https://portal.azure.com/#@${data.external.tenant_default_domain.result[\"tenantDefaultDomain\"]}/resource${azurerm_resource_group.azure_resource_group.id}\"\n  description = \"URL to access the Azure Resource Group in the Azure Portal\"\n}\n\nresource \"random_pet\" \"admin_username\" {\n  length    = 2\n  separator = \"\"\n}\n\nresource \"random_password\" \"admin_password\" {\n  keepers = {\n    resource_group_name = azurerm_resource_group.azure_resource_group.name\n  }\n  length      = 16\n  min_lower   = 1\n  min_upper   = 1\n  min_numeric = 1\n  #min_special = 1\n  special = false\n}\n\n#File: marketplace-agreement.tf\nresource \"null_resource\" \"marketplace_agreement\" {\n  for_each = local.vm-image\n\n  provisioner \"local-exec\" {\n    command = \"${each.value.terms} && az vm image terms accept --publisher ${each.value.publisher} --offer ${each.value.offer} --plan ${each.value.sku} || true\"\n  }\n\n  # triggers = {\n  #   publisher = each.value.publisher\n  #   offer     = each.value.offer\n  #   sku       = each.value.sku\n  #   terms     = each.value.terms\n  # }\n}\n\n#File: outputs.tf\ndata \"azurerm_public_ip\" \"hub-nva-vip_public_ip\" {\n  name                = azurerm_public_ip.hub-nva-vip_public_ip.name\n  resource_group_name = azurerm_resource_group.azure_resource_group.name\n}\n\ndata \"azurerm_public_ip\" \"hub-nva-management_public_ip\" {\n  name                = azurerm_public_ip.hub-nva-management_public_ip.name\n  resource_group_name = azurerm_resource_group.azure_resource_group.name\n}\n\noutput \"management_fqdn\" {\n  description = \"Management FQDN\"\n  value       = \"https://${data.azurerm_public_ip.hub-nva-management_public_ip.fqdn}:${local.vm-image[var.hub-nva-image].management-port}\"\n\n}\n\noutput \"vip_fqdn\" {\n  description = \"VIP FQDN\"\n  value       = \"https://${data.azurerm_public_ip.hub-nva-vip_public_ip.fqdn}\"\n}\n\noutput \"admin_username\" {\n  description = \"Username for admin account\"\n  value       = random_pet.admin_username.id\n}\n\noutput \"admin_password\" {\n  description = \"Password for admin account\"\n  value       = random_password.admin_password.result\n  sensitive   = true\n}\n\n#File: spoke-network.tf\nresource \"azurerm_virtual_network\" \"spoke_virtual_network\" {\n  name                = \"spoke_virtual_network\"\n  address_space       = [var.spoke-virtual-network_address_prefix]\n  location            = azurerm_resource_group.azure_resource_group.location\n  resource_group_name = azurerm_resource_group.azure_resource_group.name\n}\n\nresource \"azurerm_virtual_network_peering\" \"spoke-to-hub_virtual_network_peering\" {\n  name                      = \"spoke-to-hub_virtual_network_peering\"\n  resource_group_name       = azurerm_resource_group.azure_resource_group.name\n  virtual_network_name      = azurerm_virtual_network.spoke_virtual_network.name\n  remote_virtual_network_id = azurerm_virtual_network.hub_virtual_network.id\n  allow_forwarded_traffic   = true\n  allow_gateway_transit     = true\n  depends_on                = [azurerm_virtual_network.hub_virtual_network, azurerm_virtual_network.spoke_virtual_network]\n}\n\nresource \"azurerm_subnet\" \"spoke_subnet\" {\n  address_prefixes     = [var.spoke-subnet_prefix]\n  name                 = var.spoke-subnet_name\n  resource_group_name  = azurerm_resource_group.azure_resource_group.name\n  virtual_network_name = azurerm_virtual_network.spoke_virtual_network.name\n}\n\nresource \"azurerm_subnet\" \"spoke_aks_subnet\" {\n  address_prefixes     = [var.spoke-aks-subnet_prefix]\n  name                 = var.spoke-aks-subnet_name\n  resource_group_name  = azurerm_resource_group.azure_resource_group.name\n  virtual_network_name = azurerm_virtual_network.spoke_virtual_network.name\n}\n\nresource \"azurerm_route_table\" \"spoke_route_table\" {\n  name                = \"spoke_route_table\"\n  location            = azurerm_resource_group.azure_resource_group.location\n  resource_group_name = azurerm_resource_group.azure_resource_group.name\n  route {\n    name                   = \"default\"\n    address_prefix         = \"0.0.0.0/0\"\n    next_hop_type          = \"VirtualAppliance\"\n    next_hop_in_ip_address = var.hub-nva-gateway\n  }\n}\n\nresource \"azurerm_subnet_route_table_association\" \"spoke-route-table_association\" {\n  subnet_id      = azurerm_subnet.spoke_aks_subnet.id\n  route_table_id = azurerm_route_table.spoke_route_table.id\n}\n\nresource \"azurerm_network_security_group\" \"spoke_network_security_group\" {\n  name                = \"spoke_network_security_group\"\n  location            = azurerm_resource_group.azure_resource_group.location\n  resource_group_name = azurerm_resource_group.azure_resource_group.name\n  security_rule { #tfsec:ignore:AVD-AZU-0047\n    name              = \"inbound-http_rule\"\n    priority          = 100\n    direction         = \"Inbound\"\n    access            = \"Allow\"\n    protocol          = \"Tcp\"\n    source_port_range = \"*\"\n    #destination_port_ranges    = var.spoke-aks-node-image-gpu == true ? [\"80\", \"81\", \"8080\", \"11434\"] : [\"80\", \"81\"] #checkov:skip=CKV_AZURE_160: Allow HTTP redirects\n    source_address_prefix = \"*\"\n    #destination_address_prefix = var.spoke-aks-node-ip\n    destination_port_range     = \"*\"\n    destination_address_prefix = \"*\"\n  }\n  security_rule {\n    name                    = \"aks-node_to_internet_rule\"\n    priority                = 100\n    direction               = \"Outbound\"\n    access                  = \"Allow\"\n    protocol                = \"Tcp\"\n    source_port_range       = \"*\"\n    destination_port_ranges = [\"80\", \"443\"]\n    #source_address_prefix      = var.spoke-aks-node-ip\n    #source_address_prefix = var.spoke-subnet_prefix\n    source_address_prefix      = \"*\"\n    destination_address_prefix = \"*\" #tfsec:ignore:AVD-AZU-0051\n  }\n  security_rule { #tfsec:ignore:AVD-AZU-0051\n    name                   = \"icmp_to_google-dns_rule\"\n    priority               = 101\n    direction              = \"Outbound\"\n    access                 = \"Allow\"\n    protocol               = \"Icmp\"\n    source_port_range      = \"*\"\n    destination_port_range = \"*\"\n    #source_address_prefix      = var.spoke-aks-node-ip\n    #source_address_prefix = var.spoke-subnet_prefix\n    source_address_prefix = \"*\"\n    #destination_address_prefix = \"8.8.8.8\"\n    destination_address_prefix = \"*\"\n  }\n}\n\nresource \"azurerm_subnet_network_security_group_association\" \"spoke-subnet-network-security-group_association\" {\n  subnet_id                 = azurerm_subnet.spoke_subnet.id\n  network_security_group_id = azurerm_network_security_group.spoke_network_security_group.id\n}\n\n#File: terraform.tf\nterraform {\n  required_version = \">=1.6\"\n  required_providers {\n    azurerm = {\n      source  = \"hashicorp/azurerm\"\n      version = \"4.28.0\"\n    }\n    random = {\n      source  = \"hashicorp/random\"\n      version = \"3.7.2\"\n    }\n    tls = {\n      source  = \"hashicorp/tls\"\n      version = \"4.1.0\"\n    }\n    http = {\n      source  = \"hashicorp/http\"\n      version = \"3.5.0\"\n    }\n    null = {\n      source  = \"hashicorp/null\"\n      version = \"3.2.4\"\n    }\n    local = {\n      source  = \"hashicorp/local\"\n      version = \"2.5.2\"\n    }\n    git = {\n      source  = \"paultyng/git\"\n      version = \"0.1.0\"\n    }\n    external = {\n      source  = \"hashicorp/external\"\n      version = \"2.3.5\"\n    }\n  }\n  # backend \"azurerm\" {}\n}\n\ndata \"azurerm_subscription\" \"current\" {\n}\n\ndata \"azurerm_client_config\" \"current\" {\n}\n\nprovider \"azurerm\" {\n  features {\n    api_management {\n      purge_soft_delete_on_destroy = true\n      recover_soft_deleted         = false\n    }\n    resource_group {\n      prevent_deletion_if_contains_resources = false\n    }\n  }\n  subscription_id = var.subscription_id\n  #resource_provider_registrations = \"none\"\n}\n\nprovider \"random\" {}\nprovider \"tls\" {}\nprovider \"http\" {}\nprovider \"local\" {}\nprovider \"git\" {}\n#File: tls-certificate-key.tf\nresource \"tls_private_key\" \"private_key\" {\n  algorithm = \"RSA\"\n  rsa_bits  = 4096\n}\n\nresource \"tls_self_signed_cert\" \"self_signed_cert\" {\n  private_key_pem = tls_private_key.private_key.private_key_pem\n  dns_names       = [data.azurerm_public_ip.hub-nva-vip_public_ip.fqdn]\n\n  subject {\n    common_name = data.azurerm_public_ip.hub-nva-vip_public_ip.fqdn\n  }\n\n  validity_period_hours = 24\n  early_renewal_hours   = 1\n\n  allowed_uses = [\n    \"key_encipherment\",\n    \"digital_signature\",\n    \"server_auth\",\n  ]\n}\n\n#File: variables.tf\nvariable \"subscription_id\" {\n  description = \"Azure subscription ID\"\n  type = string\n}\n\nvariable \"owner_email\" {\n  default     = \"root@example.com\"\n  description = \"Email address for use with Owner tag.\"\n  type        = string\n  validation {\n    condition     = can(regex(\"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$\", var.owner_email))\n    error_message = \"The owner_email must be a valid email address.\"\n  }\n}\n\nvariable \"location\" {\n  default     = \"canadacentral\"\n  description = \"Azure region for resource group.\"\n  type        = string\n  validation {\n    condition = contains(\n      [\n        \"asia\",\n        \"asiapacific\",\n        \"australia\",\n        \"australiacentral\",\n        \"australiacentral2\",\n        \"australiaeast\",\n        \"australiasoutheast\",\n        \"brazil\",\n        \"brazilsouth\",\n        \"brazilsoutheast\",\n        \"brazilus\",\n        \"canada\",\n        \"canadacentral\",\n        \"canadaeast\",\n        \"centralindia\",\n        \"centralus\",\n        \"centraluseuap\",\n        \"centralusstage\",\n        \"eastasia\",\n        \"eastus\",\n        \"eastus2\",\n        \"eastus2euap\",\n        \"eastusstage\",\n        \"eastusstg\",\n        \"europe\",\n        \"france\",\n        \"francecentral\",\n        \"francesouth\",\n        \"germany\",\n        \"germanynorth\",\n        \"germanywestcentral\",\n        \"global\",\n        \"india\",\n        \"israel\",\n        \"israelcentral\",\n        \"italy\",\n        \"italynorth\",\n        \"japan\",\n        \"japaneast\",\n        \"japanwest\",\n        \"jioindiawest\",\n        \"jioindiacentral\",\n        \"korea\",\n        \"koreacentral\",\n        \"koreasouth\",\n        \"mexicocentral\",\n        \"newzealand\",\n        \"northeurope\",\n        \"norway\",\n        \"norwayeast\",\n        \"norwaywest\",\n        \"northcentralus\",\n        \"northcentralusstage\",\n        \"poland\",\n        \"polandcentral\",\n        \"qatar\",\n        \"qatarcentral\",\n        \"singapore\",\n        \"southafrica\",\n        \"southafricanorth\",\n        \"southafricawest\",\n        \"southcentralus\",\n        \"southcentralusstage\",\n        \"southindia\",\n        \"southeastasia\",\n        \"southeastasiastage\",\n        \"sweden\",\n        \"swedencentral\",\n        \"switzerland\",\n        \"switzerlandnorth\",\n        \"switzerlandwest\",\n        \"uae\",\n        \"uaecentral\",\n        \"uaenorth\",\n        \"uk\",\n        \"ukwest\",\n        \"unitedstates\",\n        \"unitedstateseuap\",\n        \"uksouth\",\n        \"westcentralus\",\n        \"westeurope\",\n        \"westindia\",\n        \"westus\",\n        \"westus2\",\n        \"westus2stage\",\n        \"westusstage\"\n    ], var.location)\n    error_message = \"The Azure location must be one of the allowed Azure regions.\"\n  }\n}\n\nvariable \"hub-virtual-network_address_prefix\" {\n  default     = \"10.0.0.0/24\"\n  description = \"Hub Virtual Network Address prefix.\"\n  type        = string\n  validation {\n    condition     = can(regex(\"^((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])\\\\.){3}(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])/(3[0-2]|[12]?[0-9])$\", var.hub-virtual-network_address_prefix))\n    error_message = \"The subnet must be in the format of 'xxx.xxx.xxx.xxx/xx', where xxx is between 0 and 255, and xx is between 0 and 32.\"\n  }\n}\n\nvariable \"hub-internal-subnet_name\" {\n  default     = \"hub-internal_subnet\"\n  description = \"Hub Subnet Name.\"\n  type        = string\n  validation {\n    condition     = can(regex(\"^[a-zA-Z0-9_-]*$\", var.hub-internal-subnet_name))\n    error_message = \"The value must consist of alphanumeric characters, underscores, or dashes only.\"\n  }\n}\n\nvariable \"hub-internal-subnet_prefix\" {\n  default     = \"10.0.0.32/27\"\n  description = \"Hub Subnet Prefix.\"\n  type        = string\n  validation {\n    condition     = can(regex(\"^((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])\\\\.){3}(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])/(3[0-2]|[12]?[0-9])$\", var.hub-internal-subnet_prefix))\n    error_message = \"The subnet must be in the format of 'xxx.xxx.xxx.xxx/xx', where xxx is between 0 and 255, and xx is between 0 and 32.\"\n  }\n}\n\nvariable \"hub-external-subnet_name\" {\n  default     = \"hub-external_subnet\"\n  description = \"External Subnet Name.\"\n  type        = string\n  validation {\n    condition     = can(regex(\"^[a-zA-Z0-9_-]*$\", var.hub-external-subnet_name))\n    error_message = \"The value must consist of alphanumeric characters, underscores, or dashes only.\"\n  }\n}\n\nvariable \"hub-external-subnet_prefix\" {\n  default     = \"10.0.0.0/27\"\n  description = \"External Subnet Prefix.\"\n  type        = string\n  validation {\n    condition     = can(regex(\"^((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])\\\\.){3}(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])/(3[0-2]|[12]?[0-9])$\", var.hub-external-subnet_prefix))\n    error_message = \"The subnet must be in the format of 'xxx.xxx.xxx.xxx/xx', where xxx is between 0 and 255, and xx is between 0 and 32.\"\n  }\n}\n\nvariable \"hub-external-subnet-gateway\" {\n  default     = \"10.0.0.1\"\n  description = \"Azure gateway IP address to the Internet\"\n  type        = string\n  validation {\n    condition     = can(regex(\"^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$\", var.hub-external-subnet-gateway))\n    error_message = \"The IP address must be a valid IPv4 format (e.g., 192.168.1.1).\"\n  }\n}\n\nvariable \"hub-nva-image\" {\n  default     = \"fortigate\"\n  description = \"NVA image product\"\n  type        = string\n  validation {\n    condition     = var.hub-nva-image == \"fortigate\" || var.hub-nva-image == \"fortiweb\" || var.hub-nva-image == \"fortiadc\"\n    error_message = \"The SKU must be either 'fortiweb', 'fortigate', or 'fortiadc'\"\n  }\n}\n\nvariable \"hub-nva-management-ip\" {\n  default     = \"10.0.0.4\"\n  description = \"Hub NVA Management IP Address\"\n  type        = string\n  validation {\n    condition     = can(regex(\"^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$\", var.hub-nva-management-ip))\n    error_message = \"The IP address must be a valid IPv4 format (e.g., 10.0.0.4).\"\n  }\n}\n\nvariable \"hub-nva-gateway\" {\n  default     = \"10.0.0.37\"\n  description = \"Hub NVA Gateway IP Address\"\n  type        = string\n  validation {\n    condition     = can(regex(\"^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$\", var.hub-nva-gateway))\n    error_message = \"The IP address must be a valid IPv4 format (e.g., 10.0.0.37).\"\n  }\n}\n\nvariable \"hub-nva-vip\" {\n  default     = \"10.0.0.5\"\n  description = \"Hub NVA Gateway Virtual IP Address\"\n  type        = string\n  validation {\n    condition     = can(regex(\"^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$\", var.hub-nva-vip))\n    error_message = \"The IP address must be a valid IPv4 format (e.g., 10.0.0.5).\"\n  }\n}\n\nvariable \"hub-nva-management-action\" {\n  default     = \"Deny\"\n  description = \"Allow or Deny access to Management\"\n  type        = string\n  validation {\n    condition     = var.hub-nva-management-action == \"Allow\" || var.hub-nva-management-action == \"Deny\"\n    error_message = \"The management action must be either 'Allow' or 'Deny'.\"\n  }\n}\n\nvariable \"spoke-aks-node-image\" {\n  default     = \"aks-node\"\n  description = \"Container server image product\"\n  type        = string\n}\n\n#variable \"spoke-aks-node-image-gpu\" {\n#  default     = false\n#  description = \"Set to true to enable GPU workloads\"\n#  type        = bool\n#}\n\nvariable \"spoke-k8s-node-pool-gpu\" {\n  default     = false\n  description = \"Set to true to enable GPU workloads\"\n  type        = bool\n}\n\nvariable \"spoke-k8s-node-pool-image\" {\n  default     = false\n  description = \"k8s node pool image.\"\n  type        = bool\n}\n\nvariable \"spoke-virtual-network_address_prefix\" {\n  default     = \"10.1.0.0/16\"\n  description = \"Spoke Virtual Network Address prefix.\"\n  type        = string\n  validation {\n    condition     = can(regex(\"^((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])\\\\.){3}(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])/(3[0-2]|[12]?[0-9])$\", var.spoke-virtual-network_address_prefix))\n    error_message = \"The subnet must be in the format of 'xxx.xxx.xxx.xxx/xx', where xxx is between 0 and 255, and xx is between 0 and 32.\"\n  }\n}\n\nvariable \"spoke-subnet_name\" {\n  default     = \"spoke_subnet\"\n  description = \"Spoke Subnet Name.\"\n  type        = string\n  validation {\n    condition     = can(regex(\"^[a-zA-Z0-9_-]*$\", var.spoke-subnet_name))\n    error_message = \"The value must consist of alphanumeric characters, underscores, or dashes only.\"\n  }\n}\n\nvariable \"spoke-subnet_prefix\" {\n  default     = \"10.1.1.0/24\"\n  description = \"Spoke Subnet Prefix.\"\n  type        = string\n  validation {\n    condition     = can(regex(\"^((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])\\\\.){3}(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])/(3[0-2]|[12]?[0-9])$\", var.spoke-subnet_prefix))\n    error_message = \"The subnet must be in the format of 'xxx.xxx.xxx.xxx/xx', where xxx is between 0 and 255, and xx is between 0 and 32.\"\n  }\n}\nvariable \"spoke-aks-subnet_name\" {\n  default     = \"spoke-aks-subnet\"\n  description = \"Spoke aks Subnet Name.\"\n  type        = string\n  validation {\n    condition     = can(regex(\"^[a-zA-Z0-9_-]*$\", var.spoke-aks-subnet_name))\n    error_message = \"The value must consist of alphanumeric characters, underscores, or dashes only.\"\n  }\n}\n\nvariable \"spoke-aks-subnet_prefix\" {\n  default     = \"10.1.2.0/24\"\n  description = \"Spoke Pod Subnet Prefix.\"\n  type        = string\n  validation {\n    condition     = can(regex(\"^((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])\\\\.){3}(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])/(3[0-2]|[12]?[0-9])$\", var.spoke-aks-subnet_prefix))\n    error_message = \"The subnet must be in the format of 'xxx.xxx.xxx.xxx/xx', where xxx is between 0 and 255, and xx is between 0 and 32.\"\n  }\n}\n\nvariable \"spoke-aks_service_cidr\" {\n  default     = \"10.1.2.0/24\"\n  description = \"Spoke k8s service cidr.\"\n  type        = string\n  validation {\n    condition     = can(regex(\"^((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])\\\\.){3}(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])/(3[0-2]|[12]?[0-9])$\", var.spoke-aks_service_cidr))\n    error_message = \"The subnet must be in the format of 'xxx.xxx.xxx.xxx/xx', where xxx is between 0 and 255, and xx is between 0 and 32.\"\n  }\n}\n\nvariable \"spoke-aks_pod_cidr\" {\n  default     = \"10.244.0.0/16\"\n  description = \"Spoke k8s pod cidr.\"\n  type        = string\n  validation {\n    condition     = can(regex(\"^((25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])\\\\.){3}(25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9]?[0-9])/(3[0-2]|[12]?[0-9])$\", var.spoke-aks_pod_cidr))\n    error_message = \"The subnet must be in the format of 'xxx.xxx.xxx.xxx/xx', where xxx is between 0 and 255, and xx is between 0 and 32.\"\n  }\n}\n\nvariable \"spoke-aks_dns_service_ip\" {\n  default     = \"10.1.2.10\"\n  description = \"Spoke k8s dns service ip\"\n  type        = string\n  validation {\n    condition     = can(regex(\"^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$\", var.spoke-aks_dns_service_ip))\n    error_message = \"The IP address must be a valid IPv4 format (e.g., 10.2.0.10).\"\n  }\n}\n\nvariable \"spoke-aks-node-ip\" {\n  default     = \"10.1.1.4\"\n  description = \"Spoke Container Server IP Address\"\n  type        = string\n  validation {\n    condition     = can(regex(\"^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$\", var.spoke-aks-node-ip))\n    error_message = \"The IP address must be a valid IPv4 format (e.g., 10.1.1.5).\"\n  }\n}\n\nvariable \"spoke-check-internet-up-ip\" {\n  default     = \"8.8.8.8\"\n  description = \"Spoke Container Server Checks the Internet at this IP Address\"\n  type        = string\n  validation {\n    condition     = can(regex(\"^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$\", var.spoke-check-internet-up-ip))\n    error_message = \"The IP address must be a valid IPv4 format (e.g., 8.8.8.8).\"\n  }\n}\n\nvariable \"spoke-aks-node-ollama-port\" {\n  default     = \"11434\"\n  description = \"Port for ollama\"\n  type        = string\n}\n\nvariable \"spoke-aks-node-ollama-webui-port\" {\n  default     = \"8080\"\n  description = \"Port for the ollama web ui\"\n  type        = string\n}\n"}]}
{"messages": [{"role": "user", "content": "Create a Google Cloud project with the specified ID. Define a virtual private cloud (VPC) network and a subnetwork with the given IP range. Set up a firewall to allow all traffic from any source. Add SSH keys to the project metadata for secure access. Deploy two compute instances labeled \"cp\" and \"worker\" with the specified machine type and boot disk configuration."}, {"role": "assistant", "content": "\n#File: main.tf\nterraform {\n  required_providers {\n    google = {\n      source  = \"hashicorp/google\"\n      version = \"6.8.0\"\n    }\n  }\n}\n\nprovider \"google\" {\n  project = \"add-gcp-project-id-here\"\n  region  = \"northamerica-south1\"\n  zone    = \"northamerica-south1-c\"\n}\n\nresource \"google_compute_network\" \"vpc_network\" {\n  name                    = \"lfclass\"\n  auto_create_subnetworks = false\n}\n\nresource \"google_compute_subnetwork\" \"vpc_subnetwork\" {\n  name                     = \"lfclass\"\n  network                  = google_compute_network.vpc_network.name\n  ip_cidr_range            = \"10.2.0.0/16\"\n  region                   = \"northamerica-south1\"\n  private_ip_google_access = false\n}\n\nresource \"google_compute_firewall\" \"vpc_firewall\" {\n  name    = \"lfclass\"\n  network = google_compute_network.vpc_network.name\n\n  # allow all ports and protocols\n  allow {\n    protocol = \"all\"\n  }\n\n  # allow traffic from anywhere\n  source_ranges = [\"0.0.0.0/0\"]\n}\n\nresource \"google_compute_project_metadata\" \"ssh_keys\" {\n  metadata = {\n    ssh-keys = \"${var.username}:${var.public_key}\"\n  }\n}\n\nresource \"google_compute_instance\" \"vm_instances\" {\n  for_each     = toset([\"cp\", \"worker\"])\n  name         = each.key\n  machine_type = \"e2-standard-2\"\n  tags         = [\"k8s\", \"dev\"]\n\n  boot_disk {\n    initialize_params {\n      image = \"ubuntu-os-cloud/ubuntu-2004-lts\"\n      size  = 20\n    }\n  }\n\n  network_interface {\n    network    = google_compute_network.vpc_network.name\n    subnetwork = google_compute_subnetwork.vpc_subnetwork.name\n    access_config {\n    }\n  }\n}\n\n#File: variables.tf\nvariable \"public_key\" {\n  description = \"The public key to be used for SSH access to the instances\"\n  type        = string\n  default     = \"add-your-public-key-here\"\n}\n\nvariable \"username\" {\n  description = \"The username to be used for SSH access to the instances\"\n  type        = string\n  default     = \"add-your-login-for-virtual-machines-here\"\n}"}]}
{"messages": [{"role": "user", "content": "Create a public IP address named \"jumpbox-pip\" with dynamic allocation in the specified resource group and location. Set up a network security group called \"jumpbox-nsg\" to allow inbound SSH access on port 22. Create a network interface named \"jumpbox-nic\" and link it to the network security group while associating it with the public IP. Finally, deploy a Linux virtual machine named \"jumpbox-vm\" using Ubuntu 18.04, configure it with the network interface, and set the necessary admin credentials."}, {"role": "assistant", "content": "\n#File: main.tf\nresource \"azurerm_public_ip\" \"jumpboxPip\" {\n    name                         = \"jumpbox-pip\"\n    location                     = var.location\n    resource_group_name          = var.rg\n    allocation_method            = \"Dynamic\"\n}\n\nresource \"azurerm_network_security_group\" \"nsg\" {\n  name                = \"jumpbox-nsg\"\n  location                     = var.location\n  resource_group_name          = var.rg\n\n  security_rule {\n    name                       = \"SSH\"\n    priority                   = 100\n    direction                  = \"Inbound\"\n    access                     = \"Allow\"\n    protocol                   = \"Tcp\"\n    source_port_range          = \"*\"\n    destination_port_range     = \"22\"\n    source_address_prefix      = \"*\"\n    destination_address_prefix = \"*\"\n  }\n}\n\nresource \"azurerm_network_interface\" \"nic\" {\n    name                = \"jumpbox-nic\"\n    resource_group_name = var.rg\n    location            = var.location\n\n    ip_configuration {\n        name                          = \"jumpbox-config\"\n        subnet_id                     = var.subnetId\n        private_ip_address_allocation = \"Dynamic\"\n        public_ip_address_id          = azurerm_public_ip.jumpboxPip.id\n    }\n}\n\nresource \"azurerm_network_interface_security_group_association\" \"nsgLink\" {\n    network_interface_id      = azurerm_network_interface.nic.id\n    network_security_group_id = azurerm_network_security_group.nsg.id\n}\n\nresource \"azurerm_linux_virtual_machine\" \"vm\" {\n  name                            = \"jumpbox-vm\"\n  resource_group_name             = var.rg\n  location                        = var.location\n  size                            = \"Standard_D2as_v4\"\n  admin_username                  = \"adminuser\"\n  admin_password                  = \"samplePassword!\"\n  disable_password_authentication = false\n\n  network_interface_ids = [\n    azurerm_network_interface.nic.id,\n  ]\n\n  os_disk {\n    caching              = \"ReadWrite\"\n    storage_account_type = \"Standard_LRS\"\n  }\n\n  source_image_reference {\n    publisher = \"Canonical\"\n    offer     = \"UbuntuServer\"\n    sku       = \"18.04-LTS\"\n    version   = \"latest\"\n  }\n}\n#File: variables.tf\nvariable \"rg\" {\n    description = \"The name of resource group\"\n    default     = \"k8s-rg\"\n}\n\nvariable \"location\" {\n    description = \"The location of resource group\"\n    default     = \"southeastasia\"\n}\n\nvariable \"subnetId\" {\n    description = \"The subnet ID to place jumpbox\"\n}"}]}
{"messages": [{"role": "user", "content": "Create an Azure resource group named `example-resources` in the `UK South` location. Create a Linux web app named `cnsdemoapp` utilizing a service plan and configure it with an Nginx Docker image. Establish a key vault named `cns-examplekeyvault`, granting access policies for secrets. Set up a storage account named `cnsstorageaccounttest` with blob service capabilities and create a private endpoint for it. Configure DNS zones and records for both the storage account and the key vault to utilize private endpoints."}, {"role": "assistant", "content": "\n#File: appservice.tf\nresource \"azurerm_service_plan\" \"cnsdemo\" {\n  name                = \"cnsdemo\"\n  resource_group_name = azurerm_resource_group.example.name\n  location            = azurerm_resource_group.example.location\n  os_type             = \"Linux\"\n  sku_name            = \"P1v2\"\n}\n\nresource \"azurerm_linux_web_app\" \"example\" {\n  name                = \"cnsdemoapp\"\n  resource_group_name = azurerm_resource_group.example.name\n  location            = azurerm_resource_group.example.location\n  service_plan_id     = azurerm_service_plan.cnsdemo.id\n  site_config {\n    application_stack {\n      docker_image     = \"registry.hub.docker.com/library/nginx\"\n      docker_image_tag = \"1.23.3\"\n    }\n  }\n}\n\n\nresource \"azurerm_private_endpoint\" \"appserviceexample\" {\n  name                = \"appserviceexample-endpoint\"\n  location            = azurerm_resource_group.example.location\n  resource_group_name = azurerm_resource_group.example.name\n  subnet_id           = azurerm_subnet.endpoint.id\n\n  private_service_connection {\n    name                           = \"appserviceexample-privateserviceconnection\"\n    private_connection_resource_id = azurerm_linux_web_app.example.id\n    subresource_names              = [\"sites\"]\n\n    is_manual_connection = false\n  }\n}\n\nresource \"azurerm_private_dns_a_record\" \"example\" {\n  name                = azurerm_linux_web_app.example.name\n  zone_name           = azurerm_private_dns_zone.example.name\n  resource_group_name = azurerm_resource_group.example.name\n  ttl                 = 30\n  records             = [azurerm_private_endpoint.appserviceexample.private_service_connection[0].private_ip_address]\n}\n\nresource \"azurerm_private_dns_zone\" \"example\" {\n  name                = \"privatelink.azurewebsites.net\"\n  resource_group_name = azurerm_resource_group.example.name\n}\n\n\nresource \"azurerm_private_dns_zone_virtual_network_link\" \"example\" {\n  name                  = \"appservice\"\n  resource_group_name   = azurerm_resource_group.example.name\n  private_dns_zone_name = azurerm_private_dns_zone.example.name\n  virtual_network_id    = azurerm_virtual_network.example.id\n}\n\n#File: keyvault.tf\nresource \"azurerm_private_endpoint\" \"kv\" {\n  name                = \"kv\"\n  location            = azurerm_resource_group.example.location\n  resource_group_name = azurerm_resource_group.example.name\n  subnet_id           = azurerm_subnet.endpoint.id\n\n  private_service_connection {\n    name                           = \"vaultconnection\"\n    private_connection_resource_id = azurerm_key_vault.example.id\n    is_manual_connection           = false\n    subresource_names              = [\"Vault\"]\n  }\n}\n\nresource \"azurerm_private_dns_zone\" \"vaultcore\" {\n  name                = \"privatelink.vaultcore.azure.net\"\n  resource_group_name = azurerm_resource_group.example.name\n}\n\nresource \"azurerm_private_dns_a_record\" \"vaultcore\" {\n  name                = azurerm_key_vault.example.name\n  zone_name           = azurerm_private_dns_zone.vaultcore.name\n  resource_group_name = azurerm_resource_group.example.name\n  ttl                 = 30\n  records             = [azurerm_private_endpoint.kv.private_service_connection[0].private_ip_address]\n}\n\nresource \"azurerm_private_dns_zone_virtual_network_link\" \"vaultcore\" {\n  name                  = \"vaultcore\"\n  resource_group_name   = azurerm_resource_group.example.name\n  private_dns_zone_name = azurerm_private_dns_zone.vaultcore.name\n  virtual_network_id    = azurerm_virtual_network.example.id\n}\n\n\nresource \"azurerm_key_vault\" \"example\" {\n  name                        = \"cns-examplekeyvault\"\n  location                    = azurerm_resource_group.example.location\n  resource_group_name         = azurerm_resource_group.example.name\n  enabled_for_disk_encryption = true\n  tenant_id                   = data.azurerm_client_config.current.tenant_id\n  soft_delete_retention_days  = 7\n  purge_protection_enabled    = false\n  sku_name                    = \"standard\"\n\n}\n\nresource \"azurerm_key_vault_access_policy\" \"example\" {\n  key_vault_id = azurerm_key_vault.example.id\n  tenant_id    = data.azurerm_client_config.current.tenant_id\n  object_id    = data.azurerm_client_config.current.object_id\n  secret_permissions = [\n    \"Set\",\n    \"Get\",\n    \"Delete\",\n    \"Purge\",\n    \"Recover\",\n    \"List\",\n  ]\n}\n\nresource \"azurerm_key_vault_secret\" \"example\" {\n  name         = \"secret-sauce\"\n  value        = \"szechuan\"\n  key_vault_id = azurerm_key_vault.example.id\n  depends_on = [\n    azurerm_private_dns_a_record.vaultcore,\n  ]\n}\n#File: main.tf\nterraform {\n  required_providers {\n    azurerm = {\n      source  = \"hashicorp/azurerm\"\n      version = \"=3.42.0\"\n\n    }\n    azuread = {\n      source  = \"hashicorp/azuread\"\n      version = \"~> 2.15.0\"\n    }\n  }\n}\n\nprovider \"azurerm\" {\n  features {}\n}\n\ndata \"azurerm_client_config\" \"current\" {}\n\nresource \"azurerm_resource_group\" \"example\" {\n  name     = \"example-resources\"\n  location = \"UK South\"\n}\n\nresource \"azurerm_virtual_network\" \"example\" {\n  name                = \"example-network\"\n  location            = azurerm_resource_group.example.location\n  resource_group_name = azurerm_resource_group.example.name\n  address_space       = [\"10.0.0.0/16\"]\n}\n\nresource \"azurerm_virtual_network_dns_servers\" \"example\" {\n  virtual_network_id = azurerm_virtual_network.example.id\n  dns_servers        = [azurerm_private_dns_resolver_inbound_endpoint.example.ip_configurations[0].private_ip_address]\n}\n\nresource \"azurerm_private_dns_resolver\" \"example\" {\n  name                = \"example\"\n  resource_group_name = azurerm_resource_group.example.name\n  location            = azurerm_resource_group.example.location\n  virtual_network_id  = azurerm_virtual_network.example.id\n}\n\nresource \"azurerm_subnet\" \"inbounddns\" {\n  name                                          = \"inbounddns\"\n  resource_group_name                           = azurerm_resource_group.example.name\n  virtual_network_name                          = azurerm_virtual_network.example.name\n  address_prefixes                              = [\"10.0.0.0/28\"]\n  private_link_service_network_policies_enabled = true\n\n  delegation {\n    name = \"Microsoft.Network.dnsResolvers\"\n    service_delegation {\n      actions = [\"Microsoft.Network/virtualNetworks/subnets/join/action\"]\n      name    = \"Microsoft.Network/dnsResolvers\"\n    }\n  }\n}\n\nresource \"azurerm_private_dns_resolver_inbound_endpoint\" \"example\" {\n  name                    = \"example-drie\"\n  private_dns_resolver_id = azurerm_private_dns_resolver.example.id\n  location                = azurerm_private_dns_resolver.example.location\n  ip_configurations {\n    private_ip_allocation_method = \"Dynamic\"\n    subnet_id                    = azurerm_subnet.inbounddns.id\n  }\n}\n\nresource \"azurerm_subnet\" \"endpoint\" {\n  name                 = \"endpoint\"\n  resource_group_name  = azurerm_resource_group.example.name\n  virtual_network_name = azurerm_virtual_network.example.name\n  address_prefixes     = [\"10.0.2.0/24\"]\n\n  private_link_service_network_policies_enabled = true\n}\n\nresource \"azurerm_subnet\" \"gatewaysubnet\" {\n  name                 = \"GatewaySubnet\"\n  resource_group_name  = azurerm_resource_group.example.name\n  virtual_network_name = azurerm_virtual_network.example.name\n  address_prefixes     = [\"10.0.90.0/24\"]\n}\n\nresource \"azurerm_public_ip\" \"gateway\" {\n  name                = \"gateway\"\n  location            = azurerm_resource_group.example.location\n  resource_group_name = azurerm_resource_group.example.name\n\n  allocation_method = \"Dynamic\"\n}\n\nresource \"azurerm_virtual_network_gateway\" \"example\" {\n  name                = \"gateway\"\n  location            = azurerm_resource_group.example.location\n  resource_group_name = azurerm_resource_group.example.name\n\n  type     = \"Vpn\"\n  vpn_type = \"RouteBased\"\n\n  active_active = false\n  enable_bgp    = false\n  sku           = \"Standard\"\n\n  ip_configuration {\n    name                          = \"vnetGatewayConfig\"\n    public_ip_address_id          = azurerm_public_ip.gateway.id\n    private_ip_address_allocation = \"Dynamic\"\n    subnet_id                     = azurerm_subnet.gatewaysubnet.id\n  }\n\n  vpn_client_configuration {\n    address_space = [\"192.168.90.0/24\"]\n\n    root_certificate {\n      name = \"testcert\"\n\n      public_cert_data = <<EOF\nMIIC5jCCAc6gAwIBAgIIao/HkAJOAVIwDQYJKoZIhvcNAQELBQAwETEPMA0GA1UE\nAxMGVlBOIENBMB4XDTIzMDEyNjIyMjgzNFoXDTI2MDEyNTIyMjgzNFowETEPMA0G\nA1UEAxMGVlBOIENBMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAnaQx\nZ1dfJxYsGVOrcA1xeEgFqDDgLDoSL7vd2GBY27UeVhkXF8kUPkjWhbY8hfhniOWl\nIaCyt1osNi/f3K6jWonZTDXWy+x6zXQxLR4UzS5rCOkBC1hjd+c0S7h5KiQBhWsL\n8PxMyGEADJLEFwvsJOsL/bEqvyb20j2cMu5qGRz9d5yudvWnOfURv/Cm0oxrPnrU\nungGaR2rRk2esjmoKC47Z/UWJtC7ivKzwq8TyQs3jBdiOr+dKz7mUAh+m/SsKFJr\n+sFwiEWogqOLd+g5/vATFfvlkLWPkf6cRRR1DN96UDhujd0JeARmPrhuxpZCojzE\nkoSP/BLYKJKkmEks5QIDAQABo0IwQDAPBgNVHRMBAf8EBTADAQH/MA4GA1UdDwEB\n/wQEAwIBBjAdBgNVHQ4EFgQUcDqfwT/oLXs3Deo66nwRQYO7lJ0wDQYJKoZIhvcN\nAQELBQADggEBAHJy1lPtHco2t5lNLtML2WG8dd7T06lhVR/OCDpsQhhJPVgmM2XP\noFLy9tB6WSiAsUvnOvxGGbUeO20G7HRS+C9GGwuHErFT2iVjl4V3eoMAjDGnOlC/\n0r7faX2eqZ48Wq2cRFeZ+QQFi3hMCNQkOGhV9L5IenQq5ssI9fU7E9SrmknVay3x\nNe4QS+bbxic/elvpcTf3KFZmOfa1d391qEHe2/nU3MfWn8EFh1adwWJqYl61yFe4\nPTKuUMvY0s5AwsX4bFaUI0zPIJ+a3d5WM92khCmDmXT7zqUkWeU0U4SAvZIdM9ee\nKkI7qk6aHwfqVTnAHJo7cpGJg9DHOF1EU3w=\nEOF\n\n    }\n  }\n}\n\n\n#File: storage.tf\nresource \"azurerm_storage_account\" \"example\" {\n  name                          = \"cnsstorageaccounttest\"\n  resource_group_name           = azurerm_resource_group.example.name\n  location                      = azurerm_resource_group.example.location\n  account_tier                  = \"Standard\"\n  account_replication_type      = \"GRS\"\n  public_network_access_enabled = false # \n}\n\nresource \"azurerm_private_endpoint\" \"storageaccount\" {\n  name                = \"storageaccount\"\n  location            = azurerm_resource_group.example.location\n  resource_group_name = azurerm_resource_group.example.name\n  subnet_id           = azurerm_subnet.endpoint.id\n\n  private_service_connection {\n    name                           = \"storageaccount\"\n    private_connection_resource_id = azurerm_storage_account.example.id\n    is_manual_connection           = false\n    subresource_names              = [\"blob\"]\n  }\n}\n\nresource \"azurerm_private_dns_zone\" \"blobstorage\" {\n  name                = \"privatelink.blob.core.windows.net\"\n  resource_group_name = azurerm_resource_group.example.name\n}\n\nresource \"azurerm_private_dns_zone\" \"storageaccount\" {\n  name                = \"privatelink.web.core.windows.net\"\n  resource_group_name = azurerm_resource_group.example.name\n}\n\nresource \"azurerm_private_dns_a_record\" \"storageaccount\" {\n  name                = azurerm_storage_account.example.name\n  zone_name           = azurerm_private_dns_zone.storageaccount.name\n  resource_group_name = azurerm_resource_group.example.name\n  ttl                 = 30\n  records             = [azurerm_private_endpoint.storageaccount.private_service_connection[0].private_ip_address]\n}\n\nresource \"azurerm_private_dns_a_record\" \"storagecontainer\" {\n  name                = azurerm_storage_account.example.name\n  zone_name           = azurerm_private_dns_zone.blobstorage.name\n  resource_group_name = azurerm_resource_group.example.name\n  ttl                 = 30\n  records             = [azurerm_private_endpoint.storageaccount.private_service_connection[0].private_ip_address]\n}\n\nresource \"azurerm_private_dns_zone_virtual_network_link\" \"storageaccount\" {\n  name                  = \"storageaccount\"\n  resource_group_name   = azurerm_resource_group.example.name\n  private_dns_zone_name = azurerm_private_dns_zone.storageaccount.name\n  virtual_network_id    = azurerm_virtual_network.example.id\n}\nresource \"azurerm_private_dns_zone_virtual_network_link\" \"blobstorage\" {\n  name                  = \"blobstorage\"\n  resource_group_name   = azurerm_resource_group.example.name\n  private_dns_zone_name = azurerm_private_dns_zone.blobstorage.name\n  virtual_network_id    = azurerm_virtual_network.example.id\n}\n\n\nresource \"azurerm_storage_container\" \"example\" {\n  depends_on = [\n    azurerm_private_dns_a_record.storageaccount,\n    azurerm_private_dns_a_record.storagecontainer,\n  ]\n  name                  = \"content\"\n  storage_account_name  = azurerm_storage_account.example.name\n  container_access_type = \"private\"\n}\n\nresource \"azurerm_storage_blob\" \"example\" {\n  name                   = \"helloworld\"\n  storage_account_name   = azurerm_storage_account.example.name\n  storage_container_name = azurerm_storage_container.example.name\n  type                   = \"Block\"\n  source_content         = \"helloworld\"\n}\n"}]}
{"messages": [{"role": "user", "content": "Create a resource group named \"maxilog-aks-resources\" in \"West Europe.\" Deploy a Kubernetes cluster named \"maxilog-aks\" with version \"1.19.7\" and one node of size \"Standard_D2_v2.\" Install the NGINX Ingress controller from the specified Helm chart repository. Install the Cert-Manager from the Jetstack Helm chart repository and enable CRD installation. Output the client certificate for the Kubernetes cluster for future use."}, {"role": "assistant", "content": "\n#File: main.tf\nterraform {\n  required_providers {\n    azurerm = {\n      source  = \"hashicorp/azurerm\"\n      version = \"=2.46.0\"\n    }\n    helm = {\n      source  = \"hashicorp/helm\"\n      version = \"2.0.3\"\n    }\n    kubernetes = {\n      source  = \"hashicorp/kubernetes\"\n      version = \"2.0.3\"\n    }\n  }\n}\n\nprovider \"azurerm\" {\n  features {}\n}\n\nprovider \"helm\" {\n  kubernetes {\n    host = azurerm_kubernetes_cluster.aks-cluster.kube_config[0].host\n\n    client_key             = base64decode(azurerm_kubernetes_cluster.aks-cluster.kube_config[0].client_key)\n    client_certificate     = base64decode(azurerm_kubernetes_cluster.aks-cluster.kube_config[0].client_certificate)\n    cluster_ca_certificate = base64decode(azurerm_kubernetes_cluster.aks-cluster.kube_config[0].cluster_ca_certificate)\n  }\n}\n\nprovider \"kubernetes\" {\n  host = azurerm_kubernetes_cluster.aks-cluster.kube_config[0].host\n\n  client_key             = base64decode(azurerm_kubernetes_cluster.aks-cluster.kube_config[0].client_key)\n  client_certificate     = base64decode(azurerm_kubernetes_cluster.aks-cluster.kube_config[0].client_certificate)\n  cluster_ca_certificate = base64decode(azurerm_kubernetes_cluster.aks-cluster.kube_config[0].cluster_ca_certificate)\n}\n\nresource azurerm_resource_group aks-group {\n  name     = var.resource_group_name\n  location = var.resource_group_location\n}\n\nresource azurerm_kubernetes_cluster aks-cluster {\n  name                = var.kubernetes_cluster_name\n  location            = azurerm_resource_group.aks-group.location\n  resource_group_name = azurerm_resource_group.aks-group.name\n  dns_prefix          = var.kubernetes_cluster_name\n  kubernetes_version = var.kubernetes_cluster_version\n\n  default_node_pool {\n    name                 = \"default\"\n    orchestrator_version = var.kubernetes_cluster_version\n    node_count           = var.kubernetes_cluster_node_count\n    vm_size              = var.kubernetes_cluster_vm_size\n    enable_auto_scaling = false\n  }\n\n  identity {\n    type = \"SystemAssigned\"\n  }\n\n  network_profile {\n    load_balancer_sku = \"Standard\"\n    network_plugin    = \"kubenet\"\n  }\n\n  tags = {\n    Environment = \"Production\"\n  }\n}\n\nresource helm_release nginx_ingress {\n  depends_on = [azurerm_kubernetes_cluster.aks-cluster]\n  name       = \"ingress-nginx\"\n  namespace = \"ingress-nginx\"\n  create_namespace = true\n\n  repository = \"https://kubernetes.github.io/ingress-nginx\"\n  chart      = \"ingress-nginx\"\n}\n\nresource helm_release cert-manager {\n  depends_on = [azurerm_kubernetes_cluster.aks-cluster]\n  name       = \"cert-manager\"\n  namespace = \"cert-manager\"\n  create_namespace = true\n\n  repository = \"https://charts.jetstack.io\"\n  chart      = \"cert-manager\"\n\n  set {\n    name = \"installCRDs\"\n    value = true\n  }\n}\n\n#File: outputs.tf\noutput \"client_certificate\" {\n  value = azurerm_kubernetes_cluster.aks-cluster.kube_config.0.client_certificate\n}\n#File: variables.tf\nvariable \"resource_group_name\" {\n  default     = \"maxilog-aks-resources\"\n  type        = string\n  description = \"resource group name\"\n}\n\nvariable \"resource_group_location\" {\n  default     = \"West Europe\"\n  type        = string\n  description = \"resource group location\"\n}\n\nvariable \"kubernetes_cluster_name\" {\n  default     = \"maxilog-aks\"\n  type        = string\n  description = \"kubernetes cluster name\"\n}\n\nvariable \"kubernetes_cluster_version\" {\n  default     = \"1.19.7\"\n  type        = string\n  description = \"kubernetes cluster version\"\n}\n\nvariable \"kubernetes_cluster_node_count\" {\n  default     = 1\n  type        = number\n  description = \"kubernetes cluster node count\"\n}\n\nvariable \"kubernetes_cluster_vm_size\" {\n  default     = \"Standard_D2_v2\"\n  type        = string\n  description = \"kubernetes cluster vm size\"\n}"}]}
{"messages": [{"role": "user", "content": "Create a Databricks workspace in Azure using the `azurerm_databricks_workspace` resource. Set the workspace name, resource group name, location, and SKU as \"standard\". Configure custom network parameters, including private and public subnet names and virtual network ID. Output the workspace name and ID for reference. Ensure that the required version of Terraform and the Azure provider are specified in your configuration files."}, {"role": "assistant", "content": "\n#File: main.tf\n// Create the databricks workspace\nresource \"azurerm_databricks_workspace\" \"module-databricks\" {\n  name                = var.workspace_name\n  resource_group_name = var.resource_group_name\n  location            = var.location\n  sku                 = \"standard\"\n\n  custom_parameters {\n    no_public_ip        = false\n    private_subnet_name = var.private_subnet_name\n    public_subnet_name  = var.public_subnet_name\n    virtual_network_id  = var.vnet_id\n  }\n\n  tags = var.tags\n}\n\n#File: outputs.tf\noutput \"workspace_name\" {\n  value       = azurerm_databricks_workspace.module-databricks.name\n  description = \"Name of the Databricks workspace\"\n}\n\noutput \"workspace_id\" {\n  value       = azurerm_databricks_workspace.module-databricks.id\n  description = \"ID of the Databricks workspace\"\n}\n\n#File: variables.tf\nvariable \"workspace_name\" {\n  type        = string\n  description = \"Name of Databricks workspace\"\n}\n\nvariable \"resource_group_name\" {\n  type        = string\n  description = \"Name of resource group into which Databricks will be deployed\"\n}\n\nvariable \"location\" {\n  type        = string\n  description = \"Location in which Databricks will be deployed\"\n}\n\nvariable \"vnet_id\" {\n  type        = string\n  description = \"ID of existing virtual network into which Databricks will be deployed\"\n}\n\nvariable \"private_subnet_name\" {\n  type        = string\n  description = \"Name of the private subnet\"\n}\n\nvariable \"public_subnet_name\" {\n  type        = string\n  description = \"Name of the public subnet\"\n}\n\nvariable \"tags\" {\n  type        = map(string)\n  description = \"Map of tags to attach to Databricks workspace\"\n  default     = {}\n}\n\n#File: versions.tf\nterraform {\n  required_version = \">= 0.12\"\n  required_providers {\n    azurerm = \">= 2.60.0\"\n  }\n}\n\n#File: providers.tf\nprovider \"azurerm\" {\n  version = \"=2.60.0\"\n  features {\n  }\n}\n"}]}
{"messages": [{"role": "user", "content": "Set up the required AWS and Google providers in your Terraform configuration. Specify the AWS provider to use a variable for the region. Configure the Google provider with the GCP project ID and region, using a service account key file for authentication. Ensure to include the impersonation for the designated service account. Declare the necessary variables in a separate file to maintain clarity and organization."}, {"role": "assistant", "content": "\n#File: main.tf\n\n#File: outputs.tf\n\n#File: providers.tf\n# ===================================\n# Author: @wfamous / famousinvogue.com\n# Providers script\n# ===================================\n\nterraform {\n  required_providers {\n    aws = {\n      source  = \"hashicorp/aws\"\n      version = \"~> 5.81\"\n    }\n\n    google = {\n      source  = \"hashicorp/google\"\n      version = \"~> 6.23.0\"\n    }\n  }\n}\n\n# === providers configs\n\nprovider \"aws\" {\n  region  = var.aws_region\n}\n\nprovider \"google\" {\n      project                     = var.gcp_project_id\n      region                      = var.gcp_region\n      credentials = file(\"../../external/sa-key.json\")\n      impersonate_service_account = \"${var.gcp_sa_name}@${var.gcp_project_id}.${var.gcp_sa_host}\" # for workload\n}\n#File: variables.tf\n"}]}
{"messages": [{"role": "user", "content": "Create an Azure Resource Group with the specified environment name and location. Set up an Azure Cognitive Account configured for OpenAI with public network access enabled. Deploy the chosen OpenAI model using the defined parameters. Output the Azure OpenAI endpoint and the primary and secondary access keys as sensitive information. Ensure that all needed variables are correctly defined for seamless deployment."}, {"role": "assistant", "content": "\n#File: main.tf\nresource \"azurerm_resource_group\" \"main\" {\n  location = var.resource_group_location\n  name     = var.env_name\n}\n\nresource \"azurerm_cognitive_account\" \"main\" {\n  kind                          = \"OpenAI\"\n  location                      = azurerm_resource_group.main.location\n  name                          = var.env_name\n  public_network_access_enabled = true\n  resource_group_name           = azurerm_resource_group.main.name\n  sku_name                      = \"S0\"\n  custom_subdomain_name         = var.env_name\n\n  network_acls {\n    default_action = \"Allow\"\n  }\n}\n\nresource \"azurerm_cognitive_deployment\" \"main\" {\n  cognitive_account_id   = azurerm_cognitive_account.main.id\n  name                   = var.env_name\n  version_upgrade_option = \"OnceNewDefaultVersionAvailable\"\n\n  model {\n    format  = \"OpenAI\"\n    name    = var.openai_model_name\n    version = var.openai_model_version\n  }\n\n  scale {\n    type     = \"Standard\"\n    capacity = var.openai_tokens_per_minute\n  }\n}\n\n#File: output.tf\noutput \"azure_openai_endpoint\" {\n  description = \"The endpoint used to connect to the Cognitive Service Account.\"\n  value       = azurerm_cognitive_account.main.endpoint\n}\n\noutput \"openai_primary_access_key\" {\n  description = \"A primary access key which can be used to connect to the Cognitive Service Account.\"\n  value       = azurerm_cognitive_account.main.primary_access_key\n  sensitive   = true\n}\n\noutput \"openai_secondary_access_key\" {\n  description = \"A secondary access key which can be used to connect to the Cognitive Service Account.\"\n  value       = azurerm_cognitive_account.main.secondary_access_key\n  sensitive   = true\n}\n\n#File: provider.tf\nterraform {\n  required_version = \">= 1.3.0\"\n\n  required_providers {\n    azurerm = {\n      source  = \"hashicorp/azurerm\"\n      version = \"3.100.0\"\n    }\n  }\n}\n\nprovider \"azurerm\" {\n  features {}\n}\n\n\n#File: variables.tf\nvariable \"env_name\" {\n  description = \"Environment name to use for resources\"\n  type        = string\n  default     = \"lisenet-openai\"\n}\n\nvariable \"resource_group_location\" {\n  description = \"Location of the resource group.\"\n  type        = string\n  default     = \"uksouth\"\n}\n\nvariable \"openai_model_name\" {\n  description = \"Azure OpenAI model name.\"\n  type        = string\n  default     = \"gpt-35-turbo\"\n}\n\nvariable \"openai_model_version\" {\n  description = \"Azure OpenAI model version.\"\n  type        = string\n  default     = \"0301\"\n}\n\nvariable \"openai_tokens_per_minute\" {\n  description = \"Tokens per minute (thousands).\"\n  type        = number\n  default     = 1\n}\n"}]}
{"messages": [{"role": "user", "content": "Create a Terraform configuration with the Azure provider. Create a resource group for JupyterHub in a specified location. Create a virtual network and a subnet within that resource group. Generate a public IP address and establish a network security group with rules for SSH and HTTP access. Finally, create a Linux virtual machine with SSH key authentication and configure it using Ansible."}, {"role": "assistant", "content": "\n#File: main.tf\nterraform {\n  required_providers {\n    azurerm = {\n      source  = \"hashicorp/azurerm\"\n      version = \"~>2.0\"\n    }\n  }\n}\n\nresource \"random_id\" \"suffix\" {\n  byte_length = 2\n}\n\nprovider \"azurerm\" {\n  features {}\n}\n\nresource \"azurerm_resource_group\" \"jupyterhub\" {\n  name     = var.name_rg\n  location = var.location\n}\n\nresource \"azurerm_virtual_network\" \"jupyterhub\" {\n  name                = \"${var.name}_vnet\"\n  depends_on          = [azurerm_resource_group.jupyterhub]\n  location            = var.location\n  resource_group_name = var.name_rg\n\n  address_space = [\"10.0.0.0/16\"]\n}\n\nresource \"azurerm_subnet\" \"jupyterhub\" {\n  name                = \"${var.name}_subnet\"\n  depends_on          = [azurerm_virtual_network.jupyterhub]\n  resource_group_name = var.name_rg\n\n  address_prefixes     = [\"10.0.2.0/24\"]\n  virtual_network_name = azurerm_virtual_network.jupyterhub.name\n}\n\nresource \"azurerm_public_ip\" \"jupyterhub\" {\n  name                = \"${var.name}_public_ip\"\n  depends_on          = [azurerm_resource_group.jupyterhub]\n  location            = var.location\n  resource_group_name = var.name_rg\n\n  allocation_method = \"Dynamic\"\n}\n\n// Get public ip of the current device\ndata \"http\" \"personal_ip\" {\n  url = \"https://ifconfig.co/json\"\n  request_headers = {\n    Accept = \"application/json\"\n  }\n}\n\nlocals {\n  depends_on  = [data.http.personal_ip]\n  personal_ip = jsondecode(data.http.personal_ip.body)\n}\n\nresource \"azurerm_network_security_group\" \"jupyterhub\" {\n  name                = \"${var.name}_nsg\"\n  depends_on          = [azurerm_resource_group.jupyterhub, local.personal_ip]\n  location            = var.location\n  resource_group_name = var.name_rg\n\n  security_rule {\n    name                       = \"SSH\"\n    priority                   = 1001\n    direction                  = \"Inbound\"\n    access                     = \"Allow\"\n    protocol                   = \"Tcp\"\n    source_port_range          = \"*\"\n    destination_port_range     = \"22\"\n    source_address_prefix      = \"${local.personal_ip.ip}/32\"\n    destination_address_prefix = \"*\"\n  }\n\n  security_rule {\n    name                       = \"Browser\"\n    priority                   = 1002\n    direction                  = \"Inbound\"\n    access                     = \"Allow\"\n    protocol                   = \"Tcp\"\n    source_port_range          = \"*\"\n    destination_port_range     = \"80\"\n    source_address_prefixes    = compact(concat([\"${local.personal_ip.ip}/32\"], var.whitelisted_ip_addresses))\n    destination_address_prefix = \"*\"\n  }\n\n}\n\n// Create NIC to connect VM to IP, subnet and NSG\nresource \"azurerm_network_interface\" \"jupyterhub\" {\n  name                = \"${var.name}_nic\"\n  depends_on          = [azurerm_resource_group.jupyterhub]\n  location            = var.location\n  resource_group_name = var.name_rg\n\n  ip_configuration {\n    name                          = \"${var.name}_nic_configuration\"\n    subnet_id                     = azurerm_subnet.jupyterhub.id\n    private_ip_address_allocation = \"Dynamic\"\n    public_ip_address_id          = azurerm_public_ip.jupyterhub.id\n  }\n}\n\nresource \"azurerm_network_interface_security_group_association\" \"jupyterhub\" {\n  network_interface_id      = azurerm_network_interface.jupyterhub.id\n  network_security_group_id = azurerm_network_security_group.jupyterhub.id\n}\n\nresource \"azurerm_linux_virtual_machine\" \"jupyterhub\" {\n  name                = \"${var.name}-${random_id.suffix.hex}\"\n  depends_on          = [azurerm_resource_group.jupyterhub, azurerm_network_interface.jupyterhub]\n  location            = var.location\n  resource_group_name = var.name_rg\n\n  network_interface_ids = [azurerm_network_interface.jupyterhub.id]\n  size                  = var.instance_size\n\n  os_disk {\n    caching              = \"ReadWrite\"\n    storage_account_type = \"Standard_LRS\"\n  }\n\n  source_image_reference {\n    publisher = \"Canonical\"\n    offer     = \"UbuntuServer\"\n    sku       = \"18.04-LTS\"\n    version   = \"latest\"\n  }\n\n  admin_username                  = var.default_user\n  disable_password_authentication = true\n\n  admin_ssh_key {\n    username   = var.default_user\n    public_key = file(\"${var.ssh_key_location}.pub\")\n  }\n\n  tags = {\n    \"${var.default_user}\" = var.name\n  }\n}\n\n// Retrieve Azure VM with a data object, the resource does not contain the value\ndata \"azurerm_public_ip\" \"ip_ref\" {\n  name                = \"${var.name}_public_ip\"\n  depends_on          = [azurerm_public_ip.jupyterhub, azurerm_linux_virtual_machine.jupyterhub]\n  resource_group_name = var.name_rg\n}\n\n// Configure VMs with Ansible.\n// First to a remote-exec so that we are sure the VM is configured once we run Ansible\nresource \"null_resource\" \"ansible\" {\n  depends_on = [data.azurerm_public_ip.ip_ref]\n  provisioner \"remote-exec\" {\n    inline = [\"echo VM is configured\"]\n    connection {\n      user        = \"ansible\"\n      private_key = file(var.ssh_key_location)\n      host        = data.azurerm_public_ip.ip_ref.ip_address\n    }\n  }\n\n  provisioner \"local-exec\" {\n    command = \"ansible-playbook -i '${data.azurerm_public_ip.ip_ref.ip_address},'  --skip-tags add_user ../../playbooks/jupyterhub/playbook.yaml\"\n  }\n}\n#File: variables.tf\nvariable \"default_user\" {\n  type        = string\n  description = \"Default user of the VMs\"\n}\n\nvariable \"instance_size\" {\n  type        = string\n  description = \"The size of the VM, see 'az vm list-sizes -l westeurope -o table' for an overview\"\n}\n\nvariable \"location\" {\n  type        = string\n  description = \"Datacenter to provision VMs, see 'az account list-locations -o table' for an overview\"\n}\n\nvariable \"name\" {\n  type        = string\n  description = \"Default prefix for Azure components\"\n}\n\nvariable \"name_rg\" {\n  type        = string\n  description = \"Name or Azure resource groups where everything will be stored\"\n}\n\nvariable \"ssh_key_location\" {\n  type        = string\n  description = \"SSH key pair that should be used\"\n}\n\nvariable \"whitelisted_ip_addresses\" {\n  type        = list(string)\n  default     = [\"\"]\n  description = \"Whitelisted IP addresses that can connect to the VM\"\n}\n"}]}
{"messages": [{"role":"user","content":"Provide a aws infrastructure for a BigBlueButton video conferencing system and a Scalelite load balancer on AWS. Define variables for instance types, AMIs, volumes, domain settings, and security groups, and uses modules to deploy the respective EC2 instances. The setup supports multiple BigBlueButton instances and a single Scalelite instance, enabling scalable and manageable video conferencing architecture."},{"role":"assistant","content":"terraform {\r\n  required_version = \">=0.13.0\"\r\n}\r\n\r\nprovider \"aws\" {\r\n  profile = var.aws_profile\r\n  region  = var.aws_region\r\n}\r\n\r\nvariable \"aws_profile\" {\r\n  description = \"The AWS profile to use\"\r\n  default     = \"default\"\r\n}\r\n\r\nvariable \"aws_region\" {\r\n  description = \"The AWS region to provision resources in\"\r\n  default     = \"us-east-1\"\r\n}\r\n\r\nvariable \"key_name\" {\r\n  description = \"Name for your SSH public key\"\r\n  default     = \"bigbluebutton\"\r\n}\r\n\r\nvariable \"bigbluebutton_instance_type\" {\r\n  description = \"EC2 instance type (bigbluebutton)\"\r\n  default     = \"t2.large\"\r\n}\r\n\r\nvariable \"bigbluebutton_aws_ami\" {\r\n  description = \"EC2 instalnce AMI (bigbluebutton)\"\r\n  default     = \"ami-039a49e70ea773ffc\"\r\n}\r\n\r\nvariable \"bigbluebutton_domain_name\" {\r\n  description = \"Server domain name (bigbluebutton)\"\r\n  default     = \"example.com\"\r\n}\r\n\r\nvariable \"bigbluebutton_subdomain_name\" {\r\n  description = \"Server subdomain name (bigbluebutton)\"\r\n  default     = \"server\"\r\n}\r\n\r\nvariable \"bigbluebutton_count\" {\r\n  description = \"Number of bigbluebutton servers\"\r\n  default     = 1\r\n}\r\n\r\nvariable \"bigbluebutton_security_group_name\" {\r\n  description = \"Name for bigbluebutton security group\"\r\n  default     = \"bigbluebutton-security-group\"\r\n}\r\n\r\nvariable \"bigbluebutton_volume_size\" {\r\n  description = \"Volume size in GiB (bigbluebutton)\"\r\n  default     = 80\r\n}\r\n\r\nvariable \"scalelite_instance_type\" {\r\n  description = \"EC2 instance type (scalelite)\"\r\n  default     = \"t3.medium\"\r\n}\r\n\r\nvariable \"scalelite_aws_ami\" {\r\n  description = \"EC2 instance AMI (scalelite)\"\r\n  default     = \"ami-07df16d0682f1fa59\"\r\n}\r\n\r\nvariable \"scalelite_domain_name\" {\r\n  description = \"Server domain name (scalelite)\"\r\n  default     = \"example.com\"\r\n}\r\n\r\nvariable \"scalelite_subdomain_name\" {\r\n  description = \"Server subdomain name (scalelite)\"\r\n  default     = null\r\n}\r\n\r\nvariable \"scalelite_security_group_name\" {\r\n  description = \"Name for scalelite security group\"\r\n  default     = \"scalelite-security-group\"\r\n}\r\n\r\nvariable \"scalelite_volume_size\" {\r\n  description = \"Volume size in GiB (scalelite)\"\r\n  default     = 50\r\n}\r\n\r\nmodule \"bigbluebutton_instance\" {\r\n  source = \"../modules/bigbluebutton\"\r\n\r\n  count = var.bigbluebutton_count\r\n\r\n  key_name            = var.key_name\r\n  security_group_name = var.bigbluebutton_security_group_name\r\n  instance_type       = var.bigbluebutton_instance_type\r\n  aws_ami             = var.bigbluebutton_aws_ami\r\n  domain_name         = var.bigbluebutton_domain_name\r\n  subdomain_name      = \"${var.bigbluebutton_subdomain_name}-${count.index}\"\r\n  volume_size         = var.bigbluebutton_volume_size\r\n}\r\n\r\nmodule \"scalelite_instance\" {\r\n  source = \"../modules/scalelite\"\r\n\r\n  key_name            = var.key_name\r\n  security_group_name = var.scalelite_security_group_name\r\n  instance_type       = var.scalelite_instance_type\r\n  aws_ami             = var.scalelite_aws_ami\r\n  domain_name         = var.scalelite_domain_name\r\n  subdomain_name      = var.scalelite_subdomain_name\r\n  volume_size         = var.scalelite_volume_size\r\n}"}]}
{"messages": [{"role":"user","content":"Create an EC2 instance resource using a specified AMI vai variable and a fixed instance type of \"t2.micro.\" The instance is tagged with a name that can be set through a variable, allowing flexible naming and regional deployment based on user input."},{"role":"assistant","content":"provider \"aws\" {\r\n  region = var.deploy_region\r\n}\r\n\r\nresource \"aws_instance\" \"app_server\" {\r\n  ami           = var.ami_template\r\n  instance_type = \"t2.micro\"\r\n\r\n  tags = {\r\n    Name = var.instance_name\r\n  }\r\n}\r\n\r\nvariable \"instance_name\" {\r\n  description = \"Value of the Name tag for the EC2 instance\"\r\n  type        = string\r\n  default     = \"ExampleAppServerInstance\"\r\n}\r\n\r\nvariable \"deploy_region\" {\r\n  description = \"Value of the region to provision the EC2 instance\"\r\n  type        = string\r\n}\r\n\r\n\r\nvariable \"ami_template\" {\r\n  description = \"Value of the AMI to provision the EC2 instance\"\r\n  type        = string\r\n}\r\n"}]}
{"messages": [{"role": "user", "content": "Create a Google Cloud Storage bucket with a globally unique name derived from the host project ID. Activate necessary Google APIs for the project you specify. Create a service account specifically for ScoutSuite and assign it relevant IAM roles based on the scanning scope. Implement IAM bindings for the service account to ensure it has the appropriate permissions in your organization, folder, or project. Finally, initiate the Cloud Build process to generate the ScoutSuite report."}, {"role": "assistant", "content": "\n#File: main.tf\n# Copyright 2022 Google\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n\n#     http://www.apache.org/licenses/LICENSE-2.0\n\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\nlocals {\n  scoutsuite_bucket = \"${var.host_project_id}-scoutsuite\"\n}\n\nmodule \"project_services\" {\n  source  = \"terraform-google-modules/project-factory/google//modules/project_services\"\n  version = \"~> 13.0\"\n  project_id = var.host_project_id\n  activate_apis = [\n    \"iam.googleapis.com\", \n    \"cloudresourcemanager.googleapis.com\",\n    \"storage.googleapis.com\",\n    \"cloudbuild.googleapis.com\"\n  ]\n  disable_dependent_services = false\n  disable_services_on_destroy = false\n}\n\n# Pre-requiste to have a GCS Bucket name with format \"<project-id>-scoutsuite\"\nresource \"google_storage_bucket\" \"bucket\" {\n  name     = local.scoutsuite_bucket  # Every bucket name must be globally unique\n  location = \"${var.region}\"\n  uniform_bucket_level_access = true\n  force_destroy = true\n}\n\n# Create Service Account to run Scoutsuite\n\nresource \"google_service_account\" \"scoutsuite_service_account\" {\n  account_id   = \"${var.scoutsuite_sa}-sa\"\n  display_name = \"ScoutSuite Service Account\"\n}\n\n\nresource \"google_project_iam_member\" \"cloud_build_service_account_roles\" {\n  project = var.host_project_id\n  role = \"roles/logging.logWriter\"\n  member   = format(\"serviceAccount:%s\", google_service_account.scoutsuite_service_account.email)\n}\n\nresource \"google_project_iam_binding\" \"cloud_build_binding\" {\n  project = var.host_project_id\n  role    = \"roles/storage.admin\"\n  members = [\n    format(\"serviceAccount:%s\", google_service_account.scoutsuite_service_account.email),\n  ]\n  condition {\n    title       = \"Restrict to CloudBuild bucket\"\n    expression  = \"resource.name.startsWith(\\\"projects/_/buckets/${var.host_project_id}_cloudbuild\\\")||\\nresource.name.startsWith(\\\"projects/_/buckets/${google_storage_bucket.bucket.name}\\\")\"\n  }\n}\n\n# If scope set to Org scan\n\nresource \"google_organization_iam_member\" \"scoutsuite_service_account_roles\" {\n  org_id = regex(\"organization-id (.*)\", var.scan_scope)[0]\n  member   = format(\"serviceAccount:%s\", google_service_account.scoutsuite_service_account.email)\n  for_each = length(regexall(\"organization-id\", var.scan_scope)) > 0 ? toset([\n    \"roles/viewer\",\n    \"roles/iam.securityReviewer\",\n    \"roles/stackdriver.accounts.viewer\"\n  ]) : []\n  role     = each.key\n\n}\n\nresource \"time_sleep\" \"wait_cloudbuild_sa_iam_org\" {\n  count = length(regexall(\"organization-id\", var.scan_scope)) > 0 ? 1 : 0\n  depends_on      = [google_organization_iam_member.scoutsuite_service_account_roles]\n  create_duration = \"60s\"\n}\n\n\n# If scope set to Project scan\n\nresource \"google_project_iam_member\" \"scoutsuite_service_account_roles\" {\n  member   = format(\"serviceAccount:%s\", google_service_account.scoutsuite_service_account.email)\n  project = regex(\"project-id (.*)\", var.scan_scope)[0]\n  for_each = length(regexall(\"project-id\", var.scan_scope)) > 0 ? toset([\n    \"roles/viewer\",\n    \"roles/iam.securityReviewer\",\n    \"roles/stackdriver.accounts.viewer\"\n  ]) : []\n  role     = each.key\n\n}\n\nresource \"time_sleep\" \"wait_cloudbuild_sa_iam_project\" {\n  count = length(regexall(\"project-id\", var.scan_scope)) > 0 ? 1 : 0\n  depends_on      = [google_project_iam_member.scoutsuite_service_account_roles]\n  create_duration = \"60s\"\n}\n\n# If scope set to Folder scan\n\nresource \"google_folder_iam_member\" \"scoutsuite_service_account_roles\" {\n  member   = format(\"serviceAccount:%s\", google_service_account.scoutsuite_service_account.email)\n  folder = regex(\"folder-id (.*)\", var.scan_scope)[0]\n  for_each = length(regexall(\"folder-id\", var.scan_scope)) > 0 ? toset([\n    \"roles/viewer\",\n    \"roles/iam.securityReviewer\",\n    \"roles/stackdriver.accounts.viewer\"\n  ]) : []\n  role     = each.key\n\n}\n\nresource \"time_sleep\" \"wait_cloudbuild_sa_iam_folder\" {\n  count = length(regexall(\"folder-id\", var.scan_scope)) > 0 ? 1 : 0\n  depends_on      = [google_folder_iam_member.scoutsuite_service_account_roles]\n  create_duration = \"60s\"\n}\n\n# Run the Cloud Build Submit for Scout Suite report generation\n\nmodule \"gcloud_build_image\" {\n  source  = \"terraform-google-modules/gcloud/google\"\n  version = \"~> 3.1\"\n\n  platform = \"linux\"\n\n  create_cmd_entrypoint  = \"gcloud\"\n  create_cmd_body        = \"builds submit build/ --config=build/cloudbuild.yaml --substitutions=_SCOUTSUITE_BUCKET='${google_storage_bucket.bucket.name}',_SCOPE='${var.scan_scope}',_SERVICE_ACCOUNT='${google_service_account.scoutsuite_service_account.email}',_PROJECT_ID='${var.host_project_id}' --project ${var.host_project_id} --region=${var.region} --timeout=12000s\"\n\n  module_depends_on = [\n    time_sleep.wait_cloudbuild_sa_iam_org,\n    time_sleep.wait_cloudbuild_sa_iam_project,\n    time_sleep.wait_cloudbuild_sa_iam_folder\n  ]\n}\n#File: providers.tf\n# Copyright 2022 Google\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n\n#     http://www.apache.org/licenses/LICENSE-2.0\n\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\nterraform {\n  required_version = \">= 0.14.0\"\n\n  required_providers {\n    google = {\n      source  = \"hashicorp/google\"\n      version = \"~> 4.41.0\"\n    }\n    google-beta = {\n      source  = \"hashicorp/google-beta\"\n      version = \"~> 4.41.0\"\n    }\n  }\n}\n\nprovider \"google\" {\n  project = var.host_project_id\n  region  = var.region\n}\n#File: variables.tf\n# Copyright 2022 Google\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n\n#     http://www.apache.org/licenses/LICENSE-2.0\n\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n\nvariable \"host_project_id\" {\n  description = \"The project to use to run Scoutsuite, Cloud Build, and create the SA and GCS Bucket.\"\n  type        = string\n}\n\nvariable \"scan_scope\" {\n  description = \"The scope of where Scoutsuite should scan. Valid inputs are: ' organization-id <ORGANIZATION ID>'; 'folder-id <FOLDER ID>'; 'project-id <PROJECT ID>'; 'all-projects' (that the service account has access to)\"\n  type        = string\n}\n\nvariable \"region\" {\n  description = \"The Google Cloud region for the GCS Bucket to be created, and the region for Cloud Build to use\" \n  type        = string\n}\n\nvariable \"scoutsuite_sa\" {\n  description = \"The service account for ScoutSuite.\"\n  default = \"scoutsuite\"\n  type        = string\n}\n\n"}]}
{"messages": [{"role": "user", "content": "Create a naming convention for public IPs, network interfaces, and virtual machines using the `azurecaf_naming_convention` resource. Generate public IPs with a static allocation method and associate them with their respective network interfaces. Set up dynamic network interfaces and configure their IP settings, linking them to the generated public IPs. Establish Windows virtual machines with specified sizes and credentials, ensuring they utilize the correct network interfaces. Finally, implement a domain join process by executing a WinRM quick configuration as a custom script extension."}, {"role": "assistant", "content": "\n#File: domain_members.tf\n//Public IP\nresource \"azurecaf_naming_convention\" \"pip\" {\n  for_each = var.vm_domain_members\n\n  name          = each.value.name\n  resource_type = \"pip\"\n  convention    = lookup(each.value, \"convention\", local.global_settings.convention)\n  max_length    = lookup(each.value, \"max_length\", null)\n}\n\nresource \"azurerm_public_ip\" \"vm\" {\n  for_each = var.vm_domain_members\n\n  name                = azurecaf_naming_convention.pip[each.key].result\n  location            = azurerm_resource_group.rg[each.value.resource_group_key].location\n  resource_group_name = azurerm_resource_group.rg[each.value.resource_group_key].name\n  allocation_method   = \"Static\"\n}\n\n\ndata \"azurerm_public_ip\" \"vm\" {\n  for_each = var.vm_domain_members\n\n  name                = azurerm_public_ip.vm[each.key].name\n  resource_group_name = azurerm_resource_group.rg[each.value.resource_group_key].name\n}\n\n\n//Network interface\nresource \"azurecaf_naming_convention\" \"nic\" {\n  for_each = var.vm_domain_members\n\n  name          = each.value.name\n  resource_type = \"nic\"\n  convention    = lookup(each.value, \"convention\", local.global_settings.convention)\n  max_length    = lookup(each.value, \"max_length\", null)\n}\n\nresource \"azurerm_network_interface\" \"vm\" {\n  for_each   = var.vm_domain_members\n  depends_on = [azurerm_network_interface.dc1] //Which has a static private IP, whereas these are dynamic\n\n  name                = azurecaf_naming_convention.nic[each.key].result\n  location            = azurerm_resource_group.rg[each.value.resource_group_key].location\n  resource_group_name = azurerm_resource_group.rg[each.value.resource_group_key].name\n\n  ip_configuration {\n    name                          = \"internal\"\n    subnet_id                     = azurerm_subnet.subnet[each.value.subnet_key].id\n    private_ip_address_allocation = \"Dynamic\"\n    public_ip_address_id          = azurerm_public_ip.vm[each.key].id\n  }\n}\n\n//VM\nresource \"azurecaf_naming_convention\" \"vm\" {\n  for_each = var.vm_domain_members\n\n  name          = each.value.name\n  resource_type = \"vmw\"\n  convention    = lookup(each.value, \"convention\", local.global_settings.convention)\n  max_length    = lookup(each.value, \"max_length\", null)\n}\n\nresource \"azurerm_windows_virtual_machine\" \"vm\" {\n  for_each   = var.vm_domain_members\n  depends_on = [azurerm_virtual_machine_extension.dc1_bootstrap]\n\n  name                  = azurecaf_naming_convention.vm[each.key].result\n  location              = azurerm_resource_group.rg[each.value.resource_group_key].location\n  resource_group_name   = azurerm_resource_group.rg[each.value.resource_group_key].name\n  size                  = each.value.size\n  admin_username        = var.admin_username\n  admin_password        = var.admin_password\n  network_interface_ids = [azurerm_network_interface.vm[each.key].id]\n\n  os_disk {\n    caching              = \"ReadWrite\"\n    storage_account_type = \"Premium_LRS\"\n  }\n\n  source_image_reference {\n    publisher = each.value.source_image_reference.publisher\n    offer     = each.value.source_image_reference.offer\n    sku       = each.value.source_image_reference.sku\n    version   = each.value.source_image_reference.version\n  }\n\n  lifecycle {\n    ignore_changes = [\n      identity, //MSI auto-applied\n      os_disk,\n      admin_username,\n      admin_password\n    ]\n  }\n}\n\n//Wait for the domain to be available to join\nresource \"time_sleep\" \"wait_for_domain\" {\n  depends_on      = [azurerm_virtual_machine_extension.dc1_bootstrap]\n  create_duration = \"10m\"\n}\n\n//Domain join and winrm quickconfig\nresource \"azurerm_virtual_machine_extension\" \"vm_bootstrap\" {\n  for_each   = var.vm_domain_members\n  depends_on = [time_sleep.wait_for_domain]\n\n  name                 = \"JoinDomain\"\n  virtual_machine_id   = azurerm_windows_virtual_machine.vm[each.key].id\n  publisher            = \"Microsoft.Compute\"\n  type                 = \"CustomScriptExtension\"\n  type_handler_version = \"1.10\"\n  //Server 2008R2 ships with PS2, so we'll use netdom instead\n  /*\n  settings = <<-SETTINGS\n    {\n        \"commandToExecute\": \"powershell -ExecutionPolicy Unrestricted -Command \\\"${local.cmd_domain_join}\\\" && exit 0\"\n    }\n  SETTINGS\n  */\n  //var.admin_username ends up as the first Enterprise Admin on creation of the primary DC anyway, so we'll use it here\n  settings = <<-SETTINGS\n    {\n        \"commandToExecute\": \"winrm quickconfig -q && netdom join %computername% /d:${var.ad_forest_name} /ud:${split(\".\", var.ad_forest_name)[0]}\\\\${var.admin_username} /pd:${var.admin_password} /reboot:2 && exit 0\"\n    }\n  SETTINGS\n  lifecycle {\n    ignore_changes = all\n  }\n}\n\n//todo winrm quickconfig -q on server2008r2 and under\n\n\nlocals {\n  //Server 2008R2 ships with PS2, so we'll use netdom instead\n  /*\n  cmd_domain_join_code = [\n    \"$u = '${var.admin_username}'\",\n    \"$p = '${var.admin_password}' | ConvertTo-SecureString -AsPlainText -Force\",\n    \"$c = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $u,$p\",\n    \"Add-Computer -DomainName '${var.ad_forest_name}' -Credential $c -Restart -Force\"\n  ]\n  cmd_domain_join = join(\"; \", local.cmd_domain_join_code)\n  */\n}\n#File: main.tf\n# Configure the Azure provider\nterraform {\n  required_providers {\n    azurerm = {\n      source  = \"hashicorp/azurerm\"\n      version = \">= 2.26\"\n    }\n    azuread = {\n      source  = \"hashicorp/azuread\"\n      version = \"~> 0.10.0\"\n    }\n    random = {\n      source  = \"hashicorp/random\"\n      version = \"~> 2.2.1\"\n    }\n    null = {\n      source  = \"hashicorp/null\"\n      version = \"~> 2.1.0\"\n    }\n    azurecaf = {\n      source  = \"aztfmod/azurecaf\"\n      version = \"~>0.4.3\"\n    }\n    time = {\n      source  = \"hashicorp/time\"\n      version = \"~>0.5.0\"\n    }\n\n  }\n  required_version = \">= 0.13\"\n}\n\nprovider \"azurerm\" {\n  features {}\n}\n\nresource \"random_string\" \"prefix\" {\n  length  = 4\n  special = false\n  upper   = false\n  number  = false\n}\n\nresource \"random_string\" \"suffix\" {\n  length  = 4\n  special = false\n  upper   = false\n  number  = false\n}\n\nresource \"random_string\" \"alpha1\" {\n  length  = 1\n  special = false\n  upper   = false\n  number  = false\n}\n\n\nlocals {\n  local_tags = {\n    \"Environment\" = var.environment\n    \"CreatedBy\"   = \"Terraform\"\n  }\n  tags = merge(var.tags, local.local_tags)\n\n  global_settings = {\n    suffix           = local.suffix\n    convention       = var.convention\n    default_location = var.location\n    environment      = var.environment\n  }\n\n  prefix             = var.prefix\n  prefix_with_hyphen = var.prefix == \"\" ? \"\" : \"${local.prefix}-\"\n\n  suffix             = var.suffix == null ? random_string.suffix.result : var.suffix\n  suffix_with_hyphen = \"-${local.suffix}\"\n}\n#File: networking.tf\n//vnet\nresource \"azurecaf_naming_convention\" \"vnet\" {\n  for_each = var.networking\n\n  name          = each.value.name\n  resource_type = \"azurerm_virtual_network\"\n  convention    = lookup(each.value, \"convention\", local.global_settings.convention)\n  postfix       = lookup(each.value, \"usesuffix\", false) == true ? local.suffix : \"\"\n  max_length    = lookup(each.value, \"max_length\", null)\n}\n\nresource \"azurerm_virtual_network\" \"vnet\" {\n  for_each            = var.networking\n  name                = azurecaf_naming_convention.vnet[each.key].result\n  address_space       = each.value.address_space\n  resource_group_name = azurerm_resource_group.rg[each.value.resource_group_key].name\n  location            = lookup(each.value, \"location\", local.global_settings.default_location)\n  tags                = merge(lookup(each.value, \"tags\", {}), local.tags)\n  dns_servers         = [var.vm.dc1.private_ip_address]\n}\n\n//Subnets\nresource \"azurecaf_naming_convention\" \"subnet\" {\n  for_each = var.subnets\n\n  name          = each.value.name\n  resource_type = \"azurerm_subnet\"\n  convention    = lookup(each.value, \"convention\", local.global_settings.convention)\n  postfix       = lookup(each.value, \"usesuffix\", false) == true ? local.suffix : \"\"\n  max_length    = lookup(each.value, \"max_length\", null)\n}\n\nresource \"azurerm_subnet\" \"subnet\" {\n  for_each = var.subnets\n\n  name                 = azurecaf_naming_convention.subnet[each.key].result\n  address_prefixes     = each.value.address_prefixes\n  resource_group_name  = azurerm_virtual_network.vnet[each.value.virtual_network_key].resource_group_name\n  virtual_network_name = azurerm_virtual_network.vnet[each.value.virtual_network_key].name\n}\n\n//Network security group\nresource \"azurecaf_naming_convention\" \"nsg\" {\n  name          = \"default\"\n  resource_type = \"azurerm_network_security_group\"\n  convention    = local.global_settings.convention\n}\n\nresource \"azurerm_network_security_group\" \"nsg\" {\n  name                = azurecaf_naming_convention.nsg.result\n  location            = azurerm_resource_group.rg[var.resource_groups[\"core\"].name].location\n  resource_group_name = azurerm_resource_group.rg[var.resource_groups[\"core\"].name].name\n\n  security_rule {\n    name                       = \"AllowRDP\"\n    priority                   = 150\n    direction                  = \"Inbound\"\n    access                     = \"Allow\"\n    protocol                   = \"Tcp\"\n    source_port_range          = \"*\"\n    destination_port_range     = \"*\"\n    source_address_prefix      = var.allow_rdp_from\n    destination_address_prefix = \"*\"\n  }\n}\n\nresource \"azurerm_subnet_network_security_group_association\" \"nsg_assoc\" {\n  subnet_id                 = azurerm_subnet.subnet[var.subnets[\"default\"].name].id\n  network_security_group_id = azurerm_network_security_group.nsg.id\n}\n#File: output.tf\n/*\noutput resource_groups {\n  sensitive = false\n  value     = azurerm_resource_group.rg\n}\n\noutput networking {\n  sensitive = false\n  value     = azurerm_virtual_network.vnet\n}\n*/\n\noutput ip_primary_domain_controller {\n  sensitive   = false\n  value       = data.azurerm_public_ip.dc1.ip_address\n  description = \"Primary Domain Controller public IP address\"\n}\n\noutput ip_domain_members {\n  sensitive   = false\n  value       = zipmap(values(azurerm_windows_virtual_machine.vm)[*].name, values(azurerm_public_ip.vm)[*].ip_address)\n  description = \"Domain member's IP addresses\"\n}\n#File: primary_domain_controller.tf\n//Public IP\nresource \"azurecaf_naming_convention\" \"dc1_pip\" {\n  name          = var.vm.dc1.name\n  resource_type = \"azurerm_public_ip\"\n  convention    = lookup(var.vm.dc1, \"convention\", local.global_settings.convention)\n  max_length    = lookup(var.vm.dc1, \"max_length\", null)\n}\n\nresource \"azurerm_public_ip\" \"dc1\" {\n  name                = azurecaf_naming_convention.dc1_pip.result\n  location            = azurerm_resource_group.rg[var.vm.dc1.resource_group_key].location\n  resource_group_name = azurerm_resource_group.rg[var.vm.dc1.resource_group_key].name\n  allocation_method   = \"Static\"\n}\n\ndata \"azurerm_public_ip\" \"dc1\" {\n  name                = azurerm_public_ip.dc1.name\n  resource_group_name = azurerm_resource_group.rg[var.vm.dc1.resource_group_key].name\n}\n\n//Network interface\nresource \"azurecaf_naming_convention\" \"dc1_nic\" {\n  name          = var.vm.dc1.name\n  resource_type = \"azurerm_network_interface\"\n  convention    = lookup(var.vm.dc1, \"convention\", local.global_settings.convention)\n  max_length    = lookup(var.vm.dc1, \"max_length\", null)\n}\n\nresource \"azurerm_network_interface\" \"dc1\" {\n  name                = azurecaf_naming_convention.dc1_nic.result\n  location            = azurerm_resource_group.rg[var.vm.dc1.resource_group_key].location\n  resource_group_name = azurerm_resource_group.rg[var.vm.dc1.resource_group_key].name\n\n  ip_configuration {\n    name                          = \"internal\"\n    subnet_id                     = azurerm_subnet.subnet[var.vm.dc1.subnet_key].id\n    private_ip_address_allocation = \"Static\"\n    private_ip_address            = var.vm.dc1.private_ip_address\n    public_ip_address_id          = azurerm_public_ip.dc1.id\n  }\n}\n\n//VM\nresource \"azurecaf_naming_convention\" \"dc1\" {\n  name          = var.vm.dc1.name\n  resource_type = \"azurerm_windows_virtual_machine_windows\"\n  convention    = lookup(var.vm.dc1, \"convention\", local.global_settings.convention)\n  max_length    = lookup(var.vm.dc1, \"max_length\", null)\n}\n\nresource \"azurerm_windows_virtual_machine\" \"dc1\" {\n  name                  = azurecaf_naming_convention.dc1.result\n  location              = azurerm_resource_group.rg[var.vm.dc1.resource_group_key].location\n  resource_group_name   = azurerm_resource_group.rg[var.vm.dc1.resource_group_key].name\n  size                  = var.vm.dc1.size\n  admin_username        = var.admin_username\n  admin_password        = var.admin_password\n  network_interface_ids = [azurerm_network_interface.dc1.id]\n\n  os_disk {\n    caching              = \"ReadWrite\"\n    storage_account_type = \"Premium_LRS\"\n  }\n  source_image_reference {\n    publisher = \"cloud-infrastructure-services\"\n    offer     = \"ad-dc-2019\"\n    sku       = \"ad-dc-2019\"\n    version   = \"0.0.5\"\n  }\n  plan {\n    name      = \"ad-dc-2019\"\n    product   = \"ad-dc-2019\"\n    publisher = \"cloud-infrastructure-services\"\n  }\n\n  lifecycle {\n    ignore_changes = [\n      identity, //MSI auto-applied\n      os_disk,\n      admin_username,\n      admin_password\n    ]\n  }\n}\n\nresource \"azurerm_virtual_machine_extension\" \"dc1_bootstrap\" {\n  name                 = \"CreateADForest\"\n  virtual_machine_id   = azurerm_windows_virtual_machine.dc1.id\n  publisher            = \"Microsoft.Compute\"\n  type                 = \"CustomScriptExtension\"\n  type_handler_version = \"1.10\"\n\n  settings = <<-SETTINGS\n    {\n        \"commandToExecute\": \"powershell -ExecutionPolicy Unrestricted -File ${local.dc1_bootstrap_pscmd} && exit 0\",\n        \"fileUris\": [\"https://raw.githubusercontent.com/sbgillett/ADDSTestEnvironment/master/scripts/CreateADForest.ps1\"]\n    }\n  SETTINGS\n  lifecycle {\n    ignore_changes = all\n  }\n}\n\nlocals {\n  dc1_bootstrap_pscmd = \"./CreateADForest.ps1 -ForestName ${var.ad_forest_name} -SafeModeAdministratorPassword ${var.safe_mode_administrator_password}\"\n\n  //You can also embed the script directly like this\n  /*\n  dc1_bootstrap_pscmd_1 = \"$SMP = '${var.safe_mode_administrator_password}' | ConvertTo-SecureString -AsPlainText -Force\"\n  dc1_bootstrap_pscmd_2 = \"Install-ADDSForest -CreateDnsDelegation:$false -DatabasePath C:/Windows/NTDS -DomainName ${var.ad_forest_name} -InstallDns:$true -LogPath C:/Windows/NTDS -NoRebootOnCompletion:$false -SysvolPath C:/Windows/SYSVOL -SafeModeAdministratorPassword $SMP -Force\"\n  dc1_bootstrap_pscmd = \"${local.dc1_bootstrap_pscmd_1}; ${local.dc1_bootstrap_pscmd_2}\"\n  */\n}\n#File: resource_groups.tf\nresource \"azurecaf_naming_convention\" \"rg\" {\n  for_each = var.resource_groups\n\n  name          = each.value.name\n  resource_type = \"azurerm_resource_group\"\n  convention    = lookup(each.value, \"convention\", local.global_settings.convention)\n  prefix        = lookup(each.value, \"useprefix\", false) == true ? local.prefix : \"\"\n  postfix       = lookup(each.value, \"usesuffix\", false) == true ? local.suffix : \"\"\n  max_length    = lookup(each.value, \"max_length\", null)\n}\n\nresource \"azurerm_resource_group\" \"rg\" {\n  for_each = var.resource_groups\n\n  name     = azurecaf_naming_convention.rg[each.key].result\n  location = lookup(each.value, \"location\", local.global_settings.default_location)\n  tags     = merge(lookup(each.value, \"tags\", {}), local.tags)\n}\n#File: variables.tf\nvariable \"location\" {\n  type = string\n}\n\nvariable \"prefix\" {\n  type    = string\n  default = null\n}\n\nvariable \"suffix\" {\n  type    = string\n  default = null\n}\n\nvariable \"environment\" {\n  type = string\n}\n\nvariable \"tags\" {\n  default = null\n}\n\nvariable convention {\n  default = \"cafrandom\"\n\n  validation {\n    condition     = contains([\"cafrandom\", \"random\", \"passthrough\", \"cafclassic\"], var.convention)\n    error_message = \"Convention allowed values are cafrandom, random, passthrough or cafclassic.\"\n  }\n}\n\nvariable resource_groups {}\n\nvariable networking {}\n\nvariable subnets {}\n\nvariable vm {}\nvariable vm_domain_members {}\n\nvariable admin_username {\n  type        = string\n  description = \"Local Administrator account username\"\n  default     = \"ladmin\"\n}\nvariable admin_password {\n  type        = string\n  description = \"Local Administrator account password\"\n}\n\nvariable allow_rdp_from {\n  type        = string\n  default     = null\n  description = \"Allow RDP connections to the core vnet from these IPv4 addresses\"\n}\n\nvariable safe_mode_administrator_password {\n  type        = string\n  description = \"Active Directory safe mode administrator password\"\n}\nvariable ad_forest_name {\n  type    = string\n  default = \"corp.contoso.com\"\n}"}]}
{"messages": [{"role": "user", "content": "Create a Terraform configuration that sets up a Google Cloud environment. Specify the required provider and backend settings to manage your Terraform state locally. Create a Google Storage Bucket with versioning enabled and lifecycle rules to delete objects older than 30 days. Define a BigQuery dataset for storing raw data from the Google Storage Bucket. Use variables for project ID, region, storage class, and dataset name to allow for easy configuration."}, {"role": "assistant", "content": "\n#File: main.tf\nterraform {\n  required_version = \">= 1.0\"\n  backend \"local\" {}  # Can change from \"local\" to \"gcs\" (for google) or \"s3\" (for aws), if you would like to preserve your tf-state online\n  required_providers {\n    google = {\n      source  = \"hashicorp/google\"\n    }\n  }\n}\n\nprovider \"google\" {\n  project = var.project\n  region = var.region\n  // credentials = file(var.credentials)  # Use this if you do not want to set env-var GOOGLE_APPLICATION_CREDENTIALS\n}\n\n# Data Lake Bucket\n# Ref: https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/storage_bucket\n\n\nresource \"google_storage_bucket\" \"data-lake-bucket\" {\n  name          = \"${local.data_lake_bucket}\" \n  location      = var.region\n\n  # Optional, but recommended settings:\n  storage_class = var.storage_class\n  uniform_bucket_level_access = true\n\n  versioning {\n    enabled = true\n  }\n\n  lifecycle_rule {\n    action {\n      type = \"Delete\"\n    }\n    condition {\n      age = 30  // days\n    }\n  }\n\n  force_destroy = true\n}\n\n\nresource \"google_bigquery_dataset\" \"dataset\" {\n  dataset_id = var.BQ_DATASET\n  project    = var.project\n  location   = var.region\n}\n#File: variables.tf\nlocals {\n  data_lake_bucket = \"server_logs_bucket\"\n}\n\nvariable \"project\" {\n  description = \"ADD-YOUR-PROJECT-ID_HERE\"\n}\n\nvariable \"region\" {\n  description = \"Region for GCP resources. Choose as per your location: https://cloud.google.com/about/locations\"\n  default = \"europe-west2\"\n  type = string\n}\n\nvariable \"storage_class\" {\n  description = \"Storage class type for your bucket. Check official docs for more info.\"\n  default = \"STANDARD\"\n}\n\nvariable \"BQ_DATASET\" {\n  description = \"BigQuery Dataset that raw data (from GCS) will be written to\"\n  type = string\n  default = \"server_logs_data\"\n}"}]}
{"messages": [{"role": "user", "content": "Create a resource group named \"appservice_docker\" in the \"West Europe\" location. Create an Azure App Service Plan called \"example-appserviceplan\" with the \"Standard\" tier and \"S1\" size, ensuring it's configured for Linux. Define your environment variables for the app service, including the Docker registry information. Launch an Azure App Service named \"dockerreactappservice222\" using the previously created App Service Plan and configure it to run a Docker container with the specified image. Output the ID of the App Service Plan after creation."}, {"role": "assistant", "content": "\n#File: main.tf\nprovider \"azurerm\" {\n  features {}\n}\nresource \"azurerm_resource_group\" \"resource\" {\n  name     = \"appservice_docker\"\n  location = \"West Europe\"\n}\n\nresource \"azurerm_app_service_plan\" \"svcplan\" {\n  name                = \"example-appserviceplan\"\n  location            = azurerm_resource_group.resource.location\n  resource_group_name = azurerm_resource_group.resource.name\n  kind = \"Linux\"\n  reserved = true\n  \n\n  sku {\n    tier = \"Standard\"\n    size = \"S1\"\n  }\n}\n\nlocals {\n env_variables = {\n   DOCKER_REGISTRY_SERVER_URL            = \"URL\"\n   DOCKER_REGISTRY_SERVER_USERNAME       = \"USERNAME\"\n   DOCKER_REGISTRY_SERVER_PASSWORD       = \"PASSWORD\"\n }\n}\n\nresource \"azurerm_app_service\" \"myapp\" {\n  name                = \"dockerreactappservice222\"\n  location            = azurerm_resource_group.resource.location\n  resource_group_name = azurerm_resource_group.resource.name\n  app_service_plan_id = azurerm_app_service_plan.svcplan.id\n  \n\n  site_config {\n    linux_fx_version = \"DOCKER|reactappservice2.azurecr.io/nginxreact\"\n    # registry_source=\"Docker Hub\"\n\n  }\n    app_settings = local.env_variables\n    \n}\n\noutput \"id\" {\n  value = azurerm_app_service_plan.svcplan.id\n}"}]}
{"messages": [{"role": "user", "content": "Create a local variable for the resource group name, storage account name, and service principal name using the naming prefix and a random integer. Create an Azure Entra Service Principal along with its corresponding application and password. Assign the Contributor role to the service principal for the current Azure subscription. Create an Azure resource group and a storage account for Terraform state management. Store essential credentials and storage account information as GitHub Secrets."}, {"role": "assistant", "content": "\n#File: main.tf\n##\n# Locals\n##\nlocals {\n  resource_group_name    = \"${var.naming_prefix}-${random_integer.sa_num.result}\"\n  storage_account_name   = \"${lower(var.naming_prefix)}${random_integer.sa_num.result}\"\n  service_principal_name = \"${var.naming_prefix}-${random_integer.sa_num.result}\"\n}\n\n##\n# Resources\n##\n\n\n## Create Azure Entra Service Principal ##\n\ndata \"azurerm_subscription\" \"current\" {}\n\ndata \"azuread_client_config\" \"current\" {}\n\nresource \"azuread_application\" \"gh_actions\" {\n  display_name = local.service_principal_name\n  owners       = [data.azuread_client_config.current.object_id]\n}\n\nresource \"azuread_service_principal\" \"gh_actions\" {\n  client_id = azuread_application.gh_actions.client_id\n  owners    = [data.azuread_client_config.current.object_id]\n}\n\nresource \"azuread_service_principal_password\" \"gh_actions\" {\n  service_principal_id = azuread_service_principal.gh_actions.object_id\n}\n\n## This assigns contributor role to the service principal ##\n\nresource \"azurerm_role_assignment\" \"gh_actions\" {\n  scope                = data.azurerm_subscription.current.id\n  role_definition_name = \"Contributor\"\n  principal_id         = azuread_service_principal.gh_actions.id\n}\n\n## Create an Azure resource group an an Azure Storage Account to store Terraform State ##\n\nresource \"random_integer\" \"sa_num\" {\n  min = 10000\n  max = 99999\n}\n\n\nresource \"azurerm_resource_group\" \"setup\" {\n  name     = local.resource_group_name\n  location = var.location\n  tags = {\n    usage = var.tag_usage\n    owner = var.tag_owner\n  }\n}\n\nresource \"azurerm_storage_account\" \"sa\" {\n  name                     = local.storage_account_name\n  resource_group_name      = azurerm_resource_group.setup.name\n  location                 = var.location\n  account_tier             = \"Standard\"\n  account_replication_type = \"LRS\"\n  tags = {\n    usage = var.tag_usage\n    owner = var.tag_owner\n  }\n}\n\nresource \"azurerm_storage_container\" \"ct\" {\n  name                 = \"terraform-state\"\n  storage_account_name = azurerm_storage_account.sa.name\n\n}\n\n## Store the Service Principal ID, Password, plus information about the storage account and Azure subscription in GitHub Secrets ##\n\nresource \"github_actions_secret\" \"actions_secret\" {\n  for_each = {\n    STORAGE_ACCOUNT     = azurerm_storage_account.sa.name\n    RESOURCE_GROUP      = azurerm_storage_account.sa.resource_group_name\n    CONTAINER_NAME      = azurerm_storage_container.ct.name\n    ARM_CLIENT_ID       = azuread_service_principal.gh_actions.client_id\n    ARM_CLIENT_SECRET   = azuread_service_principal_password.gh_actions.value\n    ARM_SUBSCRIPTION_ID = data.azurerm_subscription.current.subscription_id\n    ARM_TENANT_ID       = data.azuread_client_config.current.tenant_id\n  }\n\n  repository      = var.github_repository\n  secret_name     = each.key\n  plaintext_value = each.value\n}\n\n#File: terraform.tf\n##\n# Terraform Configuration\n##\nterraform {\n\n  required_version = \">=1.6.0\"\n  required_providers {\n    azurerm = {\n      source  = \"hashicorp/azurerm\"\n      version = \"~> 3.90.0\"\n    }\n    azuread = {\n      source  = \"hashicorp/azuread\"\n      version = \"~> 2.47.0\"\n    }\n    github = {\n      source  = \"integrations/github\"\n      version = \"~> 5.0\"\n    }\n    random = {\n      source  = \"hashicorp/random\"\n      version = \"~> 3.6.0\"\n    }\n  }\n}\n\n\n##\n# Provider configuration\n##\n\nprovider \"azurerm\" {\n  features {}\n}\n\nprovider \"random\" {\n  # Configuration options available\n}\n\nprovider \"azuread\" {\n  # Configuration options\n}\n\nprovider \"github\" {\n  # Configuration options\n}\n#File: variables.tf\n##\n# Variables\n##\n\nvariable \"location\" {\n  type    = string\n  default = \"northeurope\"\n}\n\nvariable \"naming_prefix\" {\n  type    = string\n  default = \"techielass\"\n}\n\nvariable \"github_repository\" {\n  type    = string\n  default = \"github-actions-terraform\"\n}\n\nvariable \"tag_usage\" {\n  type    = string\n  default = \"terraform-state\"\n}\n\nvariable \"tag_owner\" {\n  type    = string\n  default = \"sarah\"\n}"}]}
{"messages": [{"role":"user","content":"Create an IAM role that allows EC2 instances to use SSM. Attach this role to a new EC2 instance. Ensure the instance can be managed via Session Manager."},{"role":"assistant","content":"provider \"aws\" {\r\n  region = \"us-east-1\"\r\n}\r\n\r\nresource \"aws_iam_role\" \"ec2_ssm\" {\r\n  name = \"ec2-ssm-role\"\r\n\r\n  assume_role_policy = jsonencode({\r\n    Version = \"2012-10-17\",\r\n    Statement = [{\r\n      Effect = \"Allow\",\r\n      Principal = {\r\n        Service = \"ec2.amazonaws.com\"\r\n      },\r\n      Action = \"sts:AssumeRole\"\r\n    }]\r\n  })\r\n}\r\n\r\nresource \"aws_iam_role_policy_attachment\" \"ssm_attach\" {\r\n  role       = aws_iam_role.ec2_ssm.name\r\n  policy_arn = \"arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore\"\r\n}\r\n\r\nresource \"aws_instance\" \"managed\" {\r\n  ami           = \"ami-08c40ec9ead489470\"\r\n  instance_type = \"t2.micro\"\r\n  iam_instance_profile = aws_iam_instance_profile.ec2_profile.name\r\n\r\n  tags = {\r\n    Name = \"ssm-ec2\"\r\n  }\r\n}\r\n\r\nresource \"aws_iam_instance_profile\" \"ec2_profile\" {\r\n  name = \"ec2-ssm-profile\"\r\n  role = aws_iam_role.ec2_ssm.name\r\n}\r\n"}]}
{"messages": [{"role":"user","content":"Set up a security group to allow HTTP and HTTPS access from anywhere. Also permit SSH access. Use this for a web server."},{"role":"assistant","content":"provider \"aws\" {\r\n  region = \"us-east-1\"\r\n}\r\n\r\nresource \"aws_security_group\" \"web_sg\" {\r\n  name        = \"web-access\"\r\n  description = \"Allow web + SSH\"\r\n\r\n  ingress {\r\n    from_port   = 22\r\n    to_port     = 22\r\n    protocol    = \"tcp\"\r\n    cidr_blocks = [\"0.0.0.0/0\"]\r\n  }\r\n\r\n  ingress {\r\n    from_port   = 80\r\n    to_port     = 80\r\n    protocol    = \"tcp\"\r\n    cidr_blocks = [\"0.0.0.0/0\"]\r\n  }\r\n\r\n  ingress {\r\n    from_port   = 443\r\n    to_port     = 443\r\n    protocol    = \"tcp\"\r\n    cidr_blocks = [\"0.0.0.0/0\"]\r\n  }\r\n\r\n  egress {\r\n    from_port   = 0\r\n    to_port     = 0\r\n    protocol    = \"-1\"\r\n    cidr_blocks = [\"0.0.0.0/0\"]\r\n  }\r\n}\r\n"}]}
{"messages": [{"role": "user", "content": "Create an Azure provider configuration in Terraform. Initialize an Azure Bastion module with specified resource group and virtual network details. Define the Azure Bastion service name, subnet address prefix, SKU, and scale units. Add relevant tags for project identification on Azure resources. Output the Azure Bastion subnet ID, public IP, FQDN, and host details."}, {"role": "assistant", "content": "\n#File: main.tf\n# Azurerm Provider configuration\nprovider \"azurerm\" {\n  features {}\n}\n\nmodule \"azure-bastion\" {\n  source  = \"kumarvna/azure-bastion/azurerm\"\n  version = \"1.2.0\"\n\n  # Resource Group, location, VNet and Subnet details\n  resource_group_name  = \"rg-shared-westeurope-01\"\n  virtual_network_name = \"vnet-shared-hub-westeurope-001\"\n\n  # Azure bastion server requireemnts\n  azure_bastion_service_name          = \"mybastion-service\"\n  azure_bastion_subnet_address_prefix = [\"10.1.5.0/26\"]\n  bastion_host_sku                    = \"Standard\"\n  scale_units                         = 10\n\n  # Adding TAG's to your Azure resources (Required)\n  tags = {\n    ProjectName  = \"demo-internal\"\n    Env          = \"dev\"\n    Owner        = \"user@example.com\"\n    BusinessUnit = \"CORP\"\n    ServiceClass = \"Gold\"\n  }\n}\n\n#File: output.tf\noutput \"azure_bastion_subnet_id\" {\n  description = \"List of IDs of subnets\"\n  value       = module.azure-bastion.azure_bastion_subnet_id\n}\n\noutput \"azure_bastion_public_ip\" {\n  description = \"The public IP of the virtual network gateway\"\n  value       = module.azure-bastion.azure_bastion_public_ip\n}\n\noutput \"azure_bastion_public_ip_fqdn\" {\n  description = \"Fully qualified domain name of the virtual network gateway\"\n  value       = module.azure-bastion.azure_bastion_public_ip_fqdn\n}\n\noutput \"azure_bastion_host_id\" {\n  description = \"The resource ID of the Bastion Host\"\n  value       = module.azure-bastion.azure_bastion_host_id\n}\n\noutput \"azure_bastion_host_fqdn\" {\n  description = \"The fqdn of the Bastion Host\"\n  value       = module.azure-bastion.azure_bastion_host_fqdn\n}\n\n#File: variables.tf\nvariable \"resource_group_name\" {\n  description = \"A container that holds related resources for an Azure solution\"\n  default     = \"\"\n}\n\nvariable \"virtual_network_name\" {\n  description = \"The name of the virtual network\"\n  default     = \"\"\n}\n\nvariable \"public_ip_allocation_method\" {\n  description = \"Defines the allocation method for this IP address. Possible values are Static or Dynamic\"\n  default     = \"Static\"\n}\n\nvariable \"public_ip_sku\" {\n  description = \"The SKU of the Public IP. Accepted values are Basic and Standard. Defaults to Basic\"\n  default     = \"Standard\"\n}\n\nvariable \"domain_name_label\" {\n  description = \"Label for the Domain Name. Will be used to make up the FQDN. If a domain name label is specified, an A DNS record is created for the public IP in the Microsoft Azure DNS system\"\n  default     = null\n}\n\nvariable \"azure_bastion_service_name\" {\n  description = \"Specifies the name of the Bastion Host\"\n  default     = \"\"\n}\n\nvariable \"azure_bastion_subnet_address_prefix\" {\n  description = \"The address prefix to use for the Azure Bastion subnet\"\n  default     = []\n}\n\nvariable \"enable_copy_paste\" {\n  description = \"Is Copy/Paste feature enabled for the Bastion Host?\"\n  default     = true\n}\n\nvariable \"enable_file_copy\" {\n  description = \"Is File Copy feature enabled for the Bastion Host. Only supported whne `sku` is `Standard`\"\n  default     = false\n}\n\nvariable \"bastion_host_sku\" {\n  description = \"The SKU of the Bastion Host. Accepted values are `Basic` and `Standard`\"\n  default     = \"Basic\"\n}\n\nvariable \"enable_ip_connect\" {\n  description = \"Is IP Connect feature enabled for the Bastion Host?\"\n  default     = false\n}\n\nvariable \"scale_units\" {\n  description = \"The number of scale units with which to provision the Bastion Host. Possible values are between `2` and `50`. `scale_units` only can be changed when `sku` is `Standard`. `scale_units` is always `2` when `sku` is `Basic`.\"\n  default     = 2\n}\n\nvariable \"enable_shareable_link\" {\n  description = \"Is Shareable Link feature enabled for the Bastion Host. Only supported whne `sku` is `Standard`\"\n  default     = false\n}\n\nvariable \"enable_tunneling\" {\n  description = \"Is Tunneling feature enabled for the Bastion Host. Only supported whne `sku` is `Standard`\"\n  default     = false\n}\n\nvariable \"tags\" {\n  description = \"A map of tags to add to all resources\"\n  type        = map(string)\n  default     = {}\n}\n\n#File: versions.tf\nterraform {\n  required_providers {\n    azurerm = {\n      source  = \"hashicorp/azurerm\"\n      version = \">= 2.59.0\"\n    }\n  }\n  required_version = \">= 0.13\"\n}\n"}]}
{"messages": [{"role":"user","content":"Provide a complete Amazon EKS infrastructure in the ap-south-1 region, including an EKS cluster with the required IAM roles for the cluster and node group. Use the default VPC and its public subnets to deploy the cluster and worker nodes, leveraging t3.medium instances for better performance. Necessary IAM policy attachments are configured to grant the EKS cluster and nodes the required permissions for operation and integration with AWS services."},{"role":"assistant","content":"# IAM Role for EKS Cluster\r\ndata \"aws_iam_policy_document\" \"assume_role\" {\r\n  statement {\r\n    effect = \"Allow\"\r\n    principals {\r\n      type        = \"Service\"\r\n      identifiers = [\"eks.amazonaws.com\"]\r\n    }\r\n    actions = [\"sts:AssumeRole\"]\r\n  }\r\n}\r\n\r\nresource \"aws_iam_role\" \"eks_cluster_role\" {\r\n  name               = \"eks-cluster-cloud\"\r\n  assume_role_policy = data.aws_iam_policy_document.assume_role.json\r\n}\r\n\r\nresource \"aws_iam_role_policy_attachment\" \"eks_cluster_policy\" {\r\n  policy_arn = \"arn:aws:iam::aws:policy/AmazonEKSClusterPolicy\"\r\n  role       = aws_iam_role.eks_cluster_role.name\r\n}\r\n\r\n# Get VPC data\r\ndata \"aws_vpc\" \"default\" {\r\n  default = true\r\n}\r\n\r\n# Get public subnets for cluster\r\ndata \"aws_subnets\" \"public\" {\r\n  filter {\r\n    name   = \"vpc-id\"\r\n    values = [data.aws_vpc.default.id]\r\n  }\r\n}\r\n\r\n# EKS Cluster Provisioning\r\nresource \"aws_eks_cluster\" \"eks_cluster\" {\r\n  name     = \"EKS_CLOUD\"\r\n  role_arn = aws_iam_role.eks_cluster_role.arn\r\n\r\n  vpc_config {\r\n    subnet_ids = data.aws_subnets.public.ids\r\n  }\r\n\r\n  depends_on = [\r\n    aws_iam_role_policy_attachment.eks_cluster_policy,\r\n  ]\r\n}\r\n\r\n# IAM Role for EKS Node Group\r\nresource \"aws_iam_role\" \"eks_node_group_role\" {\r\n  name = \"eks-node-group-cloud\"\r\n\r\n  assume_role_policy = jsonencode({\r\n    Statement = [{\r\n      Action = \"sts:AssumeRole\"\r\n      Effect = \"Allow\"\r\n      Principal = {\r\n        Service = \"ec2.amazonaws.com\"\r\n      }\r\n    }]\r\n    Version = \"2012-10-17\"\r\n  })\r\n}\r\n\r\n# Attach Required Policies to Node Group Role\r\nresource \"aws_iam_role_policy_attachment\" \"eks_worker_node_policy\" {\r\n  policy_arn = \"arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy\"\r\n  role       = aws_iam_role.eks_node_group_role.name\r\n}\r\n\r\nresource \"aws_iam_role_policy_attachment\" \"eks_cni_policy\" {\r\n  policy_arn = \"arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy\"\r\n  role       = aws_iam_role.eks_node_group_role.name\r\n}\r\n\r\nresource \"aws_iam_role_policy_attachment\" \"ecr_read_only\" {\r\n  policy_arn = \"arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly\"\r\n  role       = aws_iam_role.eks_node_group_role.name\r\n}\r\n\r\n# Create EKS Node Group\r\nresource \"aws_eks_node_group\" \"eks_node_group\" {\r\n  cluster_name    = aws_eks_cluster.eks_cluster.name\r\n  node_group_name = \"Node-cloud\"\r\n  node_role_arn   = aws_iam_role.eks_node_group_role.arn\r\n  subnet_ids      = data.aws_subnets.public.ids\r\n\r\n  scaling_config {\r\n    desired_size = 2  # Increased desired size for better availability\r\n    max_size     = 3  # Increased max size for auto-scaling flexibility\r\n    min_size     = 1\r\n  }\r\n\r\n  instance_types = [\"t3.medium\"]  # Upgraded instance type for better performance\r\n\r\n  depends_on = [\r\n    aws_iam_role_policy_attachment.eks_worker_node_policy,\r\n    aws_iam_role_policy_attachment.eks_cni_policy,\r\n    aws_iam_role_policy_attachment.ecr_read_only,\r\n  ]\r\n}\r\n\r\n\r\n# Configure the AWS Provider\r\nprovider \"aws\" {\r\n  region                   = \"ap-south-1\"\r\n  profile                  = \"default\"  # Specify AWS CLI profile if required\r\n  default_tags {\r\n    tags = {\r\n      Project     = \"Super Mario EKS Deployment\"\r\n      Environment = \"Production\"\r\n    }\r\n  }\r\n}\r\n"}]}
{"messages": [{"role": "user", "content": "Create an Azure resource group named with a unique workspace ID in the \"West Europe\" location. Create an application security group associated with the newly created resource group, using the same workspace ID. Define variables for resource configuration, including name, location, tags, inbound rules, and outbound rules. Specify requirements for the Terraform version and the AzureRM provider version. Output the workspace ID, resource group name, location, and application security group ID after creation."}, {"role": "assistant", "content": "\n#File: main.tf\nresource \"azurerm_resource_group\" \"rg\" {\n  name     = local.workspace_id\n  location = \"West Europe\"\n}\n\nresource \"azurerm_application_security_group\" \"asg\" {\n  name                = local.workspace_id\n  resource_group_name = azurerm_resource_group.rg.name\n  location            = azurerm_resource_group.rg.location\n}\n\n#File: outputs.tf\noutput \"workspace_id\" {\n  value = local.workspace_id\n}\n\noutput \"resource_group_name\" {\n  value = azurerm_resource_group.rg.name\n}\n\noutput \"resource_group_location\" {\n  value = azurerm_resource_group.rg.location\n}\n\noutput \"application_security_group_id\" {\n  value = azurerm_application_security_group.asg.id\n}\n\n#File: variables.tf\nvariable \"name\" {\n  type        = string\n  description = \"The name of the network security group.\"\n}\n\nvariable \"resource_group_name\" {\n  type        = string\n  description = \"The name of the resource group in which to create the network security group.\"\n}\n\nvariable \"location\" {\n  type        = string\n  description = \"The location/region where the network security group is created. \"\n}\n\nvariable \"tags\" {\n  type        = map(string)\n  default     = {}\n  description = \"A mapping of tags to assign to the resource.\"\n}\n\nvariable \"inbound_rules\" {\n  type = list(object({\n    name                                       = string\n    priority                                   = number\n    access                                     = string\n    protocol                                   = string\n    source_address_prefix                      = optional(string)\n    source_address_prefixes                    = optional(list(string))\n    source_application_security_group_ids      = optional(list(string))\n    source_port_range                          = optional(string)\n    source_port_ranges                         = optional(list(string))\n    destination_address_prefix                 = optional(string)\n    destination_address_prefixes               = optional(list(string))\n    destination_application_security_group_ids = optional(list(string))\n    destination_port_range                     = optional(string)\n    destination_port_ranges                    = optional(list(string))\n    description                                = optional(string)\n  }))\n  default     = []\n  description = \"List of objects that represent the configuration of each inbound rule.\"\n}\n\nvariable \"outbound_rules\" {\n  type = list(object({\n    name                                       = string\n    priority                                   = number\n    access                                     = string\n    protocol                                   = string\n    source_address_prefix                      = optional(string)\n    source_address_prefixes                    = optional(list(string))\n    source_application_security_group_ids      = optional(list(string))\n    source_port_range                          = optional(string)\n    source_port_ranges                         = optional(list(string))\n    destination_address_prefix                 = optional(string)\n    destination_address_prefixes               = optional(list(string))\n    destination_application_security_group_ids = optional(list(string))\n    destination_port_range                     = optional(string)\n    destination_port_ranges                    = optional(list(string))\n    description                                = optional(string)\n  }))\n  default     = []\n  description = \"List of objects that represent the configuration of each outbound rule.\"\n}\n\n#File: versions.tf\nterraform {\n  required_version = \">=1.3.0\"\n\n  required_providers {\n    azurerm = {\n      source  = \"hashicorp/azurerm\"\n      version = \"~>3.0\"\n    }\n  }\n}\n\n#File: providers.tf\nprovider \"azurerm\" {\n  features {}\n}\n\n#File: locals.tf\nlocals {\n  workspace_id = uuid()\n}\n"}]}
{"messages": [{"role":"user","content":"Set Up a Terraform script for creating a monthly AWS budget cap for 10 USD with notification emails."},{"role":"assistant","content":"#Define\r\nlocals {\r\n  max_monthly_spend = \"10\"\r\n  currency = \"USD\"\r\n  admin_email = \"admin@example.com\"\r\n}\r\n\r\nresource \"aws_budgets_budget\" \"max_monthly_spend\" {\r\n  name = \"Max Monthly AWS Spend\"\r\n  budget_type  = \"COST\"\r\n  limit_amount = local.max_monthly_spend\r\n  limit_unit   = local.currency\r\n  time_unit = \"MONTHLY\"\r\n  time_period_start = \"2021-05-31_00:00\"\r\n\r\n  notification {\r\n    comparison_operator = \"GREATER_THAN\"\r\n    threshold = \"100\"\r\n    threshold_type = \"PERCENTAGE\"\r\n    notification_type = \"FORECASTED\"\r\n    subscriber_email_addresses = [local.admin_email]\r\n  }\r\n\r\n  notification {\r\n    comparison_operator = \"GREATER_THAN\"\r\n    threshold = \"100\"\r\n    threshold_type = \"PERCENTAGE\"\r\n    notification_type = \"ACTUAL\"\r\n    subscriber_email_addresses = [local.admin_email]\r\n  }\r\n}\r\n\r\nprovider \"aws\" {\r\n}"}]}
{"messages": [{"role": "user", "content": "Create an Azure Resource Group for PostgreSQL using the specified prefix and location. Set up an Azure Database for PostgreSQL Server with administrator credentials and configurations for storage, SKU, and SSL enforcement. Create a PostgreSQL Database named \"kopidb\" within the previously created server and resource group. Establish a firewall rule to allow access from a specified IP range. Output the details of the created PostgreSQL Server."}, {"role": "assistant", "content": "\n#File: app-variables.tf\n#############################\n## Application - Variables ##\n#############################\n\n# company name \nvariable \"company\" {\n  type        = string\n  description = \"This variable defines the company name used to build resources\"\n}\n\n# company prefix \nvariable \"prefix\" {\n  type        = string\n  description = \"This variable defines the company name prefix used to build resources\"\n}\n\n# azure region\nvariable \"location\" {\n  type        = string\n  description = \"Azure region where the resource group will be created\"\n  default     = \"east us\"\n}\n\n# azure region shortname\nvariable \"region\" {\n  type        = string\n  description = \"Azure region where the resource group will be created\"\n  default     = \"ne\"\n}\n\n# owner\nvariable \"owner\" {\n  type        = string\n  description = \"Specify the owner of the resource\"\n}\n\n# description\nvariable \"description\" {\n  type        = string\n  description = \"Provide a description of the resource\"\n}\n\n# application or company environment\nvariable \"environment\" {\n  type        = string\n  description = \"This variable defines the environment to be built\"\n}\n#File: postgresql-main.tf\n########################################\n# Azure Database for PostgreSQL - Main #\n########################################\n\n# Create a Resource Group for PostgreSQL\nresource \"azurerm_resource_group\" \"postgresql-rg\" {\n  name     = \"${var.prefix}-postgresql-rg\"\n  location = var.location\n}\n\n# Create a PostgreSQL Server\nresource \"azurerm_postgresql_server\" \"postgresql-server\" {\n  name = \"${var.prefix}-postgresql-server\"\n  location = azurerm_resource_group.postgresql-rg.location\n  resource_group_name = azurerm_resource_group.postgresql-rg.name\n \n  administrator_login          = var.postgresql-admin-login\n  administrator_login_password = var.postgresql-admin-password\n \n  sku_name = var.postgresql-sku-name\n  version  = var.postgresql-version\n \n  storage_mb        = var.postgresql-storage\n  auto_grow_enabled = true\n  \n  backup_retention_days        = 7\n  geo_redundant_backup_enabled = false\n\n  public_network_access_enabled     = true\n  ssl_enforcement_enabled           = true\n  ssl_minimal_tls_version_enforced  = \"TLS1_2\"\n}\n\n# Create a PostgreSQL Database\nresource \"azurerm_postgresql_database\" \"postgresql-db\" {\n  name                = \"kopidb\"\n  resource_group_name = azurerm_resource_group.postgresql-rg.name\n  server_name         = azurerm_postgresql_server.postgresql-server.name\n  charset             = \"utf8\"\n  collation           = \"English_United States.1252\"\n}\n\n# Firewall Rule to access the PostgreSQL Server\nresource \"azurerm_postgresql_firewall_rule\" \"postgresql-fw-rule\" {\n  name                = \"${var.prefix}-postgresql-office-access\"\n  resource_group_name = azurerm_resource_group.postgresql-rg.name\n  server_name         = azurerm_postgresql_server.postgresql-server.name\n  start_ip_address    = \"210.170.94.100\"\n  end_ip_address      = \"210.170.94.120\"\n}\n\n#File: postgresql-output.tf\n##########################################\n# Azure Database for PostgreSQL - Output #\n##########################################\n\noutput \"postgresql_server\" {\n  value = azurerm_postgresql_server.postgresql-server\n}\n#File: postgresql-variables.tf\n#############################################\n# Azure Database for PostgreSQL - Variables #\n#############################################\n\nvariable \"postgresql-admin-login\" {\n  type        = string\n  description = \"Login to authenticate to PostgreSQL Server\"\n}\n\nvariable \"postgresql-admin-password\" {\n  type        = string\n  description = \"Password to authenticate to PostgreSQL Server\"\n}\n\nvariable \"postgresql-version\" {\n  type        = string\n  description = \"PostgreSQL Server version to deploy\"\n  default     = \"11\"\n}\n\nvariable \"postgresql-sku-name\" {\n  type        = string\n  description = \"PostgreSQL SKU Name\"\n  default     = \"B_Gen5_1\"\n}\n\nvariable \"postgresql-storage\" {\n  type        = string\n  description = \"PostgreSQL Storage in MB, from 5120 MB to 4194304 MB\"\n  default     = \"5120\"\n}\n#File: provider-main.tf\n###########################\n## Azure Provider - Main ##\n###########################\n\n# Define Terraform provider\nterraform {\n  required_version = \">= 0.13\"\n}\n\n# Configure the Azure provider\nprovider \"azurerm\" {\n  environment = \"public\"\n  version     = \">= 2.25.0\"\n  features {}\n  subscription_id = var.azure-subscription-id\n  client_id       = var.azure-client-id\n  client_secret   = var.azure-client-secret\n  tenant_id       = var.azure-tenant-id\n\n}\n\n#File: provider-variables.tf\n################################\n## Azure Provider - Variables ##\n################################\n\n# Azure authentication variables\n\nvariable \"azure-subscription-id\" {\n  type        = string\n  description = \"Azure Subscription ID\"\n}\n\nvariable \"azure-client-id\" {\n  type        = string\n  description = \"Azure Client ID\"\n}\n\nvariable \"azure-client-secret\" {\n  type        = string\n  description = \"Azure Client Secret\"\n}\n\nvariable \"azure-tenant-id\" {\n  type        = string\n  description = \"Azure Tenant ID\"\n}\n"}]}
{"messages": [{"role": "user", "content": "Create a Terraform configuration file named `backend.tf` without any specific backend configuration. Define the provider in `provider.tf` using the Google provider from HashiCorp with version 4.19.0. In the provider block, set the credentials using a service account key file and specify the GCP project ID. Initialize the Terraform workspace to prepare for resource management. Finally, add your specific cloud resources in `main.tf` as needed."}, {"role": "assistant", "content": "\n#File: backend.tf\n# no specific backend config here\n\n#File: main.tf\n# tf resources\n\n#File: provider.tf\nterraform {\n  required_providers {\n    google = {\n      source  = \"hashicorp/google\"\n      version = \"4.19.0\"\n    }\n  }\n}\n\nprovider \"google\" {\n  credentials = file(\"<REPLACE_ME_WITH_SERVICE_ACCOUNT_KEY_PATH>.json\")\n  project     = \"<REPLACE_ME_WITH_GCP_PROJECT_ID>\"\n\n}\n"}]}
{"messages": [{"role":"user","content":"Store an encrypted string in AWS Systems Manager. Use the name /prod/db_password. Set it as a SecureString."},{"role":"assistant","content":"provider \"aws\" {\r\n  region = \"us-east-1\"\r\n}\r\n\r\nresource \"aws_ssm_parameter\" \"db_pass\" {\r\n  name  = \"/prod/db_password\"\r\n  type  = \"SecureString\"\r\n  value = \"SuperSecret123\" # Replace with var or secret store\r\n}\r\n"}]}
{"messages": [{"role": "user", "content": "Create a data source for the existing web app using `azurerm_linux_function_app`. Define the required provider and configure it for Azure. Create an Application Insights resource linked to the web app's location and resource group. Set up a web test in Application Insights to monitor the web app, configuring it to run every 5 minutes. Establish an action group for email notifications and create a metric alert that triggers if the average availability percentage falls below 95%."}, {"role": "assistant", "content": "\n#File: main.tf\n# Fecth the exiting web app created in Task 2\n#\n# Data sources allow data to be fetched or computed for use elsewhere in Terraform configuration.\n# Use of data sources allows a Terraform configuration to make use of information defined outside of Terraform,\n# or defined by another separate Terraform configuration.\n# For example, in Task 2 you have defined and provisioned a web app per the autoscale.tf.\n#\n# Please refer to https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/linux_function_app\ndata \"azurerm_linux_function_app\" \"main\" {\n  name                = var.web_app_name\n  resource_group_name = var.resource_group_name\n}\n\n# Require provider\nterraform {\n  required_providers {\n    azurerm = {\n      source = \"hashicorp/azurerm\"\n      version = \"=3.22.0\"\n    }\n  }\n}\n\n# Configure the provider\nprovider \"azurerm\" {\n  features {}\n}\n\n# Create an Application Insights resource\nresource \"azurerm_application_insights\" \"main\" {\n  name = \"tf_app_insights\"\n  # create the resource within the same resource group and the location as the web app\n  location            = data.azurerm_linux_function_app.main.location\n  resource_group_name = data.azurerm_linux_function_app.main.resource_group_name\n  application_type    = \"web\"\n}\n\n# Set up a web test in the Application Insights for the web app\n# Hint: You can find sample configurations at:\n# https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/application_insights_web_test\nresource \"azurerm_application_insights_web_test\" \"main\" {\n  name = \"tf_web_test\"\n  # create the resource within the same resource group and the location as the web app\n  location            = data.azurerm_linux_function_app.main.location\n  resource_group_name = data.azurerm_linux_function_app.main.resource_group_name\n\n  # TODO: Specify the application_insights_id parameter as the ID of the Application Insights defined above\n  # i.e., the id of \"azurerm_application_insights\" \"main\"\n  application_insights_id = azurerm_application_insights.main.id\n  kind                    = \"ping\"\n\n  # TODO: Set the frequecy (in seconds) so that this test would run in each 5 minutes.\n  frequency = 300\n\n  # TODO: Set a timeout (in seconds) so that requests would be regarded as failed if no response is received within 1 minute.\n  timeout       = 60\n  enabled       = true\n  geo_locations = [\"us-tx-sn1-azr\", \"us-il-ch1-azr\", \"apac-sg-sin-azr\", \"apac-hk-hkn-azr\", \"us-ca-sjc-azr\"]\n\n  # An XML configuration specification for a WebTest.\n  # The example is provided and you do not have to author it on your own.\n  configuration = <<XML\n<WebTest Name=\"WebTest1\" Id=\"ABD48585-0831-40CB-9069-682EA6BB3583\" Enabled=\"True\" CssProjectStructure=\"\" CssIteration=\"\" Timeout=\"0\" WorkItemIds=\"\" xmlns=\"http://microsoft.com/schemas/VisualStudio/TeamTest/2010\" Description=\"\" CredentialUserName=\"\" CredentialPassword=\"\" PreAuthenticate=\"True\" Proxy=\"default\" StopOnError=\"False\" RecordedResultFile=\"\" ResultsLocale=\"\">\n  <Items>\n    <Request Method=\"GET\" Guid=\"a5f10126-e4cd-570d-961c-cea43999a200\" Version=\"1.1\" Url=\"http://${data.azurerm_linux_function_app.main.name}.azurewebsites.net\" ThinkTime=\"0\" Timeout=\"300\" ParseDependentRequests=\"True\" FollowRedirects=\"True\" RecordResult=\"True\" Cache=\"False\" ResponseTimeGoal=\"0\" Encoding=\"utf-8\" ExpectedHttpStatusCode=\"200\" ExpectedResponseUrl=\"\" ReportingName=\"\" IgnoreHttpStatusCode=\"False\" />\n  </Items>\n</WebTest>\nXML\n}\n\n# Create an action group for email notification\n# Refer to https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/monitor_action_group\nresource \"azurerm_monitor_action_group\" \"main\" {\n  name = \"tf_action_group\"\n  # create the resource within the same resource group as the web app\n  resource_group_name = data.azurerm_linux_function_app.main.resource_group_name\n  short_name          = \"tf_act\"\n\n  # TODO: Provide a name and an email address within the email_receiver block.\n  email_receiver {\n    name          = \"Victor Fernandez III\"\n    email_address = \"goober@dev.edu\"\n  }\n}\n\n# Create a metric alert that get triggered by the result of the availability test\nresource \"azurerm_monitor_metric_alert\" \"main\" {\n  name = \"tf_metric_alert\"\n  # create the resource within the same resource group as the web app\n  resource_group_name = data.azurerm_linux_function_app.main.resource_group_name\n  scopes = [\n  azurerm_application_insights.main.id]\n  description = \"This is a metric alert configured by Terraform to check the result of availability test.\"\n  enabled     = true\n\n  # TODO: Complete the criteria block so that the alert would trigger actions when:\n  # the average successful availability test percentage is less than 95.\n  # Refer to the criteria block in https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/monitor_metric_alert\n  criteria {\n    metric_namespace = \"microsoft.insights/components\"\n    metric_name      = \"availabilityResults/availabilityPercentage\"\n    aggregation      = \"Average\"\n    operator         = \"LessThan\"\n    threshold        = 95\n  }\n\n  # TODO: Complete the action block to associate the alert with the action group you\n  # configured above by specifying the action_group_id\n  # i.e., the id of \"azurerm_monitor_action_group\" \"main\"\n  # Refer to the action block in https://registry.terraform.io/providers/hashicorp/azurerm/latest/docs/resources/monitor_metric_alert\n  action {\n    action_group_id = azurerm_monitor_action_group.main.id\n  }\n}\n#File: variables.tf\n#TODO 1: provide the name of the web app\nvariable \"web_app_name\" {\n  type    = string\n  default = \"b109bf63-abd7-5004-e856-6a8e388507f2\"\n}\n\n#TODO 2: provide the resource group of the web app\nvariable \"resource_group_name\" {\n  type    = string\n  default = \"tf_web_app_monitor\"\n}"}]}
{"messages": [{"role": "user", "content": "Create a Google Cloud project configuration using Terraform. Create a Google Cloud Function service account and set its permissions for invoking the function. Create a zip archive of the function’s source code and upload it to a Google Cloud Storage bucket. Create a Google Cloud Scheduler job to invoke the Cloud Function based on a specified schedule. Enable the Cloud Build, Cloud Functions, and Cloud Scheduler services for the project."}, {"role": "assistant", "content": "\n#File: main.tf\n# Enables access to provider details\n# https://www.terraform.io/docs/providers/google/d/datasource_client_config.html\ndata \"google_client_config\" \"context\" {}\n\n\n# Loads into locals for less typing!\n# https://www.terraform.io/docs/configuration/locals.html\nlocals {\n  project = data.google_client_config.context.project\n}\n\n#File: archive.tf\n# Create the archive project\n# https://registry.terraform.io/providers/hashicorp/archive/latest/docs/data-sources/archive_file\ndata \"archive_file\" \"function_archive\" {\n  type        = \"zip\"\n  output_path = \"/tmp/${var.name}-function.zip\"\n  source_dir  = var.function_source\n}\n\n# Archive file containing the function\n# https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/storage_bucket_object\nresource \"google_storage_bucket_object\" \"function_archive\" {\n  name   = \"${var.name}-function.zip\"\n  bucket = \"${data.google_client_config.context.project}-functions\"\n  source = \"/tmp/${var.name}-function.zip\"\n}\n\n#File: function.tf\n# Creates a service account for jobs\n# https://www.terraform.io/docs/providers/google/r/google_service_account.html\nresource \"google_service_account\" \"function_service_account\" {\n  account_id   = \"${var.name}-function\"\n  display_name = \"${var.name} service account\"\n  description  = \"service account for executing the ${var.name} function\"\n}\n\n# Waits for the service account\n# https://www.terraform.io/docs/providers/google/r/google_service_account.html\n# https://github.com/hashicorp/terraform/issues/17726#issuecomment-377357866\nresource \"null_resource\" \"function_service_account_delay\" {\n  provisioner \"local-exec\" {\n    command = \"sleep 30\"\n  }\n  triggers = {\n    \"function_service_account\" = google_service_account.function_service_account.unique_id\n  }\n}\n\n# IAM permissions to invoke the function\n# https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/cloudfunctions_cloud_function_iam\nresource \"google_cloudfunctions_function_iam_member\" \"function_invoker\" {\n  cloud_function = google_cloudfunctions_function.function.name\n  role           = \"roles/cloudfunctions.invoker\"\n  member         = \"serviceAccount:${google_service_account.function_service_account.email}\"\n  depends_on     = [null_resource.function_service_account_delay]\n}\n\n\n# Creates the function from the archive\n# https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/cloudfunctions_function\nresource \"google_cloudfunctions_function\" \"function\" {\n  name                  = \"${var.name}-function\"\n  description           = \"cloud function '${var.name}'\"\n  runtime               = var.runtime\n  available_memory_mb   = var.available_memory_mb\n  source_archive_bucket = \"${data.google_client_config.context.project}-functions\"\n  source_archive_object = google_storage_bucket_object.function_archive.name\n  trigger_http          = true\n  entry_point           = var.entry_point\n  service_account_email = google_service_account.function_service_account.email\n  depends_on            = [null_resource.function_service_account_delay]\n}\n\n#File: scheduler.tf\n# Creates the scheduler job for the requirement\n# https://www.terraform.io/docs/providers/google/r/cloud_scheduler_job.html\nresource \"google_cloud_scheduler_job\" \"scheduler_job\" {\n\n  name             = \"${var.name}-scheduler-job\"\n  description      = \"Calls the '${google_cloudfunctions_function.function.name}' cloud function\"\n  time_zone        = var.time_zone\n  schedule         = var.schedule\n  attempt_deadline = var.attempt_deadline\n\n  http_target {\n    uri         = google_cloudfunctions_function.function.https_trigger_url\n    http_method = var.http_method\n    body        = base64encode(\"{\\\"name\\\":\\\"HTTP\\\"}\")\n    oidc_token {\n      service_account_email = google_service_account.function_service_account.email\n    }\n  }\n\n  depends_on = [null_resource.function_service_account_delay]\n}\n\n#File: services.tf\n# Enables Cloud Build\n# https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/google_project_service\nresource \"google_project_service\" \"cloud_build\" {\n  service                    = \"cloudbuild.googleapis.com\"\n  disable_dependent_services = false\n  disable_on_destroy         = false\n}\n\n\n# Enables Cloud Functions\n# https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/google_project_service\nresource \"google_project_service\" \"cloud_functions\" {\n  service                    = \"cloudfunctions.googleapis.com\"\n  disable_dependent_services = false\n  disable_on_destroy         = false\n}\n\n\n# Enables Cloud Scheduler\n# https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/google_project_service\nresource \"google_project_service\" \"cloud_scheduler\" {\n  service                    = \"cloudscheduler.googleapis.com\"\n  disable_dependent_services = false\n  disable_on_destroy         = false\n}\n\n#File: variables.tf\nvariable \"name\" {\n  description = \"base name of the function\"\n  type        = string\n}\n\nvariable \"entry_point\" {\n  description = \"function entry point name\"\n  type        = string\n}\n\nvariable \"runtime\" {\n  description = \"language runtime & version (e.g. nodejs10)\"\n  type        = string\n  default     = \"nodejs10\"\n}\n\nvariable \"function_source\" {\n  description = \"local source of the function code\"\n  type        = string\n}\n\nvariable \"available_memory_mb\" {\n  description = \"available memory for the function (e.g. 128mb)\"\n  type        = number\n  default     = 128\n}\n\nvariable \"time_zone\" {\n  description = \"time zone for the scheduler (e.g. Europe/London)\"\n  type        = string\n  default     = \"Europe/London\"\n}\n\nvariable \"schedule\" {\n  description = \"schedule on which to run the function\"\n  type        = string\n}\n\nvariable \"attempt_deadline\" {\n  description = \"the deadline for attempting\"\n  type        = string\n  default     = \"360s\"\n}\n\nvariable \"http_method\" {\n  description = \"http method to use for calling the function (e.g. POST)\"\n  type        = string\n  default     = \"POST\"\n}\n"}]}
{"messages": [{"role":"user","content":"Sets up a complete Amazon EKS cluster with secure IAM roles, managed node groups, and integrated EBS CSI driver for persistent storage. Includes GitHub and GitLab CI/CD pipelines for automated testing, deployment, and drift detection."},{"role":"assistant","content":"# AWS Infrastructure Variables\r\nvariable \"region\" {\r\n  description = \"The AWS region in which the infrastructure will be deployed\"\r\n  type        = string\r\n  default     = \"eu-west-1\"\r\n}\r\n\r\n# Virtual Private Cloud Variables\r\nvariable \"vpc_1_cidr\" {\r\n  description = \"The IP range for the Virtual Private Cloud (VPC) that will be created\"\r\n  type        = string\r\n  default     = \"10.0.0.0/16\"\r\n}\r\n\r\n# Private Subnet Variables\r\nvariable \"private_subnet_1a_cidr\" {\r\n  description = \"The IP range for the first private subnet that will be created within the VPC\"\r\n  type        = string\r\n  default     = \"10.0.0.0/19\"\r\n}\r\n\r\nvariable \"private_subnet_1b_cidr\" {\r\n  description = \"The IP range for the second private subnet that will be created within the VPC\"\r\n  type        = string\r\n  default     = \"10.0.32.0/19\"\r\n}\r\n\r\n# Public Subnet Variables\r\nvariable \"public_subnet_1a_cidr\" {\r\n  description = \"The IP range for the first public subnet that will be created within the VPC\"\r\n  type        = string\r\n  default     = \"10.0.64.0/19\"\r\n}\r\n\r\nvariable \"public_subnet_1b_cidr\" {\r\n  description = \"The IP range for the second public subnet that will be created within the VPC\"\r\n  type        = string\r\n  default     = \"10.0.96.0/19\"\r\n}\r\n\r\n# Route Variables\r\nvariable \"private_route_1_cidr\" {\r\n  description = \"The IP range for the private route that will be created within the VPC\"\r\n  type        = string\r\n  default     = \"0.0.0.0/0\"\r\n}\r\n\r\nvariable \"public_route_1_cidr\" {\r\n  description = \"The IP range for the public route that will be created within the VPC\"\r\n  type        = string\r\n  default     = \"0.0.0.0/0\"\r\n}\r\n\r\n# EKS Cluster Variables\r\nvariable \"eks_cluster_1_name\" {\r\n  description = \"The name of the EKS cluster that will be created\"\r\n  type        = string\r\n  default     = \"zeus\"\r\n}\r\n\r\nvariable \"eks_cluster_version\" {\r\n  description = \"The version of EKS to use for the cluster. This should be a float or integer value, such as 1.21 or 1.25.\"\r\n  type        = number\r\n  default     = 1.25\r\n}\r\n\r\n# EKS Node Group Variables\r\nvariable \"eks_node_group_1_name\" {\r\n  description = \"The name of the node group that will be created within the EKS cluster\"\r\n  type        = string\r\n  default     = \"private-node-group-eks-1\"\r\n}\r\n\r\nvariable \"eks_node_group_1_capacity_type\" {\r\n  description = \"The capacity type for the node group that will be created within the EKS cluster\"\r\n  type        = string\r\n  default     = \"ON_DEMAND\"\r\n}\r\n\r\nvariable \"eks_node_group_1_instance_types\" {\r\n  description = \"The instance types of the EKS node group\"\r\n  type        = string\r\n  default     = \"t2.xlarge\"\r\n}\r\n\r\nvariable \"eks_node_group_1_desired_size\" {\r\n  description = \"The desired number of worker nodes in the EKS cluster\"\r\n  type        = number\r\n  default     = 1\r\n}\r\n\r\nvariable \"eks_node_group_1_max_size\" {\r\n  description = \"The maximum number of worker nodes in the EKS cluster\"\r\n  type        = number\r\n  default     = 5\r\n}\r\n\r\nvariable \"eks_node_group_1_min_size\" {\r\n  description = \"The minimum number of worker nodes in the EKS cluster\"\r\n  type        = number\r\n  default     = 1\r\n}\r\n\r\nvariable \"eks_node_group_1_max_unavailable\" {\r\n  description = \"The maximum number of worker nodes that can be unavailable during a deployment update\"\r\n  type        = number\r\n  default     = 1\r\n}\r\n\r\nvariable \"eks_node_group_1_labels\" {\r\n  description = \"A map of key-value pairs used to label the worker nodes in the EKS cluster\"\r\n  type        = map(string)\r\n  default = {\r\n    role = \"general\"\r\n  }\r\n}\r\n\r\n# KMS Variables\r\nvariable \"kms_key_1_default_retention_days\" {\r\n  description = \"The default retention period in days for keys created in the KMS keyring\"\r\n  type        = number\r\n  default     = 10\r\n}\r\n\r\nvariable \"kms_key_2_default_retention_days\" {\r\n  description = \"The default retention period in days for keys created in the KMS keyring\"\r\n  type        = number\r\n  default     = 10\r\n}\r\n\r\nvariable \"kms_key_3_default_retention_days\" {\r\n  description = \"The default retention period in days for keys created in the KMS keyring\"\r\n  type        = number\r\n  default     = 10\r\n}\r\n\r\n# DynamoDB Variables\r\nvariable \"dynamodb_terraform_state_lock_1_billing_mode\" {\r\n  description = \"The billing mode for the DynamoDB table used for Terraform state locking\"\r\n  type        = string\r\n  default     = \"PAY_PER_REQUEST\"\r\n}\r\n\r\n# Helm Variables\r\nvariable \"helm_ebs_csi_driver_version\" {\r\n  description = \"The version of the AWS EBS CSI Driver Helm chart to deploy\"\r\n  type        = string\r\n  default     = \"2.18.0\"\r\n}\r\n\r\nvariable \"helm_timeout_seconds\" {\r\n  type        = number\r\n  description = \"Helm chart deployment can sometimes take longer than the default 5 minutes\"\r\n  default     = 800\r\n}\r\n\r\n\r\nprovider \"aws\" {\r\n  region = var.region\r\n}\r\n\r\ndata \"aws_eks_cluster\" \"cluster_1\" {\r\n  name = aws_eks_cluster.eks_cluster_1.name\r\n}\r\n\r\ndata \"aws_eks_cluster_auth\" \"cluster_1_auth\" {\r\n  name = aws_eks_cluster.eks_cluster_1.name\r\n}\r\n\r\nprovider \"helm\" {\r\n  kubernetes {\r\n    host                   = data.aws_eks_cluster.cluster_1.endpoint\r\n    cluster_ca_certificate = base64decode(data.aws_eks_cluster.cluster_1.certificate_authority[0].data)\r\n    token                  = data.aws_eks_cluster_auth.cluster_1_auth.token\r\n  }\r\n}\r\n# VPC creation\r\nresource \"aws_vpc\" \"eks_vpc_1\" {\r\n  cidr_block = var.vpc_1_cidr\r\n\r\n  enable_dns_support   = true\r\n  enable_dns_hostnames = true\r\n\r\n  tags = {\r\n    Name = \"vpc-eks-1\"\r\n  }\r\n}\r\n# Private subnet creation\r\nresource \"aws_subnet\" \"eks_private_subnet_1a\" {\r\n  vpc_id                  = aws_vpc.eks_vpc_1.id\r\n  cidr_block              = var.private_subnet_1a_cidr\r\n  availability_zone       = \"${var.region}a\"\r\n  map_public_ip_on_launch = false\r\n\r\n  tags = {\r\n    \"Name\"                                            = \"private-eks-1-${var.region}a\"\r\n    \"kubernetes.io/role/internal-elb\"                 = \"1\"\r\n    \"kubernetes.io/cluster/${var.eks_cluster_1_name}\" = \"owned\"\r\n  }\r\n\r\n  depends_on = [aws_vpc.eks_vpc_1]\r\n}\r\n\r\n# Private subnet creation\r\nresource \"aws_subnet\" \"eks_private_subnet_1b\" {\r\n  vpc_id                  = aws_vpc.eks_vpc_1.id\r\n  cidr_block              = var.private_subnet_1b_cidr\r\n  availability_zone       = \"${var.region}b\"\r\n  map_public_ip_on_launch = false\r\n\r\n  tags = {\r\n    \"Name\"                                            = \"private-eks-1-${var.region}b\"\r\n    \"kubernetes.io/role/internal-elb\"                 = \"1\"\r\n    \"kubernetes.io/cluster/${var.eks_cluster_1_name}\" = \"owned\"\r\n  }\r\n\r\n  depends_on = [aws_vpc.eks_vpc_1]\r\n}\r\n\r\n# Public subnet creation\r\nresource \"aws_subnet\" \"eks_public_subnet_1a\" {\r\n  vpc_id            = aws_vpc.eks_vpc_1.id\r\n  cidr_block        = var.public_subnet_1a_cidr\r\n  availability_zone = \"${var.region}a\"\r\n  #tfsec:ignore:aws-ec2-no-public-ip-subnet\r\n  map_public_ip_on_launch = true\r\n\r\n  tags = {\r\n    \"Name\"                                            = \"public-eks-1-${var.region}a\"\r\n    \"kubernetes.io/role/elb\"                          = \"1\"\r\n    \"kubernetes.io/cluster/${var.eks_cluster_1_name}\" = \"owned\"\r\n  }\r\n\r\n  depends_on = [aws_vpc.eks_vpc_1]\r\n}\r\n\r\n# Public subnet creation\r\nresource \"aws_subnet\" \"eks_public_subnet_1b\" {\r\n  vpc_id            = aws_vpc.eks_vpc_1.id\r\n  cidr_block        = var.public_subnet_1b_cidr\r\n  availability_zone = \"${var.region}b\"\r\n  #tfsec:ignore:aws-ec2-no-public-ip-subnet\r\n  map_public_ip_on_launch = true\r\n\r\n  tags = {\r\n    \"Name\"                                            = \"public-eks-1-${var.region}b\"\r\n    \"kubernetes.io/role/elb\"                          = \"1\"\r\n    \"kubernetes.io/cluster/${var.eks_cluster_1_name}\" = \"owned\"\r\n  }\r\n\r\n  depends_on = [aws_vpc.eks_vpc_1]\r\n}\r\n# Internet gateway creation\r\nresource \"aws_internet_gateway\" \"eks_igw_1\" {\r\n  vpc_id = aws_vpc.eks_vpc_1.id\r\n\r\n  tags = {\r\n    Name = \"igw-eks-1\"\r\n  }\r\n\r\n  depends_on = [aws_vpc.eks_vpc_1]\r\n}\r\n# Elastic IP allocation\r\nresource \"aws_eip\" \"eks_nat_eip_1\" {\r\n  domain = \"vpc\"\r\n\r\n  tags = {\r\n    Name = \"nat-eip-eks-1\"\r\n  }\r\n\r\n  depends_on = [aws_vpc.eks_vpc_1]\r\n}\r\n\r\n# Public NAT creation\r\nresource \"aws_nat_gateway\" \"eks_nat_1\" {\r\n  allocation_id = aws_eip.eks_nat_eip_1.id\r\n  subnet_id     = aws_subnet.eks_public_subnet_1a.id\r\n\r\n  tags = {\r\n    Name = \"nat-eks-1\"\r\n  }\r\n\r\n  depends_on = [\r\n    aws_internet_gateway.eks_igw_1,\r\n    aws_eip.eks_nat_eip_1,\r\n    aws_subnet.eks_public_subnet_1a\r\n  ]\r\n}\r\n# Private route table creation\r\nresource \"aws_route_table\" \"eks_private_route_1\" {\r\n  vpc_id = aws_vpc.eks_vpc_1.id\r\n\r\n  route {\r\n    cidr_block     = var.private_route_1_cidr\r\n    nat_gateway_id = aws_nat_gateway.eks_nat_1.id\r\n  }\r\n\r\n  tags = {\r\n    Name = \"private-route-eks-1\"\r\n  }\r\n\r\n  depends_on = [aws_nat_gateway.eks_nat_1]\r\n}\r\n\r\n# Public route table creation\r\nresource \"aws_route_table\" \"eks_public_route_1\" {\r\n  vpc_id = aws_vpc.eks_vpc_1.id\r\n\r\n  route {\r\n    cidr_block = var.public_route_1_cidr\r\n    gateway_id = aws_internet_gateway.eks_igw_1.id\r\n  }\r\n\r\n  tags = {\r\n    Name = \"public-route-eks-1\"\r\n  }\r\n\r\n  depends_on = [aws_internet_gateway.eks_igw_1]\r\n}\r\n\r\n# Private route table association\r\nresource \"aws_route_table_association\" \"eks_private_subnet_1a\" {\r\n  subnet_id      = aws_subnet.eks_private_subnet_1a.id\r\n  route_table_id = aws_route_table.eks_private_route_1.id\r\n\r\n  depends_on = [\r\n    aws_subnet.eks_private_subnet_1a,\r\n    aws_route_table.eks_private_route_1\r\n  ]\r\n}\r\n\r\n# Private route table association\r\nresource \"aws_route_table_association\" \"eks_private_subnet_1b\" {\r\n  subnet_id      = aws_subnet.eks_private_subnet_1b.id\r\n  route_table_id = aws_route_table.eks_private_route_1.id\r\n\r\n  depends_on = [\r\n    aws_subnet.eks_private_subnet_1b,\r\n    aws_route_table.eks_private_route_1\r\n  ]\r\n}\r\n\r\n# Public route table association\r\nresource \"aws_route_table_association\" \"eks_public_subnet_1a\" {\r\n  subnet_id      = aws_subnet.eks_public_subnet_1a.id\r\n  route_table_id = aws_route_table.eks_public_route_1.id\r\n\r\n  depends_on = [\r\n    aws_subnet.eks_public_subnet_1a,\r\n    aws_route_table.eks_public_route_1\r\n  ]\r\n}\r\n\r\n# Public route table association\r\nresource \"aws_route_table_association\" \"eks_public_subnet_1b\" {\r\n  subnet_id      = aws_subnet.eks_public_subnet_1b.id\r\n  route_table_id = aws_route_table.eks_public_route_1.id\r\n\r\n  depends_on = [\r\n    aws_subnet.eks_public_subnet_1b,\r\n    aws_route_table.eks_public_route_1\r\n  ]\r\n}\r\n# IAM role creation\r\nresource \"aws_iam_role\" \"eks_cluster_1_role\" {\r\n  name = \"eks-cluster-${var.eks_cluster_1_name}\"\r\n\r\n  assume_role_policy = <<POLICY\r\n{\r\n  \"Version\": \"2012-10-17\",\r\n  \"Statement\": [\r\n    {\r\n      \"Effect\": \"Allow\",\r\n      \"Principal\": {\r\n        \"Service\": \"eks.amazonaws.com\"\r\n      },\r\n      \"Action\": \"sts:AssumeRole\"\r\n    }\r\n  ]\r\n}\r\nPOLICY\r\n}\r\n\r\n# EKS cluster policy attachment\r\nresource \"aws_iam_role_policy_attachment\" \"eks_cluster_1_role_AmazonEKSClusterPolicy\" {\r\n  policy_arn = \"arn:aws:iam::aws:policy/AmazonEKSClusterPolicy\"\r\n  role       = aws_iam_role.eks_cluster_1_role.name\r\n\r\n  depends_on = [aws_iam_role.eks_cluster_1_role]\r\n}\r\n\r\n# EKS cluster creation\r\nresource \"aws_eks_cluster\" \"eks_cluster_1\" {\r\n  name     = var.eks_cluster_1_name\r\n  version  = var.eks_cluster_version\r\n  role_arn = aws_iam_role.eks_cluster_1_role.arn\r\n\r\n  encryption_config {\r\n    resources = [\"secrets\"]\r\n    provider {\r\n      key_arn = aws_kms_key.kms_key_3.arn\r\n    }\r\n  }\r\n\r\n  #tfsec:ignore:aws-eks-no-public-cluster-access-to-cidr\r\n  vpc_config {\r\n    subnet_ids = [\r\n      aws_subnet.eks_private_subnet_1a.id,\r\n      aws_subnet.eks_private_subnet_1b.id,\r\n      aws_subnet.eks_public_subnet_1a.id,\r\n      aws_subnet.eks_public_subnet_1b.id\r\n    ]\r\n\r\n    #tfsec:ignore:aws-eks-no-public-cluster-access\r\n    endpoint_public_access  = true\r\n    endpoint_private_access = true\r\n  }\r\n\r\n  # Enable logging for the EKS control plane\r\n  enabled_cluster_log_types = [\r\n    \"api\",\r\n    \"audit\",\r\n    \"authenticator\",\r\n    \"controllerManager\",\r\n    \"scheduler\"\r\n  ]\r\n\r\n  depends_on = [\r\n    aws_subnet.eks_private_subnet_1a,\r\n    aws_subnet.eks_private_subnet_1b,\r\n    aws_subnet.eks_public_subnet_1a,\r\n    aws_subnet.eks_public_subnet_1b,\r\n    aws_iam_role_policy_attachment.eks_cluster_1_role_AmazonEKSClusterPolicy\r\n  ]\r\n}\r\n# IAM role creation\r\nresource \"aws_iam_role\" \"eks_node_1_role\" {\r\n  name = \"node-role-1-eks-1\"\r\n\r\n  assume_role_policy = jsonencode({\r\n    Statement = [{\r\n      Action = \"sts:AssumeRole\"\r\n      Effect = \"Allow\"\r\n      Principal = {\r\n        Service = \"ec2.amazonaws.com\"\r\n      }\r\n    }]\r\n    Version = \"2012-10-17\"\r\n  })\r\n}\r\n\r\n# Node group policy attachment\r\nresource \"aws_iam_role_policy_attachment\" \"eks_node_1_role_AmazonEKSWorkerNodePolicy\" {\r\n  policy_arn = \"arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy\"\r\n  role       = aws_iam_role.eks_node_1_role.name\r\n\r\n  depends_on = [aws_iam_role.eks_node_1_role]\r\n}\r\n\r\n# Node group policy attachment\r\nresource \"aws_iam_role_policy_attachment\" \"eks_node_1_role_AmazonEKS_CNI_Policy\" {\r\n  policy_arn = \"arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy\"\r\n  role       = aws_iam_role.eks_node_1_role.name\r\n\r\n  depends_on = [aws_iam_role.eks_node_1_role]\r\n}\r\n\r\n# Node group policy attachment\r\nresource \"aws_iam_role_policy_attachment\" \"eks_node_1_role_AmazonEC2ContainerRegistryReadOnly\" {\r\n  policy_arn = \"arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly\"\r\n  role       = aws_iam_role.eks_node_1_role.name\r\n\r\n  depends_on = [aws_iam_role.eks_node_1_role]\r\n}\r\n\r\n# Node group policy attachment for Amazon EBS CSI driver\r\nresource \"aws_iam_role_policy_attachment\" \"eks_node_1_role_AmazonEBSCSIDriverPolicy\" {\r\n  policy_arn = \"arn:aws:iam::aws:policy/service-role/AmazonEBSCSIDriverPolicy\"\r\n  role       = aws_iam_role.eks_node_1_role.name\r\n\r\n  depends_on = [aws_iam_role.eks_node_1_role]\r\n}\r\n\r\n# Node group creation\r\nresource \"aws_eks_node_group\" \"private_eks_node_group_1\" {\r\n  cluster_name    = var.eks_cluster_1_name\r\n  node_group_name = var.eks_node_group_1_name\r\n  node_role_arn   = aws_iam_role.eks_node_1_role.arn\r\n\r\n  subnet_ids = [\r\n    aws_subnet.eks_private_subnet_1a.id,\r\n    aws_subnet.eks_private_subnet_1b.id\r\n  ]\r\n\r\n  capacity_type  = var.eks_node_group_1_capacity_type\r\n  instance_types = [var.eks_node_group_1_instance_types]\r\n\r\n  scaling_config {\r\n    desired_size = var.eks_node_group_1_desired_size\r\n    max_size     = var.eks_node_group_1_max_size\r\n    min_size     = var.eks_node_group_1_min_size\r\n  }\r\n\r\n  update_config {\r\n    max_unavailable = var.eks_node_group_1_max_unavailable\r\n  }\r\n\r\n  labels = var.eks_node_group_1_labels\r\n\r\n  depends_on = [\r\n    aws_eks_cluster.eks_cluster_1,\r\n    aws_iam_role_policy_attachment.eks_node_1_role_AmazonEKSWorkerNodePolicy,\r\n    aws_iam_role_policy_attachment.eks_node_1_role_AmazonEKS_CNI_Policy,\r\n    aws_iam_role_policy_attachment.eks_node_1_role_AmazonEC2ContainerRegistryReadOnly\r\n  ]\r\n}\r\n# KMS key creation\r\nresource \"aws_kms_key\" \"kms_key_1\" {\r\n  description             = \"KMS key for terraform state storage bucket\"\r\n  deletion_window_in_days = var.kms_key_1_default_retention_days\r\n  enable_key_rotation     = true\r\n}\r\n\r\n# Creating an AWS KMS alias\r\nresource \"aws_kms_alias\" \"kms_key_1_alias\" {\r\n  name          = \"alias/terraform-bucket-key-eks-1\"\r\n  target_key_id = aws_kms_key.kms_key_1.key_id\r\n\r\n  depends_on = [aws_kms_key.kms_key_1]\r\n}\r\n\r\n# Creating an AWS KMS alias\r\nresource \"aws_kms_key\" \"kms_key_2\" {\r\n  description             = \"KMS key for DynamoDB table encryption\"\r\n  deletion_window_in_days = var.kms_key_2_default_retention_days\r\n  enable_key_rotation     = true\r\n}\r\n\r\n# Creating an AWS KMS alias\r\nresource \"aws_kms_alias\" \"kms_key_2_alias\" {\r\n  name          = \"alias/dynamodb-table-encryption-eks-1\"\r\n  target_key_id = aws_kms_key.kms_key_2.key_id\r\n\r\n  depends_on = [aws_kms_key.kms_key_2]\r\n}\r\n\r\n# Creating an AWS KMS alias\r\nresource \"aws_kms_key\" \"kms_key_3\" {\r\n  description             = \"KMS key for EKS\"\r\n  deletion_window_in_days = var.kms_key_3_default_retention_days\r\n  enable_key_rotation     = true\r\n}\r\n\r\n# Creating an AWS KMS alias\r\nresource \"aws_kms_alias\" \"kms_key_3_alias\" {\r\n  name          = \"alias/encryption-eks-1\"\r\n  target_key_id = aws_kms_key.kms_key_3.key_id\r\n\r\n  depends_on = [aws_kms_key.kms_key_3]\r\n}\r\n# Random string generation\r\nresource \"random_id\" \"random_id_1\" {\r\n  byte_length = 5\r\n}\r\n\r\n# S3 bucket creation\r\nresource \"aws_s3_bucket\" \"bucket_1\" {\r\n  # S3 bucket name\r\n  # Note that S3 buckets in AWS are global, which means that it is not possible to use a name that has been used by someone else\r\n  bucket              = \"terraform-state-storage-eks-1-${random_id.random_id_1.hex}\"\r\n  object_lock_enabled = true\r\n\r\n  tags = {\r\n    Name = \"terraform-state-storage-eks-1\"\r\n  }\r\n\r\n  depends_on = [\r\n    random_id.random_id_1,\r\n    aws_kms_key.kms_key_1,\r\n    aws_s3_bucket.log_bucket_1\r\n  ]\r\n}\r\n\r\n# S3 bucket versioning\r\nresource \"aws_s3_bucket_versioning\" \"bucket_1_versioning\" {\r\n  bucket = aws_s3_bucket.bucket_1.id\r\n\r\n  versioning_configuration {\r\n    status = \"Enabled\"\r\n  }\r\n\r\n  depends_on = [aws_s3_bucket.bucket_1]\r\n}\r\n\r\n# S3 bucket public access configuration\r\nresource \"aws_s3_bucket_public_access_block\" \"bucket_1_public_access_block_block\" {\r\n  bucket = aws_s3_bucket.bucket_1.id\r\n\r\n  block_public_acls       = true\r\n  block_public_policy     = true\r\n  ignore_public_acls      = true\r\n  restrict_public_buckets = true\r\n\r\n  depends_on = [aws_s3_bucket.bucket_1]\r\n}\r\n\r\n# S3 bucket server-side encryption configuration\r\nresource \"aws_s3_bucket_server_side_encryption_configuration\" \"bucket_1_sse_configuration\" {\r\n  bucket = aws_s3_bucket.bucket_1.id\r\n\r\n  rule {\r\n    apply_server_side_encryption_by_default {\r\n      kms_master_key_id = aws_kms_key.kms_key_1.arn\r\n      sse_algorithm     = \"aws:kms\"\r\n    }\r\n  }\r\n\r\n  depends_on = [\r\n    aws_s3_bucket.bucket_1,\r\n    aws_kms_key.kms_key_1\r\n  ]\r\n}\r\n\r\n# Create a new S3 bucket to store logs\r\n# tfsec:ignore:aws-s3-enable-bucket-logging\r\nresource \"aws_s3_bucket\" \"log_bucket_1\" {\r\n  bucket              = \"terraform-state-storage-logs-eks-1-${random_id.random_id_1.hex}\"\r\n  object_lock_enabled = true\r\n}\r\n\r\n# S3 bucket versioning\r\nresource \"aws_s3_bucket_versioning\" \"log_bucket_1_versioning\" {\r\n  bucket = aws_s3_bucket.log_bucket_1.id\r\n\r\n  versioning_configuration {\r\n    status = \"Enabled\"\r\n  }\r\n\r\n  depends_on = [aws_s3_bucket.log_bucket_1]\r\n}\r\n\r\n# S3 bucket public access configuration\r\nresource \"aws_s3_bucket_public_access_block\" \"log_bucket_1_public_access_block_block\" {\r\n  bucket = aws_s3_bucket.log_bucket_1.id\r\n\r\n  block_public_acls       = true\r\n  block_public_policy     = true\r\n  ignore_public_acls      = true\r\n  restrict_public_buckets = true\r\n\r\n  depends_on = [aws_s3_bucket.log_bucket_1]\r\n}\r\n\r\n# Log bucket policy to allow write access for log delivery\r\nresource \"aws_s3_bucket_policy\" \"log_bucket_1_policy\" {\r\n  bucket = aws_s3_bucket.log_bucket_1.id\r\n\r\n  policy = jsonencode({\r\n    Version = \"2012-10-17\"\r\n    Statement = [\r\n      {\r\n        Effect = \"Allow\"\r\n        Principal = {\r\n          Service = \"delivery.logs.amazonaws.com\"\r\n        }\r\n        Action   = \"s3:PutObject\"\r\n        Resource = \"${aws_s3_bucket.log_bucket_1.arn}/*\"\r\n      }\r\n    ]\r\n  })\r\n\r\n  depends_on = [aws_s3_bucket.log_bucket_1]\r\n}\r\n\r\n# S3 bucket server-side encryption configuration\r\nresource \"aws_s3_bucket_server_side_encryption_configuration\" \"log_bucket_1_sse_configuration\" {\r\n  bucket = aws_s3_bucket.log_bucket_1.id\r\n\r\n  rule {\r\n    apply_server_side_encryption_by_default {\r\n      kms_master_key_id = aws_kms_key.kms_key_1.arn\r\n      sse_algorithm     = \"aws:kms\"\r\n    }\r\n  }\r\n\r\n  depends_on = [\r\n    aws_s3_bucket.log_bucket_1,\r\n    aws_kms_key.kms_key_1\r\n  ]\r\n}\r\n\r\n# Enable logging for the main S3 bucket and set the log bucket as the target for log storage\r\nresource \"aws_s3_bucket_logging\" \"log_bucket_1_logging\" {\r\n  bucket = aws_s3_bucket.bucket_1.id\r\n\r\n  # Specify the target bucket for storing logs and the prefix for log files\r\n  target_bucket = aws_s3_bucket.log_bucket_1.id\r\n  target_prefix = \"log/\"\r\n\r\n  depends_on = [\r\n    aws_s3_bucket.log_bucket_1,\r\n    aws_s3_bucket.bucket_1\r\n  ]\r\n}\r\n\r\n# Create a new S3 bucket to store logs\r\n# tfsec:ignore:aws-s3-enable-bucket-logging\r\nresource \"aws_s3_bucket\" \"log_bucket_2\" {\r\n  bucket              = \"vpc-flow-logs-eks-1-${random_id.random_id_1.hex}\"\r\n  object_lock_enabled = true\r\n}\r\n\r\n# S3 bucket versioning\r\nresource \"aws_s3_bucket_versioning\" \"log_bucket_2_versioning\" {\r\n  bucket = aws_s3_bucket.log_bucket_2.id\r\n\r\n  versioning_configuration {\r\n    status = \"Enabled\"\r\n  }\r\n\r\n  depends_on = [aws_s3_bucket.log_bucket_2]\r\n}\r\n\r\n# S3 bucket public access configuration\r\nresource \"aws_s3_bucket_public_access_block\" \"log_bucket_2_public_access_block_block\" {\r\n  bucket = aws_s3_bucket.log_bucket_2.id\r\n\r\n  block_public_acls       = true\r\n  block_public_policy     = true\r\n  ignore_public_acls      = true\r\n  restrict_public_buckets = true\r\n\r\n  depends_on = [aws_s3_bucket.log_bucket_2]\r\n}\r\n\r\n# Log bucket policy to allow write access for log delivery\r\nresource \"aws_s3_bucket_policy\" \"log_bucket_2_policy\" {\r\n  bucket = aws_s3_bucket.log_bucket_2.id\r\n\r\n  policy = jsonencode({\r\n    Version = \"2012-10-17\"\r\n    Statement = [\r\n      {\r\n        Effect = \"Allow\",\r\n        Principal = {\r\n          Service = \"logs.amazonaws.com\"\r\n        },\r\n        Action   = \"s3:PutObject\",\r\n        Resource = \"${aws_s3_bucket.log_bucket_2.arn}/*\"\r\n      }\r\n    ]\r\n  })\r\n\r\n  depends_on = [aws_s3_bucket.log_bucket_2]\r\n}\r\n\r\n# S3 bucket server-side encryption configuration\r\nresource \"aws_s3_bucket_server_side_encryption_configuration\" \"log_bucket_2_sse_configuration\" {\r\n  bucket = aws_s3_bucket.log_bucket_2.id\r\n\r\n  rule {\r\n    apply_server_side_encryption_by_default {\r\n      kms_master_key_id = aws_kms_key.kms_key_1.arn\r\n      sse_algorithm     = \"aws:kms\"\r\n    }\r\n  }\r\n\r\n  depends_on = [\r\n    aws_s3_bucket.log_bucket_2,\r\n    aws_kms_key.kms_key_1\r\n  ]\r\n}\r\n\r\n# Create a VPC Flow Log resource to enable flow logs for the VPC\r\nresource \"aws_flow_log\" \"vpc_1_flow_logs\" {\r\n  log_destination      = aws_s3_bucket.log_bucket_2.arn\r\n  log_destination_type = \"s3\"\r\n  traffic_type         = \"ALL\"\r\n  vpc_id               = aws_vpc.eks_vpc_1.id\r\n\r\n  depends_on = [aws_s3_bucket.log_bucket_2]\r\n}\r\n# DynamoDB table creation\r\nresource \"aws_dynamodb_table\" \"dynamodb_terraform_state_lock_1\" {\r\n  name         = \"dynamodb-terraform-state-lock-eks-1\"\r\n  billing_mode = var.dynamodb_terraform_state_lock_1_billing_mode\r\n  hash_key     = \"LockID\"\r\n\r\n  attribute {\r\n    name = \"LockID\"\r\n    type = \"S\"\r\n  }\r\n\r\n  server_side_encryption {\r\n    enabled     = true\r\n    kms_key_arn = aws_kms_key.kms_key_2.arn\r\n  }\r\n\r\n  point_in_time_recovery {\r\n    enabled = true\r\n  }\r\n\r\n  tags = {\r\n    Name = \"dynamodb-terraform-state-lock-eks-1\"\r\n  }\r\n\r\n  depends_on = [aws_kms_key.kms_key_2]\r\n}\r\n# Amazon EBS CSI driver installation\r\nresource \"helm_release\" \"aws_ebs_csi_driver\" {\r\n  name       = \"aws-ebs-csi-driver\"\r\n  chart      = \"aws-ebs-csi-driver\"\r\n  namespace  = \"kube-system\"\r\n  repository = \"https://kubernetes-sigs.github.io/aws-ebs-csi-driver\"\r\n  version    = var.helm_ebs_csi_driver_version\r\n  timeout    = var.helm_timeout_seconds\r\n\r\n  depends_on = [\r\n    aws_eks_cluster.eks_cluster_1,\r\n    aws_iam_role_policy_attachment.eks_node_1_role_AmazonEBSCSIDriverPolicy\r\n  ]\r\n}\r\noutput \"bucket_1_name\" {\r\n  description = \"The name of the S3 bucket that is being used to store the Terraform state file\"\r\n  value       = aws_s3_bucket.bucket_1.bucket\r\n}\r\n\r\noutput \"log_bucket_1_name\" {\r\n  description = \"The name of the S3 bucket that is being used to store the Terraform state file\"\r\n  value       = aws_s3_bucket.log_bucket_1.bucket\r\n}\r\n\r\noutput \"eks_cluster_name\" {\r\n  description = \"The name of the EKS cluster\"\r\n  value       = aws_eks_cluster.eks_cluster_1.name\r\n}\r\n"}]}
{"messages": [{"role": "user", "content": "Create a resource group named \"Azuredevops\" in the South Central US region. Define a virtual network with the address space of 10.0.0.0/16 and an internal subnet of 10.0.2.0/24. Provision two Linux virtual machines using Ubuntu 18.04 LTS images, associating them with the availability set and the preceding network resources. Set up a public IP for load balancing and configure a network security group for the VMs. Lastly, output the public IP address for reference."}, {"role": "assistant", "content": "\n#File: import.tf\n\n#File: main.tf\n\nprovider \"azurerm\" {\n  features {}\n}\n\n\nresource \"azurerm_resource_group\" \"Azuredevops\" {\n   name =  \"Azuredevops\"\n   location = \"South Central US\"\n   tags = {\n    environment = \"Production\"\n    project= \"project01\"\n  }\n}\n\n\ndata \"azurerm_platform_image\" \"ubunti1804LTS\" {\n  location  = azurerm_resource_group.Azuredevops.location\n  publisher = \"Canonical\"\n  offer     = \"UbuntuServer\"\n  sku       = \"18.04-LTS\"\n}\n\nresource \"azurerm_virtual_network\" \"Azuredevops\" {\n  name                = \"${var.prefix}-network\"\n  address_space       = [\"10.0.0.0/16\"]\n  location            = azurerm_resource_group.Azuredevops.location\n  resource_group_name = azurerm_resource_group.Azuredevops.name\n  tags = {\n    environment = \"Production\"\n    project= \"project01\"\n  }\n}\n\n\nresource \"azurerm_subnet\" \"internal\" {\n  name                 = \"internal\"\n  resource_group_name  = azurerm_resource_group.Azuredevops.name\n  virtual_network_name = azurerm_virtual_network.Azuredevops.name\n  address_prefixes     = [\"10.0.2.0/24\"]\n}\n\nresource \"azurerm_public_ip\" \"Azuredevops\" {\n  name                = \"TestPublicIp1\"\n  resource_group_name = azurerm_resource_group.Azuredevops.name\n  location            = azurerm_resource_group.Azuredevops.location\n  allocation_method   = \"Static\"\n\n  tags = {\n    environment = \"Production\"\n    project= \"project01\"  \n  }\n}\n\nresource \"azurerm_lb\" \"vm_lb\" {\n  name                = \"${var.prefix}-lb\"\n  location            = azurerm_resource_group.Azuredevops.location\n  resource_group_name = \"${azurerm_resource_group.Azuredevops.name}\"\n\n  frontend_ip_configuration {\n    name                 = \"FrontAddressPool\"\n    public_ip_address_id = azurerm_public_ip.Azuredevops.id\n  }\n    tags = {\n    environment = \"Production\"\n    project= \"project01\"  \n  }\n}\n\nresource \"azurerm_lb_backend_address_pool\" \"bpepool\" {\n loadbalancer_id     = azurerm_lb.vm_lb.id\n name                = \"BackEndAddressPool\"\n}\n\nresource \"azurerm_network_security_group\" \"Azuredevops\" {\n  name                = \"Azuredevops-NSG\"\n  location            = \"${azurerm_resource_group.Azuredevops.location}\"\n  resource_group_name = \"${azurerm_resource_group.Azuredevops.name}\"  \n\n  tags = {\n    environment = \"Production\"\n    project= \"project01\"  \n  }\n}\nresource \"azurerm_network_interface\" \"nic\" {\n  count               = var.vm_count\n  name                 = \"nic-${count.index}\"\n  resource_group_name = azurerm_resource_group.Azuredevops.name\n  location            = azurerm_resource_group.Azuredevops.location\n  \n\n  ip_configuration {\n    name                          = \"nic-${count.index}\"\n    subnet_id                     = azurerm_subnet.internal.id\n    private_ip_address_allocation = \"Dynamic\"\n   \n  }\n  tags = {\n    environment = \"Production\"\n    project= \"project01\"\n  }\n}\n\nresource \"azurerm_network_interface_backend_address_pool_association\" \"nic_bapa\" {\n  count                   = var.vm_count  \n  ip_configuration_name   = \"nic-${count.index}\"\n  network_interface_id    = azurerm_network_interface.nic[count.index].id\n  backend_address_pool_id = \"${azurerm_lb_backend_address_pool.bpepool.id}\"\n}\n\nresource \"tls_private_key\" \"Azuredevops\" {\n  algorithm   = \"RSA\"\n  rsa_bits    = 4096\n}\n\nresource \"azurerm_availability_set\" \"abilityset\" {\n  name                = \"${var.prefix}-abset\"\n  location            = azurerm_resource_group.Azuredevops.location\n  resource_group_name = azurerm_resource_group.Azuredevops.name\n  platform_fault_domain_count = 3\n  platform_update_domain_count = 3  \n  depends_on = [\n    azurerm_resource_group.Azuredevops\n  ]\n\n  tags = {\n    environment = \"Production\"\n    project= \"project01\"\n  }\n}\n\n\nresource \"azurerm_linux_virtual_machine\" \"Azuredevops\" {\n  count                           = var.vm_count \n  name                            = \"${var.prefix}-${count.index}-vm\"\n  resource_group_name             = azurerm_resource_group.Azuredevops.name\n  location                        = azurerm_resource_group.Azuredevops.location\n  size                            = \"Standard_D2s_v3\"\n  admin_username                  = \"${var.username}\"\n  admin_password                  = \"${var.password}\"\n  availability_set_id             = azurerm_availability_set.abilityset.id \n  network_interface_ids           = [element(azurerm_network_interface.nic.*.id, count.index)]\n\n\n  disable_password_authentication = false\n\n\nadmin_ssh_key {\n    username   = \"${var.username}\"\n    public_key = tls_private_key.Azuredevops.public_key_openssh\n  }\n source_image_reference {\n    publisher = data.azurerm_platform_image.ubunti1804LTS.publisher\n    offer     = data.azurerm_platform_image.ubunti1804LTS.offer\n    sku       = data.azurerm_platform_image.ubunti1804LTS.sku\n    version   = data.azurerm_platform_image.ubunti1804LTS.version\n  } \n\n  os_disk {\n    storage_account_type = \"Standard_LRS\"\n    caching              = \"ReadWrite\"\n  }\n\n   tags = {\n    environment = \"Production\"\n    project= \"project01\"\n  }\n}\noutput \"ip-addres\" {\n      description = \"The Public IP address is:\"\n      value = azurerm_public_ip.Azuredevops.id\n       }\n\n#File: vers.tf\nvariable \"prefix\" {\n  description = \"The prefix which should be used for all resources in this example\"\n  default = \"project01\"\n}\n\nvariable \"location\" {\n  description = \"The Azure Region in which all resources in this example should be created.\"\n  default = \"South Central US\"\n}\nvariable \"username\" {\n  description = \"The Azure VM login user name\"\n  default = \"mahfuzmr\"\n \n}\nvariable \"password\" {\n   description = \"The Azure VM login user password\"\n   default = \"P@ssword01\"\n}\nvariable \"vm_count\" {\n  description = \"Number of Virtual Machines\"\n  default = 2\n}"}]}
{"messages": [{"role": "user", "content": "Create a Google Cloud project provider using your GCP project ID and desired region. Create a Google Cloud Storage bucket for your function source code, ensuring it can be forcefully destroyed. Upload your function source code to the bucket, specifying the zipped source file. Create a Google Cloud Function named \"helloWorld\" with HTTP trigger and configure it for unauthenticated access by binding the IAM policy. Ensure the function is set to run with Python 310 and allocate 256 MB of memory."}, {"role": "assistant", "content": "\n#File: main.tf\n# Specify the provider\nprovider \"google\" {\n  project = \"sparrow-444313\"   # Replace with your GCP project ID\n  region  = \"us-central1\"       # Replace with your desired region\n}\n\n# Google Cloud Function Deployment\nresource \"google_cloudfunctions_function\" \"hello_world\" {\n  name        = \"helloWorld\"\n  description = \"A simple Hello World Cloud Function\"\n  runtime     = \"python310\"\n  region      = \"us-central1\" # Match the region from the provider\n\n  # Entry point of the function\n  entry_point = \"hello_world\"\n\n  # The source code archive (will be uploaded)\n  source_archive_bucket = google_storage_bucket.function_bucket.name\n  source_archive_object = google_storage_bucket_object.function_code.name\n\n  # Trigger on HTTP requests\n  trigger_http = true\n\n  # Allow unauthenticated access\n  available_memory_mb = 256\n  # Removed the environment variable for PORT since it is reserved by the system\n}\n\n# Allow unauthenticated access to the function by adding an IAM policy binding\nresource \"google_cloudfunctions_function_iam_member\" \"allow_unauthenticated\" {\n  project        = google_cloudfunctions_function.hello_world.project\n  region         = google_cloudfunctions_function.hello_world.region\n  cloud_function = google_cloudfunctions_function.hello_world.name\n  role           = \"roles/cloudfunctions.invoker\"\n  member         = \"allUsers\"\n}\n\n# Storage bucket for function source code\nresource \"google_storage_bucket\" \"function_bucket\" {\n  name          = \"gcf-source-bucket-${random_id.bucket_id.hex}\"\n  location      = \"US\"\n  force_destroy = true\n}\n\n# Upload source code to the bucket\nresource \"google_storage_bucket_object\" \"function_code\" {\n  name   = \"function-source.zip\"\n  bucket = google_storage_bucket.function_bucket.name\n  source = \"function-source.zip\" # Replace with your zipped source code file\n}\n\n# Random ID for unique bucket name\nresource \"random_id\" \"bucket_id\" {\n  byte_length = 4\n}\n"}]}
{"messages": [{"role": "user", "content": "Create a Google Cloud Storage bucket named \"winter-boot-bucket\" in a specified region. Upload an HTML file named \"index.html\" from the local directory to the bucket. Set the access control for the uploaded object to be public, allowing all users to read it. Configure the Google Cloud provider with the service account credentials and project details. Define necessary variables for the service key, project, and region."}, {"role": "assistant", "content": "\n#File: main.tf\n# Bucket to store website\nresource \"google_storage_bucket\" \"winter_boot_website\" {\n  name = \"winter-boot-bucket\"\n  location     = var.gcp_region\n}\n\n# Make new objects public\nresource \"google_storage_object_access_control\" \"public_rule\" {\n  object = google_storage_bucket_object.static_site_source.name\n  bucket = google_storage_bucket.winter_boot_website.name\n  role = \"READER\"\n  entity = \"allUsers\"\n}\n\n# Upload html file to bucket\nresource \"google_storage_bucket_object\" \"static_site_source\" {\n  name     = \"index.html\"\n  source   = \"../website/index.html\"\n  bucket   = google_storage_bucket.winter_boot_website.name\n}\n#File: providers.tf\nprovider \"google\" {\n  credentials = file(var.gcp_svc_key)\n  project = var.gcp_project\n  region = var.gcp_region\n}\n#File: variable.tf\nvariable \"gcp_svc_key\" {\n\n}\n\nvariable \"gcp_project\" {\n\n}\n\nvariable \"gcp_region\" {\n\n}"}]}
{"messages": [{"role":"user","content":"Deploy an internet-facing Application Load Balancer in us-east-1. Allow inbound HTTP traffic. Use default security and dummy subnets for now."},{"role":"assistant","content":"provider \"aws\" {\r\n  region = \"us-east-1\"\r\n}\r\n\r\nresource \"aws_vpc\" \"main\" {\r\n  cidr_block = \"10.0.0.0/16\"\r\n}\r\n\r\nresource \"aws_subnet\" \"a\" {\r\n  vpc_id            = aws_vpc.main.id\r\n  cidr_block        = \"10.0.1.0/24\"\r\n  availability_zone = \"us-east-1a\"\r\n}\r\n\r\nresource \"aws_subnet\" \"b\" {\r\n  vpc_id            = aws_vpc.main.id\r\n  cidr_block        = \"10.0.2.0/24\"\r\n  availability_zone = \"us-east-1b\"\r\n}\r\n\r\nresource \"aws_security_group\" \"alb_sg\" {\r\n  name   = \"alb-sg\"\r\n  vpc_id = aws_vpc.main.id\r\n\r\n  ingress {\r\n    from_port   = 80\r\n    to_port     = 80\r\n    protocol    = \"tcp\"\r\n    cidr_blocks = [\"0.0.0.0/0\"]\r\n  }\r\n\r\n  egress {\r\n    from_port   = 0\r\n    to_port     = 0\r\n    protocol    = \"-1\"\r\n    cidr_blocks = [\"0.0.0.0/0\"]\r\n  }\r\n}\r\n\r\nresource \"aws_lb\" \"app\" {\r\n  name               = \"example-alb\"\r\n  internal           = false\r\n  load_balancer_type = \"application\"\r\n  security_groups    = [aws_security_group.alb_sg.id]\r\n  subnets            = [aws_subnet.a.id, aws_subnet.b.id]\r\n}\r\n"}]}
{"messages": [{"role": "user", "content": "Create a random pet name to use as a prefix. Configure the Azure provider without specifying features. Create a resource group in \"West US 2\" with a name based on the random pet prefix and assign it a \"Demo\" tag. Set up an Azure Kubernetes Service (AKS) cluster with the random pet prefix, a default node pool of 2 Standard_D2_v2 size nodes, and enable role-based access control. Define outputs for the resource group name and the Kubernetes cluster name."}, {"role": "assistant", "content": "\n#File: aks-cluster.tf\n# Copyright (c) HashiCorp, Inc.\n# SPDX-License-Identifier: MPL-2.0\n\nresource \"random_pet\" \"prefix\" {}\n\nprovider \"azurerm\" {\n  features {}\n}\n\nresource \"azurerm_resource_group\" \"default\" {\n  name     = \"${random_pet.prefix.id}-rg\"\n  location = \"West US 2\"\n\n  tags = {\n    environment = \"Demo\"\n  }\n}\n\nresource \"azurerm_kubernetes_cluster\" \"default\" {\n  name                = \"${random_pet.prefix.id}-aks\"\n  location            = azurerm_resource_group.default.location\n  resource_group_name = azurerm_resource_group.default.name\n  dns_prefix          = \"${random_pet.prefix.id}-k8s\"\n  kubernetes_version  = \"1.26.3\"\n\n  default_node_pool {\n    name            = \"default\"\n    node_count      = 2\n    vm_size         = \"Standard_D2_v2\"\n    os_disk_size_gb = 30\n  }\n\n  service_principal {\n    client_id     = var.appId\n    client_secret = var.password\n  }\n\n  role_based_access_control_enabled = true\n\n  tags = {\n    environment = \"Demo\"\n  }\n}\n\n#File: outputs.tf\n# Copyright (c) HashiCorp, Inc.\n# SPDX-License-Identifier: MPL-2.0\n\noutput \"resource_group_name\" {\n  value = azurerm_resource_group.default.name\n}\n\noutput \"kubernetes_cluster_name\" {\n  value = azurerm_kubernetes_cluster.default.name\n}\n\n# output \"host\" {\n#   value = azurerm_kubernetes_cluster.default.kube_config.0.host\n# }\n\n# output \"client_key\" {\n#   value = azurerm_kubernetes_cluster.default.kube_config.0.client_key\n# }\n\n# output \"client_certificate\" {\n#   value = azurerm_kubernetes_cluster.default.kube_config.0.client_certificate\n# }\n\n# output \"kube_config\" {\n#   value = azurerm_kubernetes_cluster.default.kube_config_raw\n# }\n\n# output \"cluster_username\" {\n#   value = azurerm_kubernetes_cluster.default.kube_config.0.username\n# }\n\n# output \"cluster_password\" {\n#   value = azurerm_kubernetes_cluster.default.kube_config.0.password\n# }\n\n#File: variables.tf\n# Copyright (c) HashiCorp, Inc.\n# SPDX-License-Identifier: MPL-2.0\n\nvariable \"appId\" {\n  description = \"Azure Kubernetes Service Cluster service principal\"\n}\n\nvariable \"password\" {\n  description = \"Azure Kubernetes Service Cluster password\"\n}\n\n#File: versions.tf\n# Copyright (c) HashiCorp, Inc.\n# SPDX-License-Identifier: MPL-2.0\n\nterraform {\n  required_providers {\n    azurerm = {\n      source  = \"hashicorp/azurerm\"\n      version = \"3.67.0\"\n    }\n  }\n\n  required_version = \">= 0.14\"\n}\n\n"}]}
{"messages": [{"role": "user", "content": "Create a Google Cloud provider with the specified project ID and region. Set up multiple email notification channels based on the provided list. Define uptime check configurations that monitor URLs, including their display names and parameters like host, path, timeout, and period. Output the created notification channels for easy access. Ensure all variables are properly defined in the variables file for seamless configuration."}, {"role": "assistant", "content": "\n#File: main.tf\nprovider \"google\" {\n  project = var.project_id\n  region  = var.project_region\n}\n\nresource \"google_monitoring_notification_channel\" \"channels\" {\n  count = length(var.notification_channels)\n\n  type = \"email\"\n\n  labels = {\n    email_address = var.notification_channels[count.index].email\n  }\n}\n\nresource \"google_monitoring_uptime_check_config\" \"uptime_checks\" {\n  count        = length(var.uptime_checks)\n  display_name = var.uptime_checks[count.index].name\n\n  monitored_resource {\n    type = \"uptime_url\"\n    labels = {\n      host = var.uptime_checks[count.index].hostname\n    }\n  }\n\n  http_check {\n    path = var.uptime_checks[count.index].path\n  }\n\n  timeout = format(\"%ds\", var.uptime_checks[count.index].timeout)\n  period  = format(\"%ds\", var.uptime_checks[count.index].period)\n}\n\n#File: outputs.tf\noutput \"notification_channels\" {\n  description = \"The notification channels created.\"\n  value       = google_monitoring_notification_channel.channels\n}\n#File: variables.tf\nvariable \"project_id\" {\n  description = \"The ID of the project where the resources will be created.\"\n  type        = string\n}\n\nvariable \"project_region\" {\n  description = \"The REGION of the project where the resources will be created.\"\n  type        = string\n}\n\nvariable \"uptime_checks\" {\n  description = \"List of uptime checks.\"\n  type = list(object({\n    name     = string\n    hostname = string\n    path     = string\n    period   = number\n    timeout  = number\n  }))\n  default = []\n}\n\nvariable \"notification_channels\" {\n  description = \"List of notification channels.\"\n  type = list(object({\n    type  = string\n    email = string\n  }))\n  default = []\n}\n"}]}
{"messages": [{"role": "user", "content": "Create an Azure virtual network named `vnet-${var.environment}` in the specified region and resource group. Create an application subnet named `app-subnet-${var.environment}` and a database subnet named `db-subnet-${var.environment}` within the virtual network, each with appropriate address prefixes. Add a bastion subnet with the name `AzureBastionSubnet` to the virtual network as well. Create a network interface named `app_vm_nic-${var.environment}` connected to the application subnet, enabling dynamic IP address allocation. Finally, launch a Linux virtual machine named `vm-${var.environment}` with SSH key authentication, linked to the network interface."}, {"role": "assistant", "content": "\n#File: main.tf\n# Networking Module\n\n# Virtual Network\nresource \"azurerm_virtual_network\" \"vnet\" {\n  name                = \"vnet-${var.environment}\"\n  location            = var.region\n  resource_group_name = var.resource_group_name\n  address_space       = [\"10.0.0.0/16\"]\n  tags                = var.common_tags\n}\n\n# App Subnet\nresource \"azurerm_subnet\" \"app_subnet\" {\n  name                 = \"app-subnet-${var.environment}\"\n  resource_group_name  = var.resource_group_name\n  virtual_network_name = azurerm_virtual_network.vnet.name\n  address_prefixes     = [\"10.0.1.0/24\"]\n  service_endpoints    = [\"Microsoft.Sql\"]\n}\n\n# Database Subnet\nresource \"azurerm_subnet\" \"db_subnet\" {\n  name                 = \"db-subnet-${var.environment}\"\n  resource_group_name  = var.resource_group_name\n  virtual_network_name = azurerm_virtual_network.vnet.name\n  address_prefixes     = [\"10.0.2.0/24\"]\n  service_endpoints    = [\"Microsoft.Sql\"]\n}\n\n# Bastion Subnet\nresource \"azurerm_subnet\" \"bastion_subnet\" {\n  name                 = \"AzureBastionSubnet\"\n  resource_group_name  = var.resource_group_name\n  virtual_network_name = azurerm_virtual_network.vnet.name\n  address_prefixes     = [\"10.0.3.0/24\"]\n}\n\nresource \"azurerm_network_interface\" \"nic\" {\n  name                = \"app_vm_nic-${var.environment}\"\n  location            = var.region\n  resource_group_name = var.resource_group_name\n\n  ip_configuration {\n    name                          = \"internal\"\n    subnet_id                     = azurerm_subnet.app_subnet.id\n    private_ip_address_allocation = \"Dynamic\"\n  }\n\n  tags = var.common_tags\n}\n\nresource \"azurerm_linux_virtual_machine\" \"vm\" {\n  name                = \"vm-${var.environment}\"\n  location            = var.region\n  resource_group_name = var.resource_group_name\n  size                = \"Standard_B1s\"\n  admin_username      = \"azureuser\"\n\n  disable_password_authentication = true\n\n  admin_ssh_key {\n    username   = \"azureuser\"\n    public_key = try(file(var.ssh_public_key_path), null) # Using try() for error handling\n  }\n\n  network_interface_ids = [azurerm_network_interface.nic.id]\n\n  os_disk {\n    caching              = \"ReadWrite\"\n    storage_account_type = \"Standard_LRS\"\n  }\n\n  source_image_reference {\n    publisher = \"Canonical\"\n    offer     = \"UbuntuServer\"\n    sku       = \"18.04-LTS\"\n    version   = \"latest\"\n  }\n\n  tags = var.common_tags\n}\n\n#File: outputs.tf\noutput \"vnet_id\" {\n  description = \"ID of the created virtual network\"\n  value       = azurerm_virtual_network.vnet.id\n}\n\noutput \"app_subnet_id\" {\n  description = \"ID of the application subnet\"\n  value       = azurerm_subnet.app_subnet.id\n}\n\noutput \"db_subnet_id\" {\n  description = \"ID of the database subnet\"\n  value       = azurerm_subnet.db_subnet.id\n}\n\noutput \"bastion_subnet_id\" {\n  description = \"ID of the bastion subnet\"\n  value       = azurerm_subnet.bastion_subnet.id\n}\n\n#File: variables.tf\nvariable \"environment\" {\n  description = \"Environment name (dev, test, prod)\"\n  type        = string\n}\n\nvariable \"region\" {\n  description = \"Azure region to deploy resources\"\n  type        = string\n}\n\nvariable \"resource_group_name\" {\n  description = \"Name of the resource group\"\n  type        = string\n}\n\nvariable \"common_tags\" {\n  type = map(string)\n}\n\nvariable \"ssh_public_key_path\" {\n  description = \"Path to the SSH public key file\"\n  type        = string\n\n  validation {\n    condition     = can(file(var.ssh_public_key_path))\n    error_message = \"The SSH public key file specified in 'ssh_public_key_path' does not exist or cannot be read. Please provide a valid file path.\"\n  }\n}\n#File: versions.tf\nterraform {\n  required_providers {\n    azurerm = {\n      source  = \"hashicorp/azurerm\"\n      version = \"~> 3.0\"\n    }\n  }\n  required_version = \">= 1.0.0\"\n}"}]}
{"messages": [{"role": "user", "content": "Create a Google Cloud Storage bucket named \"example-rishab-coffee7\" in the US region to store your website files. Upload the HTML file \"index.html\" from the specified local path to the bucket. Set public access for the uploaded object so that all users can read it. Reserve a global external IP address and configure DNS records to point to this IP for your website. Finally, create a Google Cloud Load Balancer with HTTPS support, linking the CDN backend bucket and SSL certificate to serve your website."}, {"role": "assistant", "content": "\n#File: main.tf\n# Bucket to store website\nresource \"google_storage_bucket\" \"website\" {\n  provider = google\n  name     = \"example-rishab-coffee7\"\n  location = \"US\"\n}\n\n# Make new objects public\nresource \"google_storage_object_access_control\" \"public_rule\" {\n  object = google_storage_bucket_object.static_site_src.output_name\n  bucket = google_storage_bucket.website.name\n  role   = \"READER\"\n  entity = \"allUsers\"\n}\n#resource \"google_storage_default_object_access_control\" \"website_read\" {\n#  bucket = google_storage_bucket.website.name\n#  role   = \"READER\"\n#  entity = \"allUsers\"\n#}\n\n# Upload the html file to the bucket\nresource \"google_storage_bucket_object\" \"static_site_src\" {\n  name   = \"index.html\"\n  source = \"../website/index.html\"\n  bucket = google_storage_bucket.website.name\n  \n}\n\n# Reserve an external IP\nresource \"google_compute_global_address\" \"website\" {\n  provider = google\n  name     = \"website-lb-ip\"\n}\n\n# Get the managed DNS zone\ndata \"google_dns_managed_zone\" \"gcp_coffeetime_dev\" {\n  provider = google\n  name     = \"rishab-example\"\n}\n\n# Add the IP to the DNS\nresource \"google_dns_record_set\" \"website\" {\n  provider     = google\n  name         = \"website.${data.google_dns_managed_zone.gcp_coffeetime_dev.dns_name}\"\n  type         = \"A\"\n  ttl          = 300\n  managed_zone = data.google_dns_managed_zone.gcp_coffeetime_dev.name\n  rrdatas      = [google_compute_global_address.website.address]\n}\n\n# Add the bucket as a CDN backend\nresource \"google_compute_backend_bucket\" \"website-backend\" {\n  provider    = google\n  name        = \"website-backend\"\n  description = \"Contains files needed by the website\"\n  bucket_name = google_storage_bucket.website.name\n  enable_cdn  = true\n}\n\n# Create HTTPS certificate\nresource \"google_compute_managed_ssl_certificate\" \"website\" {\n  provider = google-beta\n  name     = \"website-cert\"\n  managed {\n    domains = [google_dns_record_set.website.name]\n  }\n}\n\n# GCP URL MAP\nresource \"google_compute_url_map\" \"website\" {\n  provider        = google\n  name            = \"website-url-map\"\n  default_service = google_compute_backend_bucket.website-backend.self_link\n    host_rule {\n    hosts        = [\"*\"]\n    path_matcher = \"allpaths\"\n  }\n\n  path_matcher {\n    name            = \"allpaths\"\n    default_service = google_compute_backend_bucket.website-backend.self_link\n  }\n}\n\n# GCP target proxy\nresource \"google_compute_target_https_proxy\" \"website\" {\n  provider         = google\n  name             = \"website-target-proxy\"\n  url_map          = google_compute_url_map.website.self_link\n  ssl_certificates = [google_compute_managed_ssl_certificate.website.self_link]\n}\n\n# GCP forwarding rule\nresource \"google_compute_global_forwarding_rule\" \"default\" {\n  provider              = google\n  name                  = \"website-forwarding-rule\"\n  load_balancing_scheme = \"EXTERNAL\"\n  ip_address            = google_compute_global_address.website.address\n  ip_protocol           = \"TCP\"\n  port_range            = \"443\"\n  target                = google_compute_target_https_proxy.website.self_link\n}\n#File: outputs.tf\noutput \"url\" {\n  description = \"Website URL\"\n  value       = google_compute_url_map.website.self_link\n}\n#File: provider.tf\n# GCP provider\n\nprovider \"google\" {\n  credentials  = file(var.gcp_svc_key)\n  project      = var.gcp_project\n  region       = var.gcp_region\n}\n\n# GCP beta provider\nprovider \"google-beta\" {\n  credentials  = file(var.gcp_svc_key)\n  project      = var.gcp_project\n  region       = var.gcp_region\n}\n#File: variables.tf\nvariable \"gcp_svc_key\" {}\nvariable \"gcp_project\" {}\nvariable \"gcp_region\" {}"}]}
{"messages": [{"role":"user","content":"Set up an auto-scaling web server infrastructure on AWS using EC2 instances behind an Application Load Balancer (ALB), with traffic distributed across three public subnets in different availability zones. Includes resources for a custom VPC, public subnets, internet gateway, route tables, security groups, launch configuration, auto-scaling group, and a CPU-based scaling policy. The EC2 instances automatically install and run Apache HTTP server with a dynamic index page displaying the local IP."},{"role":"assistant","content":"\r\nvariable \"lab_tag\" {\r\n    default = \"Auto-Scaling-Lab\"\r\n}\r\n\r\nvariable \"instance_ami\" {\r\n    default = \"ami-02354e95b39ca8dec\"\r\n}\r\nvariable \"instance_type\" {\r\n    default = \"t2.micro\"\r\n}\r\n\r\nvariable \"aws_access_key\"{}\r\n\r\nvariable \"aws_secret_key\" {}\r\n\r\nvariable \"aws_key_pair_pub\"{}\r\n\r\nvariable \"web_user_data\" {\r\n    default = <<EOT\r\n        #!/bin/bash\r\n        yum update -y\r\n        yum install httpd -y\r\n        service httpd start\r\n        chkconfig httpd on\r\n        cd /var/www/html\r\n        echo \"<html><h1>This is WebServer\" `curl http://169.254.169.254/latest/meta-data/local-ipv4` \"</h1></html>\" > index.html\r\n    EOT\r\n}\r\n\r\n############################################################3\r\nprovider \"aws\" {\r\n  access_key = var.aws_access_key \r\n  secret_key = var.aws_secret_key \r\n  region     = \"us-east-1\"\r\n}\r\n\r\n# create the VPC\r\nresource \"aws_vpc\" \"vpc\" {\r\n  cidr_block           = \"192.168.64.0/20\"\r\n  instance_tenancy     = \"default\"\r\n  enable_dns_support   = true\r\n  enable_dns_hostnames = true\r\n} # end resource\r\n\r\n# Subnets\r\nresource \"aws_subnet\" \"pub_us_east_1a\" {\r\n  vpc_id                  = aws_vpc.vpc.id\r\n  cidr_block              = \"192.168.64.0/24\"\r\n  map_public_ip_on_launch = true\r\n  availability_zone       = \"us-east-1a\"\r\n} \r\n\r\nresource \"aws_subnet\" \"pub_us_east_1b\" {\r\n  vpc_id                  = aws_vpc.vpc.id\r\n  cidr_block              = \"192.168.65.0/24\"\r\n  map_public_ip_on_launch = true\r\n  availability_zone       = \"us-east-1b\"\r\n} \r\n\r\nresource \"aws_subnet\" \"pub_us_east_1c\" {\r\n  vpc_id                  = aws_vpc.vpc.id\r\n  cidr_block              = \"192.168.66.0/24\"\r\n  map_public_ip_on_launch = true\r\n  availability_zone       = \"us-east-1c\"\r\n} \r\n\r\n# Create the Internet Gateway\r\nresource \"aws_internet_gateway\" \"ig\" {\r\n  vpc_id                  = aws_vpc.vpc.id\r\n} # end resource\r\n\r\n# Create the Route Table\r\nresource \"aws_route_table\" \"rt_main\" {\r\n  vpc_id                  = aws_vpc.vpc.id\r\n  route {\r\n     cidr_block = \"0.0.0.0/0\"\r\n     gateway_id = aws_internet_gateway.ig.id\r\n  }\r\n} # end resource\r\n\r\n# Associate the Route Table with the Subnet\r\nresource \"aws_route_table_association\" \"rt_ass_us_east_1a\" {\r\n  subnet_id      = aws_subnet.pub_us_east_1a.id\r\n  route_table_id = aws_route_table.rt_main.id \r\n} # end resource\r\nresource \"aws_route_table_association\" \"rt_ass_us_east_1b\" {\r\n  subnet_id      = aws_subnet.pub_us_east_1b.id\r\n  route_table_id = aws_route_table.rt_main.id \r\n} # end resource\r\nresource \"aws_route_table_association\" \"rt_ass_us_east_1c\" {\r\n  subnet_id      = aws_subnet.pub_us_east_1c.id\r\n  route_table_id = aws_route_table.rt_main.id \r\n} # end resource\r\n\r\n# Security Groups for instances\r\nresource \"aws_security_group\" \"web_server\" {\r\n    vpc_id                  = aws_vpc.vpc.id\r\n    name = \"SG Web Server\"\r\n    description = \"SG Web Server\"\r\n    ingress {\r\n        description = \"Allow HTTP from anywere\"\r\n        from_port = 80\r\n        to_port = 80\r\n        protocol = \"TCP\"\r\n        cidr_blocks = [\"0.0.0.0/0\"]\r\n    }\r\n    ingress {\r\n        description = \"Allow SSH from anywere\"\r\n        from_port = 22\r\n        to_port = 22\r\n        protocol = \"TCP\"\r\n        cidr_blocks = [\"0.0.0.0/0\"]\r\n    }\r\n    egress {\r\n        description = \"Allow egress traffic\"\r\n        from_port = 0\r\n        to_port = 0\r\n        protocol = \"-1\"\r\n        cidr_blocks = [\"0.0.0.0/0\"]\r\n    }\r\n}\r\n\r\n# Import in AWS pub key\r\nresource \"aws_key_pair\" \"lab\" {\r\n    key_name   = \"lab\"\r\n    public_key = var.aws_key_pair_pub\r\n}\r\n\r\n\r\n\r\n\r\n# Security Groups for instances\r\nresource \"aws_security_group\" \"elb_web\" {\r\n    vpc_id                  = aws_vpc.vpc.id\r\n    name = \"ELB Web Server\"\r\n    description = \"ELB  Web Server\"\r\n    ingress {\r\n        description = \"Allow HTTP from anywere\"\r\n        from_port = 80\r\n        to_port = 80\r\n        protocol = \"TCP\"\r\n        cidr_blocks = [\"0.0.0.0/0\"]\r\n    }\r\n    egress {\r\n        description = \"Allow egress traffic\"\r\n        from_port = 0\r\n        to_port = 0\r\n        protocol = \"-1\"\r\n        cidr_blocks = [\"0.0.0.0/0\"]\r\n    }\r\n}\r\n\r\nresource \"aws_lb_target_group\" \"web\" {\r\n    name = \"tg-web\"\r\n    target_type = \"instance\"\r\n    protocol = \"HTTP\"\r\n    port = \"80\"\r\n    vpc_id = aws_vpc.vpc.id\r\n\r\n    health_check {\r\n        enabled=true\r\n        interval = 5\r\n        path = \"/index.html\"\r\n        port = 80\r\n        protocol = \"HTTP\"\r\n        timeout = 4\r\n        healthy_threshold = 2\r\n        unhealthy_threshold = 3\r\n        matcher = \"200\"\r\n    }\r\n\r\n}\r\n\r\nresource \"aws_lb\" \"web\" {\r\n    name = \"WebFront\"\r\n    internal = false\r\n    load_balancer_type = \"application\"\r\n    ip_address_type = \"ipv4\"\r\n   \r\n    security_groups = [aws_security_group.elb_web.id]\r\n\r\n    subnets = [ aws_subnet.pub_us_east_1a.id , aws_subnet.pub_us_east_1b.id  , aws_subnet.pub_us_east_1c.id  ]\r\n\r\n}\r\n\r\nresource \"aws_lb_listener\" \"Web80\" {\r\n    load_balancer_arn = aws_lb.web.arn\r\n    port = 80\r\n    protocol = \"HTTP\"\r\n\r\n    default_action {\r\n        type = \"forward\"\r\n        target_group_arn = aws_lb_target_group.web.arn\r\n    }\r\n}\r\n\r\nresource \"aws_launch_configuration\" \"as_conf\" {\r\n    name_prefix = \"WebServers-\"\r\n    image_id = var.instance_ami\r\n    instance_type = var.instance_type\r\n    key_name = aws_key_pair.lab.id\r\n    user_data = var.web_user_data\r\n    security_groups = [ aws_security_group.web_server.id ]\r\n\r\n    root_block_device {\r\n        volume_size = 8\r\n        delete_on_termination = true\r\n    }\r\n     \r\n    lifecycle {\r\n        create_before_destroy = true\r\n    }\r\n}\r\n\r\nresource \"aws_autoscaling_group\" \"as_grp\" {\r\n    name = \"WebASG\"    \r\n    launch_configuration = aws_launch_configuration.as_conf.id\r\n\r\n    max_size = 6\r\n    min_size = 3\r\n\r\n    target_group_arns = [aws_lb_target_group.web.arn]\r\n    vpc_zone_identifier = [ aws_subnet.pub_us_east_1a.id , aws_subnet.pub_us_east_1b.id  , aws_subnet.pub_us_east_1c.id  ]\r\n\r\n}\r\n\r\nresource \"aws_autoscaling_policy\" \"as_pol_cpu\" {\r\n    name = \"ASG-policy-cpu\"\r\n    autoscaling_group_name = aws_autoscaling_group.as_grp.name \r\n    policy_type = \"TargetTrackingScaling\"\r\n    estimated_instance_warmup = 120\r\n\r\n    target_tracking_configuration {\r\n            predefined_metric_specification {\r\n                predefined_metric_type = \"ASGAverageCPUUtilization\"\r\n            }\r\n            target_value = 50\r\n    }\r\n}\r\n"}]}
{"messages": [{"role": "user", "content": "Create a Google Compute Firewall rule named \"only-internal-traffic\" to allow all protocols from the source range \"10.0.0.0/8\". Create another firewall rule named \"gke-allow-master-webhooks\" to allow TCP traffic on ports 443 and 8443 from the source range \"172.16.0.0/28\". Deploy a Google Kubernetes Engine (GKE) cluster named \"devops-demo-gke\" with specified configurations including private nodes and network policy enabled. Set up required Google Cloud services, including Compute, Container, and Redis, ensuring appropriate IAM roles for service accounts. Finally, create a Filestore instance for NFS with designated network settings and a Cloud NAT configuration for outbound internet access."}, {"role": "assistant", "content": "\n#File: firewalls.tf\nresource \"google_compute_firewall\" \"only_internal_traffic\" {\n  name    = \"only-internal-traffic\"\n  network = google_compute_network.gke_vpc.name\n\n  allow {\n    protocol = \"all\"\n  }\n\n  source_ranges = [\"10.0.0.0/8\"]\n}\n\nresource \"google_compute_firewall\" \"master_webhooks\" {\n  name    = \"gke-allow-master-webhooks\"\n  network = google_compute_network.gke_vpc.name\n\n  allow {\n    protocol = \"tcp\"\n    ports = [\"443\", \"8443\"]\n  }\n\n  source_ranges = [\"172.16.0.0/28\"]\n}\n\n#File: gke_masters.tf\nresource \"google_container_cluster\" \"gke_masters\" {\n  name                     = \"devops-demo-gke\"\n  location                 = \"${var.region}\"\n  min_master_version       = \"1.24\"\n  remove_default_node_pool = true\n  initial_node_count       = 1\n  network                  = google_compute_network.gke_vpc.self_link\n  subnetwork               = google_compute_subnetwork.gke_private.self_link\n  logging_service          = \"logging.googleapis.com/kubernetes\"\n  monitoring_service       = \"monitoring.googleapis.com/kubernetes\"\n  networking_mode          = \"VPC_NATIVE\"\n\n  node_locations = [\n    \"${var.region}-a\",\n    \"${var.region}-b\"\n  ]\n\n  addons_config {\n    http_load_balancing {\n      disabled = false\n    }\n\n    horizontal_pod_autoscaling {\n      disabled = false\n    }\n\n    network_policy_config {\n      disabled = false\n    }\n  }\n\n  network_policy {\n    provider = \"CALICO\"\n    enabled = true\n  }\n\n  release_channel {\n    channel = \"UNSPECIFIED\"\n  }\n\n  ip_allocation_policy {\n    cluster_secondary_range_name  = \"k8s-pod-range\"\n    services_secondary_range_name = \"k8s-service-range\"\n  }\n\n  private_cluster_config {\n    enable_private_nodes    = true\n    enable_private_endpoint = false\n    master_ipv4_cidr_block  = \"172.16.0.0/28\"\n  }\n\n  master_authorized_networks_config {\n    # cidr_blocks {\n    #   cidr_block   = \"1.2.3.4/32\"\n    #   display_name = \"jenkins\"\n    # }\n\n    # cidr_blocks {\n    #   cidr_block   = \"5.6.7.8/32\"\n    #   display_name = \"andrew\"\n    # }\n  }\n}\n\n#File: gke_nodes.tf\nresource \"google_service_account\" \"gke\" {\n  account_id = \"kubernetes-${var.deploy_env}-${var.region}\"\n  display_name = \"gke-${var.deploy_env}-${var.region}\"\n}\n\nresource \"google_project_iam_member\" \"allow_image_pull\" {\n  project = var.project_id\n  role    = \"roles/storage.objectViewer\"\n  member  = \"serviceAccount:${google_service_account.gke.email}\"\n}\n\nresource \"google_container_node_pool\" \"stateful\" {\n  name               = \"stateful-${var.region}\"\n  cluster            = google_container_cluster.gke_masters.id\n  initial_node_count = var.node_info.stateful[\"initial_node_count\"]\n\n  autoscaling {\n    min_node_count = var.node_info.stateful[\"min_node_count\"]\n    max_node_count = var.node_info.stateful[\"max_node_count\"]\n  }\n\n  lifecycle {\n    ignore_changes = [\n      initial_node_count\n    ]\n  }\n\n  node_config {\n    preemptible  = false\n    machine_type = var.node_info.stateful[\"machine_type\"]\n\n    labels = {\n      type = \"stateful\"\n    }\n\n    service_account = google_service_account.gke.email\n    oauth_scopes = [\n      \"https://www.googleapis.com/auth/cloud-platform\"\n    ]\n  }\n\n  management {\n    auto_upgrade = false\n    auto_repair  = true\n  }\n\n  version = \"1.24\"\n}\n\nresource \"google_container_node_pool\" \"spot\" {\n  name               = \"spot-${var.region}\"\n  cluster            = google_container_cluster.gke_masters.id\n  initial_node_count = var.node_info.spot[\"initial_node_count\"]\n\n  autoscaling {\n    min_node_count = var.node_info.spot[\"min_node_count\"]\n    max_node_count = var.node_info.spot[\"max_node_count\"]\n  }\n\n  lifecycle {\n    ignore_changes = [\n      initial_node_count\n    ]\n  }\n\n  node_config {\n    preemptible  = false\n    machine_type = var.node_info.spot[\"machine_type\"]\n\n    labels = {\n      type = \"spot\"\n    }\n\n    taint {\n      key    = \"instance_type\"\n      value  = \"spot\"\n      effect = \"NO_SCHEDULE\"\n    }\n\n    service_account = google_service_account.gke.email\n    oauth_scopes = [\n      \"https://www.googleapis.com/auth/cloud-platform\"\n    ]\n  }\n}\n\n#File: ips.tf\nresource \"google_compute_address\" \"cloud_nat_address1\" {\n  name         = \"${var.deploy_env}-cloud-nat1\"\n  address_type = \"EXTERNAL\"\n  project      = \"${var.project_id}\"\n  network_tier = \"PREMIUM\"\n  region       = \"${var.region}\"\n\n  depends_on   = [\n    google_project_service.compute\n  ]\n}\n\nresource \"google_compute_address\" \"cloud_nat_address2\" {\n  name         = \"${var.deploy_env}-cloud-nat2\"\n  address_type = \"EXTERNAL\"\n  project      = \"${var.project_id}\"\n  network_tier = \"PREMIUM\"\n  region       = \"${var.region}\"\n\n  depends_on   = [\n    google_project_service.compute\n  ]\n}\n\n#File: nat.tf\nresource \"google_compute_router_nat\" \"gke_nat\" {\n  name   = \"${var.deploy_env}-nat-config\"\n  router = google_compute_router.gke_router.name\n  region = \"${var.region}\"\n\n  source_subnetwork_ip_ranges_to_nat  = \"LIST_OF_SUBNETWORKS\"\n  nat_ip_allocate_option              = \"MANUAL_ONLY\"\n\n  subnetwork {\n    name                    = google_compute_subnetwork.gke_private.id\n    source_ip_ranges_to_nat = [\"ALL_IP_RANGES\"]\n  }\n\n  nat_ips = [\n    google_compute_address.cloud_nat_address1.self_link,\n    google_compute_address.cloud_nat_address2.self_link\n  ]\n}\n\n#File: nfs.tf\nresource \"google_filestore_instance\" \"nfs\" {\n  name = \"${var.deploy_env}-nfs-${var.region}\"\n  location = \"${var.region}-a\"\n  tier = var.nfs_info[\"tier\"]\n\n  file_shares {\n    capacity_gb = var.nfs_info[\"capacity_gb\"]\n    name        = \"share1\"\n  }\n\n  networks {\n    network           = google_compute_network.gke_vpc.name\n    modes             = [\"MODE_IPV4\"]\n    reserved_ip_range = google_compute_global_address.internal_managed_services.name\n    connect_mode = \"PRIVATE_SERVICE_ACCESS\"\n  }\n\n  # Issue: https://github.com/hashicorp/terraform-provider-google/issues/12877\n  lifecycle {\n    ignore_changes = [\n      networks[0].reserved_ip_range\n    ]\n  }\n\n  depends_on = [\n    google_service_networking_connection.internal_managed_services\n  ]\n}\n\n#File: provider.tf\nprovider \"google\" {\n  project     = var.project_id\n  region      = var.region\n}\n\n#File: redis.tf\nresource \"google_project_service\" \"redis\" {\n  service = \"redis.googleapis.com\"\n\n  disable_dependent_services = true\n  disable_on_destroy         = false\n}\n\nresource \"google_redis_instance\" \"redis\" {\n  name           = \"${var.deploy_env}-redis-${var.region}\"\n  tier           = \"BASIC\"\n  memory_size_gb = \"${var.redis_memory_size}\"\n  region         = \"${var.region}\"\n  redis_version  = \"REDIS_6_X\"\n\n  authorized_network = google_compute_network.gke_vpc.id\n  connect_mode       = \"PRIVATE_SERVICE_ACCESS\"\n\n  depends_on = [\n    google_service_networking_connection.internal_managed_services,\n    google_project_service.redis\n  ]\n}\n\n#File: routers.tf\nresource \"google_compute_router\" \"gke_router\" {\n  name    = \"${var.deploy_env}-nat-router\"\n  region  = \"${var.region}\"\n  network = google_compute_network.gke_vpc.id\n}\n\n#File: service_peering.tf\nresource \"google_project_service\" \"servicenetworking\" {\n  service = \"servicenetworking.googleapis.com\"\n}\n\nresource \"google_compute_global_address\" \"internal_managed_services\" {\n  name          = \"internal-managed-services-${var.region}\"\n  provider      = google-beta\n\n  address       = split(\"/\", \"${var.internal_managed_services_cidr}\")[0]\n  address_type  = \"INTERNAL\"\n  network       = google_compute_network.gke_vpc.self_link\n  prefix_length = split(\"/\", \"${var.internal_managed_services_cidr}\")[1]\n  project       = \"${var.project_id}\"\n  purpose       = \"VPC_PEERING\"\n}\n\nresource \"google_service_networking_connection\" \"internal_managed_services\" {\n  network                 = google_compute_network.gke_vpc.id\n  service                 = \"servicenetworking.googleapis.com\"\n  reserved_peering_ranges = [google_compute_global_address.internal_managed_services.name]\n\n  depends_on = [\n    google_project_service.servicenetworking\n  ]\n}\n\n#File: vars.tf\nvariable \"project_id\" {\n  type    = string\n  default = \"\"\n}\n\nvariable \"region\" {\n  type    = string\n  default = \"\"\n}\n\nvariable \"deploy_env\" {\n  type    = string\n  default = \"\"\n}\n\nvariable \"gke_vpc_cidr\" {\n  type    = string\n  default = \"\"\n}\n\nvariable \"pod_cidr\" {\n  type    = string\n  default = \"\"\n}\n\nvariable \"service_cidr\" {\n  type    = string\n  default = \"\"\n}\n\nvariable \"internal_managed_services_cidr\" {\n  type    = string\n  default = \"\"\n}\n\nvariable \"redis_memory_size\" {\n  type    = number\n  default = null\n}\n\nvariable \"node_info\" {\n  type    = map\n  default = {}\n}\n\nvariable \"nfs_info\" {\n  type    = map\n  default = {}\n}\n\n#File: vpc.tf\nresource \"google_project_service\" \"compute\" {\n  service = \"compute.googleapis.com\"\n}\n\nresource \"google_project_service\" \"container\" {\n  service = \"container.googleapis.com\"\n}\n\nresource \"google_compute_network\" \"gke_vpc\" {\n  name                            = \"${var.deploy_env}-network\"\n  routing_mode                    = \"REGIONAL\"\n  auto_create_subnetworks         = false\n  mtu                             = 1460\n  delete_default_routes_on_create = false\n\n  depends_on = [\n    google_project_service.compute,\n    google_project_service.container\n  ]\n}\n\nresource \"google_compute_subnetwork\" \"gke_private\" {\n  name                     = \"${var.deploy_env}-subnet-${var.region}\"\n  ip_cidr_range            = var.gke_vpc_cidr\n  region                   = \"${var.region}\"\n  network                  = google_compute_network.gke_vpc.id\n  private_ip_google_access = true\n\n  log_config {\n    aggregation_interval = \"INTERVAL_5_SEC\"\n    flow_sampling        = 0.5\n    metadata             = \"INCLUDE_ALL_METADATA\"\n  }\n\n  secondary_ip_range {\n    range_name    = \"k8s-pod-range\"\n    ip_cidr_range = var.pod_cidr\n  }\n  secondary_ip_range {\n    range_name    = \"k8s-service-range\"\n    ip_cidr_range = var.service_cidr\n  }\n}\n"}]}
{"messages": [{"role":"user","content":"Deploy a Node.js Lambda and an API Gateway REST API locally using LocalStack endpoints. It routes all API requests through API Gateway to the Lambda function with AWS_PROXY integration, simulating AWS services on your local machine. The setup skips AWS credential validation and connects to LocalStacks localhost URLs for Lambda, API Gateway, IAM, and S3"},{"role":"assistant","content":"provider \"aws\" {\r\n  region                      = \"eu-west-1\"\r\n  access_key                  = \"fake_access_key\"\r\n  secret_key                  = \"fake_secret_key\"\r\n  # s3_force_path_style         = true\r\n  skip_credentials_validation = true\r\n  skip_metadata_api_check     = true\r\n  skip_requesting_account_id  = true\r\n\r\n  endpoints {\r\n    lambda     = \"http://localhost:4566\"\r\n    s3         = \"http://localhost:4566\"\r\n    apigateway = \"http://localhost:4566\"\r\n    iam        = \"http://localhost:4566\"\r\n  }\r\n}\r\nresource \"aws_api_gateway_rest_api\" \"hello-api\" {\r\n  name        = \"HelloApi\"\r\n  description = \"API to call Alan's world\"\r\n}\r\n\r\nresource \"aws_api_gateway_resource\" \"hello-resource\" {\r\n  rest_api_id = aws_api_gateway_rest_api.hello-api.id\r\n  parent_id   = aws_api_gateway_rest_api.hello-api.root_resource_id\r\n  path_part   = \"{proxy+}\"\r\n}\r\n\r\nresource \"aws_api_gateway_method\" \"hello-method\" {\r\n  rest_api_id   = aws_api_gateway_rest_api.hello-api.id\r\n  resource_id   = aws_api_gateway_resource.hello-resource.id\r\n  http_method   = \"ANY\"\r\n  authorization = \"NONE\"\r\n}\r\n\r\nresource \"aws_api_gateway_integration\" \"hello-integration\" {\r\n  rest_api_id             = aws_api_gateway_rest_api.hello-api.id\r\n  resource_id             = aws_api_gateway_resource.hello-resource.id\r\n  http_method             = aws_api_gateway_method.hello-method.http_method\r\n  integration_http_method = \"POST\"\r\n  type                    = \"AWS_PROXY\"\r\n  uri                     = aws_lambda_function.hello_fc.invoke_arn\r\n}\r\n\r\nresource \"aws_api_gateway_method\" \"proxy_root\" {\r\n  rest_api_id   = aws_api_gateway_rest_api.hello-api.id\r\n  resource_id   = aws_api_gateway_rest_api.hello-api.root_resource_id\r\n  http_method   = \"ANY\"\r\n  authorization = \"NONE\"\r\n}\r\n\r\nresource \"aws_api_gateway_integration\" \"lambda_root\" {\r\n  rest_api_id = aws_api_gateway_rest_api.hello-api.id\r\n  resource_id = aws_api_gateway_method.proxy_root.resource_id\r\n  http_method = aws_api_gateway_method.proxy_root.http_method\r\n\r\n  integration_http_method = \"POST\"\r\n  type                    = \"AWS_PROXY\"\r\n  uri                     = aws_lambda_function.hello_fc.invoke_arn\r\n}\r\n\r\nresource \"aws_api_gateway_deployment\" \"hello-deployment\" {\r\n  rest_api_id = aws_api_gateway_rest_api.hello-api.id\r\n  depends_on = [\r\n    aws_api_gateway_integration.hello-integration,\r\n    aws_api_gateway_integration.lambda_root\r\n  ]\r\n  stage_name = \"test\"\r\n}\r\n\r\nresource \"aws_lambda_permission\" \"lambda_permission\" {\r\n  statement_id  = \"AllowAPIGatewayInvoke\"\r\n  action        = \"lambda:InvokeFunction\"\r\n  function_name = aws_lambda_function.hello_fc.function_name\r\n  principal     = \"apigateway.amazonaws.com\"\r\n\r\n\r\n  source_arn = \"${aws_api_gateway_rest_api.hello-api.execution_arn}/*/*/*\"\r\n}\r\ndata \"archive_file\" \"hello_file\" {\r\n  type        = \"zip\"\r\n  source_file  = \"../src/index.js\"\r\n  output_path = \"hello_fc.zip\"\r\n}\r\nresource \"aws_iam_role\" \"iam_hello_fc\" {\r\n  name               = \"tf-hello-role\"\r\n  assume_role_policy = <<EOF\r\n{\r\n    \"Statement\": [\r\n        {\r\n            \"Action\": \"sts:AssumeRole\",\r\n            \"Principal\": {\r\n                \"Service\": \"lambda.amazonaws.com\"\r\n            },\r\n            \"Effect\": \"Allow\",\r\n            \"Sid\": \"\"\r\n        }\r\n    ]\r\n}\r\n   EOF\r\n}\r\nresource \"aws_lambda_function\" \"hello_fc\" {\r\n  filename         = \"hello_fc.zip\"\r\n  function_name    = \"aws_hello_fc\"\r\n  handler          = \"index.handler\"\r\n  source_code_hash = fileexists(\"hello_fc.zip\") ? base64sha256(filebase64(\"hello_fc.zip\")) : null\r\n  runtime          = \"nodejs14.x\"\r\n  role             = aws_iam_role.iam_hello_fc.arn\r\n  depends_on = [\r\n    data.archive_file.hello_file\r\n  ]\r\n}\r\n"}]}
{"messages": [{"role": "user", "content": "Create a service account in Google Cloud using defined variables for application name, company prefix, and environment. Generate and store a service account key as a JSON file for authentication purposes. Create identity groups for owners, editors, and viewers, and add specified members to each group. Assign IAM roles to the service account and configure project IAM policies for the created groups. Output the project ID and names of the created service account and groups."}, {"role": "assistant", "content": "\n#File: app-variables.tf\n#############################\n## Application - Variables ##\n#############################\n\n# app name \nvariable \"app_name\" {\n  type        = string\n  description = \"This variable defines the application name used to build resources\"\n}\n\n# company name \nvariable \"company\" {\n  type        = string\n  description = \"This variable defines the company name used to build resources\"\n}\n\n# company prefix \nvariable \"prefix\" {\n  type        = string\n  description = \"This variable defines the company name prefix used to build resources\"\n}\n\n# GCP region\nvariable \"region\" {\n  type        = string\n  description = \"GCP region where the resource group will be created\"\n}\n\n# application environment\nvariable \"environment\" {\n  type        = string\n  description = \"This variable defines the environment to be built\"\n}\n#File: main.tf\n##################################\n## Google Cloud Identity - Main ##\n##################################\n\n# Create a local variables\nlocals {\n  sa_name            = \"sa-${var.prefix}-${var.app_name}-${var.environment}\"\n  owners_group_name  = lower(\"${var.prefix}-${var.app_name}-${var.environment}-owners\")\n  editors_group_name = lower(\"${var.prefix}-${var.app_name}-${var.environment}-editors\")\n  viewers_group_name = lower(\"${var.prefix}-${var.app_name}-${var.environment}-viewers\")\n}\n\n# Create a GCP Service Account\nresource \"google_service_account\" \"service-account\" {\n  account_id   = local.sa_name\n  display_name = local.sa_name\n  description  = \"Terraform Service Account for ${var.app_name}\"\n  project      = var.project_id\n}\n\n# Create a GCP IAM Policy for Service Account\ndata \"google_iam_policy\" \"service-account-iam-policy\" {\n  binding {\n    role = \"roles/owner\"\n    members = [\n      \"serviceAccount:${google_service_account.service-account.email}\",\n    ]\n  }\n}\n\n# Assign IAM roles to the Service Account\nresource \"google_service_account_iam_policy\" \"service-account-iam\" {\n  service_account_id = google_service_account.service-account.id\n  policy_data        = data.google_iam_policy.service-account-iam-policy.policy_data\n}\n\n# Generate the Service Account Key\nresource \"google_service_account_key\" \"service-account-key\" {\n  depends_on = [google_service_account.service-account]\n\n  service_account_id = google_service_account.service-account.id\n}\n\n# Save Service Account to JSON (DEBUG)\nresource \"local_file\" \"service-account-key-json\" {\n  content  = base64decode(google_service_account_key.service-account-key.private_key)\n  filename = \"${path.module}/${local.sa_name}.json\"\n}\n\n# Create Owners Group\nresource \"google_cloud_identity_group\" \"owners-group\" {\n  provider = google-beta\n  display_name = local.owners_group_name\n  parent = \"customers/${var.customer_id}\"\n\n  group_key {\n    id = \"${local.owners_group_name}@${var.company_domain}\"\n  }\n\n  labels = {\n    \"cloudidentity.googleapis.com/groups.discussion_forum\" = \"\"\n  }\n}\n\n# Create Editors Group\nresource \"google_cloud_identity_group\" \"editors-group\" {\n  provider = google-beta\n  display_name = local.editors_group_name\n  parent = \"customers/${var.customer_id}\"\n\n  group_key {\n    id = \"${local.editors_group_name}@${var.company_domain}\"\n  }\n\n  labels = {\n    \"cloudidentity.googleapis.com/groups.discussion_forum\" = \"\"\n  }\n}\n\n# Create Viewers Group\nresource \"google_cloud_identity_group\" \"viewers-group\" {\n  provider = google-beta\n  display_name = local.viewers_group_name\n  parent = \"customers/${var.customer_id}\"\n\n  group_key {\n    id = \"${local.viewers_group_name}@${var.company_domain}\"\n  }\n\n  labels = {\n    \"cloudidentity.googleapis.com/groups.discussion_forum\" = \"\"\n  }\n}\n\n# Assign Groups to the Project\nresource \"google_project_iam_policy\" \"group-iam-policy\" {\n  depends_on = [\n    google_cloud_identity_group.owners-group,\n    google_cloud_identity_group.editors-group,\n    google_cloud_identity_group.viewers-group\n  ]\n\n  project     = var.project_id\n  policy_data = data.google_iam_policy.groups-iam-policy.policy_data\n}\n\n# Groups Policy\ndata \"google_iam_policy\" \"groups-iam-policy\" {\n  binding {\n    role = \"roles/owner\"\n\n    members = [\n      \"group:${local.owners_group_name}@${var.company_domain}\",\n    ]\n  }\n\n  binding {\n    role = \"roles/editor\"\n\n    members = [\n      \"group:${local.editors_group_name}@${var.company_domain}\",\n    ]\n  }\n\n  binding {\n    role = \"roles/reader\"\n\n    members = [\n      \"group:${local.viewers_group_name}@${var.company_domain}\",\n    ]\n  }\n}\n\n# Add members to the Owners Group\nresource \"google_cloud_identity_group_membership\" \"owners-group-membership\" {\n  provider = google-beta\n  group    = google_cloud_identity_group.owners-group.id\n\n for_each = toset(var.owners_members)\n\n  member_key {\n    id = each.value\n  }\n\n  roles {\n    name = \"MEMBER\"\n  }\n\n  roles {\n    name = \"MANAGER\"\n  }\n}\n\n# Add members to the Editors Group\nresource \"google_cloud_identity_group_membership\" \"editors-group-membership\" {\n  provider = google-beta\n  group    = google_cloud_identity_group.editors-group.id\n\n  for_each = toset(var.editors_members)\n\n  member_key {\n    id = each.value\n  }\n\n  roles {\n    name = \"MEMBER\"\n  }\n\n  roles {\n    name = \"MANAGER\"\n  }\n}\n\n# Add members to the Viewers Group\nresource \"google_cloud_identity_group_membership\" \"viewers-group-membership\" {\n  provider = google-beta\n  group    = google_cloud_identity_group.viewers-group.id\n\n  for_each = toset(var.viewers_members)\n\n  member_key {\n    id = each.value\n  }\n\n  roles {\n    name = \"MEMBER\"\n  }\n\n  roles {\n    name = \"MANAGER\"\n  }\n}\n\n\n#File: outputs.tf\n####################################\n## Google Cloud Identity - Output ##\n####################################\n\noutput \"project_id\" {\n  value = var.project_id\n}\n\noutput \"service-account\" {\n  value = local.sa_name\n}\n\noutput \"group_name_owners\" {\n  value = local.owners_group_name\n}\n\noutput \"group_name_editors\" {\n  value = local.editors_group_name\n}\n\noutput \"group_name_viewers\" {\n  value = local.viewers_group_name \n}\n\n\n#File: provider-main.tf\n#####################\n## Provider - Main ##\n#####################\n\nterraform {\n  required_version = \">= 0.13\"\n  # backend \"gcs\" {\n  #   credentials = \"account.json\"\n  #   bucket  = \"kopicloud-gcp-tfstate\"\n  #   prefix  = \"core/core-state\"\n  # }\n}\n\nprovider \"google\" {\n  project     = var.gcp_project\n  credentials = file(var.gcp_auth_file)\n  region      = var.gcp_region\n}\n\nprovider \"google-beta\" {\n  project     = var.gcp_project\n  credentials = file(var.gcp_auth_file)\n  region      = var.gcp_region\n}\n\n#File: provider-variables.tf\n##########################\n## Provider - Variables ##\n##########################\n\n# GCP authentication file\nvariable \"gcp_auth_file\" {\n  type        = string\n  description = \"GCP authentication file\"\n  default     = \"\"\n}\n\n# define GCP region\nvariable \"gcp_region\" {\n  type        = string\n  description = \"GCP region\"\n}\n\n# define GCP project name\nvariable \"gcp_project\" {\n  type        = string\n  description = \"GCP project name\"\n}\n\n#File: variables.tf\n#######################################\n## Google Cloud Identity - Variables ##\n#######################################\n\n# define GCP project id to store the service account\nvariable \"project_id\" {\n  type        = string\n  description = \"GCP project name\"\n}\n\nvariable \"customer_id\" {\n  type        = string\n  description = \"Google Customer ID\"\n}\n\nvariable \"company_domain\" {\n  type        = string\n  description = \"Company email domain\"\n}\n\nvariable \"owners_members\" {\n  type        = list(string)\n  description = \"List of users to add to the owners group\"\n}\n\nvariable \"editors_members\" {\n  type        = list(string)\n  description = \"List of users to add to the editors group\"\n}\n\nvariable \"viewers_members\" {\n  type        = list(string)\n  description = \"List of users to add to the viewers group\"\n}"}]}
{"messages": [{"role": "user", "content": "Create a Google Compute VPC network with a custom name for your database. Set up a subnetwork for a bastion host in the desired region with a specified IP CIDR range. Provision a Google Compute Engine instance for SQL client with a startup script to install PostgreSQL client and Cloud SQL proxy. Create a service account for the database administrator and grant necessary IAM roles. Finally, set up a Google Cloud SQL database instance and bind it with the newly created service account."}, {"role": "assistant", "content": "\n#File: bastion.tf\ndata \"google_compute_default_service_account\" \"default\" {\n}\n\n# This is used to set local variable google_zone.\ndata \"google_compute_zones\" \"available\" {\n  region = var.region\n}\n\nresource \"random_shuffle\" \"az\" {\n  input        = data.google_compute_zones.available.names\n  result_count = 1\n}\n\nlocals {\n  google_zone = random_shuffle.az.result[0]\n}\n\n# Subnet\nresource \"google_compute_subnetwork\" \"bastion_subnet\" {\n  name          = \"${var.db_name}-bastion-subnet\"\n  region        = var.region\n  network       = google_compute_network.db_vpc.name\n  ip_cidr_range = \"10.128.0.0/20\"\n}\n\nresource \"google_compute_firewall\" \"bastion_ssh\" {\n  name    = \"bastion-allow-ssh\"\n  network = google_compute_network.db_vpc.name\n\n  allow {\n    protocol = \"tcp\"\n  }\n\n  allow {\n    protocol = \"tcp\"\n    ports    = [\"22\"]\n  }\n\n  source_ranges = [\"0.0.0.0/0\"]\n  target_tags   = [\"bastion\"]\n}\n\nresource \"google_compute_instance\" \"sql_client_vm\" {\n  name         = \"sql-client\"\n  machine_type = \"e2-medium\"\n  zone         = local.google_zone\n\n  tags = [\"sql-client\", \"bastion\"]\n\n  boot_disk {\n    initialize_params {\n      # gcloud compute images list\n      image = \"debian-cloud/debian-11\"\n    }\n  }\n\n  network_interface {\n    network    = google_compute_network.db_vpc.id\n    subnetwork = google_compute_subnetwork.bastion_subnet.id\n\n    access_config {\n      // Ephemeral public IP\n    }\n  }\n\n\n  metadata_startup_script = <<EOF\n#! /bin/bash\napt-get update\napt-get install -y  postgresql-client\napt-get install -y wget\nwget -q https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64 -O /bin/cloud_sql_proxy\nchmod +x /bin/cloud_sql_proxy\nEOF\n\n  service_account {\n    # Google recommends custom service accounts that have cloud-platform scope and permissions granted via IAM Roles.\n    email  = data.google_compute_default_service_account.default.email\n    scopes = [\"cloud-platform\"]\n  }\n}\n#File: db.tf\nresource \"google_sql_database\" \"db\" {\n  name     = var.db_name\n  instance = google_sql_database_instance.db_instance.name\n}\n\nresource \"random_id\" \"db_name_suffix\" {\n  byte_length = 4\n}\n\nresource \"google_sql_database_instance\" \"db_instance\" {\n  name             = \"${var.db_name}-${random_id.db_name_suffix.hex}\"\n  region           = var.region\n  database_version = var.db_version\n\n  settings {\n    tier = var.db_tier\n\n    ip_configuration {\n      ipv4_enabled    = false\n      private_network = google_compute_network.db_vpc.id\n    }\n\n    database_flags {\n      name  = \"cloudsql.iam_authentication\"\n      value = \"on\"\n    }\n  }\n\n  depends_on = [\n    google_service_networking_connection.db_vpc_private_connection\n  ]\n\n  # delete the instance via terraform\n  deletion_protection = false\n}\n\nresource \"google_service_account\" \"db_admin_service_account\" {\n  account_id   = \"dbadmin-${random_id.db_name_suffix.hex}\"\n  display_name = \"dbadmin-${random_id.db_name_suffix.hex}\"\n  description  = \"The Database Administrator Service Account\"\n}\n\nresource \"google_project_iam_binding\" \"dbadmin-roles\" {\n  for_each = toset([\"roles/cloudsql.instanceUser\", \"roles/cloudsql.client\"])\n  project  = var.project_id\n  role     = each.key\n  members = [\n    google_service_account.db_admin_service_account.member,\n  ]\n}\n\nresource \"google_project_iam_binding\" \"dbadmin-sql-client\" {\n  project = var.project_id\n  role    = \"roles/cloudsql.client\"\n  members = [\n    google_service_account.db_admin_service_account.member,\n  ]\n}\n\nresource \"google_sql_user\" \"db_admin_user\" {\n  # due to username length in DB we need to trim `.gserviceaccount.com` suffix\n  # https://cloud.google.com/sql/docs/postgres/add-manage-iam-users#gcloud_1\n  name            = trimsuffix(google_service_account.db_admin_service_account.email, \".gserviceaccount.com\")\n  instance        = google_sql_database_instance.db_instance.name\n  type            = \"CLOUD_IAM_SERVICE_ACCOUNT\"\n  deletion_policy = \"ABANDON\"\n}\n\n#File: outputs.tf\noutput \"region\" {\n  value       = var.region\n  description = \"GCloud Region\"\n}\n\noutput \"project_id\" {\n  value       = var.project_id\n  description = \"GCloud Project ID\"\n}\n\noutput \"db_vpc_id\" {\n  value       = google_compute_network.db_vpc.id\n  description = \"The DB VPC ID\"\n}\n\noutput \"db_instance_connection_name\" {\n  value       = google_sql_database_instance.db_instance.connection_name\n  description = \"The Database instance connection name\"\n}\n\noutput \"default_database\" {\n  value       = var.db_name\n  description = \"The default database that will be created.\"\n}\n\noutput \"db_admin_user_sa\" {\n  value       = google_service_account.db_admin_service_account.name\n  description = \"The Database admin service account\"\n}\n\noutput \"db_admin_user\" {\n  value       = trimsuffix(google_service_account.db_admin_service_account.email, \".iam.gserviceaccount.com\")\n  description = \"The Database admin service account email\"\n}\n\n#File: variables.tf\nvariable \"project_id\" {\n  description = \"project id\"\n}\n\nvariable \"region\" {\n  description = \"the region or zone where the cluster will be created\"\n  default     = \"asia-south1\"\n}\n\nvariable \"cluster_name\" {\n  description = \"the gke cluster name\"\n  default     = \"my-demos\"\n}\n\nvariable \"db_name\" {\n  description = \"the Cloud SQL Database\"\n  default     = \"my-db\"\n}\n\n# https://cloud.google.com/sql/docs/db-versions\nvariable \"db_version\" {\n  description = \"the database version to use\"\n  default     = \"POSTGRES_14\"\n}\n\nvariable \"db_tier\" {\n  description = \"the database tier\"\n  default     = \"db-f1-micro\"\n}\n\nvariable \"db_default_database_name\" {\n  description = \"the default database that will be created\"\n  default     = \"demodb\"\n}\n\n#File: versions.tf\nterraform {\n  required_providers {\n    google = {\n      source  = \"hashicorp/google\"\n      version = \">= 4.47.0\"\n    }\n    random = {\n      source  = \"hashicorp/random\"\n      version = \"3.4.3\"\n    }\n  }\n\n  required_version = \">= 0.14\"\n}\n\n#File: vpc.tf\nprovider \"google\" {\n  project = var.project_id\n  region  = var.region\n}\n\n# VPC\nresource \"google_compute_network\" \"db_vpc\" {\n  name                    = \"db-${var.db_name}-vpc\"\n  auto_create_subnetworks = \"false\"\n}\n\nresource \"google_compute_global_address\" \"db_vpc_private_ip\" {\n  name          = \"db-${var.db_name}-private-ip\"\n  purpose       = \"VPC_PEERING\"\n  address_type  = \"INTERNAL\"\n  prefix_length = 16\n  network       = google_compute_network.db_vpc.id\n}\n\nresource \"google_service_networking_connection\" \"db_vpc_private_connection\" {\n  network                 = google_compute_network.db_vpc.id\n  service                 = \"servicenetworking.googleapis.com\"\n  reserved_peering_ranges = [google_compute_global_address.db_vpc_private_ip.name]\n}\n"}]}
{"messages": [{"role": "user", "content": "Create a VPC network with a specified name and routing mode in Google Cloud. Configure subnets according to the provided map, ensuring each has private Google access. Set up Cloud Routers and NATs for each specified configuration, using automatic IP allocation. Define firewall rules based on the provided specifications, allowing necessary protocols and ports. Output the network details, subnet IDs, and their URIs for reference."}, {"role": "assistant", "content": "\n#File: main.tf\n# VPC Network\nresource \"google_compute_network\" \"vpc\" {\n  name                    = var.network_name\n  auto_create_subnetworks = false\n  project                 = var.project_id\n  routing_mode            = var.routing_mode\n}\n\n# Subnets\nresource \"google_compute_subnetwork\" \"subnets\" {\n  for_each                 = var.subnets\n  name                     = each.key\n  network                  = google_compute_network.vpc.id\n  project                  = var.project_id\n  region                   = each.value.region\n  ip_cidr_range            = each.value.cidr\n  private_ip_google_access = true\n\n  log_config {\n    aggregation_interval = \"INTERVAL_5_SEC\"\n    flow_sampling        = 0.5\n    metadata             = \"INCLUDE_ALL_METADATA\"\n  }\n}\n\n# Cloud Router\nresource \"google_compute_router\" \"router\" {\n  for_each = var.cloud_nat_configs\n  name     = \"${var.network_name}-${each.key}-router\"\n  project  = var.project_id\n  region   = each.key\n  network  = google_compute_network.vpc.id\n}\n\n# Cloud NAT\nresource \"google_compute_router_nat\" \"nat\" {\n  for_each = var.cloud_nat_configs\n  name     = \"${var.network_name}-${each.key}-nat\"\n  project  = var.project_id\n  router   = google_compute_router.router[each.key].name\n  region   = each.key\n\n  nat_ip_allocate_option             = \"AUTO_ONLY\"\n  source_subnetwork_ip_ranges_to_nat = \"ALL_SUBNETWORKS_ALL_IP_RANGES\"\n}\n\n# Firewall Rules\nresource \"google_compute_firewall\" \"rules\" {\n  for_each      = var.firewall_rules\n  name          = each.key\n  project       = var.project_id\n  network       = google_compute_network.vpc.id\n  direction     = each.value.direction\n  priority      = lookup(each.value, \"priority\", 1000)\n  source_ranges = lookup(each.value, \"source_ranges\", null)\n  target_tags   = lookup(each.value, \"target_tags\", null)\n\n  dynamic \"allow\" {\n    for_each = lookup(each.value, \"allow\", [])\n    content {\n      protocol = allow.value.protocol\n      ports    = lookup(allow.value, \"ports\", null)\n    }\n  }\n}\n\n#File: outputs.tf\noutput \"network\" {\n  description = \"The created network\"\n  value       = google_compute_network.vpc\n}\n\noutput \"network_id\" {\n  description = \"The ID of the VPC\"\n  value       = google_compute_network.vpc.id\n}\n\noutput \"network_self_link\" {\n  description = \"The URI of the VPC\"\n  value       = google_compute_network.vpc.self_link\n}\n\noutput \"subnets\" {\n  description = \"Map of subnet details\"\n  value       = google_compute_subnetwork.subnets\n}\n\noutput \"subnet_ids\" {\n  description = \"Map of subnet IDs\"\n  value       = { for k, v in google_compute_subnetwork.subnets : k => v.id }\n}\n\n#File: providers.tf\nterraform {\n  required_version = \"~> 1.11.0\"\n\n  required_providers {\n    google = {\n      source  = \"hashicorp/google\"\n      version = \"~> 6.30.0\"\n    }\n  }\n}\n\n#File: variables.tf\nvariable \"project_id\" {\n  description = \"The GCP project ID\"\n  type        = string\n}\n\nvariable \"network_name\" {\n  description = \"The name of the network\"\n  type        = string\n}\n\nvariable \"routing_mode\" {\n  description = \"The network routing mode (default 'GLOBAL')\"\n  type        = string\n  default     = \"GLOBAL\"\n}\n\nvariable \"subnets\" {\n  description = \"Map of subnet configurations\"\n  type = map(object({\n    region = string\n    cidr   = string\n  }))\n}\n\nvariable \"firewall_rules\" {\n  description = \"Map of firewall rules\"\n  type = map(object({\n    direction     = string\n    priority      = optional(number)\n    source_ranges = optional(list(string))\n    target_tags   = optional(list(string))\n    allow = optional(list(object({\n      protocol = string\n      ports    = optional(list(string))\n    })))\n  }))\n  default = {}\n}\n\nvariable \"cloud_nat_configs\" {\n  description = \"Map of regions where Cloud NAT should be configured\"\n  type        = set(string)\n  default     = []\n}\n"}]}
{"messages": [{"role": "user", "content": "Create a Google Cloud project service to enable essential APIs. Build a VPC network and define subnets within it using provided CIDR ranges. Deploy a Cloud Run service with specified container images and memory limits. Establish a VPC access connector for networking and grant IAM permissions to allow service invocation. Output relevant details such as VPC network name, subnet names, service name, service URL, and VPC access connector name."}, {"role": "assistant", "content": "\n#File: main.tf\n# This resource is used to enable the GCP API for the project\nresource \"google_project_service\" \"required_apis\" {\n  for_each = toset([\n    \"compute.googleapis.com\",              # For VPC and networking\n    \"run.googleapis.com\",                  # For Cloud Run\n    \"vpcaccess.googleapis.com\",            # For VPC access connector (if needed for Cloud Run)\n    \"servicenetworking.googleapis.com\",    # For VPC peering and private services\n    \"cloudresourcemanager.googleapis.com\", # For project-level operations\n    \"iam.googleapis.com\",                  # For IAM permissions\n  ])\n\n  project = var.gcp_project\n  service = each.key\n\n  disable_dependent_services = true\n  disable_on_destroy         = false\n}\n\n# Resource for creating a VPC network\nresource \"google_compute_network\" \"vpc\" {\n  name                    = var.vpc_name\n  auto_create_subnetworks = false\n}\n\n# Resource for creating subnets within the VPC network\nresource \"google_compute_subnetwork\" \"subnets\" {\n  count         = length(var.subnet_cidrs)\n  name          = \"subnet-${count.index + 1}\"\n  ip_cidr_range = var.subnet_cidrs[count.index]\n  network       = google_compute_network.vpc.id\n  region        = var.gcp_region\n}\n\n\n# Resource for creating a Cloud Run service\nresource \"google_cloud_run_service\" \"service\" {\n  depends_on = [google_project_service.required_apis]\n  name       = var.service_name\n  location   = var.gcp_region\n\n  template {\n    spec {\n      containers {\n        image = var.container_image\n        resources {\n          limits = {\n            memory = var.memory_limit\n          }\n        }\n      }\n    }\n  }\n\n  traffic {\n    percent         = 100\n    latest_revision = true\n  }\n}\n\n# Resource for creating a VPC access connector\nresource \"google_vpc_access_connector\" \"connector\" {\n  name          = \"vpc-access\"\n  ip_cidr_range = \"10.8.0.0/28\"\n  network       = google_compute_network.vpc.name\n}\n\n# Resource for granting IAM permissions to the Cloud Run service\nresource \"google_cloud_run_service_iam_member\" \"run_invoker\" {\n  service  = google_cloud_run_service.service.name\n  location = google_cloud_run_service.service.location\n  role     = \"roles/run.invoker\"\n  member   = \"allUsers\"\n}\n\n#File: output.tf\n# Output for VPC network name\noutput \"vpc_network_name\" {\n  value = google_compute_network.vpc.name\n}\n\n# Output for subnet names\noutput \"subnet_names\" {\n  value = [for subnet in google_compute_subnetwork.subnets : subnet.name]\n}\n\n# Output for service name\noutput \"service_name\" {\n  value = google_cloud_run_service.service.name\n}\n\n# Output for service URL\noutput \"service_url\" {\n  value = google_cloud_run_service.service.status[0].url\n}\n\n# Output for VPC access connector name\noutput \"vpc_access_connector_name\" {\n  value = google_vpc_access_connector.connector.name\n}\n#File: provider.tf\n# Purpose: This file is used to configure the Google Cloud provider.\nprovider \"google\" {\n    credentials = file(var.gcp_svc_key)  # Path to the Google Cloud service account key file\n    project = var.gcp_project\n    region = var.gcp_region\n}\n#File: variables.tf\n\n# Path to the GCP service account key file\nvariable \"gcp_svc_key\" {\n  description = \"The path to the GCP service account key file\"\n  type        = string\n}\n\n# GCP project ID\nvariable \"gcp_project\" {\n  description = \"The GCP project ID\"\n  type        = string\n}\n\n# GCP region\nvariable \"gcp_region\" {\n  description = \"The GCP region\"\n  type        = string\n}\n\n# Name of the VPC to create\nvariable \"vpc_name\" {\n  description = \"The name of the VPC to create\"\n  type        = string\n}\n\n# CIDR block for the VPC\nvariable \"vpc_cidr\" {\n  description = \"The CIDR block for the VPC\"\n  type        = string\n  validation {\n    condition     = can(cidrhost(var.vpc_cidr, 0))\n    error_message = \"Must be a valid IPv4 CIDR block\"\n  }\n}\n\n# List of subnet CIDR ranges\nvariable \"subnet_cidrs\" {\n  description = \"List of subnet CIDR ranges\"\n  type        = list(string)\n}\n\n# Name of the Cloud Run service\nvariable \"service_name\" {\n  description = \"Name of the Cloud Run service\"\n  type        = string\n}\n\n# Container image to deploy\nvariable \"container_image\" {\n  description = \"Container image to deploy\"\n  type        = string\n}\n\n# Memory limit for the Cloud Run service\nvariable \"memory_limit\" {\n  description = \"Memory limit for the Cloud Run service\"\n  type        = string\n  default     = \"256Mi\"\n}"}]}
{"messages": [{"role": "user", "content": "Create a random pet to generate a unique prefix for the resource group name. Define an Azure Resource Group in the specified location using the generated prefix. Establish a virtual network and a subnet within the resource group. Set up a public IP address and a network security group with an SSH rule. Finally, create a Linux virtual machine connected to the network interface using the defined configurations."}, {"role": "assistant", "content": "\n#File: main.tf\nresource \"random_pet\" \"rg_name\" {\n  prefix = var.resource_group_name_prefix\n}\n\nresource \"azurerm_resource_group\" \"rg\" {\n  location = var.resource_group_location\n  name     = random_pet.rg_name.id\n}\n\n# Create virtual network\nresource \"azurerm_virtual_network\" \"my_terraform_network\" {\n  name                = \"myVnet\"\n  address_space       = [\"10.0.0.0/16\"]\n  location            = azurerm_resource_group.rg.location\n  resource_group_name = azurerm_resource_group.rg.name\n}\n\n# Create subnet\nresource \"azurerm_subnet\" \"my_terraform_subnet\" {\n  name                 = \"mySubnet\"\n  resource_group_name  = azurerm_resource_group.rg.name\n  virtual_network_name = azurerm_virtual_network.my_terraform_network.name\n  address_prefixes     = [\"10.0.1.0/24\"]\n}\n\n# Create public IPs\nresource \"azurerm_public_ip\" \"my_terraform_public_ip\" {\n  name                = \"myPublicIP\"\n  location            = azurerm_resource_group.rg.location\n  resource_group_name = azurerm_resource_group.rg.name\n  allocation_method   = \"Dynamic\"\n}\n\n# Create Network Security Group and rule\nresource \"azurerm_network_security_group\" \"my_terraform_nsg\" {\n  name                = \"myNetworkSecurityGroup\"\n  location            = azurerm_resource_group.rg.location\n  resource_group_name = azurerm_resource_group.rg.name\n\n  security_rule {\n    name                       = \"SSH\"\n    priority                   = 1001\n    direction                  = \"Inbound\"\n    access                     = \"Allow\"\n    protocol                   = \"Tcp\"\n    source_port_range          = \"*\"\n    destination_port_range     = \"22\"\n    source_address_prefix      = \"*\"\n    destination_address_prefix = \"*\"\n  }\n}\n\n# Create network interface\nresource \"azurerm_network_interface\" \"my_terraform_nic\" {\n  name                = \"myNIC\"\n  location            = azurerm_resource_group.rg.location\n  resource_group_name = azurerm_resource_group.rg.name\n\n  ip_configuration {\n    name                          = \"my_nic_configuration\"\n    subnet_id                     = azurerm_subnet.my_terraform_subnet.id\n    private_ip_address_allocation = \"Dynamic\"\n    public_ip_address_id          = azurerm_public_ip.my_terraform_public_ip.id\n  }\n}\n\n# Connect the security group to the network interface\nresource \"azurerm_network_interface_security_group_association\" \"example\" {\n  network_interface_id      = azurerm_network_interface.my_terraform_nic.id\n  network_security_group_id = azurerm_network_security_group.my_terraform_nsg.id\n}\n\n# Generate random text for a unique storage account name\nresource \"random_id\" \"random_id\" {\n  keepers = {\n    # Generate a new ID only when a new resource group is defined\n    resource_group = azurerm_resource_group.rg.name\n  }\n\n  byte_length = 8\n}\n\n# Create storage account for boot diagnostics\nresource \"azurerm_storage_account\" \"my_storage_account\" {\n  name                     = \"diag${random_id.random_id.hex}\"\n  location                 = azurerm_resource_group.rg.location\n  resource_group_name      = azurerm_resource_group.rg.name\n  account_tier             = \"Standard\"\n  account_replication_type = \"LRS\"\n}\n\n# Create (and display) an SSH key\nresource \"tls_private_key\" \"example_ssh\" {\n  algorithm = \"RSA\"\n  rsa_bits  = 4096\n}\n\n# Create virtual machine\nresource \"azurerm_linux_virtual_machine\" \"my_terraform_vm\" {\n  name                  = \"myVM\"\n  location              = azurerm_resource_group.rg.location\n  resource_group_name   = azurerm_resource_group.rg.name\n  network_interface_ids = [azurerm_network_interface.my_terraform_nic.id]\n  size                  = \"Standard_DS1_v2\"\n\n  os_disk {\n    name                 = \"myOsDisk\"\n    caching              = \"ReadWrite\"\n    storage_account_type = \"Premium_LRS\"\n  }\n\n  source_image_reference {\n    publisher = \"Canonical\"\n    offer     = \"0001-com-ubuntu-server-jammy\"\n    sku       = \"22_04-lts-gen2\"\n    version   = \"latest\"\n  }\n\n  computer_name                   = \"myvm\"\n  admin_username                  = \"azureuser\"\n  disable_password_authentication = true\n\n  admin_ssh_key {\n    username   = \"azureuser\"\n    public_key = tls_private_key.example_ssh.public_key_openssh\n  }\n\n  boot_diagnostics {\n    storage_account_uri = azurerm_storage_account.my_storage_account.primary_blob_endpoint\n  }\n}\n#File: outputs.tf\noutput \"resource_group_name\" {\n  value = azurerm_resource_group.rg.name\n}\n\noutput \"public_ip_address\" {\n  value = azurerm_linux_virtual_machine.my_terraform_vm.public_ip_address\n}\n\noutput \"tls_private_key\" {\n  value     = tls_private_key.example_ssh.private_key_pem\n  sensitive = true\n}\n#File: providers.tf\n# Provider config\n\nterraform {\n  required_version = \">=0.12\"\n\n  required_providers {\n    azurerm = {\n      source  = \"hashicorp/azurerm\"\n      version = \"~>2.0\"\n    }\n    random = {\n      source  = \"hashicorp/random\"\n      version = \"~>3.0\"\n    }\n    tls = {\n      source = \"hashicorp/tls\"\n      version = \"~>4.0\"\n    }\n  }\n}\n\nprovider \"azurerm\" {\n  features {}\n}\n#File: variables.tf\nvariable \"resource_group_location\" {\n  type        = string\n  default     = \"eastus\"\n  description = \"Location of the resource group.\"\n}\n\nvariable \"resource_group_name_prefix\" {\n  type        = string\n  default     = \"rg\"\n  description = \"Prefix of the resource group name that's combined with a random ID so name is unique in your Azure subscription.\"\n}"}]}
{"messages": [{"role": "user", "content": "Create a Google Cloud Platform project with the specified project ID. Define a compute network and subnetwork for your Kubernetes cluster. Provision a Google Kubernetes Engine cluster with designated node pools, specifying configurations such as node count and machine type. Allocate NAT IP addresses and set up a router for managed NAT functionality. Output relevant information about the cluster, including its name, current node version, and allocated IP ranges."}, {"role": "assistant", "content": "\n#File: main.tf\nlocals {\n  location_parts = split(\"-\", var.location)\n  region         = format(\"%s-%s\", local.location_parts[0], local.location_parts[1])\n}\n\nprovider \"google\" {\n  version = \"~> 3.0\"\n  project = var.project_id\n  region  = local.region\n}\n\nprovider \"google-beta\" {\n  version = \"~> 3.0\"\n  project = var.project_id\n  region  = local.region\n}\n\nresource \"google_compute_network\" \"network\" {\n  name                    = var.name\n  auto_create_subnetworks = false\n}\n\nresource \"google_compute_subnetwork\" \"nodes\" {\n  name                     = \"${var.name}-nodes\"\n  region                   = local.region\n  network                  = google_compute_network.network.self_link\n  ip_cidr_range            = var.nodes_cidr\n  private_ip_google_access = true\n}\n\nresource \"google_compute_router\" \"router\" {\n  name    = var.name\n  region  = google_compute_subnetwork.nodes.region\n  network = google_compute_network.network.self_link\n}\n\nresource \"google_compute_address\" \"nat\" {\n  count  = var.nat_ip_count\n  name   = \"${var.name}-nat-${count.index}\"\n  region = google_compute_subnetwork.nodes.region\n}\n\nresource \"google_compute_router_nat\" \"nat\" {\n  name                               = var.name\n  router                             = google_compute_router.router.name\n  region                             = google_compute_router.router.region\n  nat_ip_allocate_option             = \"MANUAL_ONLY\"\n  nat_ips                            = google_compute_address.nat[*].self_link\n  source_subnetwork_ip_ranges_to_nat = \"LIST_OF_SUBNETWORKS\"\n  subnetwork {\n    name                    = google_compute_subnetwork.nodes.self_link\n    source_ip_ranges_to_nat = [\"ALL_IP_RANGES\"]\n  }\n}\n\ndata \"google_container_engine_versions\" \"versions\" {\n  provider       = google-beta\n  location       = var.location\n  version_prefix = var.version_prefix\n}\n\nresource \"google_container_cluster\" \"primary\" {\n  provider                 = google-beta\n  name                     = var.name\n  location                 = var.location\n  initial_node_count       = 1\n  remove_default_node_pool = true\n  enable_shielded_nodes    = true\n  maintenance_policy {\n    recurring_window {\n      start_time = var.maintenance_start_time\n      end_time   = var.maintenance_end_time\n      recurrence = var.maintenance_recurrence\n    }\n  }\n  release_channel {\n    channel = var.release_channel\n  }\n  min_master_version = data.google_container_engine_versions.versions.latest_master_version\n  node_version       = data.google_container_engine_versions.versions.latest_node_version\n  network            = google_compute_network.network.self_link\n  subnetwork         = google_compute_subnetwork.nodes.self_link\n  ip_allocation_policy {\n    cluster_ipv4_cidr_block  = var.cluster_cidr\n    services_ipv4_cidr_block = var.services_cidr\n  }\n  private_cluster_config {\n    enable_private_endpoint = false\n    enable_private_nodes    = true\n    master_ipv4_cidr_block  = var.master_cidr\n  }\n  workload_identity_config {\n    identity_namespace = \"${var.project_id}.svc.id.goog\"\n  }\n\n  # For vertically autoscaling pod resources.\n  # See https://cloud.google.com/kubernetes-engine/docs/how-to/vertical-pod-autoscaling\n  vertical_pod_autoscaling {\n    enabled = true\n  }\n\n  # Some interesting configuration options for security.\n  # See https://www.terraform.io/docs/providers/google/r/container_cluster.html\n  #\n  # database_encryption {\n  #   state = \"ENCRYPTED\"\n  #   key_name = \"projects/[KEY_PROJECT_ID]/locations/[LOCATION]/keyRings/[RING_NAME]/cryptoKeys/[KEY_NAME]\"\n  # }\n  # boot_disk_kms_key = \"projects/[KEY_PROJECT_ID]/locations/[LOCATION]/keyRings/[RING_NAME]/cryptoKeys/[KEY_NAME]\"\n  # sandbox_config {\n  #   sandbox_type = \"gvisor\"\n  # }\n  # pod_security_policy_config {\n  #   enabled = true\n  # }\n  # network_policy {\n  #   enabled  = true\n  #   provider = \"CALICO\"\n  # }\n  # addons_config {\n  #   network_policy_config {\n  #     disabled = false\n  #   }\n  # }\n  master_auth {\n    username = \"\"\n    password = \"\"\n    client_certificate_config {\n      issue_client_certificate = false\n    }\n  }\n  master_authorized_networks_config {\n    dynamic \"cidr_blocks\" {\n      for_each = var.master_authorized_networks_cidr_blocks\n      content {\n        cidr_block   = cidr_blocks.value.cidr_block\n        display_name = cidr_blocks.value.display_name\n      }\n    }\n  }\n}\n\nresource \"google_container_node_pool\" \"node_pool\" {\n  count              = length(var.node_pools)\n  name               = format(\"%s-pool\", lookup(var.node_pools[count.index], \"name\", format(\"%03d\", count.index + 1)))\n  cluster            = google_container_cluster.primary.name\n  location           = var.location\n  initial_node_count = lookup(var.node_pools[count.index], \"initial_node_count\", 1)\n  autoscaling {\n    min_node_count = lookup(var.node_pools[count.index], \"min_node_count\", 1)\n    max_node_count = lookup(var.node_pools[count.index], \"max_node_count\", 2)\n  }\n  management {\n    auto_repair  = true\n    auto_upgrade = true\n  }\n  node_config {\n    oauth_scopes = [\n      \"https://www.googleapis.com/auth/logging.write\",\n      \"https://www.googleapis.com/auth/monitoring\",\n    ]\n    machine_type = lookup(var.node_pools[count.index], \"machine_type\", \"n1-standard-1\")\n    preemptible  = lookup(var.node_pools[count.index], \"preemptible\", false)\n    disk_size_gb = lookup(var.node_pools[count.index], \"disk_size_gb\", 40)\n    disk_type    = lookup(var.node_pools[count.index], \"disk_type\", \"pd-standard\")\n    metadata = {\n      disable-legacy-endpoints = \"true\"\n    }\n    shielded_instance_config {\n      enable_integrity_monitoring = true\n      enable_secure_boot          = true\n    }\n  }\n  # Allow external changes to initial_node_count without interference from Terraform.\n  lifecycle {\n    ignore_changes = [initial_node_count]\n  }\n}\n\n#File: variables.tf\nvariable \"project_id\" {\n  type        = string\n  description = \"GCP project the cluster should reside in.\"\n}\n\nvariable \"location\" {\n  type        = string\n  description = <<EOF\nLocation in GCP the cluster should reside in.\nThis can be either a region, or a zone (for single-zone clusters.)\nSee https://cloud.google.com/kubernetes-engine/docs/concepts/types-of-clusters#availability\nEOF\n}\n\nvariable \"name\" {\n  type        = string\n  description = \"Name of the cluster.\"\n}\n\nvariable \"release_channel\" {\n  type        = string\n  default     = \"REGULAR\"\n  description = <<EOF\nRelease channel for GKE cluster.\nSee https://cloud.google.com/kubernetes-engine/docs/concepts/release-channels and\nhttps://cloud.google.com/kubernetes-engine/docs/release-notes-stable\nEOF\n}\n\nvariable \"version_prefix\" {\n  type        = string\n  default     = \"1.17.\"\n  description = <<EOF\nVersion prefix for cluster and nodes.\nSee https://www.terraform.io/docs/providers/google/d/container_engine_versions.html\nEOF\n}\n\nvariable \"maintenance_start_time\" {\n  type        = string\n  default     = \"2020-01-01T14:00:00Z\"\n  description = <<EOF\nMaintenance start time.\nSee https://cloud.google.com/kubernetes-engine/docs/how-to/maintenance-windows-and-exclusions\nEOF\n}\n\nvariable \"maintenance_end_time\" {\n  type        = string\n  default     = \"2020-01-01T18:00:00Z\"\n  description = <<EOF\nMaintenance end time.\nSee https://cloud.google.com/kubernetes-engine/docs/how-to/maintenance-windows-and-exclusions\nEOF\n}\n\nvariable \"maintenance_recurrence\" {\n  type        = string\n  default     = \"FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR\"\n  description = <<EOF\nMaintenance recurrence.\nSee https://cloud.google.com/kubernetes-engine/docs/how-to/maintenance-windows-and-exclusions\nEOF\n}\n\nvariable \"nat_ip_count\" {\n  type        = number\n  default     = 1\n  description = <<EOF\nNumber of NAT IPs to provision.\nSee https://cloud.google.com/nat/docs/overview and\nhttps://cloud.google.com/nat/docs/ports-and-addresses#ports\nEOF\n}\n\nvariable \"initial_node_count\" {\n  type        = number\n  default     = 1\n  description = <<EOF\nInitial node count. This is only used when first provisioning the cluster.\nAny external changes made (i.e. autoscaling) will not be overwritten.\nEOF\n}\n\nvariable \"node_pools\" {\n  type        = list(map(string))\n  description = <<EOF\nList of node pools to use for the cluster.\nSee https://www.terraform.io/docs/providers/google/r/container_node_pool.html\nEOF\n}\n\nvariable \"master_cidr\" {\n  type        = string\n  default     = \"172.16.0.0/28\"\n  description = \"Kubernetes control plane CIDR.\"\n}\n\nvariable \"nodes_cidr\" {\n  type        = string\n  default     = \"10.1.0.0/20\"\n  description = <<EOF\nIP address range for node IPs.\nSee https://cloud.google.com/kubernetes-engine/docs/how-to/alias-ips#cluster_sizing\nEOF\n}\n\nvariable \"master_authorized_networks_cidr_blocks\" {\n  type = list(object({\n    cidr_block   = string\n    display_name = string\n  }))\n  default = [\n    {\n      cidr_block   = \"0.0.0.0/0\"\n      display_name = \"all\"\n    }\n  ]\n  description = \"Network addresses to allow access to the Kubernetes control plane.\"\n}\n\nvariable \"cluster_cidr\" {\n  type        = string\n  default     = \"/14\"\n  description = <<EOF\nIP address range for the cluster pod IPs.\nSee https://cloud.google.com/kubernetes-engine/docs/how-to/alias-ips#cluster_sizing\nEOF\n}\n\nvariable \"services_cidr\" {\n  type        = string\n  default     = \"/20\"\n  description = <<EOF\nIP address range of the services IPs in this cluster.\nSee https://cloud.google.com/kubernetes-engine/docs/how-to/alias-ips#cluster_sizing\nEOF\n}\n\n#File: outputs.tf\noutput \"location\" {\n  value = var.location\n}\n\noutput \"gke_cluster_name\" {\n  value = google_container_cluster.primary.name\n}\n\noutput \"channel\" {\n  value = var.release_channel\n}\n\noutput \"channel_default_version\" {\n  value = data.google_container_engine_versions.versions.release_channel_default_version[var.release_channel]\n}\n\noutput \"channel_latest_master_version\" {\n  value = data.google_container_engine_versions.versions.latest_master_version\n}\n\noutput \"channel_latest_node_version\" {\n  value = data.google_container_engine_versions.versions.latest_node_version\n}\n\noutput \"current_master_version\" {\n  value = google_container_cluster.primary.master_version\n}\n\noutput \"current_node_version\" {\n  value = google_container_cluster.primary.node_version\n}\n\noutput \"network\" {\n  value = google_compute_network.network.name\n}\n\noutput \"subnetwork_nodes\" {\n  value = google_compute_subnetwork.nodes.name\n}\n\noutput \"nodes_cidr\" {\n  value = google_compute_subnetwork.nodes.ip_cidr_range\n}\n\noutput \"cluster_cidr\" {\n  value = google_container_cluster.primary.cluster_ipv4_cidr\n}\n\noutput \"services_cidr\" {\n  value = google_container_cluster.primary.services_ipv4_cidr\n}\n\noutput \"nat_ips\" {\n  value = google_compute_address.nat[*].address\n}\n"}]}
{"messages": [{"role":"user","content":"Provide an AWS ACM SSL certificate for a specified domain and validates it via DNS using Route 53. It should automatically creates the necessary DNS validation record in the public Route 53 hosted zone for the domain. Finally, it creates an alias A record in Route 53 that points the domain to a target DNS name (cname) in a specified hosted zone."},{"role":"assistant","content":"provider \"aws\"{\r\n\r\n}\r\n\r\nvariable \"domain_name\" {\r\n  type = string\r\n}\r\n\r\nvariable \"cname\" {\r\n  type = string\r\n}\r\n\r\nvariable \"zone\" {\r\n  type = string\r\n}\r\n\r\n\r\ndata \"aws_route53_zone\" \"public\" {\r\n  name         = var.domain_name\r\n  private_zone = false\r\n}\r\n\r\nresource \"aws_acm_certificate\" \"myapp\" {\r\n  domain_name       = \"${var.domain_name}\"\r\n  validation_method = \"DNS\"\r\n  lifecycle {\r\n    create_before_destroy = true\r\n  }\r\n}\r\n\r\n\r\nresource \"aws_route53_record\" \"cert_validation\" {\r\n  allow_overwrite = true\r\n  name            = tolist(aws_acm_certificate.myapp.domain_validation_options)[0].resource_record_name\r\n  records         = [ tolist(aws_acm_certificate.myapp.domain_validation_options)[0].resource_record_value ]\r\n  type            = tolist(aws_acm_certificate.myapp.domain_validation_options)[0].resource_record_type\r\n  zone_id  = data.aws_route53_zone.public.id\r\n  ttl      = 60\r\n}\r\n\r\n\r\nresource \"aws_acm_certificate_validation\" \"cert\" {\r\n  certificate_arn         = aws_acm_certificate.myapp.arn\r\n  validation_record_fqdns = [ aws_route53_record.cert_validation.fqdn ]\r\n}\r\n\r\nresource \"aws_route53_record\" \"myapp\" {\r\n  zone_id = data.aws_route53_zone.public.zone_id\r\n  name    = \"${var.domain_name}\"\r\n  type    = \"A\"\r\n  alias {\r\n    name                   = var.cname\r\n    zone_id                = var.zone\r\n    evaluate_target_health = false\r\n  }\r\n}"}]}
{"messages": [{"role": "user", "content": "Create a VPN gateway using Google Cloud by defining a `google_compute_ha_vpn_gateway` resource with the specified project, region, and network. Set up a Cloud Router with the `google_compute_router` resource, configuring BGP settings based on the `vpn_config` variable. For each VPN instance, generate an external VPN gateway with `google_compute_external_vpn_gateway`, including necessary interfaces. Establish BGP peers for each tunnel using the `google_compute_router_peer`, linking the tunnel configurations properly. Finally, create VPN tunnels using the `google_compute_vpn_tunnel` resource that connects everything together."}, {"role": "assistant", "content": "\n#File: main.tf\nlocals {\n  secret = random_id.secret.b64_url\n\n  tunnels_tmp = flatten([\n    for vpn_instance_name, vpn_instance_config in var.vpn_config.instances : [\n      for tunnel_name, tunnel_config in vpn_instance_config.tunnels : {\n        tunnel_name = \"${vpn_instance_name}-${tunnel_name}\"\n        tunnel_config = merge(\n          tunnel_config,\n          {\n            vpn_instance_name     = vpn_instance_name\n            peer_external_gateway = try(vpn_instance_config.peer_external_gateway, null)\n            peer_gcp_gateway      = try(vpn_instance_config.peer_gcp_gateway, null)\n          }\n        )\n      }\n    ]\n  ])\n\n  tunnels = {\n    for k, v in local.tunnels_tmp : v.tunnel_name => v.tunnel_config\n  }\n}\n\nresource \"google_compute_ha_vpn_gateway\" \"ha_gateway\" {\n  name    = var.vpn_gateway_name\n  project = var.project\n  region  = var.region\n  network = var.network\n}\n\nresource \"google_compute_router\" \"router\" {\n  name    = coalesce(var.router_name, \"${var.vpn_gateway_name}-rtr\")\n  project = var.project\n  region  = var.region\n  network = var.network\n  bgp {\n    advertise_mode = (\n      var.vpn_config.router_advertise_config == null\n      ? null\n      : var.vpn_config.router_advertise_config.mode\n    )\n    advertised_groups = (\n      var.vpn_config.router_advertise_config == null ? null : (\n        var.vpn_config.router_advertise_config.mode != \"CUSTOM\"\n        ? null\n        : var.vpn_config.router_advertise_config.groups\n      )\n    )\n    dynamic \"advertised_ip_ranges\" {\n      for_each = (\n        var.vpn_config.router_advertise_config == null ? {} : (\n          var.vpn_config.router_advertise_config.mode != \"CUSTOM\"\n          ? {}\n          : var.vpn_config.router_advertise_config.ip_ranges\n        )\n      )\n      iterator = range\n      content {\n        range       = range.key\n        description = range.value\n      }\n    }\n    asn                = var.vpn_config.router_asn\n    keepalive_interval = try(var.vpn_config.keepalive_interval, 20)\n  }\n}\n\n# Represents a VPN gateway managed outside of GCP\nresource \"google_compute_external_vpn_gateway\" \"external_gateway\" {\n  for_each = { for k, v in var.vpn_config.instances : k => v if try(v.peer_external_gateway, null) != null }\n\n  name            = try(each.value.peer_external_gateway.name, null) != null ? each.value.peer_external_gateway.name : \"${each.value.name}-external-gw\"\n  project         = var.project\n  redundancy_type = each.value.peer_external_gateway.redundancy_type\n  description     = try(each.value.external_vpn_gateway_description, null)\n  labels          = var.labels\n  dynamic \"interface\" {\n    for_each = each.value.peer_external_gateway.interfaces\n    content {\n      id         = interface.value.id\n      ip_address = interface.value.ip_address\n    }\n  }\n}\n\nresource \"google_compute_router_peer\" \"bgp_peer\" {\n  for_each        = local.tunnels\n  region          = var.region\n  project         = var.project\n  name            = try(each.value.bgp_session_name, null) != null ? each.value.bgp_session_name : \"${var.vpn_gateway_name}-${each.key}\"\n  router          = google_compute_router.router.name\n  peer_ip_address = each.value.bgp_peer.address\n  peer_asn        = each.value.bgp_peer.asn\n  ip_address      = each.value.bgp_peer_options == null ? null : each.value.bgp_peer_options.ip_address\n  advertised_route_priority = (\n    each.value.bgp_peer_options == null ? try(each.value.route_priority, 1000) : (\n      each.value.bgp_peer_options.route_priority == null\n      ? each.value.route_priority\n      : each.value.bgp_peer_options.route_priority\n    )\n  )\n  advertise_mode = (\n    each.value.bgp_peer_options == null ? null : each.value.bgp_peer_options.advertise_mode\n  )\n  advertised_groups = (\n    each.value.bgp_peer_options == null ? null : (\n      each.value.bgp_peer_options.advertise_mode != \"CUSTOM\"\n      ? null\n      : each.value.bgp_peer_options.advertise_groups\n    )\n  )\n  dynamic \"advertised_ip_ranges\" {\n    for_each = (\n      each.value.bgp_peer_options == null ? {} : (\n        each.value.bgp_peer_options.advertise_mode != \"CUSTOM\"\n        ? {}\n        : each.value.bgp_peer_options.advertise_ip_ranges\n      )\n    )\n    iterator = range\n    content {\n      range       = range.key\n      description = range.value\n    }\n  }\n  interface = google_compute_router_interface.router_interface[each.key].name\n}\n\nresource \"google_compute_router_interface\" \"router_interface\" {\n  for_each   = local.tunnels\n  project    = var.project\n  region     = var.region\n  name       = try(each.value.bgp_session_name, null) != null ? each.value.bgp_session_name : each.key\n  router     = google_compute_router.router.name\n  ip_range   = each.value.bgp_session_range == \"\" ? null : each.value.bgp_session_range\n  vpn_tunnel = google_compute_vpn_tunnel.tunnels[each.key].name\n}\n\nresource \"google_compute_vpn_tunnel\" \"tunnels\" {\n  provider                        = google-beta\n  for_each                        = local.tunnels\n  project                         = var.project\n  region                          = var.region\n  name                            = \"${var.vpn_gateway_name}-${each.key}\"\n  router                          = google_compute_router.router.name\n  peer_external_gateway           = try(google_compute_external_vpn_gateway.external_gateway[each.value.vpn_instance_name].self_link, null)\n  peer_external_gateway_interface = each.value.peer_external_gateway_interface\n  peer_gcp_gateway                = each.value.peer_gcp_gateway\n  vpn_gateway_interface           = each.value.vpn_gateway_interface\n  ike_version                     = each.value.ike_version\n  shared_secret                   = each.value.shared_secret == \"\" ? local.secret : each.value.shared_secret\n  vpn_gateway                     = google_compute_ha_vpn_gateway.ha_gateway.self_link\n  labels                          = var.labels\n}\n\nresource \"random_id\" \"secret\" {\n  byte_length = 16\n}\n\n#File: outputs.tf\noutput \"vpn_gw_name\" {\n  value       = google_compute_ha_vpn_gateway.ha_gateway.name\n  description = \"HA VPN gateway name\"\n}\n\noutput \"vpn_gw_self_link\" {\n  value       = google_compute_ha_vpn_gateway.ha_gateway.self_link\n  description = \"HA VPN gateway self_link\"\n}\n\noutput \"vpn_gw_local_address_1\" {\n  value       = google_compute_ha_vpn_gateway.ha_gateway.vpn_interfaces[0].ip_address\n  description = \"HA VPN gateway IP address 1\"\n}\n\noutput \"vpn_gw_local_address_2\" {\n  value       = google_compute_ha_vpn_gateway.ha_gateway.vpn_interfaces[1].ip_address\n  description = \"HA VPN gateway IP address 2\"\n}\n\noutput \"random_secret\" {\n  value       = local.secret\n  sensitive   = true\n  description = \"HA VPN IPsec tunnels secret that has been randomly generated\"\n}\n#File: variables.tf\nvariable \"project\" {\n  default = null\n  type    = string\n}\n\nvariable \"region\" {\n  description = \"Region to deploy VPN gateway in\"\n  type        = string\n}\n\nvariable \"vpn_gateway_name\" {\n  description = \"VPN gateway name. Gateway created by the module\"\n  type        = string\n}\n\nvariable \"router_name\" {\n  description = \"Cloud router name. The router is created by the module\"\n  type        = string\n  default     = null\n}\n\nvariable \"network\" {\n  description = \"VPC network ID that should be used for deployment\"\n  type        = string\n}\n\nvariable \"labels\" {\n  description = \"Labels for VPN components\"\n  type        = map(string)\n  default     = {}\n}\n\nvariable \"vpn_config\" {\n  type        = any\n  description = <<-EOF\n  VPN configuration from GCP to on-prem or from GCP to GCP.\n  If you'd like secrets to be randomly generated set `shared_secret` to empty string (\"\").\n\n  Example:\n\n  ```\n  vpn_config = {\n    router_asn    = 65000\n    local_network = \"vpc-vpn\"\n\n    router_advertise_config = {\n      ip_ranges = {\n        \"10.10.0.0/16\" : \"GCP range 1\"\n      }\n      mode   = \"CUSTOM\"\n      groups = null\n    }\n\n    instances = {\n      vpn-to-onprem = {\n        name = \"vpn-to-onprem\",\n        peer_external_gateway = {\n          redundancy_type = \"TWO_IPS_REDUNDANCY\"\n          interfaces = [{\n            id         = 0\n            ip_address = \"1.1.1.1\"\n            }, {\n            id         = 1\n            ip_address = \"2.2.2.2\"\n          }]\n        },\n        tunnels = {\n          remote0 = {\n            bgp_peer = {\n              address = \"169.254.1.2\"\n              asn     = 65001\n            }\n            bgp_peer_options                = null\n            bgp_session_range               = \"169.254.1.1/30\"\n            ike_version                     = 2\n            vpn_gateway_interface           = 0\n            peer_external_gateway_interface = 0\n            shared_secret                   = \"secret\"\n          }\n          remote1 = {\n            bgp_peer = {\n              address = \"169.254.1.6\"\n              asn     = 65001\n            }\n            bgp_peer_options                = null\n            bgp_session_range               = \"169.254.1.5/30\"\n            ike_version                     = 2\n            vpn_gateway_interface           = 1\n            peer_external_gateway_interface = 1\n            shared_secret                   = \"secret\"\n          }\n        }\n      }\n    }\n  }\n  ```\n  EOF\n}\n#File: versions.tf\nterraform {\n  required_version = \">= 1.3, < 2.0\"\n  required_providers {\n    google = {\n      version = \">= 4.58\"\n    }\n  }\n}\n"}]}
{"messages": [{"role": "user", "content": "Create an Azure Resource Group named \"Test-RG\" in the \"East US\" location. Create a Virtual Network with the address space of \"10.0.0.0/16\" and associate it with the resource group. Create a Subnet named \"AzureSubnet\" with the address prefix \"10.0.1.0/24\" within the Virtual Network. Create a Network Interface named \"Test-nic\" and attach it to the Subnet with dynamic IP allocation. Finally, deploy an Azure Virtual Machine named \"Test-VM\" using the specified admin credentials and associate it with the Network Interface."}, {"role": "assistant", "content": "\n#File: Main.tf\n# Variables\nvariable \"resource_group_name\" {\n  description = \"The name of the resource group\"\n  default     = \"Test-RG\"\n}\n\nvariable \"location\" {\n  description = \"The location of the resources\"\n  default     = \"East US\"\n}\n\nvariable \"vm_size\" {\n  description = \"The size of the virtual machine\"\n  default     = \"Standard_B2ms\"\n}\n\nvariable \"admin_username\" {\n  description = \"The admin username for the virtual machine\"\n  default     = \"azureadmin\"\n}\n\nvariable \"admin_password\" {\n  description = \"The admin password for the virtual machine\"\n  default     = \"Tf@$$w0rd1234!\"\n  sensitive   = true\n}\n\n# Create a Azure Resource Group\nresource \"azurerm_resource_group\" \"RG\" {\n  name     = var.resource_group_name\n  location = var.location\n\n  tags = {\n    environment = \"Test\"\n  }\n}\n\n# Create a Azure Virtual Network\nresource \"azurerm_virtual_network\" \"VNET\" {\n  name                = \"Test-VNET\"\n  address_space       = [\"10.0.0.0/16\"]\n  location            = azurerm_resource_group.RG.location\n  resource_group_name = azurerm_resource_group.RG.name\n\n  tags = {\n    environment = \"Test\"\n  }\n}\n\n# Create a Subnet \nresource \"azurerm_subnet\" \"AzureSubnet\" {\n  name                 = \"AzureSubnet\"\n  resource_group_name  = azurerm_resource_group.RG.name\n  virtual_network_name = azurerm_virtual_network.VNET.name\n  address_prefixes     = [\"10.0.1.0/24\"]\n}\n\n# Create a NIC \nresource \"azurerm_network_interface\" \"nic\" {\n  name                = \"Test-nic\"\n  location            = azurerm_resource_group.RG.location\n  resource_group_name = azurerm_resource_group.RG.name\n\n  ip_configuration {\n    name                          = \"internal\"\n    subnet_id                     = azurerm_subnet.AzureSubnet.id\n    private_ip_address_allocation = \"Dynamic\"\n  }\n\n  tags = {\n    environment = \"Test\"\n  }\n}\n\n# Create a Public IP\nresource \"azurerm_public_ip\" \"PIP\" {\n  name                = \"Public-IP\"\n  resource_group_name = azurerm_resource_group.RG.name\n  location            = azurerm_resource_group.RG.location\n  allocation_method   = \"Static\"\n\n  tags = {\n    environment = \"Test\"\n  }\n}\n\n# Create a Network Security Group \nresource \"azurerm_network_security_group\" \"NSG\" {\n  name                = \"Test-NSG\"\n  location            = azurerm_resource_group.RG.location\n  resource_group_name = azurerm_resource_group.RG.name\n\n  tags = {\n    environment = \"Test\"\n  }\n}\n\n# Create a Azure Virtual Machine\nresource \"azurerm_windows_virtual_machine\" \"VM\" {\n  name                = \"Test-VM\"\n  resource_group_name = azurerm_resource_group.RG.name\n  location            = azurerm_resource_group.RG.location\n  size                = var.vm_size\n  admin_username      = var.admin_username\n  admin_password      = var.admin_password\n  network_interface_ids = [\n    azurerm_network_interface.nic.id,\n  ]\n\n  os_disk {\n    caching              = \"ReadWrite\"\n    storage_account_type = \"Standard_LRS\"\n  }\n\n  source_image_reference {\n    publisher = \"MicrosoftWindowsServer\"\n    offer     = \"WindowsServer\"\n    sku       = \"2022-Datacenter\"\n    version   = \"latest\"\n  }\n\n  tags = {\n    environment = \"Test\"\n  }\n}\n\n# Outputs\noutput \"resource_group_name\" {\n  value = azurerm_resource_group.RG.name\n}\n\noutput \"virtual_network_name\" {\n  value = azurerm_virtual_network.VNET.name\n}\n\noutput \"subnet_name\" {\n  value = azurerm_subnet.AzureSubnet.name\n}\n\noutput \"public_ip\" {\n  value = azurerm_public_ip.PIP.ip_address\n}\n\noutput \"virtual_machine_id\" {\n  value = azurerm_windows_virtual_machine.VM.id\n}\n#File: Provider.tf\n\nprovider \"azurerm\" {\n  features {}\n}"}]}
{"messages": [{"role": "user", "content": "Create variables for the company name, application name, domain name, and environment in Terraform. Define SKUs for Debian 9, 10, and 11. Build a Google Compute Engine instance with specific attributes and a startup script to install Apache. Establish a VPC and public subnet, then create firewall rules to allow HTTP, HTTPS, SSH, and RDP traffic. Configure the GCP provider with necessary authentication and project details."}, {"role": "assistant", "content": "\n#File: app-variables.tf\n#############################\n## Application - Variables ##\n#############################\n\n# company name \nvariable \"company\" {\n  type        = string\n  description = \"This variable defines the company name used to build resources\"\n}\n\n# application name \nvariable \"app_name\" {\n  type        = string\n  description = \"This variable defines the application name used to build resources\"\n}\n\n# domain name \nvariable \"app_domain\" {\n  type        = string\n  description = \"This variable defines the domain name used to build resources\"\n}\n\n# environment\nvariable \"environment\" {\n  type        = string\n  description = \"This variable defines the environment to be built\"\n}\n\n\n#File: debian-versions.tf\n#####################\n## Debian Versions ##\n#####################\n\nvariable \"debian_9_sku\" {\n  type        = string\n  description = \"SKU for Debian 9\"\n  default     = \"debian-cloud/debian-9\"\n}\n\nvariable \"debian_10_sku\" {\n  type        = string\n  description = \"SKU for Debian 10\"\n  default     = \"debian-cloud/debian-10\"\n}\n\nvariable \"debian_11_sku\" {\n  type        = string\n  description = \"SKU for Debian 11\"\n  default     = \"debian-cloud/debian-11\"\n}\n#File: linux-vm-main.tf\n#########################\n## GCP Linux VM - Main ##\n#########################\n\n# Terraform plugin for creating random ids\nresource \"random_id\" \"instance_id\" {\n  byte_length = 4\n}\n\n# Bootstrapping Script to Install Apache\ndata \"template_file\" \"linux-metadata\" {\ntemplate = <<EOF\nsudo apt-get update; \nsudo apt-get install -y apache2;\nsudo systemctl start apache2;\nsudo systemctl enable apache2;\nEOF\n}\n\n# Create VM\nresource \"google_compute_instance\" \"vm_instance_public\" {\n  name         = \"${lower(var.company)}-${lower(var.app_name)}-${var.environment}-vm${random_id.instance_id.hex}\"\n  machine_type = var.linux_instance_type\n  zone         = var.gcp_zone\n  hostname     = \"${var.app_name}-vm${random_id.instance_id.hex}.${var.app_domain}\"\n  tags         = [\"ssh\",\"http\"]\n\n  boot_disk {\n    initialize_params {\n      image = var.debian_11_sku\n    }\n  }\n\n  metadata_startup_script = data.template_file.linux-metadata.rendered\n\n  network_interface {\n    network       = google_compute_network.vpc.name\n    subnetwork    = google_compute_subnetwork.network_subnet.name\n    access_config { }\n  }\n} \n\n#File: linux-vm-output.tf\n###########################\n## GCP Linux VM - Output ##\n###########################\n\noutput \"vm-name\" {\n  value = google_compute_instance.vm_instance_public.name\n}\n\noutput \"vm-external-ip\" {\n  value = google_compute_instance.vm_instance_public.network_interface.0.access_config.0.nat_ip\n}\n\noutput \"vm-internal-ip\" {\n  value = google_compute_instance.vm_instance_public.network_interface.0.network_ip\n}\n\n#File: linux-vm-variables.tf\n##############################\n## GCP Linux VM - Variables ##\n##############################\n\nvariable \"linux_instance_type\" {\n  type        = string\n  description = \"VM instance type\"\n  default     = \"f1-micro\"\n}\n\n#File: network-firewall.tf\n###################################\n## Network Firewall Rules - Main ##\n###################################\n\n# Allow http\nresource \"google_compute_firewall\" \"allow-http\" {\n  name    = \"${var.app_name}-${var.environment}-fw-allow-http\"\n  network = google_compute_network.vpc.name\n  allow {\n    protocol = \"tcp\"\n    ports    = [\"80\"]\n  }\n  \n  source_ranges = [\"0.0.0.0/0\"]\n  target_tags = [\"http\"] \n}\n\n# allow https\nresource \"google_compute_firewall\" \"allow-https\" {\n  name    = \"${var.app_name}-${var.environment}-fw-allow-https\"\n  network = google_compute_network.vpc.name\n  allow {\n    protocol = \"tcp\"\n    ports    = [\"443\"]\n  }\n\n  source_ranges = [\"0.0.0.0/0\"]\n  target_tags = [\"https\"] \n}\n\n# allow ssh\nresource \"google_compute_firewall\" \"allow-ssh\" {\n  name    = \"${var.app_name}-${var.environment}-fw-allow-ssh\"\n  network = google_compute_network.vpc.name\n  allow {\n    protocol = \"tcp\"\n    ports    = [\"22\"]\n  }\n\n  source_ranges = [\"0.0.0.0/0\"]\n  target_tags = [\"ssh\"]\n}\n\n# allow rdp\nresource \"google_compute_firewall\" \"allow-rdp\" {\n  name    = \"${var.app_name}-${var.environment}-fw-allow-rdp\"\n  network = google_compute_network.vpc.name\n  allow {\n    protocol = \"tcp\"\n    ports    = [\"3389\"]\n  }\n\n  source_ranges = [\"0.0.0.0/0\"]\n  target_tags = [\"rdp\"]\n}\n\n#File: network-main.tf\n####################\n## Network - Main ##\n####################\n\n# create VPC\nresource \"google_compute_network\" \"vpc\" {\n  name                    = \"${lower(var.company)}-${lower(var.app_name)}-${var.environment}-vpc\"\n  auto_create_subnetworks = \"false\"\n  routing_mode            = \"GLOBAL\"\n}\n\n# create public subnet\nresource \"google_compute_subnetwork\" \"network_subnet\" {\n  name          = \"${lower(var.company)}-${lower(var.app_name)}-${var.environment}-subnet\"\n  ip_cidr_range = var.network-subnet-cidr\n  network       = google_compute_network.vpc.name\n  region        = var.gcp_region\n}\n\n#File: network-variables.tf\n#########################\n## Network - Variables ##\n#########################\n\nvariable \"network-subnet-cidr\" {\n  type        = string\n  description = \"The CIDR for the network subnet\"\n}\n#File: provider-main.tf\n#########################\n## GCP Provider - Main ##\n#########################\n\n# Define Terraform provider\nterraform {\n  required_version = \"~> 1.0\"\n\n  required_providers {\n    google = {\n      source = \"hashicorp/google\"\n      // version = \"4.11.0\" # pinning version\n    }\n  }\n}\n\nprovider \"google\" {\n  credentials = file(var.gcp_auth_file)\n  project     = var.gcp_project\n  region      = var.gcp_region\n  zone        = var.gcp_zone\n}\n\n#File: provider-variables.tf\n##############################\n## GCP Provider - Variables ##\n##############################\n\n# GCP authentication file\nvariable \"gcp_auth_file\" {\n  type        = string\n  description = \"GCP authentication file\"\n}\n\n# define GCP project name\nvariable \"gcp_project\" {\n  type        = string\n  description = \"GCP project name\"\n}\n\n# define GCP region\nvariable \"gcp_region\" {\n  type        = string\n  description = \"GCP region\"\n}\n\n# define GCP region\nvariable \"gcp_zone\" {\n  type        = string\n  description = \"GCP zone\"\n}\n"}]}
{"messages": [{"role": "user", "content": "Create an Azure resource group named \"packer-artifacts-rg\" in the specified region. Create another resource group named \"packer-build-rg\" in the same region. Establish an Azure AD application and service principal for Packer. Assign the \"Reader\" role to the service principal at the subscription level and the \"Contributor\" role at both resource group levels. Store the essential credentials as GitHub Actions secrets for Packer automation."}, {"role": "assistant", "content": "\n#File: packer.tf\nterraform {\n  required_version = \">= 1.1.6\"\n\n  required_providers {\n    azuread = {\n      source  = \"azuread\"\n      version = \">= 2.53.0\"\n    }\n\n    azurerm = {\n      source  = \"azurerm\"\n      version = \">= 4.0.1\"\n    }\n\n    github = {\n      source  = \"integrations/github\"\n      version = \">= 6.2.3\"\n    }\n  }\n}\n\nprovider \"azurerm\" {\n  features {}\n}\n\nvariable \"location\" {\n  type        = string\n  description = \"Azure region for Packer resources.\"\n  default     = \"Switzerland North\"\n}\n\n# Packer Resource Groups\n\nresource \"azurerm_resource_group\" \"packer_artifacts\" {\n  name     = \"packer-artifacts-rg\"\n  location = var.location\n}\n\nresource \"azurerm_resource_group\" \"packer_build\" {\n  name     = \"packer-build-rg\"\n  location = var.location\n}\n\n# Service Principal Used By Packer\n\nresource \"azuread_application\" \"packer\" {\n  display_name = \"packer-sp-app\"\n}\n\nresource \"azuread_service_principal\" \"packer\" {\n  client_id = azuread_application.packer.client_id\n}\n\nresource \"azuread_service_principal_password\" \"packer\" {\n  service_principal_id = azuread_service_principal.packer.id\n}\n\n# RBAC\n# Grant service principal `Reader` role scoped to subscription\n# Grant service principal `Contributor` role scoped to Packer resource groups\n\ndata \"azurerm_subscription\" \"subscription\" {}\n\nresource \"azurerm_role_assignment\" \"subscription_reader\" {\n  scope                = data.azurerm_subscription.subscription.id\n  role_definition_name = \"Reader\"\n  principal_id         = azuread_service_principal.packer.id\n}\n\nresource \"azurerm_role_assignment\" \"packer_build_contributor\" {\n  scope                = azurerm_resource_group.packer_build.id\n  role_definition_name = \"Contributor\"\n  principal_id         = azuread_service_principal.packer.id\n}\n\nresource \"azurerm_role_assignment\" \"packer_artifacts_contributor\" {\n  scope                = azurerm_resource_group.packer_artifacts.id\n  role_definition_name = \"Contributor\"\n  principal_id         = azuread_service_principal.packer.id\n}\n\n# Export Variables For Packer\n\ndata \"github_repository\" \"packer_windows_avd\" {\n  full_name = \"schnerring/packer-windows-avd\"\n}\n\n# Azure CLI Authentication\n\nresource \"github_actions_secret\" \"github_actions_azure_credentials\" {\n  repository  = data.github_repository.packer_windows_avd.name\n  secret_name = \"AZURE_CREDENTIALS\"\n\n  plaintext_value = jsonencode(\n    {\n      clientId       = azuread_application.packer.client_id\n      clientSecret   = azuread_service_principal_password.packer.value\n      subscriptionId = data.azurerm_subscription.subscription.subscription_id\n      tenantId       = data.azurerm_subscription.subscription.tenant_id\n    }\n  )\n}\n\n# Packer Authentication\n\nresource \"github_actions_secret\" \"packer_client_id\" {\n  repository      = data.github_repository.packer_windows_avd.name\n  secret_name     = \"PACKER_CLIENT_ID\"\n  plaintext_value = azuread_application.packer.client_id\n}\n\nresource \"github_actions_secret\" \"packer_client_secret\" {\n  repository      = data.github_repository.packer_windows_avd.name\n  secret_name     = \"PACKER_CLIENT_SECRET\"\n  plaintext_value = azuread_service_principal_password.packer.value\n}\n\nresource \"github_actions_secret\" \"packer_subscription_id\" {\n  repository      = data.github_repository.packer_windows_avd.name\n  secret_name     = \"PACKER_SUBSCRIPTION_ID\"\n  plaintext_value = data.azurerm_subscription.subscription.subscription_id\n}\n\nresource \"github_actions_secret\" \"packer_tenant_id\" {\n  repository      = data.github_repository.packer_windows_avd.name\n  secret_name     = \"PACKER_TENANT_ID\"\n  plaintext_value = data.azurerm_subscription.subscription.tenant_id\n}\n\n# Packer Resource Groups\n\nresource \"github_actions_secret\" \"packer_artifacts_resource_group\" {\n  repository      = data.github_repository.packer_windows_avd.name\n  secret_name     = \"PACKER_ARTIFACTS_RESOURCE_GROUP\"\n  plaintext_value = azurerm_resource_group.packer_artifacts.name\n}\n\nresource \"github_actions_secret\" \"packer_build_resource_group\" {\n  repository      = data.github_repository.packer_windows_avd.name\n  secret_name     = \"PACKER_BUILD_RESOURCE_GROUP\"\n  plaintext_value = azurerm_resource_group.packer_build.name\n}\n\n# Outputs to run Packer locally\n\noutput \"packer_artifacts_resource_group\" {\n  value = azurerm_resource_group.packer_artifacts.name\n}\n\noutput \"packer_build_resource_group\" {\n  value = azurerm_resource_group.packer_build.name\n}\n\noutput \"packer_client_id\" {\n  value     = azuread_application.packer.client_id\n  sensitive = true\n}\n\noutput \"packer_client_secret\" {\n  value     = azuread_service_principal_password.packer.value\n  sensitive = true\n}\n\noutput \"packer_subscription_id\" {\n  value     = data.azurerm_subscription.subscription.subscription_id\n  sensitive = true\n}\n\noutput \"packer_tenant_id\" {\n  value     = data.azurerm_subscription.subscription.tenant_id\n  sensitive = true\n}\n"}]}
{"messages": [{"role": "user", "content": "Create a Google Cloud VPC network with custom settings using `google_compute_network`. Define two subnets: one public with the CIDR range \"10.0.3.0/24\" and another private for GKE with the CIDR range \"10.10.0.0/16\". Set the VPC and subnet names using the specified variables. Configure the Google provider with the designated project ID and region. Ensure that `private_ip_google_access` is enabled for the private subnet and disabled for the public subnet."}, {"role": "assistant", "content": "\n#File: main.tf\n# module.vpc.google_compute_network.network:\nresource \"google_compute_network\" \"network\" {\n    auto_create_subnetworks = false\n    delete_default_routes_on_create = false\n    enable_ula_internal_ipv6 = false\n    name = var.vpc_name\n    project = var.project_id\n    routing_mode = \"GLOBAL\"\n}   \n\nresource \"google_compute_subnetwork\" \"public_subnet\" {\n  name = \"vpc-subnet-public\"\n  ip_cidr_range = \"10.0.3.0/24\"\n  region = var.region\n  network = var.vpc_name\n  private_ip_google_access = false\n}\n\nresource \"google_compute_subnetwork\" \"private_subnet_gke\" {\n  name = var.vpc_subnet\n  ip_cidr_range = \"10.10.0.0/16\"\n  region = var.region\n  network = var.vpc_name\n  private_ip_google_access = true\n}\n\n\n\n\n#File: provider.tf\nprovider \"google\" {\n  project = var.project_id\n  region  = var.region\n}\n\n\n#File: variables.tf\nvariable \"project_id\" {\n  type        = string\n  description = \"The ID of the project that is created via terraform\"\n}\n\nvariable \"vpc_name\" {\n  type        = string\n  description = \"Identifier of the VPC network\"\n}\n\nvariable \"vpc_subnet\" {\n  description = \"The name of the subnet\"\n  type        = string\n}\n\nvariable allowed_ssh_ips {\n  description = \"IPs allowed to access a bastian host to reach the control plane\"\n  type = string\n}\n\nvariable public_subnet_range {\n  type = string\n  description = \"The IPs to assign to the public subnet, which will host the jump host\"\n}\n\nvariable region { \n  type = string\n  description = \"The region to create public subnet, also where compute instances will get spun up\"\n}\n\nvariable public_subnet_name {\n  type = string \n}\n\n\n#File: outputs.tf\n\n#File: output.tf\n"}]}
{"messages": [{"role": "user", "content": "Create a random integer for unique project suffix. Create a Google Cloud project named \"automation,\" linking it to the defined billing account and organization. Enable the required APIs for the project. Create service accounts for automation and pull requests, assigning appropriate IAM roles for workload identity. Set up a Google Cloud Storage bucket for Terraform state with KMS encryption, allowing defined service accounts to manage it."}, {"role": "assistant", "content": "\n#File: automation-project.tf\nresource \"random_integer\" \"automation_project_suffix\" {\n  min = 1\n  max = 999999\n}\n\nresource \"google_project\" \"automation\" {\n  name                = \"automation\"\n  project_id          = \"automation-${random_integer.automation_project_suffix.result}\"\n  org_id              = data.google_organization.harmelodic_com.org_id\n  billing_account     = data.google_billing_account.my_billing_account.id\n  auto_create_network = false\n}\n\nresource \"google_project_service\" \"automation_apis\" {\n  for_each = toset([\n    \"cloudbilling.googleapis.com\", # Required for hooking up Cloud Billing to the automation project\n    \"cloudkms.googleapis.com\", # Required for using CMEK on Terraform state bucket\n    \"cloudresourcemanager.googleapis.com\", # Required for managing GCP folders\n    \"iam.googleapis.com\", # Required for managing IAM\n    \"iamcredentials.googleapis.com\", # Required for handling Service Account tokens (Workload Identity)\n    \"serviceusage.googleapis.com\", # Required as a pre-requisite for creating further projects\n    \"storage.googleapis.com\", # Required for storing Terraform state\n    \"sts.googleapis.com\", # Required for handling short-lived Security Tokens\n\n    # APIs that need enabling for provisioning infra in other projects:\n    \"container.googleapis.com\", # Required for provisioning GKE clusters\n    \"servicenetworking.googleapis.com\", # Required for creating private VPC networking connections\n    \"sqladmin.googleapis.com\"           # Required for provisioning SQL database instances\n  ])\n\n  project                    = google_project.automation.id\n  service                    = each.key\n  disable_dependent_services = true\n  disable_on_destroy         = true\n}\n\n#File: automation-service-account-for-pull-requests.tf\nresource \"google_service_account\" \"automation_for_pull_requests\" {\n  project      = google_project.automation.project_id\n  account_id   = \"automation-for-pull-requests\"\n  display_name = \"automation-for-pull-requests\"\n  description  = \"Automation Service Account for Pull Requests\"\n}\n\n# Allows automation-for-pull-requests account to be used as an identity for any GitHub workload.\n# Though only workloads that meet all the criteria:\n# - Repositories owned by Harmelodic\n# - On any branch (though it's intended to be used for pull requests)\nresource \"google_service_account_iam_member\" \"automation_for_pull_requests_workload_identity_user\" {\n  service_account_id = google_service_account.automation_for_pull_requests.id\n  role               = \"roles/iam.workloadIdentityUser\"\n  member             = \"principalSet://iam.googleapis.com/${google_iam_workload_identity_pool.github.name}/attribute.owner/Harmelodic\"\n}\n\n#File: automation-service-account.tf\nresource \"google_service_account\" \"automation\" {\n  project      = google_project.automation.project_id\n  account_id   = \"automation\"\n  display_name = \"automation\"\n  description  = \"Automation Service Account\"\n}\n\n# Allows automation account to be used as an identity for any GitHub workload.\n# Though only workloads that meet all the criteria:\n# - Repositories owned by Harmelodic\n# - Using the `main` branch (meaning other branches/refs can't provision infrastructure)\nresource \"google_service_account_iam_member\" \"automation_workload_identity_user\" {\n  service_account_id = google_service_account.automation.id\n  role               = \"roles/iam.workloadIdentityUser\"\n  member             = \"principalSet://iam.googleapis.com/${google_iam_workload_identity_pool.github.name}/attribute.owner_and_branch/Harmelodic::branch::refs/heads/main\"\n}\n\n// Grant automation Service Account to get itself,\n// so that consuming repositories can grant the `automation` SA permissions to manage & provision infrastructure.\nresource \"google_service_account_iam_member\" \"automation_project_perms\" {\n  service_account_id = google_service_account.automation.id\n  member             = google_service_account.automation.member\n  role               = \"roles/iam.serviceAccountViewer\"\n}\n\n#File: automation-terraform-state-bucket.tf\nresource \"google_kms_key_ring\" \"automation\" {\n  project  = google_project.automation.project_id\n  location = local.location\n  name     = \"automation\"\n}\n\nresource \"google_kms_crypto_key\" \"terraform_state\" {\n  key_ring = google_kms_key_ring.automation.id\n  name     = \"terraform-state\"\n}\n\nresource \"google_kms_crypto_key_iam_binding\" \"terraform_state\" {\n  crypto_key_id = google_kms_crypto_key.terraform_state.id\n  role          = \"roles/cloudkms.cryptoKeyEncrypterDecrypter\"\n\n  members = [\n    \"serviceAccount:service-${google_project.automation.number}@gs-project-accounts.iam.gserviceaccount.com\"\n  ]\n}\n\nresource \"google_storage_bucket\" \"terraform_state\" {\n  project                     = google_project.automation.project_id\n  name                        = \"harmelodic-tfstate\"\n  location                    = upper(local.location)\n  force_destroy               = false\n  uniform_bucket_level_access = true\n  storage_class               = \"STANDARD\"\n\n  encryption {\n    default_kms_key_name = google_kms_crypto_key.terraform_state.id\n  }\n\n  depends_on = [\n    google_kms_crypto_key_iam_binding.terraform_state\n  ]\n}\n\nresource \"google_storage_bucket_iam_member\" \"automation_terraform_state_perms\" {\n  bucket = google_storage_bucket.terraform_state.name\n  member = google_service_account.automation.member\n  role   = \"roles/storage.admin\"\n}\n\nresource \"google_storage_bucket_iam_member\" \"automation_for_pull_requests_terraform_state_perms\" {\n  bucket = google_storage_bucket.terraform_state.name\n  member = google_service_account.automation_for_pull_requests.member\n  role   = \"roles/storage.objectUser\"\n}\n\n#File: automation-workload-identity-federation-github.tf\n# In order to use a 3rd party system with Google Service Accounts, it's best to use:\n# Workload Identity Federation.\n\n# This file sets up Workload Identity Federation with GitHub, in order to use GitHub Actions to provision Google Cloud\n# infrastructure.\n\n# https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/iam_workload_identity_pool\n# \"Represents a collection of external workload identities. You can define IAM policies to grant these identities\n# access to Google Cloud resources.\"\n# In this case, this Workload Identity Pool is for identities used by GitHub (in GitHub Actions).\nresource \"google_iam_workload_identity_pool\" \"github\" {\n  project                   = google_project.automation.project_id\n  workload_identity_pool_id = \"github\"\n  display_name              = \"GitHub\"\n  description               = \"A pool for identities used by GitHub workloads (e.g. Actions)\"\n  disabled                  = false\n}\n\n# https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/iam_workload_identity_pool_provider\n# \"A configuration for an external identity provider\"\n# In this case:\n# - Configuring GitHub as a \"Workload Identity Pool Provider\".\n# - This \"Workload Identity Pool Provider\" is connected to the above \"Workload Identity Pool\".\n# - A mapping is then made between GitHub's OIDC token \"assertions\" and Google's Workload Identity \"attributes\"\nresource \"google_iam_workload_identity_pool_provider\" \"automation_github\" {\n  project                            = google_project.automation.project_id\n  workload_identity_pool_id          = google_iam_workload_identity_pool.github.workload_identity_pool_id\n  workload_identity_pool_provider_id = \"github-oidc\"\n  display_name                       = \"GitHub OIDC\"\n  description                        = \"GitHub OIDC Provider for Workload Identity Federation\"\n  disabled                           = false\n\n  # GitHub OIDC Token assertions: https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/about-security-hardening-with-openid-connect#understanding-the-oidc-token\n  attribute_mapping = {\n    # attribute.<custom>         = Common Expression Language (made up of GitHub's OIDC Token assertions)\n    \"attribute.owner\"            = \"assertion.repository_owner\"\n    \"attribute.owner_and_branch\" = \"assertion.repository_owner + \\\"::\\\" + assertion.ref_type + \\\"::\\\" + assertion.ref\",\n    \"google.subject\"             = \"assertion.sub\"\n  }\n\n  oidc {\n    issuer_uri = \"https://token.actions.githubusercontent.com\"\n  }\n}\n\n#File: billing-account.tf\ndata \"google_billing_account\" \"my_billing_account\" {\n  display_name = \"My Billing Account\"\n  open         = true\n}\n\nresource \"google_billing_account_iam_member\" \"automation_billing_perms\" {\n  for_each = toset([\n    \"roles/billing.user\",\n    \"roles/billing.viewer\",\n  ])\n\n  billing_account_id = data.google_billing_account.my_billing_account.id\n  member             = google_service_account.automation.member\n  role               = each.key\n}\n\n#File: harmelodic-organisation.tf\ndata \"google_organization\" \"harmelodic_com\" {\n  domain = \"harmelodic.com\"\n}\n\nresource \"google_organization_iam_member\" \"automation_organisation_perms\" {\n  for_each = toset([\n    \"roles/resourcemanager.folderAdmin\",\n    \"roles/resourcemanager.organizationViewer\",\n    \"roles/resourcemanager.projectCreator\",\n  ])\n\n  member = google_service_account.automation.member\n  org_id = data.google_organization.harmelodic_com.org_id\n  role   = each.key\n}\n\n#File: local.tf\nlocals {\n  location = \"europe-north1\"\n}\n\n#File: provider.tf\nterraform {\n  required_version = \">=1.1.6\"\n\n  required_providers {\n    google = {\n      source  = \"hashicorp/google\"\n      version = \"6.35.0\"\n    }\n    random = {\n      source  = \"hashicorp/random\"\n      version = \"3.7.2\"\n    }\n  }\n}\n\nprovider \"google\" {\n  region = local.location\n}\n"}]}
{"messages": [{"role": "user", "content": "Create local variables for project settings, including project ID, region, zone, and network settings. Configure Google Cloud as the provider by defining the project, region, and zone. Generate a random string for naming resources and create a Google Cloud Storage bucket for logging VPC flow logs. Set up IAM permissions for the logging sink and enable audit logging for all services and AI platform services. Deploy a GKE cluster and an AI application VM within the configured virtual private clouds, ensuring proper networking and service accounts are assigned."}, {"role": "assistant", "content": "\n#File: main.tf\n# -------------------------------------------------------------------------------------\n# Locals\n# -------------------------------------------------------------------------------------\n\nlocals {\n  project_id               = var.gcp_project_id\n  region                   = var.gcp_region\n  zone                     = var.gcp_zone\n  airs_name                = \"airs-${substr(random_string.main.result, 0, 4)}\"\n  ai_vm_image              = \"https://www.googleapis.com/compute/v1/projects/ql-hosting-10131989/global/images/x705972644-ai-app-v2\"\n  openai_api_key           = var.openai_api_key\n  allowed_ips              = var.allowed_ips\n  gce_subnet_name          = \"gce-vpc-${local.region}-subnet\"\n  gce_subnet_cidr          = \"10.1.0.0/24\"\n  gke_subnet_name          = \"gke-vpc-${local.region}-subnet\"\n  gke_subnet_cidr          = \"10.10.0.0/24\"\n  gke_subnet_cidr_cluster  = \"10.20.0.0/16\"\n  gke_subnet_cidr_services = \"10.30.0.0/16\"\n  gke_cluster_name         = \"cluster1\"\n  gke_version              = \"1.28\"\n  gke_secondary_ranges     = flatten(module.vpc_gke[*].subnets_secondary_ranges)\n}\n\n# -------------------------------------------------------------------------------------\n# Provider\n# -------------------------------------------------------------------------------------\n\nterraform {\n\n  required_providers {\n    google = {\n      source = \"hashicorp/google\"\n    }\n  }\n}\n\nprovider \"google\" {\n  project = local.project_id\n  region  = local.region\n  zone    = local.zone\n}\n\n# -------------------------------------------------------------------------------------\n# Create GSC bucket & log router for VPC flow logs\n# -------------------------------------------------------------------------------------\n\nresource \"random_string\" \"main\" {\n  length      = 16\n  min_lower   = 8\n  min_numeric = 8\n  special     = false\n}\n\nresource \"google_storage_bucket\" \"gcs\" {\n  name          = \"flow-logs-${random_string.main.result}\"\n  location      = \"US\"\n  force_destroy = true\n}\n\nresource \"google_logging_project_sink\" \"log_router\" {\n  name                   = \"flow-logs-sink\"\n  destination            = \"storage.googleapis.com/${google_storage_bucket.gcs.name}\"\n  filter                 = \"(logName =~ \\\"logs/cloudaudit.googleapis.com%2Fdata_access\\\" AND protoPayload.methodName:(\\\"google.cloud.aiplatform.\\\")) OR ((logName=\\\"projects/${local.project_id}/logs/compute.googleapis.com%2Fvpc_flows\\\"))\"\n  unique_writer_identity = true\n\n  depends_on = [\n    google_storage_bucket.gcs\n  ]\n}\n\nresource \"google_project_iam_binding\" \"gcs-bucket-writer\" {\n  project = local.project_id\n  role    = \"roles/storage.objectCreator\"\n\n  members = [\n    google_logging_project_sink.log_router.writer_identity\n  ]\n}\n\nresource \"google_project_iam_audit_config\" \"all_services\" {\n  project = local.project_id\n  service = \"allServices\"\n  audit_log_config { log_type = \"ADMIN_READ\" }\n  audit_log_config { log_type = \"DATA_READ\" }\n  audit_log_config { log_type = \"DATA_WRITE\" }\n}\n\n\nresource \"google_project_iam_audit_config\" \"ai_platform\" {\n  project = local.project_id\n  service = \"aiplatform.googleapis.com\"\n  audit_log_config { log_type = \"ADMIN_READ\" }\n  audit_log_config { log_type = \"DATA_READ\" }\n  audit_log_config { log_type = \"DATA_WRITE\" }\n}\n\n\n# -------------------------------------------------------------------------------------\n# Create VPCs\n# -------------------------------------------------------------------------------------\n\nmodule \"vpc_gke\" {\n  source       = \"terraform-google-modules/network/google\"\n  version      = \"~> 4.0\"\n  project_id   = local.project_id\n  network_name = \"gke-vpc\"\n  routing_mode = \"GLOBAL\"\n\n  subnets = [\n    {\n      subnet_name               = local.gke_subnet_name\n      subnet_ip                 = local.gke_subnet_cidr\n      subnet_region             = local.region\n      subnet_flow_logs          = \"true\"\n      subnet_flow_logs_interval = \"INTERVAL_5_SEC\"\n      subnet_flow_logs_sampling = 1.0\n      subnet_flow_logs_metadata = \"INCLUDE_ALL_METADATA\"\n    }\n  ]\n\n  secondary_ranges = {\n    (local.gke_subnet_name) = [\n      {\n        range_name    = \"${local.gke_subnet_name}-cluster\"\n        ip_cidr_range = local.gke_subnet_cidr_cluster\n      },\n      {\n        range_name    = \"${local.gke_subnet_name}-services\"\n        ip_cidr_range = local.gke_subnet_cidr_services\n      }\n    ]\n  }\n\n  firewall_rules = [\n    {\n      name      = \"gke-vpc-ingress-public\"\n      direction = \"INGRESS\"\n      priority  = \"100\"\n      ranges    = local.allowed_ips\n      allow = [\n        {\n          protocol = \"all\"\n          ports    = []\n        }\n      ]\n    },\n    {\n      name      = \"gke-vpc-ingress-rfc\"\n      direction = \"INGRESS\"\n      priority  = \"100\"\n      ranges    = [\"10.0.0.0/8\",\"192.168.0.0/16\",\"172.16.0.0/12\"]\n      allow = [\n        {\n          protocol = \"all\"\n          ports    = []\n        }\n      ]\n    }\n  ]\n  depends_on = [\n    google_storage_bucket.gcs\n  ]\n}\n\n\nmodule \"vpc_gce\" {\n  source       = \"terraform-google-modules/network/google\"\n  version      = \"~> 4.0\"\n  project_id   = local.project_id\n  network_name = \"gce-vpc\"\n  routing_mode = \"GLOBAL\"\n\n  subnets = [\n    {\n      subnet_name               = local.gce_subnet_name\n      subnet_ip                 = local.gce_subnet_cidr\n      subnet_region             = local.region\n      subnet_flow_logs          = \"true\"\n      subnet_flow_logs_interval = \"INTERVAL_5_SEC\"\n      subnet_flow_logs_sampling = 1.0\n      subnet_flow_logs_metadata = \"INCLUDE_ALL_METADATA\"\n      subnet_flow_logs_filter   = \"false\"\n    }\n  ]\n\n  firewall_rules = [\n    {\n      name      = \"gce-vpc-ingress-public\"\n      direction = \"INGRESS\"\n      priority  = \"100\"\n      ranges    = local.allowed_ips\n      allow = [\n        {\n          protocol = \"all\"\n          ports    = []\n        }\n      ]\n    },\n    {\n      name      = \"gce-vpc-ingress-rfc\"\n      direction = \"INGRESS\"\n      priority  = \"100\"\n      ranges    = [\"10.0.0.0/8\",\"192.168.0.0/16\",\"172.16.0.0/12\"]\n      allow = [\n        {\n          protocol = \"all\"\n          ports    = []\n        }\n      ]\n    }\n  ]\n  depends_on = [\n    google_storage_bucket.gcs\n  ]\n}\n\n# -------------------------------------------------------------------------------------\n# Create VMs\n# -------------------------------------------------------------------------------------\n\n# Service account for AI VM.  Needed to reach vertex APIs.\nresource \"google_service_account\" \"ai\" {\n  account_id = \"ai-sa-${random_string.main.result}\"\n  project    = local.project_id\n}\n\n\n# AI Application VM.\nresource \"google_project_iam_member\" \"ai\" {\n  project = local.project_id\n  role    = \"roles/owner\" #\"roles/aiplatform.user\" #\"roles/aiplatform.admin\"\n  member  = \"serviceAccount:${google_service_account.ai.email}\"\n}\n\nresource \"google_compute_instance\" \"ai\" {\n  name         = \"ai-vm\"\n  machine_type = \"e2-standard-4\"\n  zone         = local.zone\n\n  boot_disk {\n    initialize_params {\n      image = local.ai_vm_image\n    }\n  }\n\n  network_interface {\n    subnetwork = module.vpc_gce.subnets_self_links[0]\n    network_ip = cidrhost(local.gce_subnet_cidr, 10)\n    access_config {}\n  }\n\n  service_account {\n    email = google_service_account.ai.email\n    scopes = [\n      \"https://www.googleapis.com/auth/cloud-platform\"\n    ]\n  }\n\n  // Required metadata. The values are used to authenticate to vertex APIs.\n  metadata = {\n    project-id  = local.project_id\n    region      = local.region\n    openai-key  = local.openai_api_key\n    openai-port = \"80\"\n    gemini-port = \"8080\"\n\n  }\n}\n\n\n\n# -------------------------------------------------------------------------------------\n# Create GKE cluster\n# -------------------------------------------------------------------------------------\n\nmodule \"gke\" {\n  source                     = \"terraform-google-modules/kubernetes-engine/google\"\n  version                    = \"~> 28.0\"\n  project_id                 = local.project_id\n  name                       = local.gke_cluster_name\n  regional                   = true\n  region                     = local.region\n  network                    = module.vpc_gke.network_name\n  subnetwork                 = module.vpc_gke.subnets_names[0]\n  ip_range_pods              = local.gke_secondary_ranges[0].range_name\n  ip_range_services          = local.gke_secondary_ranges[1].range_name\n  release_channel            = \"UNSPECIFIED\"\n  kubernetes_version         = local.gke_version\n  create_service_account     = true\n  http_load_balancing        = true\n  network_policy             = true\n  horizontal_pod_autoscaling = false\n\n  node_pools = [\n    {\n      name               = \"default-node-pool\"\n      machine_type       = \"e2-standard-2\"\n      initial_node_count = 1\n      auto_upgrade       = false\n    }\n  ]\n\n  node_pools_oauth_scopes = {\n    all = []\n    default-node-pool = [\n      \"https://www.googleapis.com/auth/cloud-platform\",\n    ]\n  }\n  depends_on = [\n    module.vpc_gke\n  ]\n}\n\ndata \"google_container_cluster\" \"gke\" {\n  name     = module.gke.name\n  location = local.region\n}\n\n#File: outputs.tf\n# -------------------------------------------------------------------------------------\n# Outputs\n# -------------------------------------------------------------------------------------\noutput \"flow_logs_bucket\" {\n  value = google_storage_bucket.gcs.name\n}\n\noutput \"gemini_app_url\" {\n  value = \"http://${google_compute_instance.ai.network_interface[0].access_config[0].nat_ip}:8080\"\n}\n\noutput \"openai_app_url\" {\n  value = \"http://${google_compute_instance.ai.network_interface[0].access_config[0].nat_ip}:80\"\n}\n\noutput \"SET_ENV_VARS\" {\n  value = <<EOF\nexport CLUSTER_NAME=${module.gke.name}\nexport PROJECT_ID=${local.project_id}\nexport REGION=${local.region}\nexport ZONE=${google_compute_instance.ai.zone}\nEOF\n}\n\n#File: variables.tf\n# -------------------------------------------------------------------------------------\n# Required variables\n# -------------------------------------------------------------------------------------\n\nvariable \"gcp_project_id\" {\n  description = \"GCP Project ID\"\n  type        = string\n}\n\nvariable \"gcp_region\" {\n  description = \"GCP Region\"\n  type        = string\n}\n\nvariable \"gcp_zone\" {\n  default = null\n  description = \"GCP zone with GCP Region\"\n  type = string\n\n}\n\nvariable \"openai_api_key\" {\n  description = \"Your OpenAI API key.\"\n  type        = string\n}\n\nvariable \"allowed_ips\" {\n  description = \"A list of IP addresses allowed to access the public IPs of the workloads.\"\n  type        = list(string)\n}"}]}
{"messages": [{"role":"user","content":"Create a configuration that creates an AWS Global Accelerator with custom routing, including optional creation of listeners and endpoint groups based on input variables. It should supports flow logs configuration, tagging, and flexible timeout settings for resource operations. The setup allows defining multiple listeners with port ranges and nested endpoint groups that specify destination and endpoint configurations, enabling fine-grained traffic routing control."},{"role":"assistant","content":"################################################################################\r\n# Custom Routing Accelerator\r\n################################################################################\r\n\r\nresource \"aws_globalaccelerator_custom_routing_accelerator\" \"this\" {\r\n  count = var.create ? 1 : 0\r\n\r\n  name            = var.name\r\n  ip_address_type = var.ip_address_type\r\n  ip_addresses    = var.ip_addresses\r\n  enabled         = var.enabled\r\n\r\n  dynamic \"attributes\" {\r\n    for_each = var.flow_logs_enabled ? [1] : []\r\n    content {\r\n      flow_logs_enabled   = var.flow_logs_enabled\r\n      flow_logs_s3_bucket = var.flow_logs_s3_bucket\r\n      flow_logs_s3_prefix = var.flow_logs_s3_prefix\r\n    }\r\n  }\r\n\r\n  tags = var.tags\r\n}\r\n\r\n################################################################################\r\n# Custom Routing Listener(s)\r\n################################################################################\r\n\r\nresource \"aws_globalaccelerator_custom_routing_listener\" \"this\" {\r\n  for_each = { for k, v in var.listeners : k => v if var.create && var.create_listeners }\r\n\r\n  accelerator_arn = aws_globalaccelerator_custom_routing_accelerator.this[0].id\r\n\r\n  dynamic \"port_range\" {\r\n    for_each = try(each.value.port_ranges, null) != null ? each.value.port_ranges : []\r\n    content {\r\n      from_port = try(port_range.value.from_port, null)\r\n      to_port   = try(port_range.value.to_port, null)\r\n    }\r\n  }\r\n\r\n  timeouts {\r\n    create = try(var.listeners_timeouts.create, null)\r\n    update = try(var.listeners_timeouts.update, null)\r\n    delete = try(var.listeners_timeouts.delete, null)\r\n  }\r\n}\r\n\r\n################################################################################\r\n# Custom Routing Endpoint Group(s)\r\n################################################################################\r\nlocals {\r\n  endpoint_groups = flatten([\r\n    for listener, listener_configs in var.listeners : [\r\n      for endpoint_group, endpoint_group_configs in listener_configs.endpoint_groups : {\r\n        listener               = listener\r\n        endpoint_group         = endpoint_group\r\n        endpoint_group_configs = endpoint_group_configs\r\n      }\r\n    ] if length(lookup(listener_configs, \"endpoint_groups\", {})) > 0\r\n  ])\r\n}\r\n\r\nresource \"aws_globalaccelerator_custom_routing_endpoint_group\" \"this\" {\r\n  for_each = { for k, v in local.endpoint_groups : \"${v.listener}:${v.endpoint_group}\" => v if var.create && var.create_listeners }\r\n\r\n  listener_arn          = aws_globalaccelerator_custom_routing_listener.this[each.value.listener].id\r\n  endpoint_group_region = try(each.value.endpoint_group_configs.endpoint_group_region, null)\r\n\r\n  dynamic \"destination_configuration\" {\r\n    for_each = [for e in try(each.value.endpoint_group_configs.destination_configuration, []) : e]\r\n    content {\r\n      from_port = destination_configuration.value.from_port\r\n      protocols = destination_configuration.value.protocols\r\n      to_port   = destination_configuration.value.to_port\r\n    }\r\n  }\r\n\r\n  dynamic \"endpoint_configuration\" {\r\n    for_each = [for e in try(each.value.endpoint_group_configs.endpoint_configuration, []) : e if can(e.endpoint_id)]\r\n    content {\r\n      endpoint_id = endpoint_configuration.value.endpoint_id\r\n    }\r\n  }\r\n\r\n  timeouts {\r\n    create = try(var.endpoint_groups_timeouts.create, null)\r\n    delete = try(var.endpoint_groups_timeouts.delete, null)\r\n  }\r\n}\r\n\r\nvariable \"create\" {\r\n  description = \"Controls if resources should be created (affects nearly all resources)\"\r\n  type        = bool\r\n  default     = true\r\n}\r\n\r\nvariable \"tags\" {\r\n  description = \"A map of tags to add to all resources\"\r\n  type        = map(string)\r\n  default     = {}\r\n}\r\n\r\n################################################################################\r\n# Custom Routing Accelerator\r\n################################################################################\r\n\r\nvariable \"name\" {\r\n  description = \"The name of the accelerator\"\r\n  type        = string\r\n  default     = \"\"\r\n}\r\n\r\nvariable \"ip_address_type\" {\r\n  description = \"The value for the address type. Defaults to `IPV4`. Valid values: `IPV4`, `DUAL_STACK`\"\r\n  type        = string\r\n  default     = \"IPV4\"\r\n}\r\n\r\nvariable \"ip_addresses\" {\r\n  description = \"The IP addresses to use for BYOIP accelerators. If not specified, the service assigns IP addresses. Valid values: 1 or 2 IPv4 addresses\"\r\n  type        = list(string)\r\n  default     = []\r\n}\r\n\r\nvariable \"enabled\" {\r\n  description = \"Indicates whether the accelerator is enabled. Defaults to `true`. Valid values: `true`, `false`\"\r\n  type        = bool\r\n  default     = true\r\n}\r\n\r\nvariable \"flow_logs_enabled\" {\r\n  description = \"Indicates whether flow logs are enabled. Defaults to `false`\"\r\n  type        = bool\r\n  default     = false\r\n}\r\n\r\nvariable \"flow_logs_s3_bucket\" {\r\n  description = \"The name of the Amazon S3 bucket for the flow logs. Required if `flow_logs_enabled` is `true`\"\r\n  type        = string\r\n  default     = null\r\n}\r\n\r\nvariable \"flow_logs_s3_prefix\" {\r\n  description = \"The prefix for the location in the Amazon S3 bucket for the flow logs. Required if `flow_logs_enabled` is `true`\"\r\n  type        = string\r\n  default     = null\r\n}\r\n\r\n################################################################################\r\n# Custom Routing Listener(s)\r\n################################################################################\r\n\r\nvariable \"create_listeners\" {\r\n  description = \"Controls if listeners should be created (affects only listeners)\"\r\n  type        = bool\r\n  default     = true\r\n}\r\n\r\nvariable \"listeners\" {\r\n  description = \"A map of listener defintions to create\"\r\n  type        = any\r\n  default     = {}\r\n}\r\n\r\nvariable \"listeners_timeouts\" {\r\n  description = \"Create, update, and delete timeout configurations for the listeners\"\r\n  type        = map(string)\r\n  default     = {}\r\n}\r\n\r\n################################################################################\r\n# Custom Routing Endpoint Group(s)\r\n################################################################################\r\n\r\n# Endpoint groups are nested with the listener definition\r\n\r\nvariable \"endpoint_groups_timeouts\" {\r\n  description = \"Create, update, and delete timeout configurations for the endpoint groups\"\r\n  type        = map(string)\r\n  default     = {}\r\n}\r\n"}]}
{"messages": [{"role":"user","content":"Define multiple ingress and egress security group rules for an AWS security group, specifically tailored for a Docker Swarm cluster. Open common Swarm communication ports (such as 2376, 2377, 7946, 4789), as well as additional ports like 3000 and 49153 for application traffic. All rules allow unrestricted access (0.0.0.0/0), which works functionally but should be tightened for security in production environments."},{"role":"assistant","content":"resource \"aws_security_group_rule\" \"swarm_sgr_1\" {\r\n  security_group_id = var.security_group_id\r\n\r\n  type        = \"ingress\"\r\n  from_port   = 0\r\n  to_port     = 2376\r\n  protocol    = \"tcp\"\r\n  cidr_blocks = [\"0.0.0.0/0\"]\r\n  \r\n}\r\n\r\nvariable \"security_group_id\" {}\r\nvariable \"tag\" {\r\n  type = string\r\n}\r\n\r\nresource \"aws_security_group_rule\" \"swarm_sgr_2\" {\r\n  security_group_id = var.security_group_id\r\n\r\n  type        = \"ingress\"\r\n  from_port   = 0\r\n  to_port     = 2377\r\n  protocol    = \"tcp\"\r\n  cidr_blocks = [\"0.0.0.0/0\"]\r\n  \r\n}\r\n\r\nresource \"aws_security_group_rule\" \"swarm_sgr_3\" {\r\n  security_group_id = var.security_group_id\r\n\r\n  type        = \"ingress\"\r\n  from_port   = 0\r\n  to_port     = 7946\r\n  protocol    = \"tcp\"\r\n  cidr_blocks = [\"0.0.0.0/0\"]\r\n  \r\n}\r\n\r\nresource \"aws_security_group_rule\" \"swarm_sgr_4\" {\r\n  security_group_id = var.security_group_id\r\n\r\n  type        = \"ingress\"\r\n  from_port   = 0\r\n  to_port     = 7946\r\n  protocol    = \"udp\"\r\n  cidr_blocks = [\"0.0.0.0/0\"]\r\n  \r\n}\r\n\r\nresource \"aws_security_group_rule\" \"swarm_sgr_5\" {\r\n  security_group_id = var.security_group_id\r\n\r\n  type        = \"ingress\"\r\n  from_port   = 0\r\n  to_port     = 4789\r\n  protocol    = \"tcp\"\r\n  cidr_blocks = [\"0.0.0.0/0\"]\r\n  \r\n}\r\n\r\nresource \"aws_security_group_rule\" \"swarm_sgr_6\" {\r\n  security_group_id = var.security_group_id\r\n\r\n  type        = \"ingress\"\r\n  from_port   = 0\r\n  to_port     = 4789\r\n  protocol    = \"udp\"\r\n  cidr_blocks = [\"0.0.0.0/0\"]\r\n  \r\n}\r\n\r\nresource \"aws_security_group_rule\" \"swarm_sgr_7\" {\r\n  security_group_id = var.security_group_id\r\n\r\n  type        = \"egress\"\r\n  from_port   = 0\r\n  to_port     = 2376\r\n  protocol    = \"tcp\"\r\n  cidr_blocks = [\"0.0.0.0/0\"]\r\n  \r\n}\r\n\r\nresource \"aws_security_group_rule\" \"swarm_sgr_8\" {\r\n  security_group_id = var.security_group_id\r\n\r\n  type        = \"egress\"\r\n  from_port   = 0\r\n  to_port     = 2377\r\n  protocol    = \"tcp\"\r\n  cidr_blocks = [\"0.0.0.0/0\"]\r\n  \r\n}\r\n\r\nresource \"aws_security_group_rule\" \"swarm_sgr_9\" {\r\n  security_group_id = var.security_group_id\r\n\r\n  type        = \"egress\"\r\n  from_port   = 0\r\n  to_port     = 7946\r\n  protocol    = \"tcp\"\r\n  cidr_blocks = [\"0.0.0.0/0\"]\r\n  \r\n}\r\n\r\nresource \"aws_security_group_rule\" \"swarm_sgr_10\" {\r\n  security_group_id = var.security_group_id\r\n\r\n  type        = \"egress\"\r\n  from_port   = 0\r\n  to_port     = 7946\r\n  protocol    = \"udp\"\r\n  cidr_blocks = [\"0.0.0.0/0\"]\r\n\r\n}\r\n\r\nresource \"aws_security_group_rule\" \"swarm_sgr_11\" {\r\n  security_group_id = var.security_group_id\r\n\r\n  type        = \"egress\"\r\n  from_port   = 0\r\n  to_port     = 4789\r\n  protocol    = \"tcp\"\r\n  cidr_blocks = [\"0.0.0.0/0\"]\r\n\r\n}\r\n\r\nresource \"aws_security_group_rule\" \"swarm_sgr_12\" {\r\n  security_group_id = var.security_group_id\r\n\r\n  type        = \"egress\"\r\n  from_port   = 0\r\n  to_port     = 4789\r\n  protocol    = \"udp\"\r\n  cidr_blocks = [\"0.0.0.0/0\"]\r\n\r\n}\r\n\r\nresource \"aws_security_group_rule\" \"swarm_sgr_13\" {\r\n  security_group_id = var.security_group_id\r\n\r\n  type        = \"ingress\"\r\n  from_port   = 0\r\n  to_port     = 49153\r\n  protocol    = \"tcp\"\r\n  cidr_blocks = [\"0.0.0.0/0\"]\r\n\r\n}\r\n\r\nresource \"aws_security_group_rule\" \"swarm_sgr_14\" {\r\n  security_group_id = var.security_group_id\r\n\r\n  type        = \"egress\"\r\n  from_port   = 0\r\n  to_port     = 49153\r\n  protocol    = \"tcp\"\r\n  cidr_blocks = [\"0.0.0.0/0\"]\r\n\r\n}\r\n\r\nresource \"aws_security_group_rule\" \"swarm_sgr_15\" {\r\n  security_group_id = var.security_group_id\r\n\r\n  type        = \"ingress\"\r\n  from_port   = 0\r\n  to_port     = 3000\r\n  protocol    = \"tcp\"\r\n  cidr_blocks = [\"0.0.0.0/0\"]\r\n\r\n}\r\n\r\n"}]}
{"messages": [{"role": "user", "content": "Create a variable for the instance name, a public SSH key file, and a private SSH key file in the `variables.tf` file. Specify outputs for the instance name, public SSH key, and private key file in the `outputs.tf` file. Use the `file()` function to read the contents of the specified SSH public and private key files. Ensure that all variables are properly defined and utilized in your Terraform configuration. Finally, validate the configuration to confirm all outputs are correctly set up."}, {"role": "assistant", "content": "\n#File: main.tf\n\n#File: outputs.tf\noutput \"name\" {\n  value = var.name\n}\n\noutput \"ssh_public_key_file\" {\n  value = var.ssh_public_key_file\n}\n\noutput \"ssh_public_key\" {\n  value = \"${file(var.ssh_public_key_file)}\"\n}\n\noutput \"ssh_private_key_file\" {\n  value = var.ssh_private_key_file\n}\n\noutput \"ssh_private_key\" {\n  value = \"${file(var.ssh_private_key_file)}\"\n}\n\n#File: variables.tf\nvariable \"name\" {\n  type = string\n}\n\nvariable \"ssh_public_key_file\" {\n  type = string\n}\n\nvariable \"ssh_private_key_file\" {\n  type = string\n}\n"}]}
{"messages": [{"role": "user", "content": "Create a local backend for your Terraform configuration in the `backend.tf` file. Define a network security group with inbound rules for SSH and ICMP and an outbound rule in the `main.tf` file. Set up a network interface associated with the created network security group, configuring the IP settings and DNS servers. Deploy multiple workload virtual machines using the specified image and instance size, ensuring they utilize the created network interfaces. Output the private IP addresses and the admin username for the deployed VMs in the `outputs.tf` file."}, {"role": "assistant", "content": "\n#File: backend.tf\nterraform {\n  backend \"local\" {\n    path = \"../terraform.tfstate\"\n  }\n}\n\n#File: main.tf\n################################################################################\n# Create NSG and Rules for worload VMs\n################################################################################\nresource \"azurerm_network_security_group\" \"workload_nsg\" {\n  count               = var.workload_count\n  name                = \"${var.name_prefix}-workload-${count.index + 1}-nsg-${var.resource_tag}\"\n  location            = var.location\n  resource_group_name = var.resource_group\n\n  security_rule {\n    name                       = \"SSH_VNET\"\n    priority                   = 4000\n    direction                  = \"Inbound\"\n    access                     = \"Allow\"\n    protocol                   = \"Tcp\"\n    source_port_range          = \"*\"\n    destination_port_range     = \"22\"\n    source_address_prefix      = \"VirtualNetwork\"\n    destination_address_prefix = \"*\"\n  }\n\n  security_rule {\n    name                       = \"ICMP_VNET\"\n    priority                   = 4001\n    direction                  = \"Inbound\"\n    access                     = \"Allow\"\n    protocol                   = \"Icmp\"\n    source_port_range          = \"*\"\n    destination_port_range     = \"*\"\n    source_address_prefix      = \"VirtualNetwork\"\n    destination_address_prefix = \"*\"\n  }\n\n  security_rule {\n    name                       = \"OUTBOUND\"\n    priority                   = 4000\n    direction                  = \"Outbound\"\n    access                     = \"Allow\"\n    protocol                   = \"*\"\n    source_port_range          = \"*\"\n    destination_port_range     = \"*\"\n    source_address_prefix      = \"*\"\n    destination_address_prefix = \"*\"\n  }\n\n  tags = var.global_tags\n}\n\n\n################################################################################\n# Create Network Interface and association NSG\n################################################################################\nresource \"azurerm_network_interface\" \"workload_nic\" {\n  count               = var.workload_count\n  name                = \"${var.name_prefix}-workload-${count.index + 1}-nic-${var.resource_tag}\"\n  location            = var.location\n  resource_group_name = var.resource_group\n\n  ip_configuration {\n    name                          = \"${var.name_prefix}-workload-${count.index + 1}-nic-conf-${var.resource_tag}\"\n    subnet_id                     = var.subnet_id\n    private_ip_address_allocation = \"Dynamic\"\n  }\n\n  dns_servers = var.dns_servers\n\n  tags = var.global_tags\n}\n\nresource \"azurerm_network_interface_security_group_association\" \"workload_nic_association\" {\n  count                     = var.workload_count\n  network_interface_id      = azurerm_network_interface.workload_nic[count.index].id\n  network_security_group_id = azurerm_network_security_group.workload_nsg[count.index].id\n}\n\n\n################################################################################\n# Create Workload VMs\n################################################################################\nresource \"azurerm_linux_virtual_machine\" \"workload_vm\" {\n  count               = var.workload_count\n  name                = \"${var.name_prefix}-workload-vm-${count.index + 1}-${var.resource_tag}\"\n  location            = var.location\n  resource_group_name = var.resource_group\n\n  network_interface_ids = [azurerm_network_interface.workload_nic[count.index].id]\n  size                  = local.instance_size_selection\n  admin_username        = var.server_admin_username\n  computer_name         = \"${var.name_prefix}-workload-${count.index + 1}-${var.resource_tag}\"\n  admin_ssh_key {\n    username   = var.server_admin_username\n    public_key = \"${trimspace(var.ssh_key)} ${var.server_admin_username}@me.io\"\n  }\n\n  os_disk {\n    caching              = \"ReadWrite\"\n    storage_account_type = contains(local.unsupported_regions, lower(var.location)) ? \"Standard_LRS\" : \"Premium_LRS\"\n  }\n\n  source_image_reference {\n    publisher = var.instance_image_publisher\n    offer     = var.instance_image_offer\n    sku       = var.instance_image_sku\n    version   = var.instance_image_version\n  }\n\n  tags = var.global_tags\n\n  depends_on = [\n    azurerm_network_interface.workload_nic,\n    azurerm_network_interface_security_group_association.workload_nic_association\n  ]\n}\n\n#File: outputs.tf\noutput \"private_ip\" {\n  description = \"Instance Private IP Address\"\n  value       = azurerm_network_interface.workload_nic[*].private_ip_address\n}\noutput \"admin_username\" {\n  description = \"Instance Admin Username\"\n  value       = azurerm_linux_virtual_machine.workload_vm[0].admin_username\n}\n\n#File: variables.tf\nvariable \"name_prefix\" {\n  type        = string\n  description = \"A prefix to associate to all the workload module resources\"\n  default     = null\n}\n\nvariable \"resource_tag\" {\n  type        = string\n  description = \"A tag to associate to all the workload module resources\"\n  default     = null\n}\n\nvariable \"global_tags\" {\n  type        = map(string)\n  description = \"Populate any custom user defined tags from a map\"\n  default     = {}\n}\n\nvariable \"resource_group\" {\n  type        = string\n  description = \"Main Resource Group Name\"\n}\n\nvariable \"location\" {\n  type        = string\n  description = \"Cloud Connector Azure Region\"\n}\n\nvariable \"subnet_id\" {\n  type        = string\n  description = \"The id of subnet where the workload host has to be attached\"\n}\n\nvariable \"server_admin_username\" {\n  type        = string\n  description = \"Username configured for the workload root/admin account\"\n  default     = \"almalinux\"\n}\n\nvariable \"ssh_key\" {\n  type        = string\n  description = \"SSH Key for instances\"\n}\n\nvariable \"instance_size\" {\n  type        = string\n  description = \"The Azure image type/size\"\n  default     = \"Standard_B1s\"\n}\n\nlocals {\n  unsupported_regions          = [\"chinanorth\", \"chinaeast\", \"china east\", \"china north\", \"usgovirginia\"]\n  custom_size_standard_a3      = contains([\"chinanorth\", \"chinaeast\", \"china east\", \"china north\"], var.location) ? \"Standard_A3\" : \"\"\n  custom_size_standard_b2as_v2 = contains([\"usgovvirginia\"], var.location) ? \"Standard_DS1_v2\" : \"\"\n  instance_size_selection      = coalesce(local.custom_size_standard_a3, local.custom_size_standard_b2as_v2, var.instance_size)\n}\n\nvariable \"instance_image_publisher\" {\n  type        = string\n  description = \"The workload image publisher\"\n  default     = \"almalinux\"\n}\n\nvariable \"instance_image_offer\" {\n  type        = string\n  description = \"The workload image offer\"\n  default     = \"almalinux-x86_64\"\n}\n\nvariable \"instance_image_sku\" {\n  type        = string\n  description = \"The workload image sku\"\n  default     = \"9-gen1\"\n}\n\nvariable \"instance_image_version\" {\n  type        = string\n  description = \"The workload image version\"\n  default     = \"latest\"\n}\n\nvariable \"workload_count\" {\n  type        = number\n  description = \"The number of Workload VMs to deploy\"\n  default     = 1\n  validation {\n    condition     = var.workload_count >= 1 && var.workload_count <= 250\n    error_message = \"Input workload_count must be a whole number between 1 and 250.\"\n  }\n}\n\n# If no values specified, this defaults to Azure DNS \nvariable \"dns_servers\" {\n  type        = list(string)\n  description = \"The DNS servers configured for workload VMs.\"\n  default     = []\n}\n\n#File: versions.tf\nterraform {\n  required_providers {\n    azurerm = {\n      source  = \"hashicorp/azurerm\"\n      version = \">= 3.108.0, <= 3.116\"\n    }\n    local = {\n      source  = \"hashicorp/local\"\n      version = \"~> 2.5.0\"\n    }\n  }\n  required_version = \">= 0.13.7, < 2.0.0\"\n}\n"}]}
{"messages": [{"role": "user", "content": "Create a random pet name for the resource group using the `random_pet` function. Establish an Azure resource group using the generated name and specified location. Set up a virtual network with an address space of `10.0.0.0/16` in the created resource group. Create a subnet within the virtual network and a dynamic public IP for network access. Finally, provision a Linux virtual machine using the defined network interface and security group to ensure proper access controls."}, {"role": "assistant", "content": "\n#File: main.tf\n# Using terraform rondom_pet function to Create a rondom pet name for the resource group\nresource \"random_pet\" \"rg_name\" {\n  prefix = var.resource_group_name_prefix\n}\n\n# Create resource group\nresource \"azurerm_resource_group\" \"rg\" {\n  location = var.resource_group_location\n  name     = random_pet.rg_name.id\n}\n\n# Create virtual network\nresource \"azurerm_virtual_network\" \"my_terraform_network\" {\n  name                = \"myVnet\"\n  address_space       = [\"10.0.0.0/16\"]\n  location            = azurerm_resource_group.rg.location\n  resource_group_name = azurerm_resource_group.rg.name\n}\n\n# Create subnet\nresource \"azurerm_subnet\" \"my_terraform_subnet\" {\n  name                 = \"mySubnet\"\n  resource_group_name  = azurerm_resource_group.rg.name\n  virtual_network_name = azurerm_virtual_network.my_terraform_network.name\n  address_prefixes     = [\"10.0.1.0/24\"]\n}\n\n# Create public IPs\nresource \"azurerm_public_ip\" \"my_terraform_public_ip\" {\n  name                = \"myPublicIP\"\n  location            = azurerm_resource_group.rg.location\n  resource_group_name = azurerm_resource_group.rg.name\n  allocation_method   = \"Dynamic\"\n}\n\n# Create Network Security Group and rule\nresource \"azurerm_network_security_group\" \"my_terraform_nsg\" {\n  name                = \"myNetworkSecurityGroup\"\n  location            = azurerm_resource_group.rg.location\n  resource_group_name = azurerm_resource_group.rg.name\n\n  security_rule {\n    name                       = \"SSH\"\n    priority                   = 1001\n    direction                  = \"Inbound\"\n    access                     = \"Allow\"\n    protocol                   = \"Tcp\"\n    source_port_range          = \"*\"\n    destination_port_range     = \"22\"\n    source_address_prefix      = \"*\"\n    destination_address_prefix = \"*\"\n  }\n}\n\n# Create network interface\nresource \"azurerm_network_interface\" \"my_terraform_nic\" {\n  name                = \"myNIC\"\n  location            = azurerm_resource_group.rg.location\n  resource_group_name = azurerm_resource_group.rg.name\n\n  ip_configuration {\n    name                          = \"my_nic_configuration\"\n    subnet_id                     = azurerm_subnet.my_terraform_subnet.id\n    private_ip_address_allocation = \"Dynamic\"\n    public_ip_address_id          = azurerm_public_ip.my_terraform_public_ip.id\n  }\n}\n\n# Connect the security group to the network interface\nresource \"azurerm_network_interface_security_group_association\" \"example\" {\n  network_interface_id      = azurerm_network_interface.my_terraform_nic.id\n  network_security_group_id = azurerm_network_security_group.my_terraform_nsg.id\n}\n\n# Generate random text for a unique storage account name\nresource \"random_id\" \"random_id\" {\n  keepers = {\n    # Generate a new ID only when a new resource group is defined\n    resource_group = azurerm_resource_group.rg.name\n  }\n\n  byte_length = 8\n}\n\n# Create storage account for boot diagnostics\nresource \"azurerm_storage_account\" \"my_storage_account\" {\n  name                     = \"diag${random_id.random_id.hex}\"\n  location                 = azurerm_resource_group.rg.location\n  resource_group_name      = azurerm_resource_group.rg.name\n  account_tier             = \"Standard\"\n  account_replication_type = \"LRS\"\n}\n\n# Create (and display) an SSH key\nresource \"tls_private_key\" \"example_ssh\" {\n  algorithm = \"RSA\"\n  rsa_bits  = 4096\n}\n\n# Create virtual machine\nresource \"azurerm_linux_virtual_machine\" \"my_terraform_vm\" {\n  name                  = \"myVM\"\n  location              = azurerm_resource_group.rg.location\n  resource_group_name   = azurerm_resource_group.rg.name\n  network_interface_ids = [azurerm_network_interface.my_terraform_nic.id]\n  size                  = \"Standard_DS1_v2\"\n\n  os_disk {\n    name                 = \"myOsDisk\"\n    caching              = \"ReadWrite\"\n    storage_account_type = \"Premium_LRS\"\n  }\n\n  source_image_reference {\n    publisher = \"Canonical\"\n    offer     = \"UbuntuServer\"\n    sku       = \"18.04-LTS\"\n    version   = \"latest\"\n  }\n\n  computer_name                   = \"myvm\"\n  admin_username                  = \"azureuser\"\n  disable_password_authentication = true\n\n  admin_ssh_key {\n    username   = \"azureuser\"\n    public_key = tls_private_key.example_ssh.public_key_openssh\n  }\n\n  boot_diagnostics {\n    storage_account_uri = azurerm_storage_account.my_storage_account.primary_blob_endpoint\n  }\n}\n#File: outputs.tf\n# outputs the resource group name\noutput \"resource_group_name\" {\n  value = azurerm_resource_group.rg.name\n}\n\n# outputs public IP address\noutput \"public_ip_address\" {\n  value = azurerm_linux_virtual_machine.my_terraform_vm.public_ip_address\n}\n\n# outputs the tls_private_key\noutput \"tls_private_key\" {\n  value     = tls_private_key.example_ssh.private_key_pem\n  sensitive = true\n}\n#File: providers.tf\n# provider information\nterraform {\n  required_version = \">=0.12\"\n\n  required_providers {\n    azurerm = {\n      source  = \"hashicorp/azurerm\"\n      version = \"~>2.0\"\n    }\n    random = {\n      source  = \"hashicorp/random\"\n      version = \"~>3.0\"\n    }\n    tls = {\n      source = \"hashicorp/tls\"\n      version = \"~>4.0\"\n    }\n  }\n}\n\nprovider \"azurerm\" {\n  features {}\n}\n#File: variables.tf\n# variable for the resource group location\nvariable \"resource_group_location\" {\n  default     = \"eastus\"\n  description = \"Location of the resource group.\"\n}\n\n# variable for the resource group name prefix\nvariable \"resource_group_name_prefix\" {\n  default     = \"rg\"\n  description = \"Prefix of the resource group name that's combined with a random ID so name is unique in your Azure subscription.\"\n}"}]}
{"messages": [{"role": "user", "content": "Create a random pet name for the resource group. Create an Azure Resource Group with the generated name and a test tag. Create a virtual network named \"myVnet\" within the resource group. Create a subnet named \"mySubnet\" inside the virtual network and allocate the address space. Create a public IP, a network security group with an SSH rule, and a network interface, then associate the network interface with the security group. Finally, create a storage account and a virtual machine based on a custom image, using SSH for authentication."}, {"role": "assistant", "content": "\n#File: main.tf\n\nresource \"random_pet\" \"rg_name\" {\n  prefix = var.resource_group_name_prefix\n}\n\nresource \"azurerm_resource_group\" \"rg\" {\n  location = var.resource_group_location\n  name     = random_pet.rg_name.id\n  tags = {\n    \"env\" = \"test\"\n  }\n}\n\n# Create virtual network\nresource \"azurerm_virtual_network\" \"my_terraform_network\" {\n  name                = \"myVnet\"\n  address_space       = [\"10.0.0.0/16\"]\n  location            = azurerm_resource_group.rg.location\n  resource_group_name = azurerm_resource_group.rg.name\n  tags = {\n    \"env\" = \"test\"\n  }\n}\n\n# Create subnet\nresource \"azurerm_subnet\" \"my_terraform_subnet\" {\n  name                 = \"mySubnet\"\n  resource_group_name  = azurerm_resource_group.rg.name\n  virtual_network_name = azurerm_virtual_network.my_terraform_network.name\n  address_prefixes     = [\"10.0.1.0/24\"]\n}\n\n# Create public IPs\nresource \"azurerm_public_ip\" \"my_terraform_public_ip\" {\n  name                = \"myPublicIP\"\n  location            = azurerm_resource_group.rg.location\n  resource_group_name = azurerm_resource_group.rg.name\n  allocation_method   = \"Dynamic\"\n  tags = {\n    \"env\" = \"test\"\n  }\n}\n\n# Create Network Security Group and rule\nresource \"azurerm_network_security_group\" \"my_terraform_nsg\" {\n  name                = \"myNetworkSecurityGroup\"\n  location            = azurerm_resource_group.rg.location\n  resource_group_name = azurerm_resource_group.rg.name\n\n  security_rule {\n    name                       = \"SSH\"\n    priority                   = 1001\n    direction                  = \"Inbound\"\n    access                     = \"Allow\"\n    protocol                   = \"Tcp\"\n    source_port_range          = \"*\"\n    destination_port_range     = \"22\"\n    source_address_prefix      = \"*\"\n    destination_address_prefix = \"*\"\n  }\n  tags = {\n    \"env\" = \"test\"\n  }\n}\n\n# Create network interface\nresource \"azurerm_network_interface\" \"my_terraform_nic\" {\n  name                = \"myNIC\"\n  location            = azurerm_resource_group.rg.location\n  resource_group_name = azurerm_resource_group.rg.name\n  tags = {\n    \"env\" = \"test\"\n  }\n\n  ip_configuration {\n    name                          = \"my_nic_configuration\"\n    subnet_id                     = azurerm_subnet.my_terraform_subnet.id\n    private_ip_address_allocation = \"Dynamic\"\n    public_ip_address_id          = azurerm_public_ip.my_terraform_public_ip.id\n  }\n}\n\n# Connect the security group to the network interface\nresource \"azurerm_network_interface_security_group_association\" \"example\" {\n  network_interface_id      = azurerm_network_interface.my_terraform_nic.id\n  network_security_group_id = azurerm_network_security_group.my_terraform_nsg.id\n\n}\n\n# Generate random text for a unique storage account name\nresource \"random_id\" \"random_id\" {\n  keepers = {\n    # Generate a new ID only when a new resource group is defined\n    resource_group = azurerm_resource_group.rg.name\n  }\n\n  byte_length = 8\n}\n\n# Create storage account for boot diagnostics\nresource \"azurerm_storage_account\" \"my_storage_account\" {\n  name                     = \"diag${random_id.random_id.hex}\"\n  location                 = azurerm_resource_group.rg.location\n  resource_group_name      = azurerm_resource_group.rg.name\n  account_tier             = \"Standard\"\n  account_replication_type = \"LRS\"\n  tags = {\n    \"env\" = \"test\"\n  }\n}\n\n# Points to Packer build image \ndata \"azurerm_image\" \"packer_image\" {\n  name_regex                = \"mycustom-ubuntu-image*\"\n  resource_group_name = \"bear\"\n}\n\n\n\n# Create a new Virtual Machine based on the custom Image\nresource \"azurerm_virtual_machine\" \"customVM\" {\n  name                             = \"customVM\"\n  location                         = azurerm_resource_group.rg.location\n  resource_group_name              = azurerm_resource_group.rg.name\n  network_interface_ids            = [azurerm_network_interface.my_terraform_nic.id]\n  vm_size                          = \"Standard_DS12_v2\"\n  delete_os_disk_on_termination    = true\n  delete_data_disks_on_termination = true\n \n  storage_image_reference {\n    id = data.azurerm_image.packer_image.id\n  }\n\n  storage_os_disk {\n    name              = \"customVM-OS\"\n    caching           = \"ReadWrite\"\n    create_option     = \"FromImage\"\n    managed_disk_type = \"Standard_LRS\"\n}\n\n  #use ssh auhentification for production envirement \n  os_profile {\n    computer_name  = \"APPVM\"\n    admin_username = \"devopsadmin\"\n    admin_password = \"Cssladmin#2019\"\n  }\n\n  os_profile_linux_config {\n    disable_password_authentication = false\n  }\n\n  \n  tags = {\n    environment = \"Production\"\n  }\n}\n#File: outputs.tf\noutput \"packer_image\" {\n  value = data.azurerm_image.packer_image\n}\n\noutput \"resource_group_name\" {\n  value = azurerm_resource_group.rg.name\n}\n\n#File: providers.tf\nterraform {\n  required_version = \">=0.12\"\n\n  required_providers {\n    azurerm = {\n      source  = \"hashicorp/azurerm\"\n      version = \"~>2.0\"\n    }\n    random = {\n      source  = \"hashicorp/random\"\n      version = \"~>3.0\"\n    }\n    tls = {\n      source  = \"hashicorp/tls\"\n      version = \"~>4.0\"\n    }\n  }\n}\n\nprovider \"azurerm\" {\n  features {}\n}\n#File: variables.tf\nvariable \"resource_group_location\" {\n  default     = \"francecentral\"\n  description = \"Location of the resource group.\"\n}\n\nvariable \"resource_group_name_prefix\" {\n  default     = \"rg\"\n  description = \"Prefix of the resource group name that's combined with a random ID so name is unique in your Azure subscription.\"\n}"}]}
{"messages": [{"role":"user","content":"Create two AWS Secrets Manager secrets—one for Google Workspace credentials and one for related settings—used to integrate with 1Password SCIM Bridge. It conditionally sets secret values based on the enabled flag and encodes them in base64 for secure storage. An IAM policy is generated to grant access to these secrets and is attached to a specified IAM role to enable secure retrieval"},{"role":"assistant","content":"variable \"name_prefix\" {\r\n  type        = string\r\n  description = \"A common prefix to apply to the names of all AWS resources.\"\r\n}\r\n\r\nvariable \"tags\" {\r\n  type        = map(string)\r\n  description = \"A set of tags to apply to all respective AWS resources.\"\r\n}\r\n\r\nvariable \"iam_role\" {\r\n  type = object({\r\n    name = string\r\n  })\r\n  description = \"The IAM role to which the policy to read the Google Workspace credentials should be attached.\"\r\n}\r\n\r\nvariable \"enabled\" {\r\n  type        = bool\r\n  description = \"Whether or not the module is enabled.\"\r\n}\r\n\r\nvariable \"actor\" {\r\n  type        = string\r\n  description = \"The email address of the administrator in Google Workspace that the service account is acting on behalf of.\"\r\n}\r\n\r\nvariable \"bridgeAddress\" {\r\n  type        = string\r\n  description = \"The URL of 1Password SCIM Bridge.\"\r\n}\r\n\r\n\r\nlocals {\r\n  # Define secret reference list\r\n  secrets = [\r\n    {\r\n      name      = \"OP_WORKSPACE_CREDENTIALS\"\r\n      valueFrom = aws_secretsmanager_secret.workspace_credentials.arn\r\n    },\r\n    {\r\n      name      = \"OP_WORKSPACE_SETTINGS\",\r\n      valueFrom = aws_secretsmanager_secret.workspace_settings.arn,\r\n    },\r\n  ]\r\n}\r\n\r\n# Construct an IAM policy document\r\ndata \"aws_iam_policy_document\" \"this\" {\r\n  statement {\r\n    actions = [\r\n      \"secretsmanager:GetSecretValue\",\r\n    ]\r\n\r\n    resources = [\r\n      aws_secretsmanager_secret.workspace_settings.arn,\r\n      aws_secretsmanager_secret.workspace_credentials.arn,\r\n    ]\r\n  }\r\n}\r\n\r\n# Create a policy from the document and attach it to the IAM role\r\nresource \"aws_iam_role_policy\" \"this\" {\r\n  name_prefix = var.name_prefix\r\n  policy      = data.aws_iam_policy_document.this.json\r\n  role        = var.iam_role.name\r\n}\r\n\r\nresource \"aws_secretsmanager_secret\" \"workspace_settings\" {\r\n  name_prefix = var.name_prefix\r\n\r\n  recovery_window_in_days = 0\r\n}\r\n\r\nresource \"aws_secretsmanager_secret_version\" \"workspace_settings\" {\r\n  secret_id     = aws_secretsmanager_secret.workspace_settings.id\r\n  secret_string = !var.enabled ? null : base64encode(jsonencode({\r\n    actor         = var.actor\r\n    bridgeAddress = var.bridgeAddress\r\n  }))\r\n}\r\n\r\nresource \"aws_secretsmanager_secret\" \"workspace_credentials\" {\r\n  name_prefix = var.name_prefix\r\n\r\n  recovery_window_in_days = 0\r\n}\r\n\r\nresource \"aws_secretsmanager_secret_version\" \"workspace_credentials\" {\r\n  secret_id     = aws_secretsmanager_secret.workspace_credentials.id\r\n  secret_string = var.enabled ? filebase64(\"${path.root}/workspace-credentials.json\") : null\r\n}\r\n"}]}
{"messages": [{"role": "user", "content": "Create a resource group in Azure using the `azurerm_resource_group` resource. Generate random passwords for the database, application key, and admin password with the `random_password` resource. Set up an Azure App Service plan and a Linux web app configured for Docker deployment. Define a PostgreSQL Flexible Server and its database, ensuring proper firewall rules and DNS setup. Output relevant information such as web app hostname, database URL, and admin password for usage in subsequent tasks."}, {"role": "assistant", "content": "\n#File: main.tf\n# Create a resource group\nresource \"azurerm_resource_group\" \"resource_group\" {\n  name     = local.resource_name\n  location = var.region\n}\n\n# To avoid replacement, you need to import the resource:\n# terraform import random_password.db_pass securepassword\nresource \"random_password\" \"db_pass\" {\n  length           = 16\n  special          = true\n  override_special = \"_%@\"\n\n  lifecycle {\n    ignore_changes = [\n      length,\n      special,\n      override_special\n    ]\n  }\n}\n\nresource \"random_password\" \"app_key\" {\n  length  = 32\n  special = true\n\n  lifecycle {\n    ignore_changes = [\n      length,\n      special\n    ]\n  }\n}\n\nresource \"random_password\" \"admin_password\" {\n  length  = 16\n  special = true\n\n  lifecycle {\n    ignore_changes = [\n      length,\n      special\n    ]\n  }\n}\n\n#File: output.tf\noutput \"web_app_hostname\" {\n  value = azurerm_linux_web_app.app_service.default_hostname\n}\n\noutput \"custom_domain_verification_id\" {\n  value     = azurerm_linux_web_app.app_service.custom_domain_verification_id\n  sensitive = true\n}\n\noutput \"db_url\" {\n  value = azurerm_private_dns_zone.dns_zone.name\n}\n\noutput \"admin_password\" {\n  value     = random_password.admin_password.result\n  sensitive = true\n}\n\n#File: providers.tf\nterraform {\n  required_providers {\n    azurerm = {\n      source  = \"hashicorp/azurerm\"\n      version = \"~> 3.23\"\n    }\n  }\n}\n\nprovider \"azurerm\" {\n  features {}\n}\n\n#File: variables.tf\nvariable \"docker_tag\" {\n  description = \"Docker image tag\"\n  type        = string\n}\n\nvariable \"project_slug\" {\n  description = \"Project slug\"\n  type        = string\n}\n\nvariable \"hostname\" {\n  description = \"Domain for web app\"\n  type        = string\n}\n\nvariable \"env\" {\n  description = \"Environment\"\n  type        = string\n}\n\nvariable \"debug_mode\" {\n  description = \"Is debug mode enabled\"\n  type        = bool\n}\n\nvariable \"region\" {\n  description = \"Region where to deploy resources\"\n  type        = string\n}\n\nvariable \"mail_host\" {\n  description = \"SMTP host\"\n  type        = string\n}\n\nvariable \"mail_port\" {\n  description = \"SMTP port\"\n  type        = string\n}\n\nvariable \"mail_username\" {\n  description = \"SMTP username\"\n  type        = string\n}\n\nvariable \"mail_password\" {\n  description = \"SMTP password\"\n  type        = string\n}\n\nvariable \"mail_encryption\" {\n  description = \"SMTP encryption\"\n  type        = bool\n}\n\nvariable \"mail_from_address\" {\n  description = \"Mail from address\"\n  type        = string\n}\n\nvariable \"admin_email\" {\n  description = \"Email address of initial admin account\"\n  type        = string\n}\n\nvariable \"worker_timeout\" {\n  description = \"The maximum time in seconds that a worker can run\"\n  type        = number\n  default     = 1200\n}\n\nvariable \"mailchimp_key\" {\n  description = \"Enables support for mailchimp plugin\"\n  type        = string\n}\n\nvariable \"database_az_enabled\" {\n  description = \"Specifies if there's a preference for the Availability Zone in which the PostgreSQL Flexible Server should be located\"\n  type        = bool\n}\n\nvariable \"database_az\" {\n  description = \"Specifies the Availability Zone in which the PostgreSQL Flexible Server should be located\"\n  type        = string\n}\n\n#File: versions.tf\nterraform {\n  required_version = \"~> 1.2\"\n}\n\n#File: app-service.tf\n# Create App Service plan to define the capacity and resources to be shared among the app services that will be assigned to that plan\nresource \"azurerm_service_plan\" \"app_service_plan\" {\n  name                = local.app_service.name\n  resource_group_name = azurerm_resource_group.resource_group.name\n  location            = azurerm_resource_group.resource_group.location\n  os_type             = \"Linux\"\n  sku_name            = local.app_service.size\n\n  tags = {\n    app = var.project_slug\n    env = var.env\n  }\n\n  depends_on = [\n    azurerm_postgresql_flexible_server_database.db\n  ]\n}\n\nresource \"azurerm_linux_web_app\" \"app_service\" {\n  name                = local.app_service.name\n  location            = azurerm_resource_group.resource_group.location\n  resource_group_name = azurerm_resource_group.resource_group.name\n  service_plan_id     = azurerm_service_plan.app_service_plan.id\n  https_only          = true\n\n  site_config {\n    application_stack {\n      docker_image     = local.app_service.docker_image\n      docker_image_tag = var.docker_tag\n    }\n\n    http2_enabled = true\n  }\n\n  app_settings = {\n    \"DEBUG\"                 = var.debug_mode ? \"True\" : \"False\"\n    \"DATABASE_URL\"          = \"postgres://${local.db_config.admin_db_user}:${local.db_config.admin_db_password}@${azurerm_private_dns_zone.dns_zone.name}/${azurerm_postgresql_flexible_server_database.db.name}\"\n    \"SECRET_KEY\"            = random_password.app_key.result\n    \"DJANGO_ADMIN_USERNAME\" = var.admin_email\n    \"DJANGO_ADMIN_EMAIL\"    = var.admin_email\n    \"DJANGO_ADMIN_PASSWORD\" = random_password.admin_password.result\n    \"WORKER_TIMEOUT\"        = var.worker_timeout\n\n    \"CORS_ALLOWED_ORIGINS\" = \"https://${local.hostname}\"\n    \"FRONTEND_DOMAIN\"      = local.hostname\n    \"ALLOWED_HOSTS\"        = local.hostname\n\n    \"NO_REPLY_EMAIL\"      = var.mail_from_address\n    \"EMAIL_BACKEND\"       = \"django.core.mail.backends.smtp.EmailBackend\"\n    \"EMAIL_HOST\"          = var.mail_host\n    \"EMAIL_HOST_USER\"     = var.mail_username\n    \"EMAIL_HOST_PASSWORD\" = var.mail_password\n    \"EMAIL_PORT\"          = var.mail_port\n    \"EMAIL_USE_TLS\"       = var.mail_encryption ? \"True\" : \"False\"\n\n    \"USE_AZURE\"          = \"True\"\n    \"AZURE_ACCOUNT_NAME\" = azurerm_storage_account.storage_account.name\n    \"AZURE_ACCOUNT_KEY\"  = azurerm_storage_account.storage_account.primary_access_key\n    \"AZURE_CONTAINER\"    = azurerm_storage_container.storage_container.name\n\n    \"RUN_COLLECT_STATIC\" = \"yes\"\n\n    \"MAILCHIMP_KEY\" = var.mailchimp_key\n  }\n\n  connection_string {\n    name  = \"db-connection\"\n    type  = \"PostgreSQL\"\n    value = azurerm_private_dns_zone.dns_zone.name\n  }\n\n  logs {\n    application_logs {\n      file_system_level = \"Warning\"\n    }\n\n    http_logs {\n      file_system {\n        retention_in_days = 30\n        retention_in_mb   = 35\n      }\n    }\n  }\n\n  tags = {\n    app = var.project_slug\n    env = var.env\n  }\n}\n\nresource \"azurerm_app_service_custom_hostname_binding\" \"custom_hostname_binding\" {\n  count               = var.hostname == null ? 0 : 1\n  hostname            = var.hostname\n  app_service_name    = azurerm_linux_web_app.app_service.name\n  resource_group_name = azurerm_resource_group.resource_group.name\n}\n\nresource \"azurerm_app_service_managed_certificate\" \"managed_certificate\" {\n  count                      = var.hostname == null ? 0 : 1\n  custom_hostname_binding_id = azurerm_app_service_custom_hostname_binding.custom_hostname_binding[count.index].id\n\n  tags = {\n    app = var.project_slug\n    env = var.env\n  }\n\n  lifecycle {\n    ignore_changes = [\n      tags\n    ]\n  }\n}\n\nresource \"azurerm_app_service_certificate_binding\" \"certificate_binding\" {\n  count               = var.hostname == null ? 0 : 1\n  hostname_binding_id = azurerm_app_service_custom_hostname_binding.custom_hostname_binding[count.index].id\n  certificate_id      = azurerm_app_service_managed_certificate.managed_certificate[count.index].id\n  ssl_state           = \"SniEnabled\"\n}\n\n#File: database.tf\n# Create postgresql database\nresource \"azurerm_postgresql_flexible_server\" \"db_server\" {\n  name                = local.db_config.name\n  location            = azurerm_resource_group.resource_group.location\n  resource_group_name = azurerm_resource_group.resource_group.name\n\n  sku_name   = local.db_config.sku\n  storage_mb = local.db_config.storage_mb\n\n  backup_retention_days        = local.db_config.backup_retention_days\n  geo_redundant_backup_enabled = local.db_config.geo_redundant_backup_enabled\n\n  administrator_login    = local.db_config.admin_db_user\n  administrator_password = local.db_config.admin_db_password\n  version                = local.db_config.version\n  zone                   = local.db_config.zone\n\n  lifecycle {\n    prevent_destroy = true\n  }\n\n  tags = {\n    app = var.project_slug\n    env = var.env\n  }\n}\n\n# Manages a PostgreSQL Flexible Server DB\nresource \"azurerm_postgresql_flexible_server_database\" \"db\" {\n  name      = local.db_config.name\n  server_id = azurerm_postgresql_flexible_server.db_server.id\n  collation = \"en_US.utf8\"\n  charset   = \"utf8\"\n\n  lifecycle {\n    prevent_destroy = true\n  }\n}\n\nresource \"azurerm_postgresql_flexible_server_firewall_rule\" \"public_network_access\" {\n  name             = \"PublicNetworkAccess\"\n  server_id        = azurerm_postgresql_flexible_server.db_server.id\n  start_ip_address = \"0.0.0.0\"\n  end_ip_address   = \"0.0.0.0\"\n}\n\n#File: locals.tf\nlocals {\n  namespace     = var.env == \"production\" ? var.project_slug : \"${var.project_slug}-${var.env}\"\n  resource_name = \"paul-${local.namespace}\"\n  hostname      = var.hostname != null ? var.hostname : \"${local.app_service.name}.azurewebsites.net\"\n\n  network = {\n    vn_name          = \"network-${local.namespace}\"\n    vn_address_space = [\"10.0.0.0/16\"]\n\n    subnet_name             = \"sn-${local.namespace}\"\n    subnet_address_prefixes = [\"10.0.2.0/24\"]\n  }\n\n  app_service = {\n    name         = \"paul-${local.namespace}\"\n    docker_image = \"code4romania/paul\"\n    size         = \"B1\" # Smallest tier but not free, F1 tier didn't allow to apply\n  }\n\n  storage_config = {\n    name             = replace(\"paul-${local.namespace}\", \"-\", \"\")\n    tier             = \"Standard\"\n    replication_type = \"LRS\" # Locally Redundant Storage\n    container_name   = \"data\"\n  }\n\n  db_config = {\n    name              = \"paul-${local.namespace}\"\n    sku               = \"B_Standard_B1ms\"\n    version           = \"13\"\n    admin_db_user     = \"psqladmin\"\n    admin_db_password = random_password.db_pass.result\n\n    storage_mb                    = 32768\n    backup_retention_days         = 7\n    geo_redundant_backup_enabled  = false\n    public_network_access_enabled = true\n    zone                          = var.database_az_enabled ? var.database_az : null\n  }\n}\n\n#File: network.tf\n# Create a virtual network within the resource group\nresource \"azurerm_virtual_network\" \"vn_network\" {\n  name                = local.network.vn_name\n  resource_group_name = azurerm_resource_group.resource_group.name\n  location            = azurerm_resource_group.resource_group.location\n  address_space       = local.network.vn_address_space\n\n  tags = {\n    app = var.project_slug\n    env = var.env\n  }\n}\n\nresource \"azurerm_subnet\" \"subnet\" {\n  name                 = local.network.subnet_name\n  resource_group_name  = azurerm_resource_group.resource_group.name\n  virtual_network_name = azurerm_virtual_network.vn_network.name\n  address_prefixes     = local.network.subnet_address_prefixes\n  service_endpoints    = [\"Microsoft.Storage\"]\n  delegation {\n    name = \"fs\"\n    service_delegation {\n      name = \"Microsoft.DBforPostgreSQL/flexibleServers\"\n      actions = [\n        \"Microsoft.Network/virtualNetworks/subnets/join/action\",\n      ]\n    }\n  }\n}\n\n# Create DNS name for postgress\nresource \"azurerm_private_dns_zone\" \"dns_zone\" {\n  name                = \"${local.db_config.name}.postgres.database.azure.com\"\n  resource_group_name = azurerm_resource_group.resource_group.name\n\n  tags = {\n    app = var.project_slug\n    env = var.env\n  }\n}\n\nresource \"azurerm_private_dns_zone_virtual_network_link\" \"private_dns_zone_vnet_link\" {\n  name                  = \"${var.project_slug}-link\"\n  private_dns_zone_name = azurerm_private_dns_zone.dns_zone.name\n  virtual_network_id    = azurerm_virtual_network.vn_network.id\n  resource_group_name   = azurerm_resource_group.resource_group.name\n\n  tags = {\n    app = var.project_slug\n    env = var.env\n  }\n}\n\n#File: storage.tf\n# Give user access to storage\nresource \"azurerm_user_assigned_identity\" \"user_assigned_identity\" {\n  name                = \"user-identity-${var.project_slug}\"\n  location            = azurerm_resource_group.resource_group.location\n  resource_group_name = azurerm_resource_group.resource_group.name\n\n  tags = {\n    app = var.project_slug\n    env = var.env\n  }\n}\n\n# and the role assignment to this identity\nresource \"azurerm_role_assignment\" \"user_role_assigment\" {\n  scope                = azurerm_resource_group.resource_group.id\n  role_definition_name = \"Storage Blob Data Reader\"\n  principal_id         = azurerm_user_assigned_identity.user_assigned_identity.principal_id\n}\n\nresource \"azurerm_storage_account\" \"storage_account\" {\n  name                     = local.storage_config.name\n  resource_group_name      = azurerm_resource_group.resource_group.name\n  location                 = azurerm_resource_group.resource_group.location\n  account_tier             = local.storage_config.tier\n  account_replication_type = local.storage_config.replication_type\n\n  blob_properties {\n    cors_rule {\n      allowed_origins = [\n        \"https://${local.hostname}\"\n      ]\n\n      allowed_methods = [\n        \"GET\", \"HEAD\"\n      ]\n\n      allowed_headers = [\n        \"Access-Control-Allow-Origin\"\n      ]\n\n      exposed_headers = [\n        \"Access-Control-Allow-Origin\"\n      ]\n\n      max_age_in_seconds = 300\n    }\n  }\n\n  identity {\n    type = \"SystemAssigned\"\n  }\n\n  lifecycle {\n    prevent_destroy = true\n  }\n}\n\nresource \"azurerm_storage_container\" \"storage_container\" {\n  name                  = local.storage_config.container_name\n  storage_account_name  = azurerm_storage_account.storage_account.name\n  container_access_type = \"blob\"\n\n  lifecycle {\n    prevent_destroy = true\n  }\n}\n"}]}
{"messages": [{"role": "user", "content": "Create a resource group named \"contwebapp\" in the \"westus\" location. Create an App Service Plan for Linux within the resource group using the Standard tier and S1 size. Create an Azure Web App that utilizes a Docker container with the image \"pdetender/simplcommerce:latest\". Set the app settings to disable default storage for the web app. Ensure the web app has a system-assigned identity and the site is always on."}, {"role": "assistant", "content": "\n#File: app_service_plan.tf\n# Crie um plano de serviço de aplicativo com Linux\nresource \"azurerm_app_service_plan\" \"appserviceplan\" {\n  name                = azurerm_resource_group.group.name\n  location            = azurerm_resource_group.group.location\n  resource_group_name = azurerm_resource_group.group.name\n\n  # Define o SO da maquina\n  kind = \"Linux\"\n\n  # Configuração da instancia que rodara o contaner\n  sku {\n    tier = \"Standard\"\n    size = \"S1\"\n  }\n\n  #properties = {\n    reserved = true # Obrigatório para planos Linux\n  #}\n}\n#File: main.tf\n# Provedor Terraform Azure\nprovider \"azurerm\" {\n  version = \"~> 2.0\"\n  features {}\n}\n\n# Criar no Azure Web App um containers com o App Service\nresource \"azurerm_app_service\" \"webapp\" {\n  name                = azurerm_resource_group.group.name\n  location            = azurerm_resource_group.group.location\n  resource_group_name = azurerm_resource_group.group.name\n  app_service_plan_id = azurerm_app_service_plan.appserviceplan.id\n\n  # Não attach Armazanamento padrão\n  app_settings = {\n    WEBSITES_ENABLE_APP_SERVICE_STORAGE = false\n\n  }\n\n  # Configurar docker imagem para carregar e iniciar o serviço\n  site_config {\n    linux_fx_version = \"DOCKER|pdetender/simplcommerce:latest\" # Imagem de um projeto da internet para teste\n    always_on        = \"true\"\n  }\n\n  identity {\n    type = \"SystemAssigned\"\n  }\n}\n#File: resource_group.tf\n# Cria uma novo Grupo de Recursos\nresource \"azurerm_resource_group\" \"group\" {\n  name     = \"contwebapp\"\n  location = \"westus\"\n}"}]}
{"messages": [{"role":"user","content":"Create a Terraform configuration that deploys a highly available AWS infrastructure with a custom VPC spanning multiple Availability Zones, including public and private subnets, internet gateway, and NAT gateways to provide secure network routing. Set up an Application Load Balancer (ALB) with associated security groups to control inbound and outbound traffic, forwarding HTTP requests to an ECS Fargate cluster running Docker containers. The ECS cluster is configured with scalable Fargate tasks running a specified container image, using private subnets and restricted security groups for enhanced security and isolation."},{"role":"assistant","content":"# Specify the provider and access details\r\n\r\n# We use vault to get credentials, but you can use variables to achieve the same thing\r\ndata \"vault_generic_secret\" \"aws_creds\" {\r\n  path = \"aws/sts/manage-${var.aws_account_id}\"\r\n}\r\n\r\nprovider \"aws\" {\r\n  access_key = \"${data.vault_generic_secret.aws_creds.data[\"access_key\"]}\"\r\n  secret_key = \"${data.vault_generic_secret.aws_creds.data[\"secret_key\"]}\"\r\n  token      = \"${data.vault_generic_secret.aws_creds.data[\"security_token\"]}\"\r\n  region     = \"${var.aws_region}\"\r\n}\r\n\r\n### Network\r\n\r\n# Fetch AZs in the current region\r\ndata \"aws_availability_zones\" \"available\" {}\r\n\r\nresource \"aws_vpc\" \"main\" {\r\n  cidr_block = \"172.17.0.0/16\"\r\n}\r\n\r\n# Create var.az_count private subnets, each in a different AZ\r\nresource \"aws_subnet\" \"private\" {\r\n  count             = \"${var.az_count}\"\r\n  cidr_block        = \"${cidrsubnet(aws_vpc.main.cidr_block, 8, count.index)}\"\r\n  availability_zone = \"${data.aws_availability_zones.available.names[count.index]}\"\r\n  vpc_id            = \"${aws_vpc.main.id}\"\r\n}\r\n\r\n# Create var.az_count public subnets, each in a different AZ\r\nresource \"aws_subnet\" \"public\" {\r\n  count                   = \"${var.az_count}\"\r\n  cidr_block              = \"${cidrsubnet(aws_vpc.main.cidr_block, 8, var.az_count + count.index)}\"\r\n  availability_zone       = \"${data.aws_availability_zones.available.names[count.index]}\"\r\n  vpc_id                  = \"${aws_vpc.main.id}\"\r\n  map_public_ip_on_launch = true\r\n}\r\n\r\n# IGW for the public subnet\r\nresource \"aws_internet_gateway\" \"gw\" {\r\n  vpc_id = \"${aws_vpc.main.id}\"\r\n}\r\n\r\n# Route the public subnet traffic through the IGW\r\nresource \"aws_route\" \"internet_access\" {\r\n  route_table_id         = \"${aws_vpc.main.main_route_table_id}\"\r\n  destination_cidr_block = \"0.0.0.0/0\"\r\n  gateway_id             = \"${aws_internet_gateway.gw.id}\"\r\n}\r\n\r\n# Create a NAT gateway with an EIP for each private subnet to get internet connectivity\r\nresource \"aws_eip\" \"gw\" {\r\n  count      = \"${var.az_count}\"\r\n  vpc        = true\r\n  depends_on = [\"aws_internet_gateway.gw\"]\r\n}\r\n\r\nresource \"aws_nat_gateway\" \"gw\" {\r\n  count         = \"${var.az_count}\"\r\n  subnet_id     = \"${element(aws_subnet.public.*.id, count.index)}\"\r\n  allocation_id = \"${element(aws_eip.gw.*.id, count.index)}\"\r\n}\r\n\r\n# Create a new route table for the private subnets\r\n# And make it route non-local traffic through the NAT gateway to the internet\r\nresource \"aws_route_table\" \"private\" {\r\n  count  = \"${var.az_count}\"\r\n  vpc_id = \"${aws_vpc.main.id}\"\r\n\r\n  route {\r\n    cidr_block = \"0.0.0.0/0\"\r\n    nat_gateway_id = \"${element(aws_nat_gateway.gw.*.id, count.index)}\"\r\n  }\r\n}\r\n\r\n# Explicitely associate the newly created route tables to the private subnets (so they don't default to the main route table)\r\nresource \"aws_route_table_association\" \"private\" {\r\n  count          = \"${var.az_count}\"\r\n  subnet_id      = \"${element(aws_subnet.private.*.id, count.index)}\"\r\n  route_table_id = \"${element(aws_route_table.private.*.id, count.index)}\"\r\n}\r\n\r\n### Security\r\n\r\n# ALB Security group\r\n# This is the group you need to edit if you want to restrict access to your application\r\nresource \"aws_security_group\" \"lb\" {\r\n  name        = \"tf-ecs-alb\"\r\n  description = \"controls access to the ALB\"\r\n  vpc_id      = \"${aws_vpc.main.id}\"\r\n\r\n  ingress {\r\n    protocol    = \"tcp\"\r\n    from_port   = 80\r\n    to_port     = 80\r\n    cidr_blocks = [\"0.0.0.0/0\"]\r\n  }\r\n\r\n  egress {\r\n    from_port = 0\r\n    to_port   = 0\r\n    protocol  = \"-1\"\r\n    cidr_blocks = [\"0.0.0.0/0\"]\r\n  }\r\n}\r\n\r\n# Traffic to the ECS Cluster should only come from the ALB\r\nresource \"aws_security_group\" \"ecs_tasks\" {\r\n  name        = \"tf-ecs-tasks\"\r\n  description = \"allow inbound access from the ALB only\"\r\n  vpc_id      = \"${aws_vpc.main.id}\"\r\n\r\n  ingress {\r\n    protocol        = \"tcp\"\r\n    from_port       = \"${var.app_port}\"\r\n    to_port         = \"${var.app_port}\"\r\n    security_groups = [\"${aws_security_group.lb.id}\"]\r\n  }\r\n\r\n  egress {\r\n    protocol    = \"-1\"\r\n    from_port   = 0\r\n    to_port     = 0\r\n    cidr_blocks = [\"0.0.0.0/0\"]\r\n  }\r\n}\r\n\r\n### ALB\r\n\r\nresource \"aws_alb\" \"main\" {\r\n  name            = \"tf-ecs-chat\"\r\n  subnets         = [\"${aws_subnet.public.*.id}\"]\r\n  security_groups = [\"${aws_security_group.lb.id}\"]\r\n}\r\n\r\nresource \"aws_alb_target_group\" \"app\" {\r\n  name        = \"tf-ecs-chat\"\r\n  port        = 80\r\n  protocol    = \"HTTP\"\r\n  vpc_id      = \"${aws_vpc.main.id}\"\r\n  target_type = \"ip\"\r\n}\r\n\r\n# Redirect all traffic from the ALB to the target group\r\nresource \"aws_alb_listener\" \"front_end\" {\r\n  load_balancer_arn = \"${aws_alb.main.id}\"\r\n  port              = \"80\"\r\n  protocol          = \"HTTP\"\r\n\r\n  default_action {\r\n    target_group_arn = \"${aws_alb_target_group.app.id}\"\r\n    type             = \"forward\"\r\n  }\r\n}\r\n\r\n### ECS\r\n\r\nresource \"aws_ecs_cluster\" \"main\" {\r\n  name = \"tf-ecs-cluster\"\r\n}\r\n\r\nresource \"aws_ecs_task_definition\" \"app\" {\r\n  family                   = \"app\"\r\n  network_mode             = \"awsvpc\"\r\n  requires_compatibilities = [\"FARGATE\"]\r\n  cpu                      = \"${var.fargate_cpu}\"\r\n  memory                   = \"${var.fargate_memory}\"\r\n\r\n  container_definitions = <<DEFINITION\r\n[\r\n  {\r\n    \"cpu\": ${var.fargate_cpu},\r\n    \"image\": \"${var.app_image}\",\r\n    \"memory\": ${var.fargate_memory},\r\n    \"name\": \"app\",\r\n    \"networkMode\": \"awsvpc\",\r\n    \"portMappings\": [\r\n      {\r\n        \"containerPort\": ${var.app_port},\r\n        \"hostPort\": ${var.app_port}\r\n      }\r\n    ]\r\n  }\r\n]\r\nDEFINITION\r\n}\r\n\r\nresource \"aws_ecs_service\" \"main\" {\r\n  name            = \"tf-ecs-service\"\r\n  cluster         = \"${aws_ecs_cluster.main.id}\"\r\n  task_definition = \"${aws_ecs_task_definition.app.arn}\"\r\n  desired_count   = \"${var.app_count}\"\r\n  launch_type     = \"FARGATE\"\r\n\r\n  network_configuration {\r\n    security_groups = [\"${aws_security_group.ecs_tasks.id}\"]\r\n    subnets         = [\"${aws_subnet.private.*.id}\"]\r\n  }\r\n\r\n  load_balancer {\r\n    target_group_arn = \"${aws_alb_target_group.app.id}\"\r\n    container_name   = \"app\"\r\n    container_port   = \"${var.app_port}\"\r\n  }\r\n\r\n  depends_on = [\r\n    \"aws_alb_listener.front_end\",\r\n  ]\r\n}\r\n\r\nvariable \"aws_region\" {\r\n  description = \"The AWS region to create things in.\"\r\n  default     = \"us-east-1\"\r\n}\r\n\r\nvariable \"aws_account_id\" {\r\n  description = \"AWS account ID\"\r\n}\r\n\r\nvariable \"az_count\" {\r\n  description = \"Number of AZs to cover in a given AWS region\"\r\n  default     = \"2\"\r\n}\r\n\r\nvariable \"app_image\" {\r\n  description = \"Docker image to run in the ECS cluster\"\r\n  default     = \"adongy/hostname-docker:latest\"\r\n}\r\n\r\nvariable \"app_port\" {\r\n  description = \"Port exposed by the docker image to redirect traffic to\"\r\n  default     = 3000\r\n}\r\n\r\nvariable \"app_count\" {\r\n  description = \"Number of docker containers to run\"\r\n  default     = 2\r\n}\r\n\r\nvariable \"fargate_cpu\" {\r\n  description = \"Fargate instance CPU units to provision (1 vCPU = 1024 CPU units)\"\r\n  default     = \"256\"\r\n}\r\n\r\nvariable \"fargate_memory\" {\r\n  description = \"Fargate instance memory to provision (in MiB)\"\r\n  default     = \"512\"\r\n}\r\n"}]}
{"messages": [{"role": "user", "content": "Create a Google Cloud provider with the specified project ID and region. Define a Google Compute network with a name that incorporates the stage variable. Provision a Google Redis instance with a unique name, 1 GB of memory, and configure it for private service access using the authorized network. Set up remote state management using Google Cloud Storage with the specified backend bucket. Output the project ID, stage, authorized network, Redis host, and read endpoint."}, {"role": "assistant", "content": "\n#File: main.tf\nprovider \"google\" {\n  project = var.project_id\n  region  = var.region\n}\n\ndata \"google_compute_network\" \"this\" {\n  name = \"gke-networktest-${var.stage}\"\n}\n\nresource \"google_redis_instance\" \"this\" {\n  name               = \"redis-psa-${var.stage}\"\n  memory_size_gb     = 1\n  redis_version      = \"REDIS_6_X\"\n  tier               = \"BASIC\"\n  connect_mode       = \"PRIVATE_SERVICE_ACCESS\"\n  authorized_network = data.google_compute_network.this.id\n}\n\ndata \"terraform_remote_state\" \"this\" {\n  backend   = \"gcs\"\n  workspace = var.stage\n  config = {\n    bucket = var.backend_bucket\n    prefix = format(\"memorystore/%s\", \"redis-${var.stage}\")\n  }\n}\n#File: variables.tf\nvariable \"project_id\" {\n  description = \"The project ID to host the cluster in\"\n}\n\nvariable \"region\" {\n  description = \"The region to host the cluster in\"\n  default     = \"us-central1\"\n}\n\nvariable \"stage\" {\n  description = \"stage\"\n  type        = string\n  default     = \"local\"\n}\n\nvariable \"backend_bucket\" {\n  description = \"backend bucket to save tfstate file\"\n  type        = string\n  default     = \"\"\n}\n#File: versions.tf\nterraform {\n  required_version = \">= 1.1.2\"\n\n  required_providers {\n    google = {\n      source  = \"hashicorp/google\"\n      version = \"~> 4.47.0\"\n    }\n  }\n}\n\n#File: outputs.tf\noutput \"project_id\" {\n  value = var.project_id\n}\n\noutput \"stage\" {\n  value = var.stage\n}\n\noutput \"authorized_network\" {\n  value = google_redis_instance.this.authorized_network\n}\n\noutput \"redis_host\" {\n  value = google_redis_instance.this[*].host\n}\n\noutput \"read_endpoint\" {\n  value = google_redis_instance.this[*].read_endpoint\n}"}]}
{"messages": [{"role": "user", "content": "Create a unique workspace ID using a UUID. Generate an Azure Resource Group in the \"Spain Central\" location with the name set to the workspace ID. Define multiple output values for the workspace ID, resource group ID, resource group name, and resource group location. Configure necessary variables for application gateway firewall policies, including name, resource group, location, and various limits and exclusions. Ensure proper validation for each variable to enforce constraints and maintain correct associations."}, {"role": "assistant", "content": "\n#File: locals.tf\nlocals {\n  workspace_id = uuid()\n}\n\n#File: main.tf\nresource \"azurerm_resource_group\" \"rg\" {\n  name     = local.workspace_id\n  location = \"Spain Central\"\n}\n\n#File: outputs.tf\noutput \"workspace_id\" {\n  value = local.workspace_id\n}\n\noutput \"resource_group_id\" {\n  value = azurerm_resource_group.rg.id\n}\n\noutput \"resource_group_name\" {\n  value = azurerm_resource_group.rg.name\n}\n\noutput \"resource_group_location\" {\n  value = azurerm_resource_group.rg.location\n}\n\n#File: variables.tf\nvariable \"name\" {\n  type        = string\n  description = \"The name of the Application Gateway Firewall Policy.\"\n}\n\nvariable \"resource_group_name\" {\n  type        = string\n  description = \"The name of the resource group in which to create the Application Gateway Firewall Policy.\"\n}\n\nvariable \"location\" {\n  type        = string\n  description = \"The location/region where the Application Gateway Firewall Policy is created.\"\n}\n\nvariable \"tags\" {\n  type        = map(string)\n  default     = {}\n  description = \"A mapping of tags to assign to the resource.\"\n}\n\nvariable \"enabled\" {\n  type        = bool\n  default     = true\n  description = \"Describes if the policy is in enabled state or disabled state.\"\n}\n\nvariable \"mode\" {\n  type        = string\n  default     = \"Prevention\"\n  description = \"Describes if it is in detection mode or prevention mode at the policy level. Valid values are `Detection` and `Prevention`.\"\n\n  validation {\n    condition     = contains([\"Detection\", \"Prevention\"], var.mode)\n    error_message = \"The mode must be either Detection or Prevention.\"\n  }\n}\n\nvariable \"request_body_inspect_limit_in_kb\" {\n  type        = number\n  default     = 128\n  description = \"The maximum request body inspection size in KB for the policy.\"\n\n  validation {\n    condition     = var.request_body_inspect_limit_in_kb >= 8 && var.request_body_inspect_limit_in_kb <= 2000\n    error_message = \"The request body inspection limit must be between 8 and 2000 KB.\"\n  }\n}\n\nvariable \"max_request_body_size_in_kb\" {\n  type        = number\n  default     = 128\n  description = \"The maximum request body size in KB for the policy.\"\n\n  validation {\n    condition     = var.max_request_body_size_in_kb >= 8 && var.max_request_body_size_in_kb <= 2000\n    error_message = \"The request body size must be between 8 and 2000 KB.\"\n  }\n}\n\nvariable \"file_upload_limit_in_mb\" {\n  type        = number\n  default     = 100\n  description = \"The maximum file upload size in MB for the policy.\"\n\n  validation {\n    condition     = var.file_upload_limit_in_mb >= 1 && var.file_upload_limit_in_mb <= 4000\n    error_message = \"The file upload limit must be between 1 and 4000 MB.\"\n  }\n}\n\nvariable \"managed_rule_sets\" {\n  type = list(object({\n    type    = string\n    version = string\n  }))\n  description = \"A mapping of managed rule set types and versions to associate with the policy.\"\n\n  validation {\n    condition     = alltrue([for rule in var.managed_rule_sets : contains([\"OWASP\", \"Microsoft_DefaultRuleSet\", \"Microsoft_BotManagerRuleSet\"], rule.type)])\n    error_message = \"All managed rule set types must be OWASP, Microsoft_DefaultRuleSet or Microsoft_BotManagerRuleSet.\"\n  }\n\n  validation {\n    condition     = alltrue([for rule in var.managed_rule_sets : rule.type != \"OWASP\" || contains([\"3.0\", \"3.1\", \"3.2\"], rule.version)])\n    error_message = \"If the managed rule set type is OWASP, the version must be 3.0, 3.1 or 3.2.\"\n  }\n\n  validation {\n    condition     = alltrue([for rule in var.managed_rule_sets : rule.type != \"Microsoft_DefaultRuleSet\" || rule.version == \"2.1\"])\n    error_message = \"If the managed rule set type is Microsoft_DefaultRuleSet, the version must be 2.1.\"\n  }\n\n  validation {\n    condition     = alltrue([for rule in var.managed_rule_sets : rule.type != \"Microsoft_BotManagerRuleSet\" || contains([\"0.1\", \"1.0\"], rule.version)])\n    error_message = \"If the managed rule set type is Microsoft_BotManagerRuleSet, the version must be 0.1 or 1.0.\"\n  }\n\n  validation {\n    condition     = anytrue([for rule in var.managed_rule_sets : contains([\"OWASP\", \"Microsoft_DefaultRuleSet\"], rule.type)])\n    error_message = \"At least one managed rule set type must be OWASP or Microsoft_DefaultRuleSet.\"\n  }\n\n  validation {\n    condition     = length([for rule in var.managed_rule_sets : rule.type if rule.type == \"OWASP\" || rule.type == \"Microsoft_DefaultRuleSet\"]) <= 1\n    error_message = \"There can only be one rule of type OWASP or Microsoft_DefaultRuleSet.\"\n  }\n\n  validation {\n    condition     = length([for rule in var.managed_rule_sets : rule.type]) == length(distinct([for rule in var.managed_rule_sets : rule.type]))\n    error_message = \"There can only be one rule of each type.\"\n  }\n}\n\nvariable \"managed_rule_exclusions\" {\n  type = list(object({\n    match_variable          = string\n    selector_match_operator = string\n    selector                = string\n    rule_set = optional(object({\n      type = string\n      rule_groups = optional(list(object({\n        rule_group_name = string\n        excluded_rules  = list(number)\n      })), [])\n    }))\n  }))\n  default     = []\n  description = \"A mapping of managed rule exclusions to associate with the policy.\"\n\n  validation {\n    condition = alltrue([for exclusion in var.managed_rule_exclusions : contains([\n      \"RequestArgKeys\", \"RequestArgNames\", \"RequestArgValues\",\n      \"RequestCookieKeys\", \"RequestCookieNames\", \"RequestCookieValues\",\n      \"RequestHeaderKeys\", \"RequestHeaderNames\", \"RequestHeaderValues\"\n    ], exclusion.match_variable)])\n    error_message = \"All managed rule exclusion match variables must be RequestArgKeys, RequestArgNames, RequestArgValues, RequestCookieKeys, RequestCookieNames, RequestCookieValues, RequestHeaderKeys, RequestHeaderNames or RequestHeaderValues.\"\n  }\n\n  validation {\n    condition     = alltrue([for exclusion in var.managed_rule_exclusions : contains([\"Contains\", \"EndsWith\", \"Equals\", \"EqualsAny\", \"StartsWith\"], exclusion.selector_match_operator)])\n    error_message = \"All managed rule exclusion selector match operators must be Contains, EndsWith, Equals, EqualsAny or StartsWith.\"\n  }\n\n  validation {\n    condition     = alltrue([for exclusion in var.managed_rule_exclusions : contains([\"OWASP\", \"Microsoft_DefaultRuleSet\"], exclusion.rule_set.type) if exclusion.rule_set != null])\n    error_message = \"All managed rule exclusion rule set types must be OWASP or Microsoft_DefaultRuleSet.\"\n  }\n\n  validation {\n    condition = alltrue([for exclusion in var.managed_rule_exclusions :\n      alltrue([for rule_group in exclusion.rule_set.rule_groups :\n        contains([\n          \"BadBots\", \"crs_20_protocol_violations\", \"crs_21_protocol_anomalies\", \"crs_23_request_limits\", \"crs_30_http_policy\", \"crs_35_bad_robots\",\n          \"crs_40_generic_attacks\", \"crs_41_sql_injection_attacks\", \"crs_41_xss_attacks\", \"crs_42_tight_security\", \"crs_45_trojans\", \"crs_49_inbound_blocking\",\n          \"General\", \"GoodBots\", \"KnownBadBots\", \"Known-CVEs\", \"REQUEST-911-METHOD-ENFORCEMENT\", \"REQUEST-913-SCANNER-DETECTION\", \"REQUEST-920-PROTOCOL-ENFORCEMENT\",\n          \"REQUEST-921-PROTOCOL-ATTACK\", \"REQUEST-930-APPLICATION-ATTACK-LFI\", \"REQUEST-931-APPLICATION-ATTACK-RFI\", \"REQUEST-932-APPLICATION-ATTACK-RCE\",\n          \"REQUEST-933-APPLICATION-ATTACK-PHP\", \"REQUEST-941-APPLICATION-ATTACK-XSS\", \"REQUEST-942-APPLICATION-ATTACK-SQLI\", \"REQUEST-943-APPLICATION-ATTACK-SESSION-FIXATION\",\n          \"REQUEST-944-APPLICATION-ATTACK-JAVA\", \"UnknownBots\", \"METHOD-ENFORCEMENT\", \"PROTOCOL-ENFORCEMENT\", \"PROTOCOL-ATTACK\", \"LFI\", \"RFI\", \"RCE\", \"PHP\", \"NODEJS\", \"XSS\",\n          \"SQLI\", \"FIX\", \"JAVA\", \"MS-ThreatIntel-WebShells\", \"MS-ThreatIntel-AppSec\", \"MS-ThreatIntel-SQLI\", \"MS-ThreatIntel-CVEs\", \"MS-ThreatIntel-AppSec\", \"MS-ThreatIntel-SQLI\",\n          \"MS-ThreatIntel-CVEs\"\n        ], rule_group.rule_group_name)\n    ]) if exclusion.rule_set != null])\n    error_message = \"All managed rule exclusion rule group names must be BadBots, crs_20_protocol_violations, crs_21_protocol_anomalies, crs_23_request_limits, crs_30_http_policy, crs_35_bad_robots, crs_40_generic_attacks, crs_41_sql_injection_attacks, crs_41_xss_attacks, crs_42_tight_security, crs_45_trojans, crs_49_inbound_blocking, General, GoodBots, KnownBadBots, Known-CVEs, REQUEST-911-METHOD-ENFORCEMENT, REQUEST-913-SCANNER-DETECTION, REQUEST-920-PROTOCOL-ENFORCEMENT, REQUEST-921-PROTOCOL-ATTACK, REQUEST-930-APPLICATION-ATTACK-LFI, REQUEST-931-APPLICATION-ATTACK-RFI, REQUEST-932-APPLICATION-ATTACK-RCE, REQUEST-933-APPLICATION-ATTACK-PHP, REQUEST-941-APPLICATION-ATTACK-XSS, REQUEST-942-APPLICATION-ATTACK-SQLI, REQUEST-943-APPLICATION-ATTACK-SESSION-FIXATION, REQUEST-944-APPLICATION-ATTACK-JAVA, UnknownBots, METHOD-ENFORCEMENT, PROTOCOL-ENFORCEMENT, PROTOCOL-ATTACK, LFI, RFI, RCE, PHP, NODEJS, XSS, SQLI, FIX, JAVA, MS-ThreatIntel-WebShells, MS-ThreatIntel-AppSec, MS-ThreatIntel-SQLI, MS-ThreatIntel-CVEs, MS-ThreatIntel-AppSec, MS-ThreatIntel-SQLI and MS-ThreatIntel-CVEs\"\n  }\n\n  validation {\n    condition = alltrue([for exclusion in var.managed_rule_exclusions :\n      alltrue([for rule_group in exclusion.rule_set.rule_groups :\n        alltrue([for rule in rule_group.excluded_rules :\n          can(regex(\"^[0-9]{6}$\", tonumber(rule)))\n        ])\n      ]) if exclusion.rule_set != null]\n    )\n    error_message = \"All managed rule exclusion rules must be 6-digit numbers.\"\n  }\n}\n\n#File: versions.tf\nterraform {\n  required_version = \">=1.9.0\"\n\n  required_providers {\n    azurerm = {\n      source  = \"hashicorp/azurerm\"\n      version = \"~>3.0\"\n    }\n  }\n}\n\n#File: providers.tf\nprovider \"azurerm\" {\n  features {}\n}\n"}]}
{"messages": [{"role": "user", "content": "Create an API Gateway REST API named \"imagelenseApi\" with a resource \"/presigneds3url\". Configure two methods on this resource: a GET method with request parameters for filename and filetype, and an OPTIONS method for CORS support. Integrate the GET method with a Lambda function for generating presigned URLs, and configure a mock integration for the OPTIONS method. Finally, deploy the API to the \"dev\" stage."}, {"role": "assistant", "content": "\n#File: api-gateway.tf\nresource \"aws_api_gateway_rest_api\" \"imagelenseapi\" {\n  name        = \"imagelenseApi\"\n  description = \"Image Analyser API for web application.\"\n}\n\nresource \"aws_api_gateway_resource\" \"imagelenseapi_res\" {\n   rest_api_id = aws_api_gateway_rest_api.imagelenseapi.id\n   parent_id   = aws_api_gateway_rest_api.imagelenseapi.root_resource_id\n   path_part   = \"presigneds3url\"\n}\n\nresource \"aws_api_gateway_method\" \"presigneds3url_get\" {\n  authorization = \"NONE\"\n  http_method   = \"GET\"\n  resource_id   = aws_api_gateway_resource.imagelenseapi_res.id\n  rest_api_id   = aws_api_gateway_rest_api.imagelenseapi.id\n  request_parameters = {\n    \"method.request.querystring.filename\" = true,\n    \"method.request.querystring.filetype\" = true\n\n  }\n}\n\nresource \"aws_api_gateway_method\" \"presigneds3url_option\" {\n  rest_api_id   = aws_api_gateway_rest_api.imagelenseapi.id\n  resource_id   = aws_api_gateway_resource.imagelenseapi_res.id\n  http_method   = \"OPTIONS\"\n  authorization = \"NONE\"\n}\n\nresource \"aws_api_gateway_integration\" \"presigneds3url_lambda\" {\n   rest_api_id = aws_api_gateway_rest_api.imagelenseapi.id\n   resource_id = aws_api_gateway_resource.imagelenseapi_res.id\n   http_method = aws_api_gateway_method.presigneds3url_get.http_method\n\n   integration_http_method = \"POST\"\n   type                    = \"AWS_PROXY\"\n   uri                     = aws_lambda_function.presigneds3url.invoke_arn\n}\n\nresource \"aws_api_gateway_integration\" \"presigneds3url_option\" {\n  rest_api_id = aws_api_gateway_rest_api.imagelenseapi.id\n  resource_id = aws_api_gateway_resource.imagelenseapi_res.id\n  http_method = aws_api_gateway_method.presigneds3url_option.http_method\n  type = \"MOCK\"\n}\n\nresource \"aws_api_gateway_method_response\" \"presigneds3url_option\" {\n  depends_on = [aws_api_gateway_method.presigneds3url_option]\n  rest_api_id = aws_api_gateway_rest_api.imagelenseapi.id\n  resource_id = aws_api_gateway_resource.imagelenseapi_res.id\n  http_method = aws_api_gateway_method.presigneds3url_option.http_method\n  status_code = 200\n  response_parameters = {\n    \"method.response.header.Access-Control-Allow-Origin\" = true,\n    \"method.response.header.Access-Control-Allow-Methods\" = true,\n    \"method.response.header.Access-Control-Allow-Headers\" = true\n  }\n  response_models = {\n    \"application/json\" = \"Empty\"\n  }\n}\n\nresource \"aws_api_gateway_integration_response\" \"presigneds3url_option\" {\n  depends_on = [aws_api_gateway_integration.presigneds3url_option, aws_api_gateway_method_response.presigneds3url_option]\n  rest_api_id = aws_api_gateway_rest_api.imagelenseapi.id\n  resource_id = aws_api_gateway_resource.imagelenseapi_res.id\n  http_method = aws_api_gateway_method.presigneds3url_option.http_method\n  status_code = 200\n  response_parameters = {\n    \"method.response.header.Access-Control-Allow-Origin\" = \"'*'\", # replace with hostname of frontend (CloudFront)\n    \"method.response.header.Access-Control-Allow-Headers\" = \"'Content-Type'\",\n    \"method.response.header.Access-Control-Allow-Methods\" = \"'GET, POST'\" # remove or add HTTP methods as needed\n  }\n}\n\n\nresource \"aws_api_gateway_deployment\" \"dev\" {\n   depends_on = [\n     aws_api_gateway_integration.presigneds3url_lambda,\n   ]\n   rest_api_id = aws_api_gateway_rest_api.imagelenseapi.id\n   stage_name  = \"dev\"\n}\n#File: azure_cognitive_service.tf\nprovider \"azurerm\" {\nversion = \"=2.0.0\"\n### Fix for Error: \"features\": required field is not set\nfeatures {}\nskip_provider_registration = true\n}\n\n# resource \"azurerm_resource_group\" \"imagelense\" {\n#   name     = \"imagelense\"\n#   location = \"East US\"\n# }\n\nresource \"azurerm_cognitive_account\" \"imagelense\" {\n  name                = \"imagelense-account\"\n  location            =  \"West US\" ##azurerm_resource_group.imagelense.location\n  resource_group_name = var.azure_resource_group ###azurerm_resource_group.imagelense.name\n  kind                = \"ComputerVision\"\n  sku_name = \"S1\"\n\n}\n#File: gcp_firebase.tf\nresource \"google_firebase_project\" \"firebase\" {\n    provider = google-beta\n    project  = var.gcp_project_name\n}\n\n\n/* resource \"google_firebase_web_app\" \"imagelense_webapp\" {\n    provider = google-beta\n    project = var.gcp_project_name\n    display_name = \"Image Lense Web Apps.\"\n\n    depends_on = [google_firebase_project.firebase]\n}\n */\n\nresource \"google_app_engine_application\" \"imagelense\" {\n  project     = var.gcp_project_name    ##google_project.my_project.project_id\n  location_id = \"us-central\"\n  database_type = \"CLOUD_FIRESTORE\"\n}\n\n\n#File: lambda-firebase.tf\ndata \"archive_file\" \"load_firebase_zip\" {\n  type        = \"zip\"\n  source_dir  = \"${path.module}/lambda_functions/load_firebase/main/\"\n  output_path = \"${path.module}/artifacts/load_firebase.zip\"\n}\n\nresource \"aws_s3_bucket_object\" \"load_firebase_artifacts\" {\n  bucket = aws_s3_bucket.lambda_artifacts.id\n  key    = \"${var.app_version}/load_firebase.zip\"\n  source = data.archive_file.load_firebase_zip.output_path\n  etag = filemd5(data.archive_file.load_firebase_zip.output_path)\n}\n\nresource \"aws_cloudwatch_log_group\" \"load_firebase_log\" {\n  name              = \"/aws/lambda/imagelense_load_firebase\"\n  retention_in_days = 7\n}\n\nresource \"aws_lambda_layer_version\" \"firebase_layer\" {\n  filename   = \"lambda_functions/load_firebase/lambdalayers/loadFirebase.zip\"\n  layer_name = \"firebase_layer\"\n  compatible_runtimes = [\"nodejs12.x\"]\n}\n\nresource \"aws_lambda_function\" \"load_firebase\" {\n   function_name = \"imagelense_load_firebase\"\n   s3_bucket = aws_s3_bucket.lambda_artifacts.id\n   s3_key    = aws_s3_bucket_object.load_firebase_artifacts.key\n   handler = \"main.handler\"\n   runtime = \"nodejs12.x\"\n   role = aws_iam_role.load_firebase_exec.arn\n   layers = [aws_lambda_layer_version.firebase_layer.arn]\n   timeout = 60\n}\n\nresource \"aws_iam_role\" \"load_firebase_exec\" {\n   name = \"load_firebase_lambda_role\"\n\n   assume_role_policy = <<EOF\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Action\": \"sts:AssumeRole\",\n      \"Principal\": {\n        \"Service\": \"lambda.amazonaws.com\"\n      },\n      \"Effect\": \"Allow\",\n      \"Sid\": \"\"\n    }\n  ]\n}\nEOF\n\n}\n\nresource \"aws_iam_policy\" \"load_firebase_logging\" {\n  name        = \"load_firebase_logging\"\n  path        = \"/\"\n  description = \"IAM policy for logging from a load_firebase lambda.\"\n\n  policy = <<EOF\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Action\": [\n        \"logs:CreateLogGroup\",\n        \"logs:CreateLogStream\",\n        \"logs:PutLogEvents\"\n      ],\n      \"Resource\": \"arn:aws:logs:*:*:*\",\n      \"Effect\": \"Allow\"\n    }\n  ]\n}\nEOF\n}\n\nresource \"aws_iam_role_policy_attachment\" \"load_firebase_logs\" {\n  role       = aws_iam_role.load_firebase_exec.name\n  policy_arn = aws_iam_policy.load_firebase_logging.arn\n}\n\n## Allowing execution from SNS.\nresource \"aws_lambda_permission\" \"imagelense_data_sns\" {\n  statement_id  = \"AllowExecutionFromSNS\"\n  action        = \"lambda:InvokeFunction\"\n  function_name = aws_lambda_function.load_firebase.function_name\n  principal     = \"sns.amazonaws.com\"\n  source_arn    = aws_sns_topic.imagelense_data.arn\n}\n#File: lambda-imagelense.tf\n\ndata \"archive_file\" \"imagelense_zip\" {\n  type        = \"zip\"\n  source_file = \"${path.module}/lambda_functions/imagelense/main.js\"\n  output_path = \"${path.module}/artifacts/imagelense.zip\"\n}\n\nresource \"aws_s3_bucket_object\" \"imagelense_artifacts\" {\n  bucket = aws_s3_bucket.lambda_artifacts.id\n  key    = \"${var.app_version}/imagelense.zip\"\n  source = data.archive_file.imagelense_zip.output_path \n  etag = filemd5(data.archive_file.imagelense_zip.output_path)\n}\n\nresource \"aws_cloudwatch_log_group\" \"imagelense_log\" {\n  name              = \"/aws/lambda/imagelense\"\n  retention_in_days = 7\n}\n\nresource \"aws_lambda_layer_version\" \"imagelense_layer\" {\n  filename   = \"lambda_functions/imagelense/lambdaLayers/ImageLense/ImageLense.zip\"\n  layer_name = \"imagelense_layer\"\n  compatible_runtimes = [\"nodejs12.x\"]\n}\n\nresource \"aws_lambda_function\" \"imagelense\" {\n   function_name = \"imagelense\"\n   s3_bucket = aws_s3_bucket.lambda_artifacts.id\n   s3_key    = aws_s3_bucket_object.imagelense_artifacts.key\n   handler = \"main.handler\"\n   runtime = \"nodejs12.x\"\n   role = aws_iam_role.imagelense_exec.arn\n   layers = [aws_lambda_layer_version.imagelense_layer.arn]\n   timeout = 60\n   environment {\n    variables = {\n      COMPUTER_VISION_SUBSCRIPTION_KEY_PS = aws_ssm_parameter.subscription_key.name\n      COMPUTER_VISION_ENDPOINT            = azurerm_cognitive_account.imagelense.endpoint \n      TOPIC_ARN                           = aws_sns_topic.imagelense_data.arn\n    }\n  }\n}\n\nresource \"aws_iam_role\" \"imagelense_exec\" {\n   name = \"imagelense_lambda_role\"\n\n   assume_role_policy = <<EOF\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Action\": \"sts:AssumeRole\",\n      \"Principal\": {\n        \"Service\": \"lambda.amazonaws.com\"\n      },\n      \"Effect\": \"Allow\",\n      \"Sid\": \"\"\n    }\n  ]\n}\nEOF\n\n}\n\nresource \"aws_lambda_permission\" \"imagelense_allow_bucket\" {\n  statement_id  = \"AllowExecutionFromS3Bucket\"\n  action        = \"lambda:InvokeFunction\"\n  function_name = aws_lambda_function.imagelense.arn\n  principal     = \"s3.amazonaws.com\"\n  source_arn    = aws_s3_bucket.webapp_images.arn\n}\n\nresource \"aws_s3_bucket_notification\" \"imagelense_bucket_notification\" {\n  bucket = aws_s3_bucket.webapp_images.id\n\n  lambda_function {\n    lambda_function_arn = aws_lambda_function.imagelense.arn\n    events              = [\"s3:ObjectCreated:*\"]\n  }\n\n  depends_on = [aws_lambda_permission.imagelense_allow_bucket]\n}\n\nresource \"aws_iam_policy\" \"imagelense_logging\" {\n  name        = \"imagelense_logging\"\n  path        = \"/\"\n  description = \"IAM policy for logging from a imagelense lambda.\"\n\n  policy = <<EOF\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Action\": [\n        \"logs:CreateLogGroup\",\n        \"logs:CreateLogStream\",\n        \"logs:PutLogEvents\"\n      ],\n      \"Resource\": \"arn:aws:logs:*:*:*\",\n      \"Effect\": \"Allow\"\n    }\n  ]\n}\nEOF\n}\n\nresource \"aws_iam_role_policy_attachment\" \"imagelense_logs\" {\n  role       = aws_iam_role.imagelense_exec.name\n  policy_arn = aws_iam_policy.imagelense_logging.arn\n}\n\n#### Giving acceess to Parameter store and S3 bucket.\nresource \"aws_iam_policy\" \"imagelense_aws_access\" {\n  name        = \"imagelense_aws_access\"\n  path        = \"/\"\n  description = \"IAM policy for accessing S3 bucket and Parameter store and SNS from a imagelense lambda.\"\n\n  policy = <<EOF\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"GetParameter\",\n      \"Action\": [\n        \"ssm:GetParameter*\"\n      ],\n      \"Resource\": \"${aws_ssm_parameter.subscription_key.arn}\",\n      \"Effect\": \"Allow\"\n    },\n    {\n      \"Sid\": \"GetObjectsInBucket\",\n      \"Action\": [\n        \"s3:Get*\"\n      ],\n      \"Resource\": \"arn:aws:s3:::${aws_s3_bucket.webapp_images.id}/*\",\n      \"Effect\": \"Allow\"\n    },\n    {\n      \"Sid\": \"ListObjectsInBucket\",\n      \"Action\": [\"s3:ListBucket\"],\n      \"Resource\": \"arn:aws:s3:::${aws_s3_bucket.webapp_images.id}\",\n      \"Effect\": \"Allow\"\n    },\n    {\n            \"Sid\": \"Allowpub\",\n            \"Effect\": \"Allow\",\n            \"Action\": \"sns:Publish\",\n            \"Resource\": [\"${aws_sns_topic.imagelense_data.arn}\"]\n    }\n  ]\n}\nEOF\n}\n\nresource \"aws_iam_role_policy_attachment\" \"imagelense_aws_access\" {\n  role       = aws_iam_role.imagelense_exec.name\n  policy_arn = aws_iam_policy.imagelense_aws_access.arn\n}\n#File: lambda-presigns3url.tf\ndata \"archive_file\" \"presigneds3url_zip\" {\n  type        = \"zip\"\n  source_file = \"${path.module}/lambda_functions/presigneds3url/main.js\"\n  output_path = \"${path.module}/artifacts/presigneds3url.zip\"\n}\n\nresource \"aws_s3_bucket_object\" \"presigneds3url_artifacts\" {\n  bucket = aws_s3_bucket.lambda_artifacts.id\n  key    = \"${var.app_version}/presigneds3url.zip\"\n  source = data.archive_file.presigneds3url_zip.output_path ##\"${path.module}/artifacts/presigneds3url.zip\"\n  etag = filemd5(data.archive_file.presigneds3url_zip.output_path)\n}\n\nresource \"aws_cloudwatch_log_group\" \"presigneds3url_log\" {\n  name              = \"/aws/lambda/imagelense_presigneds3url\"\n  retention_in_days = 7\n}\n\nresource \"aws_lambda_function\" \"presigneds3url\" {\n   function_name = \"imagelense_presigneds3url\"\n   s3_bucket = aws_s3_bucket.lambda_artifacts.id\n   s3_key    = aws_s3_bucket_object.presigneds3url_artifacts.key\n   handler = \"main.handler\"\n   runtime = \"nodejs12.x\"\n   role = aws_iam_role.presigneds3url_exec.arn\n   environment {\n    variables = {\n      IMAGES_BUCKET_NAME = aws_s3_bucket.webapp_images.id\n    }\n  }\n}\n\nresource \"aws_iam_role\" \"presigneds3url_exec\" {\n   name = \"presigneds3url_lambda_role\"\n\n   assume_role_policy = <<EOF\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Action\": \"sts:AssumeRole\",\n      \"Principal\": {\n        \"Service\": \"lambda.amazonaws.com\"\n      },\n      \"Effect\": \"Allow\",\n      \"Sid\": \"\"\n    }\n  ]\n}\nEOF\n\n}\n\nresource \"aws_iam_policy\" \"presigneds3url_logging\" {\n  name        = \"presigneds3url_logging\"\n  path        = \"/\"\n  description = \"IAM policy for logging from a presigneds3url lambda.\"\n\n  policy = <<EOF\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Action\": [\n        \"logs:CreateLogGroup\",\n        \"logs:CreateLogStream\",\n        \"logs:PutLogEvents\"\n      ],\n      \"Resource\": \"arn:aws:logs:*:*:*\",\n      \"Effect\": \"Allow\"\n    }\n  ]\n}\nEOF\n}\n\nresource \"aws_iam_role_policy_attachment\" \"lambda_logs\" {\n  role       = aws_iam_role.presigneds3url_exec.name\n  policy_arn = aws_iam_policy.presigneds3url_logging.arn\n}\n\n\nresource \"aws_iam_policy\" \"presigneds3url_bucketaccess\" {\n  name        = \"presigneds3url_bucketaccess\"\n  path        = \"/\"\n  description = \"IAM policy for creating S3 Presigned Access.\"\n\n  policy = <<EOF\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Sid\": \"PutObjectsInBucket\",\n      \"Action\": [\n        \"s3:Put*\",\n        \"s3:*MultipartUpload*\"\n      ],\n      \"Resource\": \"arn:aws:s3:::${aws_s3_bucket.webapp_images.id}/*\",\n      \"Effect\": \"Allow\"\n    },\n    {\n      \"Sid\": \"ListObjectsInBucket\",\n      \"Action\": [\"s3:ListBucket\"],\n      \"Resource\": \"arn:aws:s3:::${aws_s3_bucket.webapp_images.id}\",\n      \"Effect\": \"Allow\"\n    }\n  ]\n}\nEOF\n}\n\nresource \"aws_iam_role_policy_attachment\" \"lambda_bucket_access\" {\n  role       = aws_iam_role.presigneds3url_exec.name\n  policy_arn = aws_iam_policy.presigneds3url_bucketaccess.arn\n}\n\nresource \"aws_lambda_permission\" \"apigw\" {\n   statement_id  = \"AllowAPIGatewayInvoke\"\n   action        = \"lambda:InvokeFunction\"\n   function_name = aws_lambda_function.presigneds3url.function_name\n   principal     = \"apigateway.amazonaws.com\"\n\n   # The \"/*/*\" portion grants access from any method on any resource\n   # within the API Gateway REST API.\n   source_arn = \"${aws_api_gateway_rest_api.imagelenseapi.execution_arn}/*/*/*\"\n}\n#File: outputs.tf\noutput \"base_url\" {\n  value = aws_api_gateway_deployment.dev.invoke_url\n}\n#File: parameter-stores.tf\nresource \"aws_ssm_parameter\" \"subscription_key\" {\n  name  = \"/azure/subsctiptionkey\"\n  type  = \"SecureString\"\n  value = azurerm_cognitive_account.imagelense.primary_access_key\n}\n#File: provider.tf\nprovider \"aws\" {\n   region = \"us-east-1\"\n}\n\nprovider \"google\" {\n  user_project_override = true\n}\n#File: s3buckets.tf\nresource \"aws_s3_bucket\" \"lambda_artifacts\" {\n  bucket_prefix = \"imagelenselambdaartifacts\"\n  acl    = \"private\"\n  tags = {\n    Name        = \"ImageLense Webapp Lambda Artifacts\"\n    Environment = \"Dev\"\n  }\n}\n\nresource \"aws_s3_bucket\" \"webapp_images\" {\n  bucket_prefix = \"imagelenseimages\"\n  acl    = \"private\"\n  cors_rule {\n    allowed_headers = [\"*\"]\n    allowed_methods = [\"POST\",\"GET\"]\n    allowed_origins = [\"*\"]\n    max_age_seconds = 3000\n  }\n  tags = {\n    Name        = \"ImageLense Webapp Images\"\n    Environment = \"Dev\"\n  }\n}\n\nresource \"aws_s3_bucket_policy\" \"webapp_images_policy\" {\n  bucket = aws_s3_bucket.webapp_images.id\n  policy = jsonencode({\n    Version = \"2012-10-17\"\n    Id      = \"ReadPublic\"\n    Statement = [\n      {\n        Sid       = \"AllowPublicRead\"\n        Effect    = \"Allow\"\n        Principal = \"*\"\n        Action    = \"s3:GetObject\"\n        Resource = [\n          aws_s3_bucket.webapp_images.arn,\n          \"${aws_s3_bucket.webapp_images.arn}/*\",\n        ]\n      },\n    ]\n  })\n}\n#File: sns.tf\nresource \"aws_sns_topic\" \"imagelense_data\" {\n  name = \"imagelense-data-topic\"\n}\n\n## Subscript SNS topic\nresource \"aws_sns_topic_subscription\" \"imagelense_data_sub\" {\n  topic_arn = aws_sns_topic.imagelense_data.arn\n  protocol  = \"lambda\"\n  endpoint  = aws_lambda_function.load_firebase.arn\n}\n#File: variables.tf\nvariable \"app_version\" {\n    type = string\n    description = \"Version of the application.\"\n}\n\nvariable \"azure_resource_group\" {\n  type = string\n  description = \"Resource Group Name for Azure Resources.\"\n}\n\nvariable \"gcp_project_name\" {\n  type = string\n  description = \"Project Name of GCP under which resources will be created.\"\n}"}]}
{"messages": [{"role": "user", "content": "Create a Google Cloud VPC network using the provided ID. Instantiate a subnetwork within that VPC with the CIDR range of 10.138.0.0/20. Set up a firewall rule to allow specific protocols (ICMP, TCP, UDP) from permitted IP subnets. Ensure the resource counts are driven by the `to_create` variable for conditional deployment. Output the links to both the VPC network and the subnetwork for use in other modules."}, {"role": "assistant", "content": "\n#File: main.tf\nlocals {\n  network_count = var.to_create ? 1 : 0\n}\n# To contain each PE deployment, a fresh VPC to deploy into\nresource \"google_compute_network\" \"pe\" {\n  count                   = local.network_count\n  name                    = \"pe-${var.id}\"\n  auto_create_subnetworks = false\n}\n\n# Manual creation of subnets works better when instances are dependent on their\n# existence and allowing GCP to create them automatically creates a race\n# condition\nresource \"google_compute_subnetwork\" \"pe_west\" {\n  count         = local.network_count\n  name          = \"pe-${var.id}\"\n  ip_cidr_range = \"10.138.0.0/20\"\n  network       = google_compute_network.pe[0].self_link\n}\n\n# Instances should not be accessible by the open internet so a fresh VPC should\n# be restricted to specific allowed subnets\nresource \"google_compute_firewall\" \"pe_default\" {\n  count         = local.network_count\n  name          = \"pe-default-${var.id}\"\n  network       = google_compute_network.pe[0].self_link\n  priority      = 1000\n  source_ranges = var.allow\n  allow { protocol = \"icmp\" }\n  allow { protocol = \"tcp\" }\n  allow { protocol = \"udp\" }\n}\n\n#File: outputs.tf\n# Output data that will be used by other submodules to build other parts of the\n# stack to support defined architecture\noutput \"network_link\" {\n  value       = try(google_compute_network.pe[0].self_link, null)\n  description = \"The link to the VPC network created so it can inform other resource what network they are attached to\"\n}\n\noutput \"subnetwork_link\" {\n  value       = try(google_compute_subnetwork.pe_west[0].self_link, null)\n  description = \"The link to the created regional subnet so it can inform other resource what they are attached to\"\n}\n#File: variables.tf\n# These are the variables required for the networking submodule to function\n# properly and do not have any defaults set because this submodule should never\n# be called from anything else expect the main module where values for all these\n# variables will always be passed in\nvariable id {\n  description = \"Randomly generated value used to produce unique names for everything to prevent collisions and visually link resources together\"\n  type        = string\n}\nvariable \"allow\" {\n  description = \"List of permitted IP subnets\"\n  type        = list(string)\n}\nvariable \"to_create\" {\n  description = \"If the networks should be created\"\n  type        = bool\n  default     = true\n}\n#File: versions.tf\nterraform {\n  required_version = \">= 0.13.0\"\n}\n"}]}
{"messages": [{"role": "user", "content": "Create an Azure Resource Group named \"azure-gaming\" in North Europe. Establish a Virtual Network with an address space of 10.0.0.0/16 and a Subnet named \"internal\" with the address prefix 10.0.2.0/24. Provision a Public IP with the name \"main-ip\" using a static allocation method. Deploy a Windows Virtual Machine named \"main-machine\" using the specified VM size, admin credentials, and install the Nvidia GPU drivers via an extension. Configure the machine for Ansible using a custom script extension to enable remote management."}, {"role": "assistant", "content": "\n#File: main.tf\nprovider \"azurerm\" {\n  features {}\n}\n\nresource \"azurerm_resource_group\" \"main\" {\n  name     = var.resource_group_name\n  location = \"North Europe\"\n\n  tags = {\n    built_with  = \"Terraform\"\n  }\n}\n\nresource \"azurerm_virtual_network\" \"main\" {\n  name                = \"main-network\"\n  address_space       = [\"10.0.0.0/16\"]\n  location            = azurerm_resource_group.main.location\n  resource_group_name = azurerm_resource_group.main.name\n}\n\nresource \"azurerm_subnet\" \"main\" {\n  name                 = \"internal\"\n  resource_group_name  = azurerm_resource_group.main.name\n  virtual_network_name = azurerm_virtual_network.main.name\n  address_prefixes       = [\"10.0.2.0/24\"]\n}\n\nresource \"azurerm_public_ip\" \"main\" {\n  name                = \"main-ip\"\n  location            = azurerm_resource_group.main.location\n  resource_group_name = azurerm_resource_group.main.name\n  allocation_method   = \"Static\"\n}\n\nresource \"azurerm_network_interface\" \"main\" {\n  name                = \"main-nic\"\n  location            = azurerm_resource_group.main.location\n  resource_group_name = azurerm_resource_group.main.name\n\n  ip_configuration {\n    name                          = \"internal\"\n    subnet_id                     = azurerm_subnet.main.id\n    private_ip_address_allocation = \"Dynamic\"\n    public_ip_address_id          = azurerm_public_ip.main.id\n  }\n}\n\nresource \"random_password\" \"main\" {\n  length = 16\n  special = true\n  override_special = \"_%@\"\n}\n\nresource \"azurerm_windows_virtual_machine\" \"main\" {\n  name                = \"main-machine\"\n  resource_group_name = azurerm_resource_group.main.name\n  location            = azurerm_resource_group.main.location\n  priority            = \"Spot\"\n  max_bid_price       = 0.6\n  eviction_policy     = \"Deallocate\"\n  size                = var.vm_size\n  admin_username      = var.admin_username\n  admin_password      = random_password.main.result\n  allow_extension_operations = true\n  network_interface_ids = [\n    azurerm_network_interface.main.id,\n  ]\n\n  os_disk {\n    caching              = \"ReadWrite\"\n    storage_account_type = \"Standard_LRS\"\n  }\n\n  source_image_reference {\n    publisher = \"MicrosoftWindowsServer\"\n    offer     = \"WindowsServer\"\n    sku       = \"2019-Datacenter\"\n    version   = \"latest\"\n  }\n}\n\nresource \"azurerm_virtual_machine_extension\" \"gpudrivers\" {\n  name                 = \"NvidiaGpuDrivers\"\n  virtual_machine_id   = azurerm_windows_virtual_machine.main.id\n  publisher            = \"Microsoft.HpcCompute\"\n  type                 = \"NvidiaGpuDriverWindows\"\n  type_handler_version = \"1.3\"\n  auto_upgrade_minor_version = true\n\n}\n\nresource \"azurerm_virtual_machine_extension\" \"configureforansbile\" {\n  name                 = \"ConfigureAnsible\"\n  virtual_machine_id   = azurerm_windows_virtual_machine.main.id\n  publisher            = \"Microsoft.Compute\"\n  type                 = \"CustomScriptExtension\"\n  type_handler_version = \"1.9\"\n  settings = <<SETTINGS\n    {\n        \"commandToExecute\": \"powershell .\\\\ConfigureRemotingForAnsible.ps1\",\n        \"fileUris\" : [\"https://raw.githubusercontent.com/ansible/ansible/devel/examples/scripts/ConfigureRemotingForAnsible.ps1\"]\n     }\n  SETTINGS\n}\n#File: outputs.tf\n# output \"instance_ip\" {\n#   value = azurerm_windows_virtual_machine.main.ip\n# }\n\noutput \"instance_password\" {\n  value = random_password.main.result\n}\n#File: variables.tf\nvariable \"resource_group_name\" {\n  type = string\n  default = \"azure-gaming\"\n}\n\nvariable \"vm_size\" {\n  type    = string\n  default = \"Standard_NV12s_v3\"\n}\n\nvariable \"admin_username\" {\n  type    = string\n  default = \"CloudGamer\"\n}"}]}
{"messages": [{"role": "user", "content": "Create a Google Cloud provider configuration with the specified project ID, region, and zone. Deploy a containerized MongoDB instance with environment variables for the root username and password, using an in-memory volume for data storage. Allocate an external IP address and attach it to the VM instance running MongoDB. Set up a Google Compute Instance with appropriate metadata, labels, and network configurations. Establish a firewall rule to allow HTTP access on port 27017 for the MongoDB instance."}, {"role": "assistant", "content": "\n#File: 01-provider.tf\n# https://registry.terraform.io/providers/hashicorp/google/latest/docs\nprovider \"google\" {\n  project = var.project_id\n  region  = var.region\n  zone    = var.zone\n}\n\n#File: 02-container.tf\nmodule \"gce-container\" {\n  source  = \"terraform-google-modules/container-vm/google\"\n  version = \"~> 2.0\"\n\n  container = {\n    image = \"mongo:latest\"\n    env = [\n      {\n        name  = \"MONGO_INITDB_ROOT_USERNAME\",\n        value = var.mongo_username,\n      },\n      {\n        name  = \"MONGO_INITDB_ROOT_PASSWORD\",\n        value = var.mongo_password,\n      }\n    ]\n    volumeMounts = [\n      {\n        mountPath = \"/data/db\"\n        name      = \"data\"\n        readOnly  = false\n      }\n    ]\n  }\n\n  volumes = [\n    {\n      name = \"data\"\n      emptyDir = {\n        medium = \"Memory\"\n      }\n    }\n  ]\n  restart_policy = \"Always\"\n}\n\n#File: 03-vpc_ip.tf\ndata \"google_compute_address\" \"mongo\" {\n  name    = var.ip_name\n  project = var.project_id\n  region  = var.region\n}\n\n#File: 04-vm.tf\nresource \"google_compute_instance\" \"mongo-vm\" {\n  name         = var.vm_name\n  machine_type = var.machine_type\n  zone         = var.zone\n\n  boot_disk {\n    initialize_params {\n      image = module.gce-container.source_image\n    }\n  }\n\n  metadata = {\n    gce-container-declaration = module.gce-container.metadata_value\n  }\n\n  labels = {\n    container-vm = module.gce-container.vm_container_label\n  }\n\n  tags = [\"container-vm-mongo\"]\n\n  network_interface {\n    network = var.network\n    access_config {\n      nat_ip = data.google_compute_address.mongo.address\n    }\n  }\n}\n\n#File: 05-firewall.tf\nresource \"google_compute_firewall\" \"http-access\" {\n  name    = \"${var.vm_name}-http\"\n  project = var.project_id\n  network = var.network\n\n  allow {\n    protocol = \"tcp\"\n    ports    = [\"27017\"]\n  }\n\n  source_ranges = [\"0.0.0.0/0\"]\n  target_tags   = [\"container-vm-mongo\"]\n}\n\n#File: variables.tf\nvariable \"project_id\" {\n  type        = string\n  description = \"Project ID\"\n}\n\nvariable \"region\" {\n  type        = string\n  description = \"Region\"\n  default     = \"us-central1\"\n}\n\nvariable \"zone\" {\n  type        = string\n  description = \"Zone\"\n  default     = \"us-central1-a\"\n}\n\nvariable \"mongo_username\" {\n  type        = string\n  description = \"MongoDB Root Username\"\n}\nvariable \"mongo_password\" {\n  type        = string\n  description = \"MongoDB Root Password\"\n}\nvariable \"with_volumes\" {\n  default     = true\n  type        = bool\n  description = \"The container should have volumes\"\n}\n\nvariable \"ip_name\" {\n  type        = string\n  description = \"VPC External IP Name\"\n}\n\nvariable \"vm_name\" {\n  type        = string\n  description = \"VM Name\"\n}\nvariable \"machine_type\" {\n  type        = string\n  description = \"VM Name\"\n  default     = \"e2-micro\"\n}\n\nvariable \"network\" {\n  type        = string\n  description = \"Network\"\n  default     = \"default\"\n}\n"}]}
{"messages": [{"role":"user","content":"Set up a producer-consumer architecture on AWS using Lambda functions, SQS, and API Gateway for Blender. The producer Lambda is triggered via an HTTP API Gateway and sends messages to an SQS queue, while the consumer Lambda processes messages from the queue. It includes Docker-based Lambda deployments, IAM roles and policies, CloudWatch logging, and an S3 bucket for file storage."},{"role":"assistant","content":"provider \"aws\" {\r\n    region = var.aws_region\r\n\r\n    default_tags {\r\n        tags = var.default_tags\r\n    }\r\n}\r\n# variable \"aws_account_id\" {\r\n#     description = \"AWS Account ID\"\r\n\r\n#     type = string\r\n# }\r\n\r\nvariable \"aws_region\" {\r\n    description = \"AWS region for all resources\"\r\n\r\n    type = string\r\n    default = \"us-east-1\"\r\n}\r\n\r\nvariable \"producer_ecr_repo\" {\r\n    description = \"ECR repository name for producer function\"\r\n\r\n    type = string\r\n}\r\n\r\nvariable \"consumer_ecr_repo\" {\r\n    description = \"ECR repository name for consumer function\"\r\n\r\n    type = string\r\n}\r\n\r\nvariable \"lambda_bucket\" {\r\n    description = \"Bucket for all lambda archives\"\r\n\r\n    type = string\r\n    default = \"temp-lambda-archive-bucket\"\r\n}\r\n\r\nvariable \"default_tags\" {\r\n    type = map\r\n    description = \"Default tags to apply to all resources\"\r\n    default = {}\r\n}\r\n\r\nvariable \"producer_lambda_function_name\" {\r\n    description = \"Name of the producer lambda function\"\r\n\r\n    type = string\r\n    default = \"producer-lambda-function\"\r\n}\r\n\r\nvariable \"producer_api_gateway_name\" {\r\n    description = \"Name of the producer api gateway\"\r\n\r\n    type = string\r\n    default = \"producer-api-gateway\"\r\n}\r\n\r\nvariable \"producer_lambda_source_path\" {\r\n    description = \"Path to the producer lambda source\"\r\n\r\n    type = string\r\n    default = \"./producer_function\"\r\n}\r\n\r\nvariable \"producer_lambda_runtime\" {\r\n    description = \"Runtime for the producer lambda\"\r\n\r\n    type = string\r\n    default = \"python3.8\"\r\n}\r\n\r\nvariable \"producer_lambda_handler\" {\r\n    description = \"Handler for the producer lambda\"\r\n\r\n    type = string\r\n    default = \"producer_function.lambda_handler\"\r\n}\r\n\r\nvariable \"producer_apigateway_stage_name\" {\r\n    description = \"Name of the API gateway stage for the producer lambda\"\r\n\r\n    type = string\r\n    default = \"prod\"\r\n}\r\n\r\nvariable \"producer_invocation_route_key\" {\r\n    description = \"Route key for the producer lambda\"\r\n\r\n    type = string\r\n    default = \"POST /queue\"\r\n}\r\n\r\nvariable \"consumer_lambda_function_name\" {\r\n    description = \"Name of the consumer lambda\"\r\n\r\n    type = string\r\n    default = \"consumer-lambda-function\"\r\n}\r\n\r\nvariable \"consumer_lambda_runtime\" {\r\n    description = \"Runtime for the consumer lambda\"\r\n\r\n    type = string\r\n    default = \"python3.8\"\r\n}\r\n\r\nvariable \"consumer_lambda_handler\" {\r\n    description = \"Handler for the consumer lambda\"\r\n\r\n    type = string\r\n    default = \"consumer_function.lambda_handler\"\r\n}\r\n\r\nvariable \"consumer_lambda_source_path\" {\r\n    description = \"Path to the consumer lambda source\"\r\n\r\n    type = string\r\n    default = \"./consumer_function\"\r\n}\r\n\r\nvariable \"queue_name\" {\r\n    description = \"Name of the queue\"\r\n\r\n    type = string\r\n    default = \"producer-consumer-queue\"\r\n}\r\n\r\nvariable \"consumer_timeout_seconds\" {\r\n    description = \"Timeout for the consumer lambda\"\r\n\r\n    type = number\r\n    default = 900\r\n}\r\nmodule \"producer_docker_image\" {\r\n    source = \"terraform-aws-modules/lambda/aws//modules/docker-build\"\r\n\r\n    create_ecr_repo = true\r\n    ecr_repo = var.producer_ecr_repo\r\n    source_path = abspath(var.producer_lambda_source_path)\r\n}\r\n\r\nresource \"aws_lambda_function\" \"producer_lambda\" {\r\n    function_name = var.producer_lambda_function_name\r\n\r\n    package_type = \"Image\"\r\n    image_uri = module.producer_docker_image.image_uri\r\n    role = aws_iam_role.lambda_exec.arn\r\n    timeout = 120\r\n\r\n    environment {\r\n        variables = {\r\n            \"QUEUE_NAME\" = aws_sqs_queue.queue.name,\r\n            \"S3_BUCKET_NAME\" = aws_s3_bucket.lambda_bucket.id,\r\n        }\r\n    }\r\n}\r\n\r\nresource \"aws_cloudwatch_log_group\" \"producer_lambda_log_group\" {\r\n    name = \"/aws/lambda/${aws_lambda_function.producer_lambda.function_name}\"\r\n\r\n    retention_in_days = 30\r\n}\r\n\r\nresource \"aws_apigatewayv2_api\" \"lambda\" {\r\n    name = var.producer_api_gateway_name\r\n    protocol_type = \"HTTP\"\r\n}\r\n\r\nresource \"aws_apigatewayv2_stage\" \"lambda\" {\r\n    api_id = aws_apigatewayv2_api.lambda.id\r\n\r\n    name = var.producer_apigateway_stage_name\r\n    auto_deploy = true\r\n\r\n    access_log_settings {\r\n        destination_arn = aws_cloudwatch_log_group.api_gw.arn\r\n\r\n        format = jsonencode({\r\n            requestId = \"$context.requestId\",\r\n            sourceIp = \"$context.identity.sourceIp\",\r\n            requestTime = \"$context.requestTime\",\r\n            protocol = \"$context.protocol\",\r\n            httpMethod = \"$context.httpMethod\",\r\n            resourcePath = \"$context.resourcePath\",\r\n            routeKey = \"$context.routeKey\",\r\n            status = \"$context.status\",\r\n            responseLength = \"$context.responseLength\",\r\n            integrationErrorMessage = \"$context.integrationErrorMessage\",\r\n        })\r\n    }\r\n}\r\n\r\nresource \"aws_apigatewayv2_integration\" \"queue\" {\r\n    api_id = aws_apigatewayv2_api.lambda.id\r\n\r\n    integration_uri = aws_lambda_function.producer_lambda.invoke_arn\r\n    integration_type = \"AWS_PROXY\"\r\n    integration_method = \"POST\"\r\n}\r\n\r\nresource \"aws_apigatewayv2_route\" \"queue\" {\r\n    api_id = aws_apigatewayv2_api.lambda.id\r\n\r\n    route_key = var.producer_invocation_route_key\r\n    target = \"integrations/${aws_apigatewayv2_integration.queue.id}\"\r\n}\r\n\r\nresource \"aws_cloudwatch_log_group\" \"api_gw\" {\r\n    name = \"/aws/api_gw/${aws_apigatewayv2_api.lambda.name}\"\r\n\r\n    retention_in_days = 30\r\n}\r\n\r\nresource \"aws_lambda_permission\" \"api_gw\" {\r\n    statement_id = \"AllowExecutionFromAPIGateway\"\r\n    action = \"lambda:InvokeFunction\"\r\n    function_name = aws_lambda_function.producer_lambda.function_name\r\n    principal = \"apigateway.amazonaws.com\"\r\n\r\n    source_arn = \"${aws_apigatewayv2_api.lambda.execution_arn}/*/*\"\r\n}\r\nresource \"aws_s3_bucket\" \"lambda_bucket\" {\r\n    bucket = var.lambda_bucket\r\n    acl = \"private\"\r\n    force_destroy = true\r\n}\r\n\r\nresource \"aws_iam_role\" \"lambda_exec\" {\r\n    name = \"lambda_role\"\r\n\r\n    assume_role_policy = jsonencode({\r\n        Version = \"2012-10-17\",\r\n        Statement = [{\r\n            Action = \"sts:AssumeRole\",\r\n            Effect = \"Allow\",\r\n            Sid = \"\",\r\n            Principal = {\r\n                Service = \"lambda.amazonaws.com\"\r\n            }\r\n        }]\r\n    })\r\n}\r\n\r\ndata \"aws_iam_policy_document\" \"lambda_policy_document\" {\r\n    statement {\r\n        sid = \"LambdaPolicyQueueAccess\"\r\n        actions = [\r\n            \"sqs:ReceiveMessage\",\r\n            \"sqs:DeleteMessage\",\r\n            \"sqs:GetQueueAttributes\",\r\n            \"sqs:SendMessage\",\r\n            \"sqs:GetQueueUrl\"\r\n        ]\r\n        resources = [\r\n            aws_sqs_queue.queue.arn\r\n        ]\r\n    }\r\n\r\n    statement {\r\n        sid = \"LambdaPolicyS3Access\"\r\n        actions = [\r\n            \"s3:GetObject\",\r\n            \"s3:PutObject\",\r\n            \"s3:DeleteObject\",\r\n            \"s3:ListBucket\",\r\n            \"s3:GetBucketLocation\",\r\n            \"s3:GetBucketPolicy\",\r\n            \"s3:GetBucketTagging\",\r\n            \"s3:GetBucketVersioning\",\r\n            \"s3:GetBucketWebsite\",\r\n            \"s3:GetLifecycleConfiguration\",\r\n        ]\r\n        resources = [\r\n            aws_s3_bucket.lambda_bucket.arn,\r\n            format(\"%s%s\", aws_s3_bucket.lambda_bucket.arn, \"/*\")\r\n        ]\r\n    }\r\n}\r\n\r\nresource \"aws_iam_policy\" \"lambda_policy\" {\r\n    name = \"lambda_policy\"\r\n    policy = data.aws_iam_policy_document.lambda_policy_document.json\r\n}\r\n\r\nresource \"aws_iam_role_policy_attachment\" \"lambda_sqs_policy\" {\r\n    role = aws_iam_role.lambda_exec.name\r\n    policy_arn = aws_iam_policy.lambda_policy.arn\r\n}\r\n\r\nresource \"aws_iam_role_policy_attachment\" \"lambda_basic_policy\" {\r\n    role = aws_iam_role.lambda_exec.name\r\n    policy_arn = \"arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\"\r\n}\r\n\r\nresource \"aws_sqs_queue\" \"queue\" {\r\n    name = var.queue_name\r\n\r\n    visibility_timeout_seconds = var.consumer_timeout_seconds\r\n}\r\nmodule \"consumer_docker_image\" {\r\n    source = \"terraform-aws-modules/lambda/aws//modules/docker-build\"\r\n\r\n    create_ecr_repo = true\r\n    ecr_repo = var.consumer_ecr_repo\r\n    source_path = abspath(var.consumer_lambda_source_path)\r\n}\r\n\r\nresource \"aws_lambda_function\" \"consumer_lambda\" {\r\n    function_name = var.consumer_lambda_function_name\r\n\r\n    package_type = \"Image\"\r\n    image_uri = module.consumer_docker_image.image_uri\r\n    role = aws_iam_role.lambda_exec.arn\r\n    timeout = var.consumer_timeout_seconds\r\n    memory_size = 3009\r\n\r\n    environment {\r\n        variables = {\r\n            \"QUEUE_NAME\" = aws_sqs_queue.queue.name,\r\n            \"S3_BUCKET_NAME\" = aws_s3_bucket.lambda_bucket.id,\r\n        }\r\n    }\r\n}\r\n\r\nresource \"aws_lambda_event_source_mapping\" \"event_source_mapping\" {\r\n    event_source_arn = aws_sqs_queue.queue.arn\r\n    enabled = true\r\n    function_name = aws_lambda_function.consumer_lambda.arn\r\n    batch_size = 1\r\n}\r\n\r\n\r\nresource \"aws_cloudwatch_log_group\" \"consumer_lambda_log_group\" {\r\n    name = \"/aws/lambda/${aws_lambda_function.consumer_lambda.function_name}\"\r\n\r\n    retention_in_days = 30\r\n}"}]}
{"messages": [{"role": "user", "content": "Create a Terraform configuration that initializes the required Azure providers. Define a resource group and create a virtual network along with a subnet. Generate a public IP and configure a network security group with an SSH rule. Provision a Linux virtual machine with a network interface connected to the subnet and security group. Set up a JMusicBot by installing it via a VM extension and create an Azure Function App for handling Discord commands."}, {"role": "assistant", "content": "\n#File: main.tf\n# author: Rudy Corradetti\nterraform {\n  required_version = \">=0.12\"\n  required_providers {\n    azurerm = {\n      source  = \"hashicorp/azurerm\"\n      version = \"~>3.0\"\n    }\n    tls = {\n      source  = \"hashicorp/tls\"\n      version = \"~>4.0\"\n    }\n    http = {\n      source  = \"hashicorp/http\"\n      version = \"~>3.0\"\n    }\n    random = {\n      source  = \"hashicorp/random\"\n      version = \"~>3.0\"\n    }\n  }\n}\n\nprovider \"azurerm\" {\n  features {}\n  subscription_id = var.sub\n}\n\n# Data source to fetch latest release information\ndata \"http\" \"latest_release\" {\n  url = \"https://api.github.com/repos/jagrosh/MusicBot/releases/latest\"\n  request_headers = {\n    Accept = \"application/vnd.github.v3+json\"\n  }\n}\n\nlocals {\n  latest_version = jsondecode(data.http.latest_release.response_body).tag_name\n  jar_filename   = \"JMusicBot-${local.latest_version}.jar\"\n  download_url   = \"https://github.com/jagrosh/MusicBot/releases/download/${local.latest_version}/${local.jar_filename}\"\n}\n\n# Create a random string for the storage account name\nresource \"random_string\" \"sa_suffix\" {\n  length  = 5\n  special = false\n  upper   = false\n  numeric = true\n  lower   = true\n}\n\n# Resource group\nresource \"azurerm_resource_group\" \"rg1\" {\n  name     = var.rg\n  location = var.rg_loc\n}\n\n# Virtual network\nresource \"azurerm_virtual_network\" \"vnet1\" {\n  name                = var.net\n  address_space       = [\"10.0.0.0/23\"]\n  location            = azurerm_resource_group.rg1.location\n  resource_group_name = azurerm_resource_group.rg1.name\n}\n\n# Subnet\nresource \"azurerm_subnet\" \"subnet1\" {\n  name                 = var.subnet\n  resource_group_name  = azurerm_resource_group.rg1.name\n  virtual_network_name = azurerm_virtual_network.vnet1.name\n  address_prefixes     = [\"10.0.1.0/24\"]\n}\n\n# Public IP\nresource \"azurerm_public_ip\" \"public_ip\" {\n  name                = var.pub_ip\n  location            = azurerm_resource_group.rg1.location\n  resource_group_name = azurerm_resource_group.rg1.name\n  allocation_method   = var.pub_allocation_method\n}\n\n# Network security group\nresource \"azurerm_network_security_group\" \"nsg\" {\n  name                = var.nsg\n  location            = azurerm_resource_group.rg1.location\n  resource_group_name = azurerm_resource_group.rg1.name\n\n  security_rule {\n    name                       = \"ssh\"\n    priority                   = 1001\n    direction                  = \"Inbound\"\n    access                     = \"Allow\"\n    protocol                   = \"Tcp\"\n    source_port_range          = \"*\"\n    destination_port_range     = \"22\"\n    source_address_prefix      = \"*\"\n    destination_address_prefix = \"*\"\n  }\n}\n\n# Network interface\nresource \"azurerm_network_interface\" \"nic\" {\n  name                = var.nic_name\n  location            = azurerm_resource_group.rg1.location\n  resource_group_name = azurerm_resource_group.rg1.name\n\n  ip_configuration {\n    name                          = var.nic_priv_ip_name\n    subnet_id                     = azurerm_subnet.subnet1.id\n    private_ip_address_allocation = var.priv_allocation_method\n    public_ip_address_id          = azurerm_public_ip.public_ip.id\n  }\n}\n\n# Connect the security group to the network interface\nresource \"azurerm_network_interface_security_group_association\" \"nsg_nic_assoc\" {\n  network_interface_id      = azurerm_network_interface.nic.id\n  network_security_group_id = azurerm_network_security_group.nsg.id\n}\n\n# SSH key\nresource \"tls_private_key\" \"linux_test_ssh\" {\n  algorithm = \"RSA\"\n  rsa_bits  = 4096\n}\n\n# Virtual machine\nresource \"azurerm_linux_virtual_machine\" \"vm1\" {\n  name                            = var.vm_name\n  location                        = azurerm_resource_group.rg1.location\n  resource_group_name             = azurerm_resource_group.rg1.name\n  network_interface_ids           = [azurerm_network_interface.nic.id]\n  size                            = var.vm_size\n  admin_username                  = var.vm_admin_username\n  disable_password_authentication = true\n\n  admin_ssh_key {\n    username   = var.vm_admin_username\n    public_key = tls_private_key.linux_test_ssh.public_key_openssh\n  }\n\n  os_disk {\n    name                 = var.os_disk_name\n    caching              = \"ReadWrite\"\n    storage_account_type = \"Standard_LRS\"\n  }\n\n  source_image_reference {\n    publisher = var.vm_image_publisher\n    offer     = var.vm_image_offer\n    sku       = var.vm_image_sku\n    version   = var.vm_image_version\n  }\n\n  identity {\n    type = \"SystemAssigned\"\n  }\n\n  lifecycle {\n    ignore_changes = [boot_diagnostics]\n  }\n}\n\n# VM extension to set up JMusicBot\nresource \"azurerm_virtual_machine_extension\" \"setup_jmusicbot\" {\n  name                 = \"setup_jmusicbot\"\n  virtual_machine_id   = azurerm_linux_virtual_machine.vm1.id\n  publisher            = \"Microsoft.Azure.Extensions\"\n  type                 = \"CustomScript\"\n  type_handler_version = \"2.1\"\n\n  settings = jsonencode({\n    \"script\" : base64encode(<<-EOT\n#!/bin/bash\nset -e\necho \"Starting JMusicBot setup...\"\n\n# Install Java and curl\nsudo apt-get update\nsudo apt-get install -y default-jre curl\n\n# Create directory for JMusicBot\nsudo mkdir -p /opt/jmusicbot\ncd /opt/jmusicbot\n\n# Define JMusicBot version and download URL\nJMUSICBOT_VERSION=\"0.4.3\"\nJAR_FILENAME=\"JMusicBot-$${JMUSICBOT_VERSION}.jar\"\nDOWNLOAD_URL=\"https://github.com/jagrosh/MusicBot/releases/download/$${JMUSICBOT_VERSION}/$${JAR_FILENAME}\"\n\n# Download JAR file directly from GitHub\ncurl -L -o \"$${JAR_FILENAME}\" \"$${DOWNLOAD_URL}\"\n\n# Create config file\ncat << EOF > config.txt\ntoken = ${var.discord_bot_token}\nowner = ${var.discord_bot_owner}\nprefix = \"${var.discord_bot_prefix}\"\nEOF\n\n# Create systemd service file\ncat << EOF | sudo tee /etc/systemd/system/jmusicbot.service\n[Unit]\nDescription=JMusicBot Service\nAfter=network.target\n\n[Service]\nExecStart=/usr/bin/java -Dnogui=true -jar /opt/jmusicbot/$${JAR_FILENAME}\nWorkingDirectory=/opt/jmusicbot\nUser=nobody\nGroup=nogroup\nRestart=always\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\n# Set proper permissions\nsudo chown -R nobody:nogroup /opt/jmusicbot\nsudo chmod 644 /opt/jmusicbot/$${JAR_FILENAME}\nsudo chmod 644 /opt/jmusicbot/config.txt\n\n# Reload systemd, enable and start the service\nsudo systemctl daemon-reload\nsudo systemctl enable jmusicbot.service\nsudo systemctl start jmusicbot.service\n\necho \"JMusicBot setup completed.\"\nEOT\n    )\n  })\n\n  depends_on = [\n    azurerm_linux_virtual_machine.vm1\n  ]\n}\n# Storage account for function app\nresource \"azurerm_storage_account\" \"functionapp_sa\" {\n  name                     = \"jdiscord${random_string.sa_suffix.result}\"\n  resource_group_name      = azurerm_resource_group.rg1.name\n  location                 = azurerm_resource_group.rg1.location\n  account_tier             = \"Standard\"\n  account_replication_type = \"LRS\"\n}\n\nresource \"azurerm_storage_container\" \"functionapp_container\" {\n  name                  = \"jdiscord-code\"\n  storage_account_name  = azurerm_storage_account.functionapp_sa.name\n  container_access_type = \"private\"\n}\n\n# Linux app service plan\nresource \"azurerm_service_plan\" \"functionapp_plan\" {\n  name                = \"jdiscord-app-service-plan\"\n  location            = azurerm_resource_group.rg1.location\n  resource_group_name = azurerm_resource_group.rg1.name\n  os_type             = \"Linux\"\n  sku_name            = \"Y1\"\n}\n\n# Application insights for monitoring\nresource \"azurerm_application_insights\" \"app_insights\" {\n  name                = \"jdiscord-appinsights\"\n  location            = azurerm_resource_group.rg1.location\n  resource_group_name = azurerm_resource_group.rg1.name\n  application_type    = \"web\"\n}\n\n# Linux function app\nresource \"azurerm_linux_function_app\" \"jdiscord_function\" {\n  name                       = \"jdiscord-function\"\n  location                   = azurerm_resource_group.rg1.location\n  resource_group_name        = azurerm_resource_group.rg1.name\n  service_plan_id            = azurerm_service_plan.functionapp_plan.id\n  storage_account_name       = azurerm_storage_account.functionapp_sa.name\n  storage_account_access_key = azurerm_storage_account.functionapp_sa.primary_access_key\n  \n  app_settings = {\n    \"FUNCTIONS_WORKER_RUNTIME\"       = \"node\"\n    \"GENERAL_CHANNEL_ID\"             = var.general_channel_id\n    \"AFK_CHANNEL_ID\"                 = var.afk_channel_id\n    \"MUSIC_CHANNEL_ID\"               = var.music_channel_id\n    \"DISCORD_BOT_TOKEN\"              = var.discord_bot_token\n    \"AZURE_TENANT_ID\"                = var.azure_tenant_id\n    \"AZURE_CLIENT_ID\"                = var.azure_client_id\n    \"AZURE_CLIENT_SECRET\"            = var.azure_client_secret\n    \"SUBSCRIPTION_ID\"                = var.sub\n    \"RESOURCE_GROUP_NAME\"            = azurerm_resource_group.rg1.name\n    \"VM_NAME\"                        = var.vm_name\n    \"APPINSIGHTS_INSTRUMENTATIONKEY\" = azurerm_application_insights.app_insights.instrumentation_key\n  }\n  \n  site_config {\n    application_stack {\n      node_version = \"18\"\n    }\n  }\n  \n  lifecycle {\n    ignore_changes = [\n      app_settings[\"APPINSIGHTS_INSTRUMENTATIONKEY\"],\n      site_config[0].application_insights_key,\n    ]\n  }\n}\n#File: variables.tf\nvariable \"azure_tenant_id\" {\n  type        = string\n  description = \"The tenant ID of the Service Principal.\"\n}\n\nvariable \"sub\" {\n  type        = string\n  description = \"The subscription ID of the Azure subscription.\"\n}\n\nvariable \"rg\" {\n  type        = string\n  description = \"The name of the resource group.\"\n  default     = \"jdiscordbot-rg\"\n}\n\nvariable \"rg_loc\" {\n  type        = string\n  description = \"The location of the resource group.\"\n  default     = \"eastus\"\n}\n\nvariable \"net\" {\n  type        = string\n  description = \"The name of the virtual network.\"\n  default     = \"jdiscordbot-vnet\"\n}\n\nvariable \"subnet\" {\n  type        = string\n  description = \"The name of the subnet.\"\n  default     = \"jdiscordbot-snet\"\n}\n\nvariable \"pub_ip\" {\n  type        = string\n  description = \"The name of the public IP.\"\n  default     = \"jdb-pub_ip\"\n}\n\nvariable \"nic_name\" {\n  type        = string\n  description = \"The name of the network interface.\"\n  default     = \"jdb-nic\"\n}\n\nvariable \"nic_priv_ip_name\" {\n  type        = string\n  description = \"The name of the private IP configuration.\"\n  default     = \"jdb-priv_ip-config\"\n}\n\nvariable \"nsg\" {\n  type        = string\n  description = \"The name of the network security group.\"\n  default     = \"jdb-nsg\"\n}\n\nvariable \"vm_name\" {\n  type        = string\n  description = \"The name of the virtual machine.\"\n  default     = \"jdb-vm\"\n}\n\nvariable \"vm_size\" {\n  type        = string\n  description = \"The size of the virtual machine.\"\n  default     = \"Standard_B1ms\"\n}\nvariable \"vm_image_publisher\" {\n  type        = string\n  description = \"The publisher of the VM image.\"\n  default     = \"canonical\"\n}\n\nvariable \"vm_image_offer\" {\n  type        = string\n  description = \"The offer of the VM image.\"\n  default     = \"ubuntuserver\"\n}\n\nvariable \"vm_image_sku\" {\n  type        = string\n  description = \"The SKU of the VM image.\"\n  default     = \"18_04-lts-gen2\"\n}\n\nvariable \"vm_image_version\" {\n  type        = string\n  description = \"The version of the VM image.\"\n  default     = \"18.04.202103250\"\n}\n\nvariable \"os_disk_name\" {\n  type        = string\n  description = \"The name of the OS disk.\"\n  default     = \"os-disk\"\n}\n\nvariable \"vm_admin_username\" {\n  type        = string\n  description = \"The admin username for the VM.\"\n  default     = \"rc\"\n}\n\nvariable \"pub_allocation_method\" {\n  type        = string\n  description = \"The allocation method for the public IP.\"\n  default     = \"Dynamic\"\n}\n\nvariable \"priv_allocation_method\" {\n  type        = string\n  description = \"The allocation method for the private IP.\"\n  default     = \"Dynamic\"\n}\n\nvariable \"remove_tfjdiscord_command\" {\n  type        = string\n  description = \"The command to remove the tf-jdiscord directory.\"\n  default     = \"[ -d \\\"tf-jdiscord\\\" ] && rm -rf tf-jdiscord\"\n}\n\nvariable \"repo_url\" {\n  type        = string\n  description = \"The URL of the GitHub repository.\"\n  default     = \"https://github.com/RCFromCLE/terraform-azurerm-jmusicbot.git\"\n}\n\nvariable \"jar_path\" {\n  type        = string\n  description = \"The path to the JMusicBot JAR file.\"\n  default = \"JMusicBot-0.4.3.jar\"\n}\n\nvariable \"discord_bot_token\" {\n  type        = string\n  description = \"The Discord bot token.\"\n  sensitive   = true\n}\n\nvariable \"azure_client_id\" {\n  type        = string\n  description = \"The client ID of the Service Principal.\"\n}\n\nvariable \"azure_client_secret\" {\n  type        = string\n  description = \"The client secret of the Service Principal.\"\n  sensitive   = true\n}\n\nvariable \"general_channel_id\" {\n  type        = string\n  description = \"The channel ID of the general channel in the Discord server.\"\n}\n\nvariable \"afk_channel_id\" {\n  type        = string\n  description = \"The channel ID of the AFK channel in the Discord server.\"\n}\n\nvariable \"music_channel_id\" {\n  type        = string\n  description = \"The channel ID of the music channel in the Discord server.\"\n}\n\nvariable \"discord_bot_owner\" {\n  type        = string\n  description = \"The owner ID for the Discord bot\"\n}\n\nvariable \"discord_bot_prefix\" {\n  type        = string\n  description = \"The command prefix for the Discord bot\"\n  default     = \"!\"\n}\nvariable \"key_vault_name\" {\n  type        = string\n  description = \"The name of the key vault.\"\n  default     = \"jdiscord-kv\"\n}\nvariable \"key_vault_resource_group_name\" {\n  type        = string\n  description = \"The name of the resource group for the key vault.\"\n  default     = \"jdiscord-kv-rg\"    \n}"}]}
{"messages": [{"role":"user","content":"Provide an AWS VPC and an Amazon EKS cluster with two managed node groups using the official Terraform AWS modules, while filtering availability zones to exclude unsupported local zones. It sets up private and public subnets, enables a single NAT gateway, and configures Kubernetes-specific subnet tags for load balancers. Additionally, it creates an IAM role with OIDC trust for the Amazon EBS CSI driver addon, granting the necessary permissions for dynamic EBS volume provisioning within the EKS cluster."},{"role":"assistant","content":"\r\nvariable \"region\" {\r\n  description = \"AWS region\"\r\n  type        = string\r\n  default     = \"us-east-2\"\r\n}\r\n\r\n\r\nprovider \"aws\" {\r\n  region = var.region\r\n}\r\n\r\n# Filter out local zones, which are not currently supported \r\n# with managed node groups\r\ndata \"aws_availability_zones\" \"available\" {\r\n  filter {\r\n    name   = \"opt-in-status\"\r\n    values = [\"opt-in-not-required\"]\r\n  }\r\n}\r\n\r\nlocals {\r\n  cluster_name = \"education-eks-${random_string.suffix.result}\"\r\n}\r\n\r\nresource \"random_string\" \"suffix\" {\r\n  length  = 8\r\n  special = false\r\n}\r\n\r\nmodule \"vpc\" {\r\n  source  = \"terraform-aws-modules/vpc/aws\"\r\n\r\n  name = \"education-vpc\"\r\n\r\n  cidr = \"10.0.0.0/16\"\r\n  azs  = slice(data.aws_availability_zones.available.names, 0, 3)\r\n\r\n  private_subnets = [\"10.0.1.0/24\", \"10.0.2.0/24\", \"10.0.3.0/24\"]\r\n  public_subnets  = [\"10.0.4.0/24\", \"10.0.5.0/24\", \"10.0.6.0/24\"]\r\n\r\n  enable_nat_gateway   = true\r\n  single_nat_gateway   = true\r\n  enable_dns_hostnames = true\r\n\r\n  public_subnet_tags = {\r\n    \"kubernetes.io/role/elb\" = 1\r\n  }\r\n\r\n  private_subnet_tags = {\r\n    \"kubernetes.io/role/internal-elb\" = 1\r\n  }\r\n}\r\n\r\nmodule \"eks\" {\r\n  source  = \"terraform-aws-modules/eks/aws\"\r\n\r\n  cluster_name    = local.cluster_name\r\n\r\n  cluster_endpoint_public_access           = true\r\n  enable_cluster_creator_admin_permissions = true\r\n\r\n  cluster_addons = {\r\n    aws-ebs-csi-driver = {\r\n      service_account_role_arn = module.irsa-ebs-csi.iam_role_arn\r\n    }\r\n  }\r\n\r\n  vpc_id     = module.vpc.vpc_id\r\n  subnet_ids = module.vpc.private_subnets\r\n\r\n  eks_managed_node_group_defaults = {\r\n    ami_type = \"AL2_x86_64\"\r\n\r\n  }\r\n\r\n  eks_managed_node_groups = {\r\n    one = {\r\n      name = \"node-group-1\"\r\n\r\n      instance_types = [\"t3.small\"]\r\n\r\n      min_size     = 1\r\n      max_size     = 3\r\n      desired_size = 2\r\n    }\r\n\r\n    two = {\r\n      name = \"node-group-2\"\r\n\r\n      instance_types = [\"t3.small\"]\r\n\r\n      min_size     = 1\r\n      max_size     = 2\r\n      desired_size = 1\r\n    }\r\n  }\r\n}\r\n\r\n\r\n# https://aws.amazon.com/blogs/containers/amazon-ebs-csi-driver-is-now-generally-available-in-amazon-eks-add-ons/ \r\ndata \"aws_iam_policy\" \"ebs_csi_policy\" {\r\n  arn = \"arn:aws:iam::aws:policy/service-role/AmazonEBSCSIDriverPolicy\"\r\n}\r\n\r\nmodule \"irsa-ebs-csi\" {\r\n  source  = \"terraform-aws-modules/iam/aws//modules/iam-assumable-role-with-oidc\"\r\n\r\n  create_role                   = true\r\n  role_name                     = \"AmazonEKSTFEBSCSIRole-${module.eks.cluster_name}\"\r\n  provider_url                  = module.eks.oidc_provider\r\n  role_policy_arns              = [data.aws_iam_policy.ebs_csi_policy.arn]\r\n  oidc_fully_qualified_subjects = [\"system:serviceaccount:kube-system:ebs-csi-controller-sa\"]\r\n}\r\n"}]}
{"messages": [{"role": "user", "content": "Create a VPC with a custom name using the application name and environment. Define firewall rules to allow HTTPS and RDP traffic on the specified ports. Create a public subnet using the provided CIDR range and region. Generate a Windows VM instance with a dynamic name, configured with the specified instance type and metadata. Output the VM's name and both internal and external IP addresses."}, {"role": "assistant", "content": "\n#File: app-variables.tf\n#############################\n## Application - Variables ##\n#############################\n\n# application name \nvariable \"app_name\" {\n  type        = string\n  description = \"This variable defines the application name used to build resources\"\n  default     = \"kopicloud-ad-api-2022\"\n}\n\n# domain name \nvariable \"app_domain\" {\n  type        = string\n  description = \"This variable defines the domain name used to build resources\"\n}\n\n# environment\nvariable \"environment\" {\n  type        = string\n  description = \"This variable defines the environment to be built\"\n}\n\n\n#File: network-firewall.tf\n###################################\n## Network Firewall Rules - Main ##\n###################################\n\n# allow https\nresource \"google_compute_firewall\" \"allow-https\" {\n  name    = \"${var.app_name}-${var.environment}-fw-allow-https\"\n  network = google_compute_network.vpc.name\n  allow {\n    protocol = \"tcp\"\n    ports    = [\"443\"]\n  }\n\n  source_ranges = [\"0.0.0.0/0\"]\n  target_tags = [\"https-server\"] \n}\n\n# allow rdp\nresource \"google_compute_firewall\" \"allow-rdp\" {\n  name    = \"${var.app_name}-${var.environment}-fw-allow-rdp\"\n  network = google_compute_network.vpc.name\n  allow {\n    protocol = \"tcp\"\n    ports    = [\"3389\"]\n  }\n\n  source_ranges = [\"0.0.0.0/0\"]\n  target_tags = [\"rdp\"]\n}\n\n#File: network-main.tf\n####################\n## Network - Main ##\n####################\n\n# create VPC\nresource \"google_compute_network\" \"vpc\" {\n  name                    = \"${var.app_name}-${var.environment}-vpc\"\n  auto_create_subnetworks = \"false\"\n  routing_mode            = \"GLOBAL\"\n}\n\n# create public subnet\nresource \"google_compute_subnetwork\" \"network_subnet\" {\n  name          = \"${var.app_name}-${var.environment}-subnet\"\n  ip_cidr_range = var.network-subnet-cidr\n  network       = google_compute_network.vpc.name\n  region        = var.gcp_region\n}\n\n#File: network-variables.tf\n#########################\n## Network - Variables ##\n#########################\n\nvariable \"network-subnet-cidr\" {\n  type        = string\n  description = \"The CIDR for the network subnet\"\n}\n#File: provider-main.tf\n#########################\n## GCP Provider - Main ##\n#########################\n\n# Define Terraform provider\nterraform {\n  required_version = \"~> 1.3\"\n\n  required_providers {\n    google = {\n      source = \"hashicorp/google\"\n      version = \"~>4.0\" #\n    }\n  }\n}\n\nprovider \"google\" {\n  credentials = file(var.gcp_auth_file)\n  project     = var.gcp_project\n  region      = var.gcp_region\n  zone        = var.gcp_zone\n}\n\n#File: provider-variables.tf\n##############################\n## GCP Provider - Variables ##\n##############################\n\n# GCP authentication file\nvariable \"gcp_auth_file\" {\n  type        = string\n  description = \"GCP authentication file\"\n}\n\n# define GCP project name\nvariable \"gcp_project\" {\n  type        = string\n  description = \"GCP project name\"\n}\n\n# define GCP region\nvariable \"gcp_region\" {\n  type        = string\n  description = \"GCP region\"\n}\n\n# define GCP region\nvariable \"gcp_zone\" {\n  type        = string\n  description = \"GCP zone\"\n}\n\n#File: windows-versions.tf\n######################\n## Windows Versions ##\n######################\n\nvariable \"windows_2022_sku\" {\n  type        = string\n  description = \"SKU for Windows Server 2022\"\n  default     = \"windows-cloud/windows-2022\"\n}\n\n#File: windows-vm-main.tf\n###########################\n## GCP Windows VM - Main ##\n###########################\n\n# Terraform plugin for creating random ids\nresource \"random_id\" \"instance_id\" {\n  byte_length = 4\n}\n\n# Download script from github\ndata \"http\" \"powershell_script\" {\n  url = \"https://raw.githubusercontent.com/KopiCloud-AD-API/kopicloud-ad-api-setup-scripts/main/setup-win2022.ps1\"\n}\n\nresource \"local_file\" \"powershell_script\" {\n  content  = data.http.powershell_script.response_body\n  filename = \"${path.module}/local_script_path.ps1\"\n}\n\n# Create VM\nresource \"google_compute_instance\" \"api\" {\n  name         = \"${var.app_name}-${var.environment}-vm${random_id.instance_id.hex}\"\n  machine_type = var.windows_instance_type\n  zone         = var.gcp_zone\n  hostname     = \"${var.app_name}-vm${random_id.instance_id.hex}.${var.app_domain}\"\n  tags         = [\"rdp\", \"https-server\"]\n\n  boot_disk {\n    initialize_params {\n      image = var.windows_2022_sku\n    }\n  }\n\n  network_interface {\n    network    = google_compute_network.vpc.name\n    subnetwork = google_compute_subnetwork.network_subnet.name\n    access_config {}\n  }\n\n  metadata = {\n    \"windows-startup-script-ps1\" = data.http.powershell_script.response_body\n  }\n}\n#File: windows-vm-output.tf\n#############################\n## GCP Windows VM - Output ##\n#############################\n\noutput \"vm-name\" {\n  value = google_compute_instance.api.name\n}\n\noutput \"vm-external-ip\" {\n  value = google_compute_instance.api.network_interface.0.access_config.0.nat_ip\n}\n\noutput \"vm-internal-ip\" {\n  value = google_compute_instance.api.network_interface.0.network_ip\n}\n\n#File: windows-vm-variables.tf\n################################\n## GCP Windows VM - Variables ##\n################################\n\nvariable \"windows_instance_type\" {\n  type        = string\n  description = \"VM instance type\"\n  default     = \"n2-standard-2\"\n}\n"}]}
{"messages": [{"role": "user", "content": "Create an Azure provider configuration in Terraform specifying the version as \"~> 3.10.0\". Create a resource group in a specified location with a given name. Establish a virtual network with a defined address space and link it to the resource group. Create a subnet within the virtual network and associate it with a network security group that includes inbound rules for HTTP and SSH. Deploy a Linux virtual machine, configure its networking, and set up an Azure Kubernetes Cluster along with a container registry for image storage."}, {"role": "assistant", "content": "\n#File: main.tf\n# Configure the Azure provider\nterraform {\n  required_providers {\n    azurerm = {\n      source  = \"hashicorp/azurerm\"\n      version = \"~> 3.10.0\"\n    }\n  }\n\n  required_version = \">= 1.1.0\"\n}\n\nprovider \"azurerm\" {\n  features {}\n}\n\n#File: recursos.tf\nresource \"azurerm_resource_group\" \"rgr\" {\n  location = var.location_name\n  name     = var.resource_group_name\n}\n\nresource \"azurerm_virtual_network\" \"vnet\" {\n  name                = var.network_name\n  address_space       = [\"10.0.0.0/16\"]\n  location            = azurerm_resource_group.rgr.location\n  resource_group_name = azurerm_resource_group.rgr.name\n}\n\nresource \"azurerm_subnet\" \"subnet\" {\n  name                 = var.subnet_name\n  resource_group_name  = azurerm_resource_group.rgr.name\n  virtual_network_name = azurerm_virtual_network.vnet.name\n  address_prefixes     = [\"10.0.2.0/24\"]\n}\n\nresource \"azurerm_network_interface\" \"nic_vm\" {\n  name                = \"vnic-vm\"\n  location            = azurerm_resource_group.rgr.location\n  resource_group_name = azurerm_resource_group.rgr.name\n\n  ip_configuration {\n    name                          = \"internal\"\n    subnet_id                     = azurerm_subnet.subnet.id\n    private_ip_address_allocation = \"Dynamic\"\n    public_ip_address_id          = azurerm_public_ip.pip_vm.id\n  }\n}\n\nresource \"azurerm_public_ip\" \"pip_vm\" {\n  name                = \"public-ip-vm\"\n  resource_group_name = azurerm_resource_group.rgr.name\n  location            = azurerm_resource_group.rgr.location\n  allocation_method   = \"Dynamic\"\n}\n\nresource \"azurerm_linux_virtual_machine\" \"vm\" {\n  name                = \"vm\"\n  resource_group_name = azurerm_resource_group.rgr.name\n  location            = azurerm_resource_group.rgr.location\n  size                = \"Standard_DS1_v2\"\n  admin_username      = var.ssh_user\n  network_interface_ids = [\n    azurerm_network_interface.nic_vm.id,\n  ]\n\n  admin_ssh_key {\n    username   = var.ssh_user\n    public_key = file(var.public_key_path)\n  }\n\n  os_disk {\n    caching              = \"ReadWrite\"\n    storage_account_type = \"Standard_LRS\"\n  }\n\n  plan {\n    name = \"8-gen1\" \n    product = \"almalinux\"\n    publisher = \"almalinux\" \n  }\n\n  source_image_reference {\n    publisher = \"almalinux\"\n    offer     = \"almalinux\"\n    sku       = \"8-gen1\"\n    version   = \"latest\"\n  }\n}\n\nresource \"azurerm_network_security_group\" \"nsg1\" {\n  name                = \"securitygroup\"\n  location            = azurerm_resource_group.rgr.location\n  resource_group_name = azurerm_resource_group.rgr.name\n\n  security_rule {\n    name                       = \"httprule\"\n    priority                   = 102\n    direction                  = \"Inbound\"\n    access                     = \"Allow\"\n    protocol                   = \"Tcp\"\n    source_port_range          = \"*\"\n    destination_port_range     = \"8080\"\n    source_address_prefix      = \"*\"\n    destination_address_prefix = \"*\"\n  }\n  security_rule {\n    name                       = \"sshrule\"\n    priority                   = 101\n    direction                  = \"Inbound\"\n    access                     = \"Allow\"\n    protocol                   = \"Tcp\"\n    source_port_range          = \"*\"\n    destination_port_range     = \"22\"\n    source_address_prefix      = \"*\"\n    destination_address_prefix = \"*\"\n  }\n}\n\nresource \"azurerm_subnet_network_security_group_association\" \"nsg-link\" {\n  subnet_id                 = azurerm_subnet.subnet.id\n  network_security_group_id = azurerm_network_security_group.nsg1.id\n}\n\nresource \"azurerm_kubernetes_cluster\" \"kc\" {\n  name                = var.kubernetes_cluster_name\n  location            = azurerm_resource_group.rgr.location\n  resource_group_name = azurerm_resource_group.rgr.name\n  dns_prefix          = \"miok8s\"\n\n  default_node_pool {\n    name       = \"default\"\n    node_count = 1\n    vm_size    = \"Standard_D2_v2\"\n  }\n\n  identity {\n    type = \"SystemAssigned\"\n  }\n\n  tags = {\n    Environment = \"Production\"\n  }\n}\n\nresource \"azurerm_container_registry\" \"acr\" {\n  name                = var.registry_name\n  resource_group_name = azurerm_resource_group.rgr.name\n  location            = azurerm_resource_group.rgr.location\n  sku                 = var.registry_sku\n  admin_enabled       = true\n}\n\nresource \"azurerm_role_assignment\" \"reg\" {\n  principal_id                     = azurerm_kubernetes_cluster.kc.kubelet_identity[0].object_id\n  role_definition_name             = \"AcrPull\"\n  scope                            = azurerm_container_registry.acr.id\n  skip_service_principal_aad_check = true\n}\noutput \"azurerm_kubernetes_cluster\" {\n  value     = azurerm_kubernetes_cluster.kc.name\n\n}\n\noutput \"kube_config\" {\n  value = azurerm_kubernetes_cluster.kc.kube_config_raw\n\n  sensitive = true\n}\n\noutput \"vm_public_ip\" {\n  value = azurerm_public_ip.pip_vm.ip_address\n}\n\noutput \"ssh_user\" {\n  value = var.ssh_user\n}\n\noutput \"acr_login_server\" {\n  value = azurerm_container_registry.acr.login_server\n}\n\noutput \"acr_admin_user\" {\n  value     = azurerm_container_registry.acr.admin_username\n  sensitive = true\n}\n\noutput \"acr_admin_pass\" {\n  value     = azurerm_container_registry.acr.admin_password\n  sensitive = true\n}\n\n#File: vars.tf\nvariable \"resource_group_name\" {\n  default = \"cp2-k8s\"\n}\n\nvariable \"location_name\" {\n  default = \"uksouth\"\n}\n\nvariable \"kubernetes_cluster_name\" {\n  default = \"kck8s\"\n}\nvariable \"registry_name\" {\n  type        = string\n  description = \"Nombre del registry para las imágenes\"\n  default     = \"dgmojeda\"\n}\n\nvariable \"registry_sku\" {\n  type        = string\n  description = \"Tipo de SKU utilizado por el registry.\"\n  default     = \"Basic\"\n}\n\nvariable \"network_name\" {\n  default = \"vnet1\"\n}\n\nvariable \"subnet_name\" {\n  default = \"subnet1\"\n}\n\nvariable \"vm_count\" {\n  default = 1\n}\n\nvariable \"public_key_path\" {\n  type        = string\n  description = \"Ruta para clave pública de acceso instancias\"\n  default     = \"/home/usuario1/.ssh/1686747708_1857002.pub\"\n}\n\nvariable \"ssh_user\" {\n  type        = string\n  description = \"Usuario ssh acceso maquina virtual\"\n  default     = \"conte\"\n}\n"}]}
{"messages": [{"role": "user", "content": "Create a Terraform configuration that sets up an AWS S3 bucket with public access control and an IAM user for Azure Active Directory. Use a random string to generate a unique bucket identifier and apply it to both AWS and Azure resources. Create an Azure resource group and a Data Lake storage account, ensuring hierarchical namespace is enabled. Assign the \"Storage Blob Data Contributor\" role for appropriate access control. Output the AWS S3 bucket domain name after deployment."}, {"role": "assistant", "content": "\n#File: main.tf\nterraform {\n  required_providers {\n    azurerm = {\n      source  = \"hashicorp/azurerm\"\n      version = \"3.57.0\"\n    }\n    aws = {\n      source  = \"hashicorp/aws\"\n      version = \"4.67.0\"\n    }\n  }\n}\n\nprovider \"azurerm\" {\n  features {\n    resource_group {\n      prevent_deletion_if_contains_resources = false\n    }\n  }\n}\n\nprovider \"aws\" {\n  region = var.aws_region\n}\n\nresource \"random_string\" \"bucket\" {\n  length    = 6\n  min_lower = 6\n  special   = false\n}\n\nlocals {\n  affix = \"${var.workload}${random_string.bucket.result}\"\n}\n\ndata \"azuread_client_config\" \"current\" {}\n\n#########################\n########## AWS ##########\n#########################\n\nresource \"aws_s3_bucket\" \"main\" {\n  bucket = \"bucket-${local.affix}\"\n\n  # For development purposes\n  force_destroy = true\n}\n\nresource \"aws_s3_bucket_public_access_block\" \"main\" {\n  bucket = aws_s3_bucket.main.id\n\n  block_public_acls       = true\n  block_public_policy     = true\n  ignore_public_acls      = true\n  restrict_public_buckets = true\n}\n\nresource \"aws_iam_user\" \"azure\" {\n  name          = \"AzureADF\"\n  force_destroy = true\n}\n\nresource \"aws_iam_user_policy_attachment\" \"azure_s3_fullaccess\" {\n  user       = aws_iam_user.azure.name\n  policy_arn = \"arn:aws:iam::aws:policy/AmazonS3FullAccess\"\n}\n\n###########################\n########## Azure ##########\n###########################\n\n### Group ###\n\nresource \"azurerm_resource_group\" \"default\" {\n  name     = \"rg${local.affix}\"\n  location = \"eastus\"\n}\n\n### Data Lake ###\n\nresource \"azurerm_storage_account\" \"lake\" {\n  name                     = \"dls${local.affix}\"\n  resource_group_name      = azurerm_resource_group.default.name\n  location                 = azurerm_resource_group.default.location\n  account_tier             = \"Standard\"\n  account_replication_type = \"LRS\"\n  account_kind             = \"StorageV2\"\n\n  // Enable this for Gen2 Hierarchy\n  is_hns_enabled = true\n}\n\nresource \"azurerm_role_assignment\" \"adlsv2\" {\n  scope                = azurerm_storage_account.lake.id\n  role_definition_name = \"Storage Blob Data Contributor\"\n  principal_id         = data.azuread_client_config.current.object_id\n}\n\nresource \"azurerm_storage_data_lake_gen2_filesystem\" \"default\" {\n  name               = \"data\"\n  storage_account_id = azurerm_storage_account.lake.id\n\n  depends_on = [\n    azurerm_role_assignment.adlsv2\n  ]\n}\n\nresource \"azurerm_data_factory\" \"default\" {\n  name                = \"adf${local.affix}\"\n  location            = azurerm_resource_group.default.location\n  resource_group_name = azurerm_resource_group.default.name\n}\n\nresource \"azurerm_data_factory_linked_service_data_lake_storage_gen2\" \"lake\" {\n  name                = \"Lake\"\n  data_factory_id     = azurerm_data_factory.default.id\n  url                 = \"https://${azurerm_storage_account.lake.name}.dfs.core.windows.net\"\n  storage_account_key = azurerm_storage_account.lake.primary_access_key\n}\n\n#File: output.tf\noutput \"aws_bucket\" {\n  value = aws_s3_bucket.main.bucket_domain_name\n}\n#File: variables.tf\nvariable \"aws_region\" {\n  type    = string\n  default = \"us-east-1\"\n}\n\nvariable \"azure_location\" {\n  type    = string\n  default = \"eastus\"\n}\n\nvariable \"workload\" {\n  type    = string\n  default = \"pluralsight\"\n}\n"}]}
{"messages": [{"role":"user","content":"Generate a Terraform module that sets up a ClickOps detection system for AWS using CloudTrail logs from a centralized S3 bucket in a Control Tower environment. The module should include a Lambda function triggered by S3 events via SQS, and post a message to a Slack channel via a webhook if manual changes are detected in the AWS Console. Use variables for account inclusion/exclusion, region, and Slack webhook. Add example terraform.tfvars and a post-deployment instruction for setting the webhook URL securely via SSM"},{"role":"assistant","content":"variable \"cloudtrail_bucket\" {\r\n  type = object({\r\n    name   = string\r\n    arn    = string\r\n  })\r\n  description = \"Bucket containing the Cloudtrail logs that you want to process.\"\r\n}\r\n\r\nvariable \"excluded_accounts\" {\r\n  type        = list(string)\r\n  description = \"List of accounts that be excluded for scans on manual actions.\"\r\n  default     = []\r\n}\r\n\r\n\r\nvariable \"included_accounts\" {\r\n  type        = list(string)\r\n  description = \"List of accounts that be scanned to manual actions.\"\r\n  default     = []\r\n}\r\n\r\nvariable event_processing_timeout {\r\n  type = number\r\n  description = \"Maximum number of seconds the lambda is allowed to run and number of seconds events should be hidden in SQS after being picked up my Lambda.\"\r\n  default = 60\r\n}\r\n\r\nvariable log_retention_in_days {\r\n  type = number\r\n  description = \"Number of days to keep CloudWatch logs\"\r\n  default = 30\r\n}\r\nresource \"aws_sqs_queue\" \"bucket_notifications\" {\r\n  name = local.naming_prefix\r\n  visibility_timeout_seconds = var.event_processing_timeout + 5\r\n}\r\n\r\nresource \"aws_sqs_queue_policy\" \"bucket_notifications\" {\r\n  queue_url = aws_sqs_queue.bucket_notifications.id\r\n\r\n  policy = <<POLICY\r\n{\r\n  \"Version\": \"2012-10-17\",\r\n  \"Statement\": [\r\n    {\r\n      \"Effect\": \"Allow\",\r\n      \"Principal\": \"*\",\r\n      \"Action\": \"sqs:SendMessage\",\r\n      \"Resource\": \"${aws_sqs_queue.bucket_notifications.arn}\",\r\n      \"Condition\": {\r\n        \"ArnEquals\": { \"aws:SourceArn\": \"${var.cloudtrail_bucket.arn}\" }\r\n      }\r\n    }\r\n  ]\r\n}\r\nPOLICY\r\n}\r\n\r\nresource \"aws_s3_bucket_notification\" \"bucket_notification\" {\r\n  bucket = var.cloudtrail_bucket.name\r\n\r\n  queue {\r\n    queue_arn = aws_sqs_queue.bucket_notifications.arn\r\n    events    = [\"s3:ObjectCreated:*\"]\r\n    filter_suffix = \".json.gz\"\r\n  }\r\n\r\n  depends_on = [\r\n    aws_sqs_queue_policy.bucket_notifications\r\n  ]\r\n}\r\nterraform {\r\n  required_providers {\r\n    aws = {\r\n      source  = \"hashicorp/aws\"\r\n      version = \"3.49.0\"\r\n    }\r\n  }\r\n}\r\n\r\nprovider \"aws\" {\r\n  alias  = \"reference\"\r\n  region = var.region\r\n}\r\n\r\nprovider \"aws\" {\r\n  region = var.region\r\n\r\n  default_tags {\r\n    tags = local.mandatory_tags\r\n  }\r\n}\r\n\r\nresource \"aws_cloudwatch_log_group\" \"func\" {\r\n  name = \"/aws/lambda/${aws_lambda_function.func.function_name}\"\r\n    retention_in_days = var.log_retention_in_days\r\n}\r\nresource \"aws_lambda_function\" \"func\" {\r\n\r\n  function_name = local.naming_prefix\r\n  role          = aws_iam_role.lambda.arn\r\n\r\n  handler = \"main.handler\"\r\n  runtime = \"python3.8\"\r\n\r\n  filename         = data.archive_file.func.output_path\r\n  source_code_hash = filebase64sha256(data.archive_file.func.output_path)\r\n\r\n  timeout     = var.event_processing_timeout\r\n  memory_size = 128\r\n\r\n  layers = [local.python_layers[var.region]]\r\n\r\n  environment {\r\n    variables = {\r\n      WEBHOOK_PARAMETER = aws_ssm_parameter.slack_webhook.name\r\n      EXCLUDED_ACCOUNTS = jsonencode(var.excluded_accounts)\r\n      INCLUDED_ACCOUNTS = jsonencode(var.included_accounts)\r\n    }\r\n  }\r\n}\r\n\r\ndata \"archive_file\" \"func\" {\r\n  type             = \"zip\"\r\n  source_dir       = \"${path.module}/lambda\"\r\n  output_file_mode = \"0666\"\r\n  output_path      = \"${path.module}/lambda.zip\"\r\n}\r\n\r\nresource \"aws_lambda_event_source_mapping\" \"bucket_notifications\" {\r\n  event_source_arn = aws_sqs_queue.bucket_notifications.arn\r\n  function_name    = aws_lambda_function.func.arn\r\n}\r\n\r\nresource \"aws_ssm_parameter\" \"slack_webhook\" {\r\n\r\n  name        = \"/${local.naming_prefix}/slack-webhook\"\r\n  description = \"Slack Incomming Webhook. https://api.slack.com/messaging/webhooks\"\r\n\r\n  type  = \"SecureString\"\r\n  value = \"REPLACE_ME\"\r\n\r\n  lifecycle {\r\n    ignore_changes = [\r\n      value,\r\n    ]\r\n  }\r\n}\r\nresource \"aws_iam_role\" \"lambda\" {\r\n  name = local.naming_prefix\r\n\r\n  assume_role_policy = data.aws_iam_policy_document.lambda_role_trust.json\r\n}\r\n\r\ndata \"aws_iam_policy_document\" \"lambda_role_trust\" {\r\n  statement {\r\n    sid = \"LambdaTrust\"\r\n\r\n    actions = [\r\n      \"sts:AssumeRole\"\r\n    ]\r\n\r\n    principals {\r\n      type        = \"Service\"\r\n      identifiers = [\"lambda.amazonaws.com\"]\r\n    }\r\n  }\r\n}\r\n\r\nresource \"aws_iam_role_policy\" \"lambda_permissions\" {\r\n  name   = local.naming_prefix\r\n  role   = aws_iam_role.lambda.id\r\n  policy = data.aws_iam_policy_document.lambda_permissions.json\r\n}\r\n\r\n\r\ndata \"aws_iam_policy_document\" \"lambda_permissions\" {\r\n  statement {\r\n    sid = \"Logging\"\r\n\r\n    actions = [\r\n      \"logs:CreateLogGroup\",\r\n      \"logs:CreateLogStream\",\r\n      \"logs:PutLogEvents\"\r\n    ]\r\n\r\n    resources = [\r\n      \"arn:aws:logs:*:*:*\"\r\n    ]\r\n  }\r\n\r\n  statement {\r\n    sid = \"S3Access\"\r\n\r\n    actions = [\r\n      \"s3:Get*\",\r\n      \"s3:List*\",\r\n      \"s3:Describe*\",\r\n    ]\r\n\r\n    resources = [\r\n      \"${var.cloudtrail_bucket.arn}/\",\r\n      \"${var.cloudtrail_bucket.arn}/*\",\r\n    ]\r\n  }\r\n\r\n  statement {\r\n    sid = \"SSMAccess\"\r\n\r\n    actions = [\r\n      \"ssm:Get*\",\r\n    ]\r\n\r\n    resources = [\r\n      aws_ssm_parameter.slack_webhook.arn\r\n    ]\r\n  }\r\n\r\n  statement {\r\n    sid = \"SQSAccess\"\r\n\r\n    actions = [\r\n      \"sqs:*\",\r\n    ]\r\n\r\n    resources = [\r\n      aws_sqs_queue.bucket_notifications.arn\r\n    ]\r\n  }\r\n\r\n}\r\n\r\nvariable \"region\" {\r\n  type        = string\r\n  description = \"The default region for the application / deployment\"\r\n\r\n  validation {\r\n    condition = contains([\r\n      \"eu-central-1\",\r\n      \"eu-west-1\",\r\n      \"eu-west-2\",\r\n      \"eu-south-1\",\r\n      \"eu-west-3\",\r\n      \"eu-north-1\",\r\n      \"af-south-1\"\r\n    ], var.region)\r\n    error_message = \"Invalid region provided.\"\r\n  }\r\n}\r\n\r\nvariable \"environment\" {\r\n  type        = string\r\n  description = \"Will this deploy a development (dev) or production (prod) environment\"\r\n\r\n  validation {\r\n    condition     = contains([\"dev\", \"prd\"], var.environment)\r\n    error_message = \"Stage must be either 'dev' or 'prd'.\"\r\n  }\r\n}\r\n\r\nvariable \"code_repo\" {\r\n  type        = string\r\n  description = \"Points to the source code used to deploy the resources {{repo}} [{{branch}}]\"\r\n}\r\n\r\nvariable \"namespace\" {\r\n  type        = string\r\n  description = \"Used to identify which part of the application these resources belong to (auth, infra, api, web, data)\"\r\n\r\n  validation {\r\n    condition     = contains([\"sec\", \"auth\", \"infra\", \"api\", \"web\", \"data\"], var.namespace)\r\n    error_message = \"Namespace needs to be : \\\"sec\\\", \\\"auth\\\", \\\"infra\\\", \\\"api\\\" or \\\"web\\\".\"\r\n  }\r\n}\r\n\r\nvariable \"application_name\" {\r\n  type = object({\r\n    short = string\r\n    long  = string\r\n  })\r\n  description = \"Used in naming conventions, expecting an object\"\r\n\r\n  validation {\r\n    condition     = length(var.application_name[\"short\"]) <= 5\r\n    error_message = \"The application_name[\\\"short\\\"] needs to be less or equal to 5 chars.\"\r\n  }\r\n}\r\n\r\nvariable \"nukeable\" {\r\n  type        = bool\r\n  description = \"Can these resources be cleaned up. Will be ignored for prod environments\"\r\n}\r\n\r\nvariable \"client_name\" {\r\n  type = object({\r\n    short = string\r\n    long  = string\r\n  })\r\n  description = \"Used in naming conventions, expecting an object\"\r\n\r\n  validation {\r\n    condition     = length(var.client_name[\"short\"]) <= 5\r\n    error_message = \"The client_name[\\\"short\\\"] needs to be less or equal to 5 chars.\"\r\n  }\r\n}\r\n\r\nvariable \"purpose\" {\r\n  type        = string\r\n  description = \"Used for cost allocation purposes\"\r\n\r\n  validation {\r\n    condition     = contains([\"rnd\", \"client\", \"product\", \"self\"], var.purpose)\r\n    error_message = \"Purpose needs to be : \\\"rnd\\\", \\\"client\\\", \\\"product\\\", \\\"self\\\".\"\r\n  }\r\n}\r\n\r\nvariable \"owner\" {\r\n  type        = string\r\n  description = \"Used to find resources owners, expects an email address\"\r\n\r\n  validation {\r\n    condition     = can(regex(\"^[\\\\w-\\\\.]+@([\\\\w-]+\\\\.)+[\\\\w-]{2,4}$\", var.owner))\r\n    error_message = \"Owner needs to be a valid email address.\"\r\n  }\r\n}\r\n\r\nvariable \"aws_account_id\" {\r\n  type        = string\r\n  description = \"Needed for Guards to ensure code is being deployed to the correct account\"\r\n}\r\n\r\nvariable \"tags\" {\r\n  type        = map(string)\r\n  description = \"Tags added to all resources, this will be added to the list of mandatory tags\"\r\n}\r\n\r\n\r\ndata \"aws_caller_identity\" \"current\" {\r\n  provider = aws.reference\r\n}\r\n\r\n\r\nresource \"null_resource\" \"tf_guard_provider_account_match\" {\r\n  count = tonumber(data.aws_caller_identity.current.account_id == var.aws_account_id ? \"1\" : \"fail\")\r\n}\r\n\r\nlocals {\r\n  mandatory_tags = merge(var.tags, {\r\n    \"cat:application\" = var.application_name.long\r\n    \"cat:client\"      = var.client_name.long\r\n    \"cat:purpose\"     = var.purpose\r\n    \"cat:owner\"       = var.owner\r\n    \"cat:repo\"        = var.code_repo\r\n    \"cat:nukeable\"    = var.nukeable\r\n\r\n    \"tf:account_id\" = data.aws_caller_identity.current.account_id\r\n    \"tf:caller_arn\" = data.aws_caller_identity.current.arn\r\n    \"tf:user_id\"    = data.aws_caller_identity.current.user_id\r\n\r\n    \"app:region\"      = var.region\r\n    \"app:namespace\"   = var.namespace\r\n    \"app:environment\" = var.environment\r\n  })\r\n\r\n  naming_prefix = join(\"-\", [\r\n    var.client_name.short,\r\n    var.application_name.short,\r\n    var.environment,\r\n    var.namespace\r\n  ])\r\n}\r\n\r\nlocals {\r\n  // https://aws.amazon.com/blogs/compute/upcoming-changes-to-the-python-sdk-in-aws-lambda/\r\n  python_layers = {\r\n    \"ap-northeast-1\" = \"arn:aws:lambda:ap-northeast-1:249908578461:layer:AWSLambda-Python-AWS-SDK:4\"\r\n    \"us-east-1\"      = \"arn:aws:lambda:us-east-1:668099181075:layer:AWSLambda-Python-AWS-SDK:4\"\r\n    \"ap-southeast-1\" = \"arn:aws:lambda:ap-southeast-1:468957933125:layer:AWSLambda-Python-AWS-SDK:4\"\r\n    \"eu-west-1\"      = \"arn:aws:lambda:eu-west-1:399891621064:layer:AWSLambda-Python-AWS-SDK:4\"\r\n    \"us-west-1\"      = \"arn:aws:lambda:us-west-1:325793726646:layer:AWSLambda-Python-AWS-SDK:4\"\r\n    \"ap-east-1\"      = \"arn:aws:lambda:ap-east-1:118857876118:layer:AWSLambda-Python-AWS-SDK:4\"\r\n    \"ap-northeast-2\" = \"arn:aws:lambda:ap-northeast-2:296580773974:layer:AWSLambda-Python-AWS-SDK:4\"\r\n    \"ap-northeast-3\" = \"arn:aws:lambda:ap-northeast-3:961244031340:layer:AWSLambda-Python-AWS-SDK:4\"\r\n    \"ap-south-1\"     = \"arn:aws:lambda:ap-south-1:631267018583:layer:AWSLambda-Python-AWS-SDK:4\"\r\n    \"ap-southeast-2\" = \"arn:aws:lambda:ap-southeast-2:817496625479:layer:AWSLambda-Python-AWS-SDK:4\"\r\n    \"ca-central-1\"   = \"arn:aws:lambda:ca-central-1:778625758767:layer:AWSLambda-Python-AWS-SDK:4\"\r\n    \"eu-central-1\"   = \"arn:aws:lambda:eu-central-1:292169987271:layer:AWSLambda-Python-AWS-SDK:4\"\r\n    \"eu-north-1\"     = \"arn:aws:lambda:eu-north-1:642425348156:layer:AWSLambda-Python-AWS-SDK:4\"\r\n    \"eu-west-2\"      = \"arn:aws:lambda:eu-west-2:142628438157:layer:AWSLambda-Python-AWS-SDK:4\"\r\n    \"eu-west-3\"      = \"arn:aws:lambda:eu-west-3:959311844005:layer:AWSLambda-Python-AWS-SDK:4\"\r\n    \"sa-east-1\"      = \"arn:aws:lambda:sa-east-1:640010853179:layer:AWSLambda-Python-AWS-SDK:4\"\r\n    \"us-east-2\"      = \"arn:aws:lambda:us-east-2:259788987135:layer:AWSLambda-Python-AWS-SDK:4\"\r\n    \"us-west-2\"      = \"arn:aws:lambda:us-west-2:420165488524:layer:AWSLambda-Python-AWS-SDK:5\"\r\n    \"cn-north-1\"     = \"arn:aws-cn:lambda:cn-north-1:683298794825:layer:AWSLambda-Python-AWS-SDK:4\"\r\n    \"cn-northwest-1\" = \"arn:aws-cn:lambda:cn-northwest-1:382066503313:layer:AWSLambda-Python-AWS-SDK:4\"\r\n    \"us-gov-west\"    = \"arn:aws-us-gov:lambda:us-gov-west-1:556739011827:layer:AWSLambda-Python-AWS-SDK:4\"\r\n    \"us-gov-east\"    = \"arn:aws-us-gov:lambda:us-gov-east-1:138526772879:layer:AWSLambda-Python-AWS-SDK:4\"\r\n  }\r\n}"}]}
{"messages": [{"role": "user", "content": "Create a Google Cloud VPC network with a custom name based on the project ID. Configure the VPC to not automatically create subnetworks. Set up a subnet within the specified region and associate it with the VPC, using the CIDR range 10.10.0.0/24. Output the names of both the VPC and the subnet for reference. Define required variables for the project ID and region to ensure proper configuration."}, {"role": "assistant", "content": "\n#File: main.tf\n# VPC\nresource \"google_compute_network\" \"vpc\" {\n  name                    = \"${var.project_id}-vpc\"\n  auto_create_subnetworks = \"false\"\n}\n\n# Subnet\nresource \"google_compute_subnetwork\" \"subnet\" {\n  name          = \"${var.project_id}-subnet\"\n  region        = var.region\n  network       = google_compute_network.vpc.name\n  ip_cidr_range = \"10.10.0.0/24\"\n}\n\n#File: outputs.tf\noutput \"vpc_name\" {\n  description = \"The name of the VPC network.\"\n  value       = google_compute_network.vpc.name\n}\n\noutput \"subnet_name\" {\n  description = \"The name of the subnet.\"\n  value       = google_compute_subnetwork.subnet.name\n}\n\n#File: variables.tf\n# Required Variables\nvariable \"project_id\" {\n  description = \"Provider project id.\"\n}\n\nvariable \"region\" {\n  description = \"Provider region.\"\n}\n"}]}
{"messages": [{"role": "user", "content": "Create a unique identifier for your Azure Data Lake Storage account. Create an Azure Data Lake Storage Gen2 with standard tier and LRS replication. Enable hierarchical namespace and set retention policies for delete operations. Create four storage containers named \"landing-zone,\" \"bronze,\" \"silver,\" and \"gold\" within the storage account. Output the storage account name, primary DFS endpoint, and names of the created containers."}, {"role": "assistant", "content": "\n#File: main.tf\nresource \"random_id\" \"storage_account_name_unique\" {\n  byte_length = 8\n}\n\n# Criar um Azure Data Lake Storage Gen2\nresource \"azurerm_storage_account\" \"storage\" {\n  name                     = \"datalake${random_id.storage_account_name_unique.hex}\"\n  resource_group_name      = var.resource_group_name\n  location                 = var.location\n  account_tier             = \"Standard\"\n  account_replication_type = \"LRS\"\n  account_kind             = \"StorageV2\"\n  is_hns_enabled           = true\n\n\n  blob_properties {\n\n    delete_retention_policy {\n      days = 7\n    }\n    container_delete_retention_policy {\n      days = 7\n    }\n  }\n}\n\n# Criar quatro containers dentro do Azure Data Lake Storage Gen2: Landing-zone, Bronze, Silver e Gold\nresource \"azurerm_storage_container\" \"landing-zone\" {\n  name                  = \"landing-zone\"\n  storage_account_name  = azurerm_storage_account.storage.name\n  container_access_type = \"container\"\n}\n\n\nresource \"azurerm_storage_container\" \"bronze\" {\n  name                  = \"bronze\"\n  storage_account_name  = azurerm_storage_account.storage.name\n  container_access_type = \"container\"\n}\n\nresource \"azurerm_storage_container\" \"silver\" {\n  name                  = \"silver\"\n  storage_account_name  = azurerm_storage_account.storage.name\n  container_access_type = \"container\"\n}\n\nresource \"azurerm_storage_container\" \"gold\" {\n  name                  = \"gold\"\n  storage_account_name  = azurerm_storage_account.storage.name\n  container_access_type = \"container\"\n}\n\n\n#File: output.tf\noutput \"adls_name\" {\n  description = \"Name of the created storage account\"\n  value       = azurerm_storage_account.storage.name\n}\n\noutput \"adls_dfs_endpoint\" {\n  description = \"Primary DFS endpoint of the created storage account\"\n  value       = azurerm_storage_account.storage.primary_dfs_endpoint\n}\n\noutput \"adls_container_landing_zone\" {\n  description = \"Name of the created storage container landing-zone\"\n  value       = azurerm_storage_container.landing-zone.name\n}\n\noutput \"adls_container_bronze\" {\n  description = \"Name of the created storage container bronze\"\n  value       = azurerm_storage_container.bronze.name\n}\n\noutput \"adls_container_silver\" {\n  description = \"Name of the created storage container silver\"\n  value       = azurerm_storage_container.silver.name\n}\n\noutput \"adls_container_gold\" {\n  description = \"Name of the created storage container gold\"\n  value       = azurerm_storage_container.gold.name\n}\n\n#File: provider.tf\nterraform {\n  required_providers {\n    azurerm = {\n      source  = \"hashicorp/azurerm\"\n      version = \"3.3.0\"\n    }\n  }\n}\n\n# Configure the Microsoft Azure Provider\nprovider \"azurerm\" {\n  features {}\n}\n#File: variables.tf\n# Lista de variaveis utilizadas nos arquivos de terraform\nvariable \"resource_group_name\" {\n  default = \"learn-ee657660-217b-49cb-ad8d-f9ba4dbafa1f\"\n}\n\nvariable \"location\" {\n  default = \"westus\"\n}\n"}]}
{"messages": [{"role":"user","content":"Sets up database modernization with aws, confluent, cloudamqpm, mongodbatlas. Provide AWS services (including an Oracle RDS instance), Confluent Kafka environment and clusters with service accounts and ACLs, CloudAMQP RabbitMQ instances, and MongoDB Atlas projects, clusters, and users. The setup integrates messaging, streaming, and database layers with proper credentials and role bindings to enable a scalable, cloud-native data modernization architecture."},{"role":"assistant","content":"terraform {\r\n  required_providers {\r\n    aws = {\r\n      source  = \"hashicorp/aws\"\r\n      version = \"5.16.2\"\r\n    }\r\n    confluent = {\r\n      source  = \"confluentinc/confluent\"\r\n      version = \"1.51.0\"\r\n    }\r\n    cloudamqp = {\r\n      source  = \"cloudamqp/cloudamqp\"\r\n      version = \"1.28.0\"\r\n    }\r\n    mongodbatlas = {\r\n      source  = \"mongodb/mongodbatlas\"\r\n      version = \"1.12.1\"\r\n    }\r\n  }\r\n}\r\n\r\n\r\nprovider \"confluent\" {\r\n  cloud_api_key    = var.confluent_cloud_api_key\r\n  cloud_api_secret = var.confluent_cloud_api_secret\r\n}\r\n\r\nprovider \"confluent\" {\r\n  # https://developer.hashicorp.com/terraform/language/providers/configuration#alias-multiple-provider-configurations\r\n  alias = \"kafka\"\r\n\r\n  cloud_api_key    = var.confluent_cloud_api_key\r\n  cloud_api_secret = var.confluent_cloud_api_secret\r\n\r\n  #   kafka_id            = confluent_kafka_cluster.basic.id\r\n  kafka_rest_endpoint = confluent_kafka_cluster.basic.rest_endpoint\r\n  kafka_api_key       = confluent_api_key.app-manager-kafka-api-key.id\r\n  kafka_api_secret    = confluent_api_key.app-manager-kafka-api-key.secret\r\n}\r\n\r\nprovider \"aws\" {\r\n  region = var.region\r\n}\r\n\r\n# Configure the CloudAMQP Provider\r\nprovider \"cloudamqp\" {\r\n  apikey = var.cloudamqp_customer_api_key\r\n}\r\n\r\n# Configure the MongoDB Atlas Provider \r\nprovider \"mongodbatlas\" {\r\n  public_key  = var.mongodbatlas_public_key\r\n  private_key = var.mongodbatlas_private_key\r\n}\r\n\r\nresource \"confluent_environment\" \"demo\" {\r\n  display_name = \"Demo_Database_Modernization\"\r\n}\r\n\r\ndata \"confluent_schema_registry_region\" \"sg_package\" {\r\n  cloud   = \"AWS\"\r\n  region  = \"us-east-2\"\r\n  package = var.sg_package\r\n}\r\n\r\nresource \"confluent_schema_registry_cluster\" \"sr_package\" {\r\n  package = data.confluent_schema_registry_region.sg_package.package\r\n\r\n  environment {\r\n    id = confluent_environment.demo.id\r\n  }\r\n\r\n  region {\r\n    # See https://docs.confluent.io/cloud/current/stream-governance/packages.html#stream-governance-regions\r\n    id = data.confluent_schema_registry_region.sg_package.id\r\n  }\r\n}\r\n\r\nresource \"confluent_kafka_cluster\" \"basic\" {\r\n  display_name = \"demo_kafka_cluster\"\r\n  availability = \"SINGLE_ZONE\"\r\n  cloud        = \"AWS\"\r\n  region       = \"us-west-2\"\r\n  basic {}\r\n\r\n  environment {\r\n    id = confluent_environment.demo.id\r\n  }\r\n}\r\n\r\n# 'app-manager' service account is required in this configuration to create 'rabbitmq_transactions' topic and grant ACLs\r\n# to 'app-producer' and 'app-consumer' service accounts.\r\nresource \"confluent_service_account\" \"app-manager\" {\r\n  display_name = \"app-manager\"\r\n  description  = \"Service account to manage 'demo' Kafka cluster\"\r\n}\r\n\r\nresource \"confluent_role_binding\" \"app-manager-kafka-cluster-admin\" {\r\n  principal   = \"User:${confluent_service_account.app-manager.id}\"\r\n  role_name   = \"CloudClusterAdmin\"\r\n  crn_pattern = confluent_kafka_cluster.basic.rbac_crn\r\n}\r\n\r\nresource \"confluent_api_key\" \"app-manager-kafka-api-key\" {\r\n  display_name = \"app-manager-kafka-api-key\"\r\n  description  = \"Kafka API Key that is owned by 'app-manager' service account\"\r\n  owner {\r\n    id          = confluent_service_account.app-manager.id\r\n    api_version = confluent_service_account.app-manager.api_version\r\n    kind        = confluent_service_account.app-manager.kind\r\n  }\r\n\r\n  managed_resource {\r\n    id          = confluent_kafka_cluster.basic.id\r\n    api_version = confluent_kafka_cluster.basic.api_version\r\n    kind        = confluent_kafka_cluster.basic.kind\r\n\r\n    environment {\r\n      id = confluent_environment.demo.id\r\n    }\r\n  }\r\n\r\n  # The goal is to ensure that confluent_role_binding.app-manager-kafka-cluster-admin is created before\r\n  # confluent_api_key.app-manager-kafka-api-key is used to create instances of\r\n  # confluent_kafka_topic, confluent_kafka_acl resources.\r\n\r\n  # 'depends_on' meta-argument is specified in confluent_api_key.app-manager-kafka-api-key to avoid having\r\n  # multiple copies of this definition in the configuration which would happen if we specify it in\r\n  # confluent_kafka_topic, confluent_kafka_acl resources instead.\r\n  depends_on = [\r\n    confluent_role_binding.app-manager-kafka-cluster-admin\r\n  ]\r\n}\r\n\r\n# Create rabbitmq_transactions topic \r\nresource \"confluent_kafka_topic\" \"rabbitmq_transactions\" {\r\n  kafka_cluster {\r\n    id = confluent_kafka_cluster.basic.id\r\n  }\r\n\r\n  topic_name       = \"rabbitmq_transactions\"\r\n  rest_endpoint    = confluent_kafka_cluster.basic.rest_endpoint\r\n  partitions_count = 1\r\n  credentials {\r\n    key    = confluent_api_key.app-manager-kafka-api-key.id\r\n    secret = confluent_api_key.app-manager-kafka-api-key.secret\r\n  }\r\n}\r\n\r\n# Create Oracle redo log topic \r\nresource \"confluent_kafka_topic\" \"oracle_redo_log\" {\r\n  kafka_cluster {\r\n    id = confluent_kafka_cluster.basic.id\r\n  }\r\n\r\n  topic_name       = \"OracleCdcSourceConnector-dbmod-redo-log\"\r\n  rest_endpoint    = confluent_kafka_cluster.basic.rest_endpoint\r\n  partitions_count = 1\r\n  credentials {\r\n    key    = confluent_api_key.app-manager-kafka-api-key.id\r\n    secret = confluent_api_key.app-manager-kafka-api-key.secret\r\n  }\r\n}\r\n\r\n# Create a service account for ksqlDB \r\nresource \"confluent_service_account\" \"app-ksql\" {\r\n  display_name = \"app-ksql\"\r\n  description  = \"Service account to manage 'demo-ksql' ksqlDB cluster\"\r\n}\r\n\r\nresource \"confluent_role_binding\" \"app-ksql-kafka-cluster-admin\" {\r\n  principal   = \"User:${confluent_service_account.app-ksql.id}\"\r\n  role_name   = \"CloudClusterAdmin\"\r\n  crn_pattern = confluent_kafka_cluster.basic.rbac_crn\r\n}\r\n\r\nresource \"confluent_role_binding\" \"app-ksql-schema-registry-resource-owner\" {\r\n  principal   = \"User:${confluent_service_account.app-ksql.id}\"\r\n  role_name   = \"ResourceOwner\"\r\n  crn_pattern = format(\"%s/%s\", confluent_schema_registry_cluster.sr_package.resource_name, \"subject=*\")\r\n\r\n  lifecycle {\r\n    prevent_destroy = false\r\n  }\r\n}\r\n\r\n# Create ksqlDB cluster  \r\nresource \"confluent_ksql_cluster\" \"demo-ksql\" {\r\n  display_name = \"demo-ksql\"\r\n  csu          = 1\r\n  kafka_cluster {\r\n    id = confluent_kafka_cluster.basic.id\r\n  }\r\n  credential_identity {\r\n    id = confluent_service_account.app-ksql.id\r\n  }\r\n  environment {\r\n    id = confluent_environment.demo.id\r\n  }\r\n  depends_on = [\r\n    confluent_role_binding.app-ksql-kafka-cluster-admin,\r\n    confluent_role_binding.app-ksql-schema-registry-resource-owner,\r\n    confluent_schema_registry_cluster.sr_package\r\n  ]\r\n}\r\n\r\n# Create Amazon RDS (Oracle)\r\nresource \"aws_db_instance\" \"demo-db-mod\" {\r\n  identifier     = var.rds_instance_identifier\r\n  engine         = \"oracle-se2\"\r\n  engine_version = \"19\"\r\n  instance_class = var.rds_instance_class\r\n  # name           = \"ORCL\"\r\n  username       = var.rds_username\r\n  password       = var.rds_password\r\n  port           = 1521\r\n  license_model  = \"license-included\"\r\n  #   parameter_group_name = \"default.oracle-se2-19.0\"\r\n  allocated_storage   = 20\r\n  storage_encrypted   = false\r\n  skip_final_snapshot = true\r\n  publicly_accessible = true\r\n  tags = {\r\n    name       = \"demo-db-mod\"\r\n    created_by = \"terraform\"\r\n  }\r\n}\r\n\r\n# Create a new cloudamqp instance\r\nresource \"cloudamqp_instance\" \"instance\" {\r\n  name        = \"demo-db-mod\"\r\n  plan        = \"lemur\"\r\n  region      = \"amazon-web-services::us-west-2\"\r\n  tags        = [\"terraform\"]\r\n  rmq_version = \"3.12.6\"\r\n}\r\n\r\n# To retrieve the password for the newly created instance\r\ndata \"cloudamqp_credentials\" \"credentials\" {\r\n  instance_id = cloudamqp_instance.instance.id\r\n}\r\n\r\n# Create a Project\r\nresource \"mongodbatlas_project\" \"atlas-project\" {\r\n  org_id = var.mongodbatlas_org_id\r\n  name   = var.mongodbatlas_project_name\r\n}\r\n\r\n# Create MongoDB Atlas resources\r\nresource \"mongodbatlas_cluster\" \"demo-database-modernization\" {\r\n  project_id = mongodbatlas_project.atlas-project.id\r\n  name       = \"demo-db-mod\"\r\n\r\n  # Provider Settings \"block\"\r\n  provider_instance_size_name = \"M0\"\r\n  provider_name               = \"TENANT\"\r\n  backing_provider_name       = \"AWS\"\r\n  provider_region_name        = var.mongodbatlas_region\r\n}\r\n\r\nresource \"mongodbatlas_project_ip_access_list\" \"demo-database-modernization-ip\" {\r\n  project_id = mongodbatlas_project.atlas-project.id\r\n  cidr_block = \"0.0.0.0/0\"\r\n  comment    = \"Allow connections from anywhere for demo purposes\"\r\n}\r\n\r\n# Create a MongoDB Atlas Admin Database User\r\nresource \"mongodbatlas_database_user\" \"demo-database-modernization-db-user\" {\r\n  username           = var.mongodbatlas_database_username\r\n  password           = var.mongodbatlas_database_password\r\n  project_id         = mongodbatlas_project.atlas-project.id\r\n  auth_database_name = \"admin\"\r\n\r\n  roles {\r\n    role_name     = \"readWrite\"\r\n    database_name = mongodbatlas_cluster.demo-database-modernization.name\r\n  }\r\n}"}]}
{"messages": [{"role": "user", "content": "Create an Azure SQL Database with a server named \"creditcardsdata\" using a random integer for uniqueness. Set up an Azure AD administrator by referencing a user principal name from the Azure AD data source. Establish firewall rules for the SQL server to allow all Windows Azure IPs. Create an Azure Storage Account, a Storage Container, and a Blob to store user data. Lastly, configure monitoring with alerts for both SQL Database access and Blob storage operations."}, {"role": "assistant", "content": "\n#File: honey-sqldb.tf\ndata \"azuread_user\" \"entra_sqladmin\" {\n  count               = var.enable_sqldb ? 1 : 0\n  user_principal_name = var.sql_admin\n}\n\nresource \"azurerm_mssql_server\" \"sqlsrv_credit_cards\" {\n  count               = var.enable_sqldb ? 1 : 0\n  name                = \"creditcardsdata${random_integer.random_int.id}\"\n  resource_group_name = azurerm_resource_group.rg_honey_test.name\n  location            = azurerm_resource_group.rg_honey_test.location\n  version             = \"12.0\"\n\n  identity {\n    type = \"SystemAssigned\"\n  }\n\n  azuread_administrator {\n    login_username              = data.azuread_user.entra_sqladmin[0].user_principal_name\n    object_id                   = data.azuread_user.entra_sqladmin[0].object_id\n    azuread_authentication_only = true\n  }\n\n  public_network_access_enabled = true\n  depends_on                    = [azurerm_resource_group.rg_honey_test]\n}\n\nresource \"azurerm_mssql_firewall_rule\" \"sqlsrv_firewall_rule\" {\n  count            = var.enable_sqldb ? 1 : 0\n  name             = \"AllowAllWindowsAzureIps\"\n  server_id        = azurerm_mssql_server.sqlsrv_credit_cards[0].id\n  start_ip_address = \"0.0.0.0\"\n  end_ip_address   = \"255.255.255.255\"\n  depends_on       = [azurerm_mssql_server.sqlsrv_credit_cards]\n}\n\nresource \"azurerm_mssql_database\" \"sqldb_credit_cards\" {\n  count     = var.enable_sqldb ? 1 : 0\n  name      = \"CreditCardsData\"\n  server_id = azurerm_mssql_server.sqlsrv_credit_cards[0].id\n  sku_name  = \"Basic\"\n\n  storage_account_type = \"Local\"\n  depends_on           = [azurerm_mssql_server.sqlsrv_credit_cards]\n}\n\nresource \"azurerm_mssql_server_extended_auditing_policy\" \"sqlsrv_auditing_policy\" {\n  count                  = var.enable_sqldb ? 1 : 0\n  server_id              = azurerm_mssql_server.sqlsrv_credit_cards[0].id\n  log_monitoring_enabled = true\n  depends_on             = [azurerm_mssql_server.sqlsrv_credit_cards]\n}\n\nresource \"azurerm_mssql_database_extended_auditing_policy\" \"sqldb_auditing_policy\" {\n  count                  = var.enable_sqldb ? 1 : 0\n  database_id            = azurerm_mssql_database.sqldb_credit_cards[0].id\n  log_monitoring_enabled = true\n  depends_on             = [azurerm_mssql_database.sqldb_credit_cards, azurerm_mssql_server_extended_auditing_policy.sqlsrv_auditing_policy]\n}\n\nresource \"azurerm_monitor_diagnostic_setting\" \"ds_sqldb\" {\n  count                          = var.enable_sqldb ? 1 : 0\n  name                           = \"ds_sqldb\"\n  target_resource_id             = azurerm_mssql_database.sqldb_credit_cards[0].id\n  log_analytics_workspace_id     = azurerm_log_analytics_workspace.monitor.id\n  log_analytics_destination_type = \"Dedicated\"\n\n  log {\n    category = \"SQLSecurityAuditEvents\"\n    enabled  = true\n  }\n\n  depends_on = [azurerm_mssql_database_extended_auditing_policy.sqldb_auditing_policy]\n}\n\nresource \"azurerm_monitor_scheduled_query_rules_alert\" \"alert_sql\" {\n  count               = var.enable_sqldb ? 1 : 0\n  name                = \"alert_sql\"\n  location            = azurerm_resource_group.rg_honey_test.location\n  resource_group_name = azurerm_resource_group.rg_honey_test.name\n\n  action {\n    action_group = [azurerm_monitor_action_group.alert_email_action.id]\n  }\n  data_source_id = azurerm_log_analytics_workspace.monitor.id\n  description    = \"Alert when the SQL DB is accessed\"\n  enabled        = true\n  query          = <<-QUERY\nAzureDiagnostics\n| where client_ip_s != \"Internal\"\n| extend RequesterUser = iff(session_server_principal_name_s == server_principal_name_s, tostring(session_server_principal_name_s), strcat(session_server_principal_name_s, \", \", server_principal_name_s))\n| project TimeGenerated, RequesterUser, client_ip_s, ResourceGroup, LogicalServerName_s, database_name_s, action_name_s\n  QUERY\n  severity       = 1\n  frequency      = 5\n  time_window    = 30\n  trigger {\n    operator  = \"GreaterThan\"\n    threshold = 0\n  }\n  depends_on = [azurerm_monitor_action_group.alert_email_action]\n}\n#File: honey-storage.tf\n# Azure Storage Account\nresource \"azurerm_storage_account\" \"sa_customers_data\" {\n  count                    = var.enable_storage ? 1 : 0\n  name                     = \"customersdata${random_integer.random_int.id}\"\n  resource_group_name      = azurerm_resource_group.rg_honey_test.name\n  location                 = azurerm_resource_group.rg_honey_test.location\n  account_tier             = \"Standard\"\n  account_replication_type = \"LRS\"\n  depends_on               = [azurerm_resource_group.rg_honey_test]\n}\n\n# Azure Container\nresource \"azurerm_storage_container\" \"cnt_customers_data\" {\n  count                 = var.enable_storage ? 1 : 0\n  name                  = \"content\"\n  storage_account_name  = azurerm_storage_account.sa_customers_data[0].name\n  container_access_type = \"private\"\n  depends_on            = [azurerm_storage_account.sa_customers_data]\n}\n\n# Azure Blob\nresource \"azurerm_storage_blob\" \"users_data\" {\n  count                  = var.enable_storage ? 1 : 0\n  name                   = \"users_data.csv\"\n  storage_account_name   = azurerm_storage_account.sa_customers_data[0].name\n  storage_container_name = azurerm_storage_container.cnt_customers_data[0].name\n  type                   = \"Block\"\n  access_tier            = \"Cool\"\n  source                 = \"users_data.csv\"\n  depends_on             = [azurerm_storage_container.cnt_customers_data]\n}\n\n# Monitor Diagnostic Settings for the blob (this enables logging on the blob)\nresource \"azurerm_monitor_diagnostic_setting\" \"ds_blob\" {\n  count                      = var.enable_storage ? 1 : 0\n  name                       = split(\"/\", azurerm_log_analytics_workspace.monitor.id)[length(split(\"/\", azurerm_log_analytics_workspace.monitor.id)) - 1]\n  target_resource_id         = \"${azurerm_storage_account.sa_customers_data[0].id}/blobServices/default/\"\n  log_analytics_workspace_id = azurerm_log_analytics_workspace.monitor.id\n\n  log {\n    category = \"StorageRead\"\n    enabled  = true\n  }\n  log {\n    category = \"StorageWrite\"\n    enabled  = true\n  }\n  log {\n    category = \"StorageDelete\"\n    enabled  = true\n  }\n  depends_on = [azurerm_storage_account.sa_customers_data]\n}\n\n# Alert Rule\nresource \"azurerm_monitor_scheduled_query_rules_alert\" \"alert_blob\" {\n  count               = var.enable_storage ? 1 : 0\n  name                = \"alert_blob\"\n  location            = azurerm_resource_group.rg_honey_test.location\n  resource_group_name = azurerm_resource_group.rg_honey_test.name\n\n  action {\n    action_group = [azurerm_monitor_action_group.alert_email_action.id]\n  }\n  data_source_id = azurerm_log_analytics_workspace.monitor.id\n  description    = \"Alert when the blob is accessed\"\n  enabled        = true\n  # Count all requests with server error result code grouped into 5-minute bins\n  query       = <<-QUERY\n  StorageBlobLogs \n| where isnotempty(RequesterUpn) \n| project RequesterUpn,CallerIpAddress, Category, OperationName, _ResourceId, StatusText\n  QUERY\n  severity    = 1\n  frequency   = 5\n  time_window = 30\n  trigger {\n    operator  = \"GreaterThan\"\n    threshold = 0\n  }\n  depends_on = [azurerm_monitor_action_group.alert_email_action]\n}\n\n#File: main.tf\nterraform {\n  required_version = \">= 1.6.5\"\n\n  required_providers {\n    azurerm = {\n      source  = \"hashicorp/azurerm\"\n      version = \"=3.0.0\"\n    }\n    azuread = {\n      source  = \"hashicorp/azuread\"\n      version = \"~> 2.15.0\"\n    }\n  }\n}\n\nprovider \"azuread\" {}\n\nprovider \"azurerm\" {\n  skip_provider_registration = true # This is only required when the User, Service Principal, or Identity running Terraform lacks the permissions to register Azure Resource Providers.\n  features {}\n}\n\nprovider \"random\" {}\n\nresource \"random_integer\" \"random_int\" {\n  min = 1000\n  max = 9999\n}\n\n\nresource \"azurerm_resource_group\" \"rg_honey_test\" {\n  name     = \"honey_test\"\n  location = \"Italy North\"\n}\n\n# Azure Analytics Workspace \n\nresource \"azurerm_log_analytics_workspace\" \"monitor\" {\n  name                = \"log-analytics-workspace\"\n  resource_group_name = azurerm_resource_group.rg_honey_test.name\n  location            = azurerm_resource_group.rg_honey_test.location\n  sku                 = \"PerGB2018\"\n  retention_in_days   = 30\n  depends_on          = [azurerm_resource_group.rg_honey_test]\n}\n\n# Action Group (it specifies the receiver of the alert)\n\nresource \"azurerm_monitor_action_group\" \"alert_email_action\" {\n  name                = \"EmailAction\"\n  resource_group_name = azurerm_resource_group.rg_honey_test.name\n  short_name          = \"admin-mail\"\n  email_receiver {\n    name                    = \"sendtoUser\"\n    email_address           = var.destination_email\n    use_common_alert_schema = true\n  }\n  depends_on = [azurerm_resource_group.rg_honey_test, azurerm_log_analytics_workspace.monitor]\n}\n\n#File: variables.tf\nvariable \"destination_email\" {\n  description = \"Destination email for the alert\"\n}\n\nvariable \"sql_admin\" {\n  description = \"Entra ID email of the user designed to be the administrator of the SQL Server\"\n}\n\nvariable \"enable_storage\" {\n  description = \"Specify the creation of the honey storage\"\n}\n\nvariable \"enable_sqldb\" {\n  description = \"Specify the creation of the honey sqldb\"\n}"}]}
{"messages": [{"role":"user","content":"Confiure an AWS development environment by creating a VPC-based setup with security groups, an EFS file system with access points, and a Spot Fleet of EC2 instances using a custom IAM role and instance profile. It shoud manages networking, storage, and permissions, including SSH key pairs, Elastic IP allocation, and SSM parameters for configuration management. Additionally, define IAM roles with fine-grained policies for accessing S3 buckets, EC2, and Systems Manager, enabling secure and automated resource control."},{"role":"assistant","content":"provider \"aws\" {\r\n  region = var.dev_machine_region\r\n}\r\n\r\ndata \"aws_vpc\" \"default\" {\r\n  default = true\r\n}\r\n\r\nvariable \"name_prefix\" {\r\n  type        = string\r\n  description = \"A common prefix to apply to the names of all AWS resources.\"\r\n}\r\n\r\nvariable \"tags\" {\r\n  type        = map(string)\r\n  description = \"A set of tags to apply to all respective AWS resources.\"\r\n}\r\n\r\nvariable \"iam_role\" {\r\n  type = object({\r\n    name = string\r\n  })\r\n  description = \"The IAM role to which the policy to read the Google Workspace credentials should be attached.\"\r\n}\r\n\r\nvariable \"enabled\" {\r\n  type        = bool\r\n  description = \"Whether or not the module is enabled.\"\r\n}\r\n\r\nvariable \"actor\" {\r\n  type        = string\r\n  description = \"The email address of the administrator in Google Workspace that the service account is acting on behalf of.\"\r\n}\r\n\r\nvariable \"bridgeAddress\" {\r\n  type        = string\r\n  description = \"The URL of 1Password SCIM Bridge.\"\r\n}\r\n\r\n\r\ndata \"aws_subnet\" \"default\" {\r\n  availability_zone = var.dev_efs_az\r\n}\r\n\r\nresource \"random_string\" \"random\" {\r\n  length = 12\r\n  special = false\r\n  lower = true\r\n  upper = false\r\n}\r\n\r\nresource \"aws_security_group\" \"dev_machine_firewall\" {\r\n  name = \"dev_machine_sg\"\r\n  vpc_id = data.aws_vpc.default.id\r\n\r\n  ingress {\r\n    description      = \"SSH\"\r\n    from_port        = 22\r\n    to_port          = 22\r\n    protocol         = \"tcp\"\r\n    cidr_blocks      = concat([ var.dev_my_ip ], var.dev_cloud9_ips)\r\n  }\r\n\r\n  egress {\r\n    from_port        = 0\r\n    to_port          = 0\r\n    protocol         = \"-1\"\r\n    cidr_blocks      = [ \"0.0.0.0/0\" ]\r\n  }\r\n}\r\n\r\nresource \"aws_security_group\" \"dev_efs_firewall\" {\r\n  name = \"dev_efs_sg\"\r\n  vpc_id = data.aws_vpc.default.id\r\n\r\n  ingress {\r\n    description      = \"NFSv4\"\r\n    from_port        = 2049\r\n    to_port          = 2049\r\n    protocol         = \"tcp\"\r\n    security_groups = [ aws_security_group.dev_machine_firewall.id ]\r\n  }\r\n\r\n  egress {\r\n    from_port        = 0\r\n    to_port          = 0\r\n    protocol         = \"-1\"\r\n    cidr_blocks      = [ \"0.0.0.0/0\" ]\r\n  }\r\n}\r\n\r\nresource \"aws_efs_file_system\" \"dev_efs\" {\r\n  availability_zone_name = var.dev_efs_az\r\n  creation_token = \"dev_machine_files\"\r\n\r\n  lifecycle_policy {\r\n    transition_to_ia = \"AFTER_7_DAYS\"\r\n  }\r\n  \r\n  lifecycle_policy {\r\n    transition_to_primary_storage_class = \"AFTER_1_ACCESS\"\r\n  }\r\n\r\n  lifecycle {\r\n    prevent_destroy = true\r\n  }\r\n}\r\n\r\nresource \"aws_efs_access_point\" \"dev_efs_main_ap\" {\r\n  file_system_id = aws_efs_file_system.dev_efs.id\r\n  posix_user {\r\n    uid = 1000\r\n    gid = 1000\r\n  }\r\n\r\n  root_directory {\r\n    creation_info {\r\n      owner_uid = 1000\r\n      owner_gid = 1000\r\n      permissions = 0755\r\n    }\r\n    path = \"/data\"\r\n  }\r\n}\r\n\r\nresource \"aws_efs_access_point\" \"dev_efs_docker_ap\" {\r\n  file_system_id = aws_efs_file_system.dev_efs.id\r\n  posix_user {\r\n    uid = 0\r\n    gid = 0\r\n  }\r\n\r\n  root_directory {\r\n    creation_info {\r\n      owner_uid = 0\r\n      owner_gid = 0\r\n      permissions = 0755\r\n    }\r\n    path = \"/docker\"\r\n  }\r\n}\r\n\r\nresource \"aws_efs_mount_target\" \"dev_efs_mount\" {\r\n  file_system_id = aws_efs_file_system.dev_efs.id\r\n  subnet_id = data.aws_subnet.default.id\r\n  security_groups = [ aws_security_group.dev_efs_firewall.id ]\r\n}\r\n\r\nresource \"aws_eip\" \"dev_machine_ip\" {\r\n  vpc = true\r\n}\r\n\r\nresource \"aws_ssm_parameter\" \"dev_machine_ip\" {\r\n  name  = \"dev_ip_allocation_id\"\r\n  type  = \"String\"\r\n  value = aws_eip.dev_machine_ip.allocation_id\r\n}\r\n\r\nresource \"aws_ssm_parameter\" \"dev_efs_az\" {\r\n  name  = \"dev_efs_az\"\r\n  type  = \"String\"\r\n  value = var.dev_efs_az\r\n}\r\n\r\nresource \"aws_ssm_parameter\" \"dev_efs\" {\r\n  name  = \"dev_efs_id\"\r\n  type  = \"String\"\r\n  value = aws_efs_file_system.dev_efs.id\r\n}\r\n\r\nresource \"aws_ssm_parameter\" \"dev_efs_main_ap\" {\r\n  name  = \"dev_efs_data_ap\"\r\n  type  = \"String\"\r\n  value = aws_efs_access_point.dev_efs_main_ap.id\r\n}\r\n\r\nresource \"aws_ssm_parameter\" \"dev_efs_docker_ap\" {\r\n  name  = \"dev_efs_docker_ap\"\r\n  type  = \"String\"\r\n  value = aws_efs_access_point.dev_efs_docker_ap.id\r\n}\r\n\r\nresource \"aws_ssm_parameter\" \"dev_ssh_key\" {\r\n  name  = \"dev_ssh_key\"\r\n  type  = \"String\"\r\n  value = var.dev_ssh_public_key\r\n}\r\n\r\ndata \"aws_ami\" \"amzn_linux2\" {\r\n  owners = [\"amazon\"]\r\n  most_recent = \"true\"\r\n\r\n  filter {\r\n    name = \"name\"\r\n    values = [ \"amzn2-ami-kernel-*\" ]\r\n  }\r\n\r\n  filter {\r\n    name   = \"virtualization-type\"\r\n    values = [\"hvm\"]\r\n  }\r\n}\r\n\r\nresource \"aws_iam_instance_profile\" \"dev_ec2_profile\" {\r\n  name = \"dev_instance_profile-${random_string.random.result}\"\r\n  role = aws_iam_role.dev_machine_role.name\r\n}\r\n\r\nresource \"aws_key_pair\" \"dev_ssh_key\" {\r\n  key_name = \"dev_ssh_key\"\r\n  public_key = var.dev_ssh_public_key\r\n}\r\n\r\nresource \"aws_spot_fleet_request\" \"dev_spot_request\" {\r\n  iam_fleet_role = aws_iam_role.dev_spot_fleet_role.arn\r\n  spot_price = var.dev_spot_price\r\n  allocation_strategy = \"diversified\"\r\n  target_capacity = 1\r\n  fleet_type = \"maintain\"\r\n  on_demand_target_capacity = 0\r\n  instance_interruption_behaviour = \"terminate\"\r\n  terminate_instances_with_expiration = true\r\n  wait_for_fulfillment = true\r\n  depends_on = [\r\n    aws_efs_file_system.dev_efs,\r\n    aws_efs_mount_target.dev_efs_mount,\r\n    aws_efs_access_point.dev_efs_main_ap,\r\n    aws_efs_access_point.dev_efs_docker_ap\r\n  ]\r\n\r\n  # similar with aws_instance\r\n  launch_specification {\r\n    key_name = aws_key_pair.dev_ssh_key.id\r\n    instance_type = var.dev_instance_type\r\n    ami = data.aws_ami.amzn_linux2.id\r\n    spot_price = var.dev_spot_price\r\n    iam_instance_profile = aws_iam_instance_profile.dev_ec2_profile.name\r\n    vpc_security_group_ids = [aws_security_group.dev_machine_firewall.id]\r\n\r\n    user_data = <<EOF\r\n#!/bin/sh\r\n\r\ncurl -L -s ${var.dev_user_data_url} | bash\r\nEOF\r\n  }\r\n}\r\n\r\nresource \"aws_s3_bucket\" \"dev_main_bucket\" {\r\n  bucket = var.dev_bucket_name != \"\" ? var.dev_bucket_name : lower(\"dev-spot-machine-${random_string.random.result}\")\r\n  acl = \"private\"\r\n}\r\n\r\ndata \"aws_caller_identity\" \"current\" {}\r\n\r\nresource \"aws_iam_role\" \"dev_spot_fleet_role\" {\r\n  name = \"EC2DevSpotFleetRole-${random_string.random.result}\"\r\n  assume_role_policy = jsonencode({\r\n    Statement = [\r\n      {\r\n        Effect = \"Allow\",\r\n        Principal = {\r\n            Service = \"spotfleet.amazonaws.com\"\r\n        },\r\n        Action = \"sts:AssumeRole\"\r\n      }\r\n    ]\r\n  })\r\n\r\n  inline_policy {\r\n    name = \"dev_spot_fleet\"\r\n    policy = jsonencode({\r\n      Statement = [\r\n        {\r\n          Effect = \"Allow\",\r\n          Action: [\r\n              \"ec2:DescribeImages\",\r\n              \"ec2:DescribeSubnets\",\r\n              \"ec2:RequestSpotInstances\",\r\n              \"ec2:TerminateInstances\",\r\n              \"ec2:DescribeInstanceStatus\",\r\n              \"ec2:CreateTags\",\r\n              \"ec2:RunInstances\"\r\n          ],\r\n          Resource = \"*\"\r\n        },\r\n        {\r\n          Effect = \"Allow\",\r\n          Action = \"iam:PassRole\",\r\n          Condition = {\r\n              StringEquals = {\r\n                  \"iam:PassedToService\" = [\r\n                    \"ec2.amazonaws.com\",\r\n                    \"ec2.amazonaws.com.cn\"\r\n                  ]\r\n              }\r\n          },\r\n          Resource = \"*\"\r\n        },\r\n        {\r\n          Effect = \"Allow\",\r\n          Action = \"elasticloadbalancing:RegisterInstancesWithLoadBalancer\",\r\n          Resource = \"arn:aws:elasticloadbalancing:*:*:loadbalancer/*\"\r\n        },\r\n        {\r\n          Effect = \"Allow\",\r\n          Action = \"elasticloadbalancing:RegisterTargets\",\r\n          Resource = \"arn:aws:elasticloadbalancing:*:*:*/*\"\r\n        }\r\n      ]\r\n    })\r\n  }\r\n}\r\n\r\nresource \"aws_iam_role\" \"dev_machine_role\" {\r\n  name = \"EC2DevMachineRole-${random_string.random.result}\"\r\n\r\n  assume_role_policy = jsonencode({\r\n    Statement = [\r\n      {\r\n        Action = \"sts:AssumeRole\"\r\n        Effect = \"Allow\"\r\n        Principal = {\r\n          Service = \"ec2.amazonaws.com\"\r\n        }\r\n      },\r\n      {\r\n        Action = \"sts:AssumeRole\"\r\n        Effect = \"Allow\"\r\n        Principal = {\r\n          AWS = data.aws_caller_identity.current.arn\r\n        }\r\n      }\r\n    ]\r\n  })\r\n\r\n  inline_policy {\r\n    name = \"dev_s3_bucket\"\r\n    policy = jsonencode({\r\n      Statement = [\r\n        {\r\n          Effect = \"Allow\",\r\n          Action = [\r\n            \"s3:ListBucket\",\r\n            \"s3:CreateBucket\",\r\n            \"s3:DeleteBucket\"\r\n          ]\r\n          Resource = \"arn:aws:s3:::${var.dev_bucket_name}\"\r\n        },\r\n        {\r\n          Effect = \"Allow\",\r\n          Action = [\r\n            \"s3:*\",\r\n            \"s3-object-lambda:*\"\r\n          ]\r\n          Resource = \"arn:aws:s3:::${var.dev_bucket_name}/*\"\r\n        }\r\n      ]\r\n    })\r\n  }\r\n  # S3\r\n\r\n  inline_policy {\r\n    name = \"dev_ssm_access\"\r\n    policy = jsonencode({\r\n      Statement = [\r\n        {\r\n          Effect = \"Allow\",\r\n          Action = [\r\n            \"ssm:PutParameter\",\r\n            \"ssm:DeleteParameter\",\r\n            \"ssm:GetParameterHistory\",\r\n            \"ssm:GetParametersByPath\",\r\n            \"ssm:GetParameters\",\r\n            \"ssm:GetParameter\",\r\n            \"ssm:DeleteParameters\"\r\n          ]\r\n          Resource = \"arn:aws:ssm:${var.dev_machine_region}:${data.aws_caller_identity.current.account_id}:parameter/dev_*\"\r\n        },\r\n        {\r\n          Effect = \"Allow\",\r\n          Action = [\r\n            \"ssm:DescribeParameters\"\r\n          ]\r\n          Resource = \"*\"\r\n        }\r\n      ]\r\n    })\r\n  }\r\n  # SSM\r\n\r\n  inline_policy {\r\n    name = \"dev_ec2_access\"\r\n    policy = jsonencode({\r\n      Statement = [\r\n        {\r\n          Effect = \"Allow\"\r\n          Action = [\r\n            \"ec2:AssociateAddress\"\r\n          ]\r\n          Resource = [\r\n            \"arn:aws:ec2:${var.dev_machine_region}:${data.aws_caller_identity.current.account_id}:instance/*\",\r\n            \"arn:aws:ec2:${var.dev_machine_region}:${data.aws_caller_identity.current.account_id}:elastic-ip/${aws_eip.dev_machine_ip.allocation_id}\"\r\n          ]\r\n        }\r\n      ]\r\n    })\r\n  }\r\n  # EC2/EIP\r\n\r\n}\r\n\r\n# This role should be used only if you need access to all AWS Services\r\nresource \"aws_iam_role\" \"dev_machine_admin_role\" {\r\n  name = \"EC2DevMachineAdminRole-${random_string.random.result}\"\r\n\r\n  assume_role_policy = jsonencode({\r\n    Statement = [\r\n      {\r\n        Action = \"sts:AssumeRole\"\r\n        Effect = \"Allow\"\r\n        Principal = {\r\n          Service = \"ec2.amazonaws.com\"\r\n        }\r\n      },\r\n      {\r\n        Action = \"sts:AssumeRole\"\r\n        Effect = \"Allow\"\r\n        Principal = {\r\n          AWS = data.aws_caller_identity.current.arn\r\n        }\r\n      }\r\n    ]\r\n  })\r\n\r\n  inline_policy {\r\n    name = \"dev_admin_access\"\r\n    policy = jsonencode({\r\n      Statement = [\r\n        {\r\n          Effect = \"Allow\",\r\n          Action = \"*\"\r\n          Resource = \"*\"\r\n        }\r\n      ]\r\n    })\r\n  }\r\n  # admin\r\n}"}]}
{"messages": [{"role": "user", "content": "Create a shared VPC with the specified network and subnetwork configurations. Deploy two Kubernetes clusters—one in-scope and one out-of-scope—using Google Kubernetes Engine. Set up node pools for both clusters with automated scaling and management. Establish firewall rules to control traffic between in-scope and out-of-scope resources. Enable necessary APIs and IAM roles for service accounts across the projects."}, {"role": "assistant", "content": "\n#File: clusters.tf\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n# create the clusters\n# https://cloud.google.com/kubernetes-engine/docs/how-to/cluster-shared-vpc#creating_a_cluster_in_your_first_service_project\nresource \"google_container_cluster\" \"in_scope\" {\n  provider                 = google-beta\n  name                     = local.in_scope_cluster_name\n  location                 = var.region\n  project                  = google_project.in_scope.project_id\n  network                  = google_compute_network.shared-vpc.self_link\n  subnetwork               = google_compute_subnetwork.in-scope.self_link\n  remove_default_node_pool = true\n  initial_node_count       = local.in_scope_node_pool_initial_node_count\n  enable_shielded_nodes    = true\n\n  release_channel {\n    channel = local.in_scope_cluster_release_channel\n  }\n  workload_identity_config {\n    identity_namespace = \"${google_project.in_scope.project_id}.svc.id.goog\"\n  }\n  addons_config {\n    istio_config {\n      disabled = true\n    }\n  }\n  ip_allocation_policy {\n    cluster_secondary_range_name  = local.in_scope_pod_ip_range_name\n    services_secondary_range_name = local.in_scope_services_ip_range_name\n  }\n  private_cluster_config {\n    enable_private_nodes    = true\n    enable_private_endpoint = false\n    master_ipv4_cidr_block  = local.in_scope_master_ipv4_cidr_block\n  }\n  master_authorized_networks_config {\n    cidr_blocks {\n      cidr_block   = local.in_scope_master_authorized_networks_config_1_cidr_block\n      display_name = local.in_scope_master_authorized_networks_config_1_display_name\n    }\n  }\n  authenticator_groups_config {\n    security_group = var.gke_security_group_name\n  }\n}\n\nresource \"google_container_node_pool\" \"in_scope_node_pool\" {\n  provider           = google-beta\n  name               = \"${local.in_scope_cluster_name}-node-pool\"\n  location           = var.region\n  initial_node_count = local.in_scope_node_pool_initial_node_count\n  cluster            = google_container_cluster.in_scope.name\n  project            = google_project.in_scope.project_id\n\n  autoscaling {\n    min_node_count = local.in_scope_node_pool_autoscaling_min_node_count\n    max_node_count = local.in_scope_node_pool_autoscaling_max_node_count\n  }\n  management {\n    auto_repair  = local.in_scope_node_pool_auto_repair\n    auto_upgrade = local.in_scope_node_pool_auto_upgrade\n  }\n  upgrade_settings {\n    max_surge       = local.in_scope_node_pool_max_surge\n    max_unavailable = local.in_scope_node_pool_max_unavailable\n  }\n  node_config {\n    machine_type = local.in_scope_node_pool_machine_type\n    image_type   = \"COS_CONTAINERD\"\n    oauth_scopes = local.in_scope_node_pool_oauth_scopes\n    shielded_instance_config {\n      enable_secure_boot = true\n    }\n    workload_metadata_config {\n      node_metadata = \"GKE_METADATA_SERVER\"\n    }\n  }\n}\n\nresource \"google_container_cluster\" \"out_of_scope\" {\n  provider                 = google-beta\n  name                     = local.out_of_scope_cluster_name\n  location                 = var.region\n  project                  = google_project.out_of_scope.project_id\n  network                  = google_compute_network.shared-vpc.self_link\n  subnetwork               = google_compute_subnetwork.out-of-scope.self_link\n  remove_default_node_pool = true\n  initial_node_count       = local.out_of_scope_node_pool_initial_node_count\n  enable_shielded_nodes    = true\n\n  release_channel {\n    channel = local.out_of_scope_cluster_release_channel\n  }\n  workload_identity_config {\n    identity_namespace = \"${google_project.out_of_scope.project_id}.svc.id.goog\"\n  }\n  addons_config {\n    istio_config {\n      disabled = true\n    }\n  }\n  ip_allocation_policy {\n    cluster_secondary_range_name  = local.out_of_scope_pod_ip_range_name\n    services_secondary_range_name = local.out_of_scope_services_ip_range_name\n  }\n  private_cluster_config {\n    enable_private_nodes    = true\n    enable_private_endpoint = false\n    master_ipv4_cidr_block  = local.out_of_scope_master_ipv4_cidr_block\n  }\n  master_authorized_networks_config {\n    cidr_blocks {\n      cidr_block   = local.out_of_scope_master_authorized_networks_config_1_cidr_block\n      display_name = local.out_of_scope_master_authorized_networks_config_1_display_name\n    }\n  }\n  authenticator_groups_config {\n    security_group = var.gke_security_group_name\n  }\n}\n\nresource \"google_container_node_pool\" \"out_of_scope_node_pool\" {\n  provider           = google-beta\n  name               = \"${local.out_of_scope_cluster_name}-node-pool\"\n  location           = var.region\n  initial_node_count = local.out_of_scope_node_pool_initial_node_count\n  cluster            = google_container_cluster.out_of_scope.name\n  project            = google_project.out_of_scope.project_id\n\n  autoscaling {\n    min_node_count = local.out_of_scope_node_pool_autoscaling_min_node_count\n    max_node_count = local.out_of_scope_node_pool_autoscaling_max_node_count\n  }\n  management {\n    auto_repair  = local.out_of_scope_node_pool_auto_repair\n    auto_upgrade = local.out_of_scope_node_pool_auto_upgrade\n  }\n  upgrade_settings {\n    max_surge       = local.out_of_scope_node_pool_max_surge\n    max_unavailable = local.out_of_scope_node_pool_max_unavailable\n  }\n\n  node_config {\n    machine_type = local.out_of_scope_node_pool_machine_type\n    image_type   = \"COS_CONTAINERD\"\n    oauth_scopes = local.out_of_scope_node_pool_oauth_scopes\n    shielded_instance_config {\n      enable_secure_boot = true\n    }\n    workload_metadata_config {\n      node_metadata = \"GKE_METADATA_SERVER\"\n    }\n  }\n}\n\n#File: dns.tf\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nresource \"google_dns_managed_zone\" \"frontend\" {\n  project    = google_project.network.project_id\n  name       = \"frontend-zone\"\n  dns_name   = \"${var.frontend_zone_dns_name}.\"\n  depends_on = [google_project_service.dns_api_network]\n}\n\nresource \"google_dns_record_set\" \"frontend\" {\n  project      = google_project.network.project_id\n  name         = \"${var.frontend_hostname}.${google_dns_managed_zone.frontend.dns_name}\"\n  type         = \"A\"\n  ttl          = 300\n  managed_zone = google_dns_managed_zone.frontend.name\n  rrdatas      = [google_compute_global_address.frontend-ext-ip.address]\n}\n\noutput \"frontend_zone_dns_name\" {\n  value = var.frontend_zone_dns_name\n}\n\noutput \"nameservers\" {\n  value = google_dns_managed_zone.frontend.name_servers\n}\n\n#File: firewall-rules.tf\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n# This allows traffic from the in-scope cluster's services to the out-of-scope\n# internal load balancer\n# the ports are listed in /helm/out-of-scope-microservices/templates/nginx-listener.yaml\nresource \"google_compute_firewall\" \"from_out_of_scope_to_in_scope_internal_load_balancer\" {\n  name          = \"from-out-of-scope-to-in-scope-internal-load-balancer\"\n  project       = google_project.network.project_id\n  network       = google_compute_network.shared-vpc.name\n  source_ranges = [\"0.0.0.0/0\"]\n  allow {\n    protocol = \"tcp\"\n    ports    = [\"4443-4449\"]\n  }\n}\n\n#File: iam.tf\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n# Grant the Host Service Agent User role to the GKE service accounts on the host project\nresource \"google_project_iam_binding\" \"host-service-agent-for-gke-service-accounts\" {\n  project = google_project.network.project_id\n  role    = \"roles/container.hostServiceAgentUser\"\n  members = [\n    \"serviceAccount:service-${google_project.in_scope.number}@container-engine-robot.iam.gserviceaccount.com\",\n    \"serviceAccount:service-${google_project.out_of_scope.number}@container-engine-robot.iam.gserviceaccount.com\",\n  ]\n}\n\nresource \"google_project_iam_custom_role\" \"firewall_admin\" {\n  depends_on = [google_project.network]\n  project    = google_project.network.project_id\n  role_id    = \"firewall_admin\"\n  title      = \"Firewall Admin\"\n\n  permissions = [\n    \"compute.firewalls.create\",\n    \"compute.firewalls.get\",\n    \"compute.firewalls.delete\",\n    \"compute.firewalls.list\",\n    \"compute.firewalls.update\",\n    \"compute.networks.updatePolicy\",\n  ]\n}\n\n# Add the in-scope Kubernetes Engine Service Agent to the above custom role\nresource \"google_project_iam_member\" \"add_firewall_admin_to_in_scope_gke_service_account\" {\n  project = google_project.network.project_id\n  role    = \"projects/${google_project.network.project_id}/roles/firewall_admin\"\n  member  = \"serviceAccount:service-${google_project.in_scope.number}@container-engine-robot.iam.gserviceaccount.com\"\n}\n\n# Add the out-of-scope Kubernetes Engine Service Agent to the above custom role\nresource \"google_project_iam_member\" \"add_firewall_admin_to_out_of_scope_gke_service_account\" {\n  project = google_project.network.project_id\n  role    = \"projects/${google_project.network.project_id}/roles/firewall_admin\"\n  member  = \"serviceAccount:service-${google_project.out_of_scope.number}@container-engine-robot.iam.gserviceaccount.com\"\n}\n\n#File: network.tf\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n# Creating the network\n# https://cloud.google.com/kubernetes-engine/docs/how-to/cluster-shared-vpc#creating_a_network_and_two_subnets\nresource \"google_compute_network\" \"shared-vpc\" {\n  name                    = var.shared_vpc_name\n  project                 = google_project.network.project_id\n  auto_create_subnetworks = false\n}\n\nresource \"google_compute_subnetwork\" \"in-scope\" {\n  name                     = local.in_scope_subnet_name\n  project                  = google_project.network.project_id\n  region                   = var.region\n  network                  = google_compute_network.shared-vpc.self_link\n  private_ip_google_access = true\n  ip_cidr_range            = local.in_scope_subnet_cidr\n  secondary_ip_range {\n    range_name    = local.in_scope_pod_ip_range_name\n    ip_cidr_range = local.in_scope_pod_ip_cidr_range\n  }\n  secondary_ip_range {\n    range_name    = local.in_scope_services_ip_range_name\n    ip_cidr_range = local.in_scope_services_ip_cidr_range\n  }\n}\n\nresource \"google_compute_subnetwork\" \"out-of-scope\" {\n  name                     = local.out_of_scope_subnet_name\n  project                  = google_project.network.project_id\n  region                   = var.region\n  network                  = google_compute_network.shared-vpc.self_link\n  private_ip_google_access = true\n  ip_cidr_range            = local.out_of_scope_subnet_cidr\n  secondary_ip_range {\n    range_name    = local.out_of_scope_pod_ip_range_name\n    ip_cidr_range = local.out_of_scope_pod_ip_cidr_range\n  }\n  secondary_ip_range {\n    range_name    = local.out_of_scope_services_ip_range_name\n    ip_cidr_range = local.out_of_scope_services_ip_cidr_range\n  }\n}\n\n\n# Enabling shared vpc\n# https://cloud.google.com/kubernetes-engine/docs/how-to/cluster-shared-vpc#enabling_shared_vpc_and_granting_roles\nresource \"google_compute_shared_vpc_host_project\" \"network\" {\n  project = google_project.network.project_id\n}\nresource \"google_compute_shared_vpc_service_project\" \"in-scope\" {\n  host_project    = google_project.network.project_id\n  service_project = google_project.in_scope.project_id\n}\nresource \"google_compute_shared_vpc_service_project\" \"out-of-scope\" {\n  host_project    = google_project.network.project_id\n  service_project = google_project.out_of_scope.project_id\n}\n\n# setting IAM policy\n## in-scope\ndata \"google_iam_policy\" \"in-scope-policy\" {\n  binding {\n    role = \"roles/compute.networkUser\"\n    members = [\n      \"serviceAccount:${google_project.in_scope.number}@cloudservices.gserviceaccount.com\",\n    ]\n  }\n  binding {\n    role = \"roles/compute.networkUser\"\n    members = [\n      \"serviceAccount:service-${google_project.in_scope.number}@container-engine-robot.iam.gserviceaccount.com\",\n    ]\n  }\n}\nresource \"google_compute_subnetwork_iam_policy\" \"in-scope\" {\n  project     = google_project.network.project_id\n  region      = var.region\n  subnetwork  = google_compute_subnetwork.in-scope.name\n  policy_data = data.google_iam_policy.in-scope-policy.policy_data\n}\n\n## out-of-scope\ndata \"google_iam_policy\" \"out-of-scope-policy\" {\n  binding {\n    role = \"roles/compute.networkUser\"\n    members = [\n      \"serviceAccount:${google_project.out_of_scope.number}@cloudservices.gserviceaccount.com\",\n    ]\n  }\n  binding {\n    role = \"roles/compute.networkUser\"\n    members = [\n      \"serviceAccount:service-${google_project.out_of_scope.number}@container-engine-robot.iam.gserviceaccount.com\",\n    ]\n  }\n}\nresource \"google_compute_subnetwork_iam_policy\" \"out-of-scope\" {\n  project     = google_project.network.project_id\n  region      = var.region\n  subnetwork  = google_compute_subnetwork.out-of-scope.name\n  policy_data = data.google_iam_policy.out-of-scope-policy.policy_data\n}\n\n\n# outbound NAT for private clusters\nresource \"google_compute_router\" \"router\" {\n  name    = \"router\"\n  project = google_project.network.project_id\n  region  = var.region\n  network = google_compute_network.shared-vpc.self_link\n}\n\nresource \"google_compute_router_nat\" \"nat\" {\n  name                               = \"nat-all\"\n  project                            = google_project.network.project_id\n  region                             = var.region\n  router                             = google_compute_router.router.name\n  nat_ip_allocate_option             = \"AUTO_ONLY\"\n  source_subnetwork_ip_ranges_to_nat = \"LIST_OF_SUBNETWORKS\"\n\n  subnetwork {\n    name                    = google_compute_subnetwork.in-scope.self_link\n    source_ip_ranges_to_nat = [\"PRIMARY_IP_RANGE\"]\n  }\n\n  subnetwork {\n    name                    = google_compute_subnetwork.out-of-scope.self_link\n    source_ip_ranges_to_nat = [\"PRIMARY_IP_RANGE\"]\n  }\n}\n\nresource \"google_compute_global_address\" \"frontend-ext-ip\" {\n  name         = local.frontend_external_address_name\n  project      = google_project.in_scope.project_id\n  description  = \"A named external IP address to match an Ingress rule for the frontend.\"\n  address_type = \"EXTERNAL\"\n}\n\noutput frontend-ext-ip {\n  value = google_compute_global_address.frontend-ext-ip.address\n}\n\n#File: org-policies.tf\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\nresource \"google_folder_organization_policy\" \"external_ip_policy\" {\n  folder     = \"folders/${var.folder_id}\"\n  constraint = \"compute.vmExternalIpAccess\"\n\n  list_policy {\n    deny {\n      all = true\n    }\n  }\n}\n\n\nresource \"google_folder_organization_policy\" \"domain_restricted_sharing_policy\" {\n  folder     = \"folders/${var.folder_id}\"\n  constraint = \"iam.allowedPolicyMemberDomains\"\n\n  list_policy {\n    allow {\n      values = [var.gsuite_id]\n    }\n  }\n}\n\n\nresource \"google_folder_organization_policy\" \"trusted_image_policy\" {\n  folder     = \"folders/${var.folder_id}\"\n  constraint = \"compute.trustedImageProjects\"\n\n  list_policy {\n    allow {\n      values = [\"projects/cos-cloud\", \"projects/cos-containerd\"]\n    }\n  }\n}\n\n#File: projects.tf\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n# Create the projects\nresource \"google_project\" \"network\" {\n  name                = var.project_network\n  project_id          = var.project_network\n  folder_id           = local.folder_id\n  billing_account     = var.billing_account\n  auto_create_network = false\n}\nresource \"google_project\" \"in_scope\" {\n  name                = var.project_in_scope\n  project_id          = var.project_in_scope\n  folder_id           = local.folder_id\n  billing_account     = var.billing_account\n  auto_create_network = false\n}\nresource \"google_project\" \"out_of_scope\" {\n  name                = var.project_out_of_scope\n  project_id          = var.project_out_of_scope\n  folder_id           = local.folder_id\n  billing_account     = var.billing_account\n  auto_create_network = false\n}\nresource \"google_project\" \"management\" {\n  name                = var.project_management\n  project_id          = var.project_management\n  folder_id           = local.folder_id\n  billing_account     = var.billing_account\n  auto_create_network = false\n}\n\n# Enable GKE API\n# https://cloud.google.com/kubernetes-engine/docs/how-to/cluster-shared-vpc#enabling_the_api_in_your_projects\nresource \"google_project_service\" \"container_api_network\" {\n  project                    = google_project.network.project_id\n  service                    = \"container.googleapis.com\"\n  disable_dependent_services = true\n  disable_on_destroy         = true\n}\nresource \"google_project_service\" \"container_api_in_scope\" {\n  project                    = google_project.in_scope.project_id\n  service                    = \"container.googleapis.com\"\n  disable_dependent_services = true\n  disable_on_destroy         = true\n}\nresource \"google_project_service\" \"container_api_out_of_scope\" {\n  project                    = google_project.out_of_scope.project_id\n  service                    = \"container.googleapis.com\"\n  disable_dependent_services = true\n  disable_on_destroy         = true\n}\n\n# Enable Stackdriver Trace API\nresource \"google_project_service\" \"cloudtrace_api_out_of_scope\" {\n  project                    = google_project.out_of_scope.project_id\n  service                    = \"cloudtrace.googleapis.com\"\n  disable_dependent_services = true\n  disable_on_destroy         = true\n}\nresource \"google_project_service\" \"monitoring_api_out_of_scope\" {\n  project                    = google_project.out_of_scope.project_id\n  service                    = \"monitoring.googleapis.com\"\n  disable_dependent_services = true\n  disable_on_destroy         = true\n}\nresource \"google_project_service\" \"cloudtrace_api_in_scope\" {\n  project                    = google_project.in_scope.project_id\n  service                    = \"cloudtrace.googleapis.com\"\n  disable_dependent_services = true\n  disable_on_destroy         = true\n}\nresource \"google_project_service\" \"monitoring_api_in_scope\" {\n  project                    = google_project.in_scope.project_id\n  service                    = \"monitoring.googleapis.com\"\n  disable_dependent_services = true\n  disable_on_destroy         = true\n}\nresource \"google_project_service\" \"dns_api_network\" {\n  project                    = google_project.network.project_id\n  service                    = \"dns.googleapis.com\"\n  disable_dependent_services = true\n  disable_on_destroy         = true\n}\n\n#File: security-policy.tf\nresource \"google_compute_security_policy\" \"security-policy-1\" {\n  name        = local.google_compute_security_policy_frontend_name\n  project     = google_project.in_scope.project_id\n  description = \"Web application security policy\"\n\n  # Reject all traffic that hasn't been whitelisted.\n  rule {\n    action   = \"deny(403)\"\n    priority = \"1000\"\n    match {\n      expr {\n        expression = local.google_compute_security_policy_sqli_rule_expression_list\n      }\n    }\n    description = \"Cloud Armor tuned WAF rules for SQL injection\"\n  }\n\n  rule {\n    action   = \"deny(403)\"\n    priority = \"2000\"\n    match {\n      expr {\n        expression = \"evaluatePreconfiguredExpr('xss-stable')\"\n      }\n    }\n    description = \"Deny access to XSS attempts\"\n  }\n\n  rule {\n    action   = \"allow\"\n    priority = \"2147483647\"\n    match {\n      versioned_expr = \"SRC_IPS_V1\"\n      config {\n        src_ip_ranges = [\"*\"]\n      }\n    }\n    description = \"default rule\"\n  }\n}\n\n#File: shared.tf\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nprovider \"google\" {\n  version = \"~> 3.8\"\n  region  = var.region\n}\nprovider \"google-beta\" {\n  version = \"~> 3.8\"\n  region  = var.region\n}\nvariable \"billing_account\" {\n  description = \"The ID of the associated billing account\"\n  default     = \"\"\n}\nvariable \"org_id\" {\n  description = \"The ID of the Google Cloud Organization.\"\n  default     = \"\"\n}\nvariable \"terraform_service_account\" {\n  description = \"The IDs of the Terraform users or Service Accounts to be applied to VPC Service Controls\"\n  default     = [\"serviceAccount:<service-account-email>\", \"user:<user-email>\"]\n}\nvariable \"domain\" {\n  description = \"The domain name of the Google Cloud Organization. Use this if you can't add Organization Viewer permissions to your TF ServiceAccount\"\n  default     = \"\"\n}\nvariable \"folder_id\" {\n  description = \"The ID of the folder in which projects should be created (optional).\"\n  default     = \"\"\n}\nvariable \"project_prefix\" {\n  description = \"Segment to prefix all project names with.\"\n  default     = \"pci-poc\"\n}\nvariable \"region\" {\n  default = \"us-central1\"\n}\nvariable \"frontend_hostname\" {\n  default = \"store\"\n}\nvariable \"frontend_zone_dns_name\" {\n  default = \"mycompany.com\"\n}\nvariable \"shared_vpc_name\" {\n  default     = \"shared-vpc\"\n  description = \"The name of the Shared VPC network\"\n}\nvariable \"gsuite_id\" {\n  default     = \"gsuite-customer-id\"\n  description = \"G Suite customer ID\"\n}\nvariable \"gke_security_group_name\" {\n  description = \"Google Group name to be used for GKE RBAC via Google Groups. See https://cloud.google.com/kubernetes-engine/docs/how-to/role-based-access-control#groups-setup-gsuite\"\n}\nvariable \"project_network\" {\n  description = \"Name of the network project\"\n}\nvariable \"project_management\" {\n  description = \"Name of the management project\"\n}\nvariable \"project_in_scope\" {\n  description = \"Name of the in-scope project\"\n}\nvariable \"project_out_of_scope\" {\n  description = \"Name of the out-of-scope project\"\n}\n\nlocals {\n  folder_id = \"${var.folder_id != \"\" ? var.folder_id : \"\"}\"\n\n  # in-scope network details\n  in_scope_subnet_name = \"in-scope\"\n  in_scope_subnet_cidr = \"10.0.4.0/22\"\n\n  in_scope_pod_ip_range_name = \"in-scope-pod-cidr\"\n  in_scope_pod_ip_cidr_range = \"10.4.0.0/14\"\n\n  in_scope_services_ip_range_name = \"in-scope-services-cidr\"\n  in_scope_services_ip_cidr_range = \"10.0.32.0/20\"\n\n  in_scope_master_ipv4_cidr_block                           = \"10.10.11.0/28\"\n  in_scope_master_authorized_networks_config_1_display_name = \"all\"\n  in_scope_master_authorized_networks_config_1_cidr_block   = \"0.0.0.0/0\"\n\n  # in-scope cluster details\n  in_scope_cluster_name                         = \"in-scope\"\n  in_scope_node_pool_initial_node_count         = 1\n  in_scope_cluster_release_channel              = \"REGULAR\"\n  in_scope_node_pool_autoscaling_min_node_count = 1\n  in_scope_node_pool_autoscaling_max_node_count = 10\n  in_scope_node_pool_machine_type               = \"n1-standard-2\"\n  in_scope_node_pool_oauth_scopes = [\n    \"https://www.googleapis.com/auth/compute\",\n    \"https://www.googleapis.com/auth/devstorage.read_only\",\n    \"https://www.googleapis.com/auth/logging.write\",\n    \"https://www.googleapis.com/auth/monitoring\",\n    \"https://www.googleapis.com/auth/trace.append\",\n    \"https://www.googleapis.com/auth/cloud_debugger\",\n    \"https://www.googleapis.com/auth/cloud-platform\",\n  ]\n  in_scope_node_pool_auto_repair     = true\n  in_scope_node_pool_auto_upgrade    = true\n  in_scope_node_pool_max_surge       = 1\n  in_scope_node_pool_max_unavailable = 0\n\n  # out-of-scope network details\n  out_of_scope_subnet_name = \"out-of-scope\"\n  out_of_scope_subnet_cidr = \"172.16.4.0/22\"\n\n  out_of_scope_pod_ip_range_name = \"out-of-scope-pod-cidr\"\n  out_of_scope_pod_ip_cidr_range = \"172.20.0.0/14\"\n\n  out_of_scope_services_ip_range_name = \"out-of-scope-services-cidr\"\n  out_of_scope_services_ip_cidr_range = \"172.16.16.0/20\"\n\n  out_of_scope_master_ipv4_cidr_block                           = \"10.10.12.0/28\"\n  out_of_scope_master_authorized_networks_config_1_display_name = \"all\"\n  out_of_scope_master_authorized_networks_config_1_cidr_block   = \"0.0.0.0/0\"\n\n  # out-of-scope cluster details\n  out_of_scope_cluster_name                         = \"out-of-scope\"\n  out_of_scope_node_pool_initial_node_count         = 1\n  out_of_scope_cluster_release_channel              = \"REGULAR\"\n  out_of_scope_node_pool_autoscaling_min_node_count = 1\n  out_of_scope_node_pool_autoscaling_max_node_count = 10\n  out_of_scope_node_pool_machine_type               = \"n1-standard-2\"\n  out_of_scope_node_pool_oauth_scopes = [\n    \"https://www.googleapis.com/auth/compute\",\n    \"https://www.googleapis.com/auth/devstorage.read_only\",\n    \"https://www.googleapis.com/auth/logging.write\",\n    \"https://www.googleapis.com/auth/monitoring\",\n    \"https://www.googleapis.com/auth/trace.append\",\n    \"https://www.googleapis.com/auth/cloud_debugger\",\n    \"https://www.googleapis.com/auth/cloud-platform\",\n  ]\n  out_of_scope_node_pool_auto_repair     = true\n  out_of_scope_node_pool_auto_upgrade    = true\n  out_of_scope_node_pool_max_surge       = 1\n  out_of_scope_node_pool_max_unavailable = 0\n\n  frontend_external_address_name = \"frontend-ext-ip\"\n  regular_service_perimeter_restricted_services = [\n    \"cloudtrace.googleapis.com\",\n    \"monitoring.googleapis.com\",]\n\n  google_compute_security_policy_frontend_name = \"frontend-application-security-policy\"\n\n  # See https://cloud.google.com/armor/docs/rule-tuning#sql_injection\n  # SQLi Sensitivity Level 1\n  google_compute_security_policy_sqli_rule_expression_list = <<EOT\n    evaluatePreconfiguredExpr('sqli-stable',[\n      'owasp-crs-v030001-id942110-sqli',\n      'owasp-crs-v030001-id942120-sqli',\n      'owasp-crs-v030001-id942150-sqli',\n      'owasp-crs-v030001-id942180-sqli',\n      'owasp-crs-v030001-id942200-sqli',\n      'owasp-crs-v030001-id942210-sqli',\n      'owasp-crs-v030001-id942260-sqli',\n      'owasp-crs-v030001-id942300-sqli',\n      'owasp-crs-v030001-id942310-sqli',\n      'owasp-crs-v030001-id942330-sqli',\n      'owasp-crs-v030001-id942340-sqli',\n      'owasp-crs-v030001-id942380-sqli',\n      'owasp-crs-v030001-id942390-sqli',\n      'owasp-crs-v030001-id942400-sqli',\n      'owasp-crs-v030001-id942410-sqli',\n      'owasp-crs-v030001-id942430-sqli',\n      'owasp-crs-v030001-id942440-sqli',\n      'owasp-crs-v030001-id942450-sqli',\n      'owasp-crs-v030001-id942251-sqli',\n      'owasp-crs-v030001-id942420-sqli',\n      'owasp-crs-v030001-id942431-sqli',\n      'owasp-crs-v030001-id942460-sqli',\n      'owasp-crs-v030001-id942421-sqli',\n      'owasp-crs-v030001-id942432-sqli'\n    ])\nEOT\n\n\n}\n\n#File: vpc-service-controls.tf\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nmodule \"vpc_service_control_organizational_access_policy\" {\n  source      = \"terraform-google-modules/vpc-service-controls/google\"\n  version     = \"1.0.3\"\n  parent_id   = var.org_id\n  policy_name = \"PCI Policy\"\n}\n\nmodule \"access_level_members\" {\n  source  = \"terraform-google-modules/vpc-service-controls/google//modules/access_level\"\n  version = \"1.0.3\"\n  policy  = module.vpc_service_control_organizational_access_policy.policy_id\n  name    = \"terraform_members\"\n  members = [var.terraform_service_account]\n}\n\nmodule \"regular_service_perimeter\" {\n  source              = \"terraform-google-modules/vpc-service-controls/google//modules/regular_service_perimeter\"\n  version             = \"1.0.3\"\n  policy              = module.vpc_service_control_organizational_access_policy.policy_id\n  perimeter_name      = \"gke_perimeter\"\n  description         = \"Perimeter shielding GKE projects\"\n  resources           = [google_project.in_scope.number, google_project.out_of_scope.number, google_project.network.number, google_project.management.number]\n  access_levels       = [module.access_level_members.name]\n  restricted_services = local.regular_service_perimeter_restricted_services\n}\n"}]}
{"messages": [{"role": "user", "content": "Create a local variable for the Docker image name and tag. Build a Docker image using a null resource that triggers a script for building and pushing to Azure Container Registry. Deploy a Linux web app in Azure using the recently pushed Docker image, configuring necessary site settings and identity. Assign the AcrPull role to the app service's managed identity to enable access to the container registry. Ensure the app service depends on the completion of the Docker image build process."}, {"role": "assistant", "content": "\n#File: main.tf\n# Set container image name\nlocals {\n  image_name = \"init-app-null-resource-with-docker-commands\"\n  image_tag = \"latest\"\n}\n\n# Create docker image\nresource \"null_resource\" \"docker_image\" {\n    triggers = {\n        image_name = local.image_name\n        image_tag = local.image_tag\n        registry_uri = data.azurerm_container_registry.acr.login_server\n        dockerfile_path = \"${path.cwd}/init-app/Dockerfile\"\n        dockerfile_context = \"${path.cwd}/init-app\"\n        registry_admin_username = data.azurerm_container_registry.acr.admin_username\n        registry_admin_password = data.azurerm_container_registry.acr.admin_password\n        dir_sha1 = sha1(join(\"\", [for f in fileset(path.cwd, \"init-app/*\") : filesha1(f)]))\n    }\n    provisioner \"local-exec\" {\n        command = \"./scripts/docker_build_and_push_to_acr.sh ${self.triggers.image_name} ${self.triggers.image_tag} ${self.triggers.registry_uri} ${self.triggers.dockerfile_path} ${self.triggers.dockerfile_context} ${self.triggers.registry_admin_username} ${self.triggers.registry_admin_password}\" \n        interpreter = [\"bash\", \"-c\"]\n    }\n}\n\n# Create an app service using the recelenty pushed image to ACR\nresource \"azurerm_linux_web_app\" \"web_app\" {\n  name                = \"app-demo-null-resource-with-docker-commands\"\n  resource_group_name = data.azurerm_resource_group.rg.name\n  location            = \"West Europe\"\n  service_plan_id     = data.azurerm_service_plan.plan.id\n  https_only          = true\n\n  site_config {\n    application_stack {\n      docker_image_name = \"${local.image_name}:${local.image_tag}\"\n      docker_registry_url = \"https://${data.azurerm_container_registry.acr.login_server}\"\n    }\n\n    container_registry_use_managed_identity = true\n    always_on = true\n    ftps_state = \"FtpsOnly\"\n    health_check_path = \"/health\"\n  }\n\n  app_settings = {\n    \"WEBSITES_PORT\" = \"8080\" \n  }\n\n  identity {\n    type = \"SystemAssigned\"\n  }\n\n  lifecycle {\n    ignore_changes = [\n        site_config.0.application_stack    \n    ]\n  }\n\n  depends_on = [ \n    null_resource.docker_image \n  ]\n}\n\n# Add AcrPull role to app service Manage Identity\nresource \"azurerm_role_assignment\" \"app_msi_role_assignment\" {\n    scope                            = data.azurerm_resource_group.rg.id \n    role_definition_name             = \"AcrPull\"\n    principal_id                     = azurerm_linux_web_app.web_app.identity[0].principal_id\n}\n#File: providers.tf\nterraform {\n  required_providers {\n    azurerm = {\n      source  = \"hashicorp/azurerm\"\n      version = \">=3.86.0\"\n    }\n  }\n}\n\nprovider \"azurerm\" {\n  features {}\n}\n#File: imports.tf\ndata \"azurerm_resource_group\" \"rg\" {\n  name = \"rg-demo\"\n}\n\ndata \"azurerm_container_registry\" \"acr\" {\n  name                = \"crdemotf01\"\n  resource_group_name = data.azurerm_resource_group.rg.name\n}\n\ndata \"azurerm_service_plan\" \"plan\" {\n  name                = \"plan-demo\"\n  resource_group_name = data.azurerm_resource_group.rg.name\n}"}]}
{"messages": [{"role":"user","content":"Create Terraform configuration that automates the creation and management of an AWS VPC environment with options for IPv4-only or dual-stack IPv6 support, including subnets, internet gateway, route tables, and security groups. It conditionally creates resources based on variable flags, supports both new and existing VPC/subnet usage, and provisions an EC2 instance with a specified AMI and SSH key pair. The setup is designed for flexible deployment in the \"eu-central-1\" region, tagged under the project \"kali\" and managed entirely via Terraform."},{"role":"assistant","content":"provider \"aws\" {\r\n  region  = \"${var.aws_region}\"\r\n  profile = \"${var.aws_profile}\"\r\n}\r\n\r\n## VPC:\r\nresource \"aws_vpc\" \"new-vpc\" {\r\n  count = \"${var.create_vpc == 1 ? 1 : 0}\"\r\n\r\n  cidr_block                       = \"${var.vpc_cidr}\"\r\n  enable_dns_support               = true\r\n  enable_dns_hostnames             = true\r\n  assign_generated_ipv6_cidr_block = \"${var.use_ipv6 == 0 ? true : false}\"\r\n\r\n  tags = {\r\n    Project   = \"kali\"\r\n    ManagedBy = \"terraform\"\r\n  }\r\n}\r\n\r\ndata \"aws_vpc\" \"vpc\" {\r\n  id = \"${var.create_vpc == 0 ? var.vpc_id : \"${join(\"\", aws_vpc.new-vpc.*.id)}\"}\"\r\n}\r\n\r\n## Subnets\r\n\r\nresource \"aws_subnet\" \"public-subnet\" {\r\n  count                           = \"${var.create_vpc == 1 ? 1 : 0}\"\r\n  vpc_id                          = \"${data.aws_vpc.vpc.id}\"\r\n  cidr_block                      = \"${var.subnet_cidr_block}\"\r\n  assign_ipv6_address_on_creation = \"${var.use_ipv6 == true ? true : false}\"\r\n\r\n  tags = {\r\n    Project   = \"kali\"\r\n    ManagedBy = \"terraform\"\r\n  }\r\n\r\n  depends_on = [\"aws_vpc.new-vpc\"]\r\n}\r\n\r\ndata \"aws_subnet\" \"subnet\" {\r\n  id = \"${var.subnet_id != \"\" ? var.subnet_id : \"${join(\"\", aws_subnet.public-subnet.*.id)}\"}\"\r\n}\r\n\r\n## Internet Gateway\r\nresource \"aws_internet_gateway\" \"igw\" {\r\n  count  = \"${var.create_vpc == 1 ? 1 : 0}\"\r\n  vpc_id = \"${data.aws_vpc.vpc.id}\"\r\n\r\n  tags = {\r\n    Project   = \"kali\"\r\n    ManagedBy = \"terraform\"\r\n  }\r\n}\r\n\r\n## Route Table\r\n\r\nresource \"aws_route_table\" \"rt-ipv6\" {\r\n  count  = \"${var.create_vpc * var.use_ipv6 == 1 ? 1 : 0}\"\r\n  vpc_id = \"${aws_vpc.new-vpc[count.index].id}\"\r\n\r\n  route {\r\n    cidr_block = \"0.0.0.0/0\"\r\n    gateway_id = \"${aws_internet_gateway.igw[count.index].id}\"\r\n  }\r\n\r\n  route {\r\n    ipv6_cidr_block = \"::/0\"\r\n    gateway_id      = \"${aws_internet_gateway.igw[count.index].id}\"\r\n  }\r\n\r\n  tags = {\r\n    Project   = \"kali\"\r\n    ManagedBy = \"terraform\"\r\n  }\r\n}\r\n\r\nresource \"aws_route_table\" \"rt-ipv4only\" {\r\n  count  = \"${var.create_vpc * var.use_ipv4only == 1 ? 1 : 0}\"\r\n  vpc_id = \"${aws_vpc.new-vpc[count.index].id}\"\r\n\r\n  route {\r\n    cidr_block = \"0.0.0.0/0\"\r\n    gateway_id = \"${aws_internet_gateway.igw[count.index].id}\"\r\n  }\r\n\r\n  tags = {\r\n    Project   = \"kali\"\r\n    ManagedBy = \"terraform\"\r\n  }\r\n}\r\n\r\nresource \"aws_route_table_association\" \"rtassoc\" {\r\n  count = \"${var.create_vpc == 1 ? 1 : 0}\"\r\n\r\n  subnet_id      = \"${aws_subnet.public-subnet[count.index].id}\"\r\n  route_table_id = \"${var.use_ipv6 == 1 ? \"${join(\"\", aws_route_table.rt-ipv6.*.id)}\" : \"${join(\"\", aws_route_table.rt-ipv4only.*.id)}\"}\"\r\n}\r\n\r\n## Security Group\r\n\r\nresource \"aws_security_group\" \"sg-ipv6\" {\r\n  count       = \"${var.use_ipv6 == 1 ? 1 : 0}\"\r\n  name        = \"kali-ipv6\"\r\n  description = \"Allow all IPv4 and IPv6 for kali\"\r\n  vpc_id      = \"${data.aws_vpc.vpc.id}\"\r\n\r\n  ingress {\r\n    from_port   = 0\r\n    to_port     = 0\r\n    protocol    = \"-1\"\r\n    cidr_blocks = [\"0.0.0.0/0\"]\r\n  }\r\n\r\n  ingress {\r\n    from_port        = 0\r\n    to_port          = 0\r\n    protocol         = \"-1\"\r\n    ipv6_cidr_blocks = [\"::/0\"]\r\n  }\r\n\r\n  egress {\r\n    from_port   = 0\r\n    to_port     = 0\r\n    protocol    = \"-1\"\r\n    cidr_blocks = [\"0.0.0.0/0\"]\r\n  }\r\n\r\n  egress {\r\n    from_port        = 0\r\n    to_port          = 0\r\n    protocol         = \"-1\"\r\n    ipv6_cidr_blocks = [\"::/0\"]\r\n  }\r\n\r\n  tags = {\r\n    Project   = \"kali\"\r\n    ManagedBy = \"terraform\"\r\n  }\r\n}\r\n\r\nresource \"aws_security_group\" \"sg-ipv4-only\" {\r\n  count       = \"${var.use_ipv4only == 1 ? 1 : 0}\"\r\n  name        = \"kali-ipv4only\"\r\n  description = \"Allow all IPv4 for kali\"\r\n  vpc_id      = \"${data.aws_vpc.vpc.id}\"\r\n\r\n  ingress {\r\n    from_port   = 0\r\n    to_port     = 0\r\n    protocol    = \"-1\"\r\n    cidr_blocks = [\"0.0.0.0/0\"]\r\n  }\r\n\r\n  egress {\r\n    from_port   = 0\r\n    to_port     = 0\r\n    protocol    = \"-1\"\r\n    cidr_blocks = [\"0.0.0.0/0\"]\r\n  }\r\n\r\n  tags = {\r\n    Project   = \"kali\"\r\n    ManagedBy = \"terraform\"\r\n  }\r\n}\r\n\r\n# data \"aws_security_group\" \"sg\" {\r\n#   id = \"${var.create_vpc * var.use_ipv6 == 0 ? aws_security_group.sg-ipv6.id : aws_security_group.sg-ipv4-only.id}\"\r\n# }\r\n\r\n## SSH Key pair\r\n\r\nresource \"aws_key_pair\" \"ssh_key_pair\" {\r\n  count      = \"${var.ssh_key_pair_name == \"\" ? 1 : 0}\"\r\n  key_name   = \"kali-ssh-key\"\r\n  public_key = \"${file(\"${var.public_key_path}\")}\"\r\n}\r\n\r\nlocals {\r\n  key_pair_name = \"${var.ssh_key_pair_name == \"\" ? aws_key_pair.ssh_key_pair.0.key_name : var.ssh_key_pair_name}\"\r\n}\r\n\r\n## EC2 instance\r\n\r\n## TODO: check why the AMI doesnt use this userdata:\r\nlocals {\r\n  kali-userdata = <<USERDATA\r\n#!/bin/bash\r\napt-get update\r\napt-get dist-upgrade -y\r\nUSERDATA\r\n}\r\n\r\nresource \"aws_instance\" \"kali_machine\" {\r\n  ami                         = \"${var.packer_ami}\"\r\n  instance_type               = \"${var.ec2_instance_type}\"\r\n  monitoring                  = false\r\n  vpc_security_group_ids      = [\"${var.use_ipv6 == 1 ? \"${join(\"\", aws_security_group.sg-ipv6.*.id)}\" : \"${join(\"\", aws_security_group.sg-ipv4-only.*.id)}\"}\"]\r\n  associate_public_ip_address = true\r\n  subnet_id                   = \"${data.aws_subnet.subnet.id}\"\r\n  key_name                    = \"${local.key_pair_name}\"\r\n  source_dest_check           = false\r\n  user_data_base64            = \"${base64encode(local.kali-userdata)}\"\r\n\r\n  tags = {\r\n    Project   = \"kali\"\r\n    ManagedBy = \"terraform\"\r\n  }\r\n}\r\nvariable \"aws_region\" {\r\n  description = \"AWS region\"\r\n  default     = \"eu-central-1\"\r\n}\r\n\r\nvariable \"aws_profile\" {\r\n  description = \"AWS cli profile\"\r\n  default     = \"default\"\r\n}\r\n\r\nvariable \"vpc_cidr\" {\r\n  description = \"VPC CIDR block for newly created AWS VPC (e.g. `10.23.0.0/16` or `172.31.0.0/16`) - The Subnet CIDR below must match this VPC CIDR\"\r\n  default     = \"10.23.0.0/16\"\r\n}\r\n\r\nvariable \"subnet_cidr_block\" {\r\n  description = \"The CIDR block to use for the newly created subnet (e.g. `10.23.0.0/24` or `172.31.0.0/20`) - Must be in range of VPC CIDR\"\r\n  default     = \"10.23.1.0/24\"\r\n}\r\n\r\nvariable \"ssh_key_pair_name\" {\r\n  description = \"AWS Key pair name of existing SSH Key pair on AWS (e.g. `my-key`)\"\r\n  default     = \"\"\r\n}\r\n\r\nvariable \"public_key_path\" {\r\n  description = \"Path to your SSH public key (e.g. `~/.ssh/id_rsa.pub`)\"\r\n  default     = \"~/.ssh/id_rsa.pub\"\r\n}\r\n\r\nvariable \"vpc_id\" {\r\n  description = \"Use an existing VPC (please set create_vpc to false when using this)\"\r\n  default     = \"\"\r\n}\r\n\r\nvariable \"subnet_id\" {\r\n  description = \"Use an existting Subnet in an existing VPC (please set create_vpc to false when using this)\"\r\n  default     = \"\"\r\n}\r\n\r\nvariable \"create_vpc\" {\r\n  description = \"Create new VPC (e.g. `1` => true or `0` => false) - Please set to false when setting an existing vpc_id above\"\r\n  default     = 1\r\n}\r\n\r\nvariable \"use_ipv6\" {\r\n  description = \"Use IPv4 AND IPv6 (e.g. `1` => true or `0` => false) - NOTE: no doublequotes around the true or false\"\r\n  default     = 1\r\n}\r\n\r\nvariable \"use_ipv4only\" {\r\n  description = \"Use IPv4 only (e.g. `1` => true or `0` => false) - Please set use_ipv6 to false when enabling this\"\r\n  default     = 0\r\n}\r\n\r\nvariable \"ec2_instance_type\" {\r\n  description = \"EC2 instance type (e.g. `t2.medium` or `t2.small`)\"\r\n  default     = \"t2.medium\"\r\n}\r\n\r\nvariable \"packer_ami\" {\r\n  description = \"Packer AMI ID to use for EC2 instance (NOTE: run `packer buidl packer.json` and use the generated AMI ID here)\"\r\n  default = \"ami-10e00b6d\"\r\n}\r\n"}]}
{"messages": [{"role": "user", "content": "Create a Google Cloud Storage bucket named with your project ID for hosting a static website. Upload the file `index.html` from your local directory to this bucket. Set the access control for `index.html` to allow public reading by all users. Reserve a static external IP address for the website and add it to your designated DNS zone as an A record. Configure a Google Cloud Load Balancer that routes requests to your backend bucket."}, {"role": "assistant", "content": "\n#File: main.tf\n\n# --- BUCKET\n\n# Create a bucket\n# see https://registry.terraform.io/providers/hashicorp/google/latest/docs/resources/storage_bucket\nresource \"google_storage_bucket\" \"website\" {\n  provider = google\n  name = \"${var.gcp_project}-static-website\"  # has to be globally unique\n  location = \"EU\"\n}\n\n# Upload index.html to the bucket\nresource \"google_storage_bucket_object\" \"static_site_index\" {\n  name = \"index.html\"  # name in the bucket\n  source = \"../website/index.html\"  # local path\n  bucket = google_storage_bucket.website.name\n}\n\n# Make the bucket's index.html publicly accessible\nresource \"google_storage_object_access_control\" \"public_index_rule\" {\n  object = google_storage_bucket_object.static_site_index.name\n  bucket = google_storage_bucket.website.name\n  role = \"READER\"\n  entity = \"allUsers\"\n}\n\n# --- CDN\n\n# Set the bucket as a CDN backend\nresource \"google_compute_backend_bucket\" \"website_backend\" {\n  name = \"website-bucket\"\n  bucket_name = google_storage_bucket.website.name\n  description = \"Contains files for the website\"\n  enable_cdn = true\n}\n\n# --- DNS\n\n# Reserve a static external IP address\nresource \"google_compute_global_address\" \"website_ip\" {\n  name = \"website-loadbalancer-ip\"\n}\n\n# Retrieve our DNS zone data\ndata \"google_dns_managed_zone\" \"dns_zone\" {\n  name = var.gcp_dns_zone\n}\n\n# Add the reserved external IP address to our DNS zone\nresource \"google_dns_record_set\" \"website\" {\n  managed_zone = data.google_dns_managed_zone.dns_zone.name\n  type = \"A\"\n  ttl = 300\n  name = \"website.${data.google_dns_managed_zone.dns_zone.dns_name}\" # domain name\n  rrdatas = [google_compute_global_address.website_ip.address]\n}\n\n# --- LOAD BALANCER\n\n# Create ingress rule\nresource \"google_compute_url_map\" \"website\" {\n  name = \"website-bucket-redirect\"\n  default_service = google_compute_backend_bucket.website_backend.self_link\n\n  host_rule  {\n    hosts = [\"*\"]\n    path_matcher = \"allpaths\"\n  }\n  path_matcher {\n    name = \"allpaths\"\n    default_service = google_compute_backend_bucket.website_backend.self_link\n  }\n}\n\n# Create Load Balancer\nresource \"google_compute_target_http_proxy\" \"website\" {\n  name = \"website-load-balancer\"\n  url_map = google_compute_url_map.website.self_link\n}\n\n# Link IP address to Load Balancer\nresource \"google_compute_global_forwarding_rule\" \"default\" {\n  name = \"website-forwarding-rule\"\n  load_balancing_scheme = \"EXTERNAL\"\n  ip_address = google_compute_global_address.website_ip.address\n  ip_protocol = \"TCP\"\n  port_range = \"80\"\n  target = google_compute_target_http_proxy.website.self_link\n}\n\n#File: provider.tf\n# GCP provider\n\nprovider \"google\" {\n    credentials = file(var.gcp_svc_key)\n    project = var.gcp_project\n    region = var.gcp_region\n}\n#File: variables.tf\n# Declare variables that are used in the .tf files\nvariable \"gcp_svc_key\" {\n  type = string\n  description = \"local path to your service account's JSON key\"\n}\nvariable \"gcp_project\" {\n  type = string\n  description = \"project ID\"\n}\nvariable \"gcp_region\" {\n  default = \"europe-west\"\n  type = string\n  description = \"region\"\n}\nvariable \"gcp_dns_zone\" {\n  type = string\n  description = \"name of your zone in Cloud DNS\"\n}\n"}]}
{"messages": [{"role":"user","content":"Set up AWS security groups and VPC endpoints for an application architecture where an Application Load Balancer (ALB) allows HTTP and HTTPS inbound traffic from anywhere, and the app security group only permits inbound traffic from the ALB. Configure also VPC endpoints for services like ECR, S3, and Secrets Manager, enabling secure, private communication between ECS tasks and AWS services within the VPC. The security groups include rules allowing bidirectional traffic between the app and VPC endpoints, ensuring controlled and secure network flows. To launch a django application."},{"role":"assistant","content":"provider \"aws\" {\r\n  region = var.region\r\n}\r\n\r\n\r\nvariable \"vpc_id\" {\r\n  type = string\r\n}\r\n\r\nvariable \"private_subnet_ids\" {\r\n  type = list(string)\r\n}\r\n\r\nvariable \"region\" {\r\n  type    = string\r\n  default = \"us-east-1\"\r\n}\r\n\r\nvariable \"route_table_ids\" {\r\n  type        = list(string)\r\n  description = \"Route table ids\"\r\n}\r\n\r\nresource \"aws_security_group\" \"alb\" {\r\n  name        = \"${terraform.workspace}-alb-sg\"\r\n  description = \"Controls access to the ALB\"\r\n  vpc_id      = var.vpc_id\r\n  tags = {\r\n    Name = \"${terraform.workspace}-alb-sg\"\r\n  }\r\n}\r\n\r\nresource \"aws_vpc_security_group_ingress_rule\" \"http\" {\r\n  cidr_ipv4   = \"0.0.0.0/0\"\r\n  ip_protocol = \"tcp\"\r\n  from_port = 80\r\n  security_group_id = aws_security_group.alb.id\r\n  to_port   = 80\r\n  tags = {\r\n    Name = \"${terraform.workspace}-alb-ingress-http-sgr\"\r\n  }\r\n}\r\n\r\nresource \"aws_vpc_security_group_ingress_rule\" \"https\" {\r\n  cidr_ipv4   = \"0.0.0.0/0\"\r\n  ip_protocol = \"tcp\"\r\n  from_port = 443\r\n  security_group_id = aws_security_group.alb.id\r\n  to_port   = 443\r\n  tags = {\r\n    Name = \"${terraform.workspace}-alb-ingress-https-sgr\"\r\n  }\r\n}\r\n\r\nresource \"aws_security_group\" \"app\" {\r\n  name        = \"${terraform.workspace}-app-sg\"\r\n  description = \"Allows inbound access from the ALB only\"\r\n  vpc_id      = var.vpc_id\r\n  tags = {\r\n    Name = \"${terraform.workspace}-ecs-sg\"\r\n  }\r\n}\r\n\r\nresource \"aws_vpc_security_group_egress_rule\" \"alb\" {\r\n  security_group_id = aws_security_group.alb.id\r\n  referenced_security_group_id = aws_security_group.app.id\r\n  ip_protocol                  = \"tcp\"\r\n  from_port = 0\r\n  to_port   = 65535\r\n  tags = {\r\n    Name = \"${terraform.workspace}-alb-to-app-sgr\"\r\n  }\r\n}\r\n\r\n# Allow all traffic from ALB security group\r\nresource \"aws_vpc_security_group_ingress_rule\" \"alb_ingress\" {\r\n  from_port = 0\r\n  to_port   = 65535\r\n  ip_protocol                  = \"tcp\"\r\n  referenced_security_group_id = aws_security_group.alb.id\r\n  security_group_id            = aws_security_group.app.id\r\n  tags = {\r\n    Name = \"${terraform.workspace}-alb-ingress-sg\"\r\n  }\r\n}\r\n\r\n# Allow all outbound traffic\r\nresource \"aws_vpc_security_group_egress_rule\" \"app_egress\" {\r\n  ip_protocol       = \"-1\"\r\n  cidr_ipv4         = \"0.0.0.0/0\"\r\n  security_group_id = aws_security_group.app.id\r\n  tags = {\r\n    Name = \"${terraform.workspace}-app-egress-sg\"\r\n  }\r\n}\r\n\r\n# VPC endpoints\r\nresource \"aws_security_group\" \"vpc_endpoints\" {\r\n  name        = \"${terraform.workspace}-vpc-endpoints-sg\"\r\n  description = \"Allows ECS tasks to communicate with VPC endpoints\"\r\n  vpc_id      = var.vpc_id\r\n  tags = {\r\n    Name = \"${terraform.workspace}-vpc-endpoints-sg\"\r\n  }\r\n}\r\n\r\nresource \"aws_vpc_endpoint\" \"ecr_api\" {\r\n  vpc_id              = var.vpc_id\r\n  service_name        = \"com.amazonaws.${var.region}.ecr.api\"\r\n  vpc_endpoint_type   = \"Interface\"\r\n  subnet_ids          = var.private_subnet_ids\r\n  security_group_ids  = [aws_security_group.vpc_endpoints.id]\r\n  private_dns_enabled = true\r\n  tags = {\r\n    Name = \"${terraform.workspace}-ecr-api\"\r\n  }\r\n}\r\n\r\nresource \"aws_vpc_endpoint\" \"ecr_dkr\" {\r\n  vpc_id              = var.vpc_id\r\n  service_name        = \"com.amazonaws.${var.region}.ecr.dkr\"\r\n  vpc_endpoint_type   = \"Interface\"\r\n  subnet_ids          = var.private_subnet_ids\r\n  security_group_ids  = [aws_security_group.vpc_endpoints.id]\r\n  private_dns_enabled = true\r\n  tags = {\r\n    Name = \"${terraform.workspace}-ecr-dkr\"\r\n  }\r\n}\r\n\r\nresource \"aws_vpc_endpoint\" \"s3\" {\r\n  vpc_id            = var.vpc_id\r\n  service_name      = \"com.amazonaws.${var.region}.s3\"\r\n  vpc_endpoint_type = \"Gateway\"\r\n  route_table_ids   = var.route_table_ids\r\n  tags = {\r\n    Name = \"${terraform.workspace}-s3\"\r\n  }\r\n}\r\n\r\nresource \"aws_vpc_endpoint\" \"secretsmanager\" {\r\n  vpc_id              = var.vpc_id\r\n  service_name        = \"com.amazonaws.${var.region}.secretsmanager\"\r\n  vpc_endpoint_type   = \"Interface\"\r\n  subnet_ids          = var.private_subnet_ids\r\n  security_group_ids  = [aws_security_group.vpc_endpoints.id]\r\n  private_dns_enabled = true\r\n}\r\n\r\n# app -> vpc_endpoints egress\r\nresource \"aws_vpc_security_group_egress_rule\" \"app_to_vpc_endpoints\" {\r\n  from_port                    = 443\r\n  to_port                      = 443\r\n  ip_protocol                  = \"tcp\"\r\n  referenced_security_group_id = aws_security_group.vpc_endpoints.id\r\n  security_group_id            = aws_security_group.app.id\r\n  tags = {\r\n    Name = \"${terraform.workspace}-app-to-vpce-egress-sg\"\r\n  }\r\n}\r\n\r\n# vpc_endpoints <- app ingress\r\nresource \"aws_vpc_security_group_ingress_rule\" \"vpc_endpoints_from_app\" {\r\n  from_port                    = 443\r\n  to_port                      = 443\r\n  ip_protocol                  = \"tcp\"\r\n  referenced_security_group_id = aws_security_group.app.id\r\n  security_group_id            = aws_security_group.vpc_endpoints.id\r\n  tags = {\r\n    Name = \"${terraform.workspace}-vpce-from-app-sg\"\r\n  }\r\n}"}]}
{"messages": [{"role": "user", "content": "Create a dedicated organizational unit using the variable `cspm-org-unit`. Onboard a Kubernetes cluster with the name specified in `gcp-cluster-name`, associating it with the newly created organizational unit. Set up a notification policy to send emails for scheduled reports to the address in `cspm-admin-mail`. Configure a compliance policy using the best practices for Kubernetes v1.14, linking it with the notification policy. Deploy a GKE cluster, create a Kubernetes namespace, and launch a deployment with the image designated by `app-image`."}, {"role": "assistant", "content": "\n#File: cspm-main.tf\n# Create a dedicated Org-unit under the root one\nresource \"dome9_organizational_unit\" \"my-org-unit\" {\n  name      = var.cspm-org-unit\n  depends_on = [google_container_node_pool.gke-node-pool]\n}\n\n# Onboard the K8s Cluster\nresource \"dome9_cloudaccount_kubernetes\" \"cspm-cluster\" {\n  name  = var.gcp-cluster-name\n  organizational_unit_id = dome9_organizational_unit.my-org-unit.id\n\n  image_assurance {\n    enabled = true\n  }\n  admission_control {\n    enabled = true\n  }\n}\n\n# Create a new Notification Policy\nresource \"dome9_continuous_compliance_notification\" \"cspm-cluster-notification\" {\n  name           = \"mail-${var.gcp-cluster-name}\"\n  description    = \"Send mail to ${var.cspm-admin-mail} - Built and maintained with Terraform\"\n  alerts_console = true\n\n  change_detection {\n    email_sending_state = \"Disabled\"\n  }\n  scheduled_report {\n    email_sending_state = \"Enabled\"\n\n    schedule_data {\n      cron_expression = \"0 0 12 * * ?\"\n      type = \"Summary\"\n      recipients = [\"${var.cspm-admin-mail}\"]\n    } \n  }\n}\n\n# Create a new Continuous Policy with K8s v1.14 Best Practices\nresource \"dome9_continuous_compliance_policy\" \"cspm-cluster-policy\" {\n  target_id    = dome9_cloudaccount_kubernetes.cspm-cluster.id\n  ruleset_id   = -72\n  target_type  = \"Kubernetes\"\n  notification_ids = [\"${dome9_continuous_compliance_notification.cspm-cluster-notification.id}\"]\n}\n#File: cspm-variables.tf\nvariable \"cspm-key-id\" {\n    description = \"Insert your API Key ID\"\n    sensitive = true\n    type = string\n    default = \"xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n}\nvariable \"cspm-key-secret\" {\n    description = \"Insert your API Key Secret\"\n    sensitive = true\n    type = string\n    default = \"xxxxxxxxxxxxxxxxxxxx\"\n}\nvariable \"cspm-org-unit\" {\n    description = \"Insert the name of your Organizational Unit\"\n    type = string\n}\nvariable \"cspm-admin-mail\" {\n    description = \"Give me your mail address\"\n    sensitive = true\n    type = string\n}\nvariable \"cspm-residency\" {\n    description = \"Where is your CSPM platform instanced?\"\n    type = string\n    default = \"usea1\"\n}\n#File: gcp-main.tf\nresource \"google_compute_network\" \"gke-vpc\" {\n  name                    = \"vpc-${var.gcp-cluster-name}\"\n  auto_create_subnetworks = \"false\"\n}\n\n# Subnet\nresource \"google_compute_subnetwork\" \"gke-subnet\" {\n  name          = \"net-kubernetes\"\n  region        = var.gcp-region\n  network       = google_compute_network.gke-vpc.name\n  ip_cidr_range = \"10.10.0.0/24\"\n}\n\nresource \"google_container_cluster\" \"gke-cluster\" {\n  name                     = var.gcp-cluster-name\n  location                 = var.gcp-region\n  remove_default_node_pool = true\n  initial_node_count       = 1\n  \n  network    = google_compute_network.gke-vpc.name\n  subnetwork = google_compute_subnetwork.gke-subnet.name\n} \n\nresource \"google_container_node_pool\" \"gke-node-pool\" {\n  name       = \"node-pool\"\n  location   = google_container_cluster.gke-cluster.location\n  cluster    = google_container_cluster.gke-cluster.name\n  \n  node_count = 1\n  node_config {\n    preemptible  = true\n    machine_type = \"n1-standard-2\"\n\n    metadata = {\n      disable-legacy-endpoints = \"true\"\n    }\n    labels = {\n      env = var.gcp-project\n    }\n    tags         = [\"gke-node\", \"${var.gcp-project}-gke\"]\n    oauth_scopes = [\n      \"https://www.googleapis.com/auth/logging.write\",\n      \"https://www.googleapis.com/auth/monitoring\",\n    ]\n  }\n}\n\ndata \"google_client_config\" \"client-config\" {\n}\n\n#File: gcp-variables.tf\nvariable \"gcp-region\" {\n    description = \"Where do you want to create it?\"\n    type = string\n    default = \"europe-west2\"\n}\nvariable \"gcp-project\" {\n    description = \"Where do you want to create it?\"\n    type = string\n}\nvariable \"gcp-cluster-name\" {\n    description = \"Choose the name of the cluster\"\n    type = string\n    default = \"gke-terraform\"\n}\nvariable \"gcp-key-name\" {\n    description = \"Choose the name of the cluster\"\n    type = string\n}\n#File: helm-main.tf\nresource \"helm_release\" \"asset-mgmt\" {\n  name       = \"asset-mgmt\"\n  repository = \"https://raw.githubusercontent.com/CheckPointSW/charts/master/repository/\"\n  chart      = \"cloudguard\"\n  namespace  = \"checkpoint-cspm\"\n  create_namespace = true\n\n  set {\n    name  = \"clusterID\"\n    value = \"${dome9_cloudaccount_kubernetes.cspm-cluster.id}\"\n  }\n  set {\n    name  = \"credentials.user\"\n    value = \"${var.cspm-key-id}\"\n  }\n  set {\n    name  = \"credentials.secret\"\n    value = \"${var.cspm-key-secret}\"\n  }\n  set {\n    name  = \"datacenter\"\n    value = \"${var.cspm-residency}\"\n  }\n  set {\n    name = \"addons.imageScan.enabled\"\n    value= \"true\"\n  }\n  set {\n    name = \"addons.admissionControl.enabled\"\n    value= \"true\"\n  }\n  depends_on = [dome9_cloudaccount_kubernetes.cspm-cluster]\n}\n\n#File: k8s-main.tf\nresource \"kubernetes_namespace\" \"app-namespace\" {\n  metadata {\n    name = \"${var.app-name}-ns\"\n  }\n  depends_on = [google_container_node_pool.gke-node-pool]\n}\n\nresource \"kubernetes_deployment\" \"app-deployment\" {\n  metadata {\n    name      = var.app-name\n    namespace = kubernetes_namespace.app-namespace.id\n    labels = {\n      app = var.app-name\n    }\n  }\n  spec {\n    replicas = 3\n    selector {\n      match_labels = {\n        app = var.app-name\n      }\n    }\n    template {\n      metadata {\n        labels = {\n          app = var.app-name\n        }\n      }\n      spec {\n        container {\n          image = var.app-image\n          name  = var.app-name\n        }\n      }\n    }\n  }\n}\n\nresource \"kubernetes_service\" \"app-svc\" {\n  metadata {\n    name      = var.app-name\n    namespace = kubernetes_namespace.app-namespace.id\n  }\n  spec {\n    selector = {\n      app = kubernetes_deployment.app-deployment.metadata[0].labels.app\n    }\n    port {\n      port        = 3000\n      target_port = 3000\n    }\n    type = \"LoadBalancer\"\n  }\n}\n#File: k8s-variables.tf\nvariable \"app-name\" {\n    type = string\n    default = \"juiceshop\"\n}\nvariable \"app-image\" {\n    type = string\n    default = \"bkimminich/juice-shop\"\n}\n#File: providers.tf\nterraform {\n  required_version = \">= 0.15\"\n  required_providers {\n    google = {\n      source = \"hashicorp/google\"\n      version = \">= 3.74.0\"\n    }\n    dome9 = {\n      source = \"dome9/dome9\"\n      version = \">= 1.21.1\"\n    }\n    kubernetes = {\n      source = \"hashicorp/kubernetes\"\n      version = \">= 2.3.2\"\n    }\n    helm = {\n      source = \"hashicorp/helm\"\n      version = \">= 2.2.0\"\n    }\n  }\n}\n\nprovider \"google\" {\n  region        = var.gcp-region\n  project       = var.gcp-project\n  credentials   = file(\"${var.gcp-key-name}\")\n}\n\nprovider \"kubernetes\" {\n  host  = \"https://${google_container_cluster.gke-cluster.endpoint}\"\n  token = data.google_client_config.client-config.access_token\n  cluster_ca_certificate = base64decode(\n    google_container_cluster.gke-cluster.master_auth[0].cluster_ca_certificate,\n  )\n}\n\nprovider \"dome9\" {\n  dome9_access_id   = var.cspm-key-id\n  dome9_secret_key  = var.cspm-key-secret\n}\n\nprovider \"helm\" {\n  kubernetes {\n    host  = \"https://${google_container_cluster.gke-cluster.endpoint}\"\n    token = data.google_client_config.client-config.access_token\n    cluster_ca_certificate = base64decode(\n      google_container_cluster.gke-cluster.master_auth[0].cluster_ca_certificate,\n    )\n  }\n}\n"}]}
{"messages": [{"role": "user", "content": "Create a GCP project service for each required API specified in the `locals` block. Enable the Google Secret Manager API. Create a Google Secret Manager Secret with the name defined by the `secret_name` variable. Include labels for the environment and project. Output the project name, environment, secret name, and secret ID."}, {"role": "assistant", "content": "\n#File: locals.tf\nlocals {\n  # secret_id = \"${var.app_name}-${var.environment}-${var.secret_name}\"\n\n  required_apis = [\n    \"secretmanager.googleapis.com\",\n  ]\n}\n\n#File: main.tf\n/**\n * # GCP Secrets Manager Secret\n *\n * version: 1.0.0\n *\n * This module creates an Secrets Manager Secret. Secret versions are not created.\n *\n * Example usage:\n * ```hcl\n * module \"mod_secrets\" {\n *  source   = \"../modules/secret/v1.0.0\"\n *  for_each = var.secrets\n *\n *  project     = var.project\n *  region      = var.region\n *  app_name    = var.app_name\n *  environment = var.environment\n *  secret_name = each.value\n * }\n * ```\n *\n *\n * *Note: This README is generated with **terraform-docs**, do not edit directly!*\n *\n * Instead, edit in the beginning of `main.tf` in the module root directory and run:\n * `terraform-docs markdown table . >README.md`\n */\n\ndata \"google_project\" \"this\" {\n  project_id = var.project\n}\n\n# Enable required APIs\nresource \"google_project_service\" \"this\" {\n  for_each = toset(local.required_apis)\n  project  = var.project\n  service  = each.value\n\n  disable_on_destroy = false\n}\n\nresource \"google_secret_manager_secret\" \"this\" {\n  project   = var.project\n  secret_id = var.secret_name # local.secret_id\n  replication {\n    user_managed {\n      replicas {\n        location = var.region\n      }\n    }\n  }\n\n  labels = {\n    environment = var.environment\n    project     = var.project\n  }\n}\n\n#File: outputs.tf\noutput \"project_name\" {\n  description = \"Project name\"\n  value       = var.project\n}\n\noutput \"environment\" {\n  description = \"Environment\"\n  value       = var.environment\n}\n\noutput \"secret_name\" {\n  description = \"Secret name\"\n  value       = google_secret_manager_secret.this.secret_id\n}\n\noutput \"secret_id\" {\n  description = \"Secret resource ID\"\n  value       = \"projects/${data.google_project.this.number}/secrets/${google_secret_manager_secret.this.secret_id}\"\n}\n\n#File: providers.tf\nterraform {\n  required_providers {\n    google = {\n      source  = \"hashicorp/google\"\n      version = \"~> 6.27\"\n    }\n  }\n}\n\n#File: variables.tf\nvariable \"project\" {\n  description = \"The GCP project name\"\n  type        = string\n}\n\nvariable \"region\" {\n  description = \"The GCP region where resources will be created\"\n  type        = string\n  default     = \"europe-north1\" # Finland\n}\n\nvariable \"app_name\" {\n  description = \"App Name. Resource names are derived from this and environment.\"\n  type        = string\n}\n\nvariable \"environment\" {\n  description = \"The environment where the Cloud Run service will be deployed\"\n  type        = string\n}\n\nvariable \"secret_name\" {\n  description = \"Name for secret. This DOES NOT create secret versions.\"\n  type        = string\n}\n"}]}
{"messages": [{"role":"user","content":"Define variables and resources to configure AWS Security Group rules specifically for allowing ingress traffic to Sync Gateway's main REST interface and its admin interface on customizable ports. It should support specifying allowed CIDR blocks and security groups for both interfaces, with safeguards like limiting admin access to secure sources. Additionally, create self-referential ingress rules allowing communication within the security group on the main interface port."},{"role":"assistant","content":"# ---------------------------------------------------------------------------------------------------------------------\r\n# REQUIRED PARAMETERS\r\n# You must provide a value for each of these parameters.\r\n# ---------------------------------------------------------------------------------------------------------------------\r\n\r\nvariable \"security_group_id\" {\r\n  description = \"The ID of the Security Group to which all the rules should be attached.\"\r\n  type        = string\r\n}\r\n\r\n# ---------------------------------------------------------------------------------------------------------------------\r\n# OPTIONAL PARAMETERS\r\n# These parameters have reasonable defaults.\r\n# ---------------------------------------------------------------------------------------------------------------------\r\n\r\nvariable \"interface_port\" {\r\n  description = \"The port to use for the main Sync Gateway REST interface.\"\r\n  type        = number\r\n  default     = 4984\r\n}\r\n\r\nvariable \"interface_port_cidr_blocks\" {\r\n  description = \"The list of IP address ranges in CIDR notation from which to allow connections to the interface_port.\"\r\n  type        = list(string)\r\n  default     = []\r\n}\r\n\r\nvariable \"interface_port_security_groups\" {\r\n  description = \"The list of Security Group IDs from which to allow connections to the interface_port. If you update this variable, make sure to update var.num_interface_port_security_groups too!\"\r\n  type        = list(string)\r\n  default     = []\r\n}\r\n\r\nvariable \"num_interface_port_security_groups\" {\r\n  description = \"The number of security group IDs in var.interface_port_security_groups. We should be able to compute this automatically, but due to a Terraform limitation, if there are any dynamic resources in var.allow_inbound_from_cidr_blocks, then we won't be able to: https://github.com/hashicorp/terraform/pull/11482\"\r\n  type        = number\r\n  default     = 0\r\n}\r\n\r\nvariable \"admin_interface_port\" {\r\n  description = \"The port to use for the Sync Gateway Admin interface.\"\r\n  type        = number\r\n  default     = 4985\r\n}\r\n\r\nvariable \"admin_interface_port_cidr_blocks\" {\r\n  description = \"The list of IP address ranges in CIDR notation from which to allow connections to the admin_interface_port. The admin interface exposes ALL Couchbase data, so you probably want to leave this list empty and only allow access from localhost!\"\r\n  type        = list(string)\r\n  default     = []\r\n}\r\n\r\nvariable \"admin_interface_port_security_groups\" {\r\n  description = \"The list of Security Group IDs from which to allow connections to the admin_interface_port. The admin interface exposes ALL Couchbase data, so you probably want to leave this list empty and only allow access from localhost! If you update this variable, make sure to update var.num_admin_interface_port_security_groups too!\"\r\n  type        = list(string)\r\n  default     = []\r\n}\r\n\r\nvariable \"num_admin_interface_port_security_groups\" {\r\n  description = \"The number of security group IDs in var.admin_interface_port_security_groups. We should be able to compute this automatically, but due to a Terraform limitation, if there are any dynamic resources in var.allow_inbound_from_cidr_blocks, then we won't be able to: https://github.com/hashicorp/terraform/pull/11482\"\r\n  type        = number\r\n  default     = 0\r\n}\r\n\r\n\r\n\r\n\r\nresource \"aws_security_group_rule\" \"interface_port_cidr_blocks\" {\r\n  count             = signum(length(var.interface_port_cidr_blocks))\r\n  type              = \"ingress\"\r\n  from_port         = var.interface_port\r\n  to_port           = var.interface_port\r\n  protocol          = \"tcp\"\r\n  security_group_id = var.security_group_id\r\n  cidr_blocks       = var.interface_port_cidr_blocks\r\n}\r\n\r\nresource \"aws_security_group_rule\" \"interface_port_security_groups\" {\r\n  count                    = var.num_interface_port_security_groups\r\n  type                     = \"ingress\"\r\n  from_port                = var.interface_port\r\n  to_port                  = var.interface_port\r\n  protocol                 = \"tcp\"\r\n  security_group_id        = var.security_group_id\r\n  source_security_group_id = element(var.interface_port_security_groups, count.index)\r\n}\r\n\r\nresource \"aws_security_group_rule\" \"interface_port_self\" {\r\n  type              = \"ingress\"\r\n  from_port         = var.interface_port\r\n  to_port           = var.interface_port\r\n  protocol          = \"tcp\"\r\n  security_group_id = var.security_group_id\r\n  self              = true\r\n}\r\n# ---------------------------------------------------------------------------------------------------------------------\r\n# ADMIN INTERFACE\r\n# Admin interface for Sync Gateway\r\n# ---------------------------------------------------------------------------------------------------------------------\r\n\r\nresource \"aws_security_group_rule\" \"admin_interface_port_cidr_blocks\" {\r\n  count             = signum(length(var.admin_interface_port_cidr_blocks))\r\n  type              = \"ingress\"\r\n  from_port         = var.admin_interface_port\r\n  to_port           = var.admin_interface_port\r\n  protocol          = \"tcp\"\r\n  security_group_id = var.security_group_id\r\n  cidr_blocks       = var.admin_interface_port_cidr_blocks\r\n}\r\n\r\nresource \"aws_security_group_rule\" \"admin_interface_port_security_groups\" {\r\n  count                    = var.num_admin_interface_port_security_groups\r\n  type                     = \"ingress\"\r\n  from_port                = var.admin_interface_port\r\n  to_port                  = var.admin_interface_port\r\n  protocol                 = \"tcp\"\r\n  security_group_id        = var.security_group_id\r\n  source_security_group_id = element(var.admin_interface_port_security_groups, count.index)\r\n}\r\n\r\n"}]}
{"messages": [{"role": "user", "content": "Create an Azure Resource Group with a specified name and location using Terraform. Establish a Virtual Network with defined address space within that Resource Group. Configure two subnets and associate a Network Security Group to manage inbound and outbound traffic. Set up a Cosmos DB account with specific capabilities and create a Mongo database and collection. Finally, deploy an Azure Linux Web App linked to a service plan, ensuring it utilizes Docker for application hosting."}, {"role": "assistant", "content": "\n#File: main.tf\nterraform {\n  required_providers {\n    azurerm = {\n      source  = \"hashicorp/azurerm\"\n      version = \"=3.2.0\"\n    }\n  }\n}\n\nprovider \"azurerm\" {\n  features {}\n}\n\nlocals {\n  tags = {\n    \"app\" = \"secureapp\"\n  }\n}\n\n# Group\n\nresource \"azurerm_resource_group\" \"default\" {\n  name     = var.resource_group_name\n  location = var.resource_group_location\n\n  tags = local.tags\n\n}\n\n# Networking\n\nresource \"azurerm_virtual_network\" \"default\" {\n  name                = \"vnet\"\n  location            = azurerm_resource_group.default.location\n  resource_group_name = azurerm_resource_group.default.name\n  address_space       = [\"10.0.0.0/16\"]\n\n  tags = local.tags\n\n}\n\nresource \"azurerm_subnet\" \"default\" {\n  name                 = \"Subnet-001\"\n  resource_group_name  = azurerm_resource_group.default.name\n  virtual_network_name = azurerm_virtual_network.default.name\n  address_prefixes     = [\"10.0.10.0/24\"]\n\n  enforce_private_link_endpoint_network_policies = true\n\n  service_endpoints = [\n    \"Microsoft.AzureCosmosDB\",\n    \"Microsoft.Web\"\n  ]\n\n}\n\nresource \"azurerm_subnet\" \"apps\" {\n  name                 = \"Subnet-002\"\n  resource_group_name  = azurerm_resource_group.default.name\n  virtual_network_name = azurerm_virtual_network.default.name\n  address_prefixes     = [\"10.0.20.0/24\"]\n\n  enforce_private_link_endpoint_network_policies = true\n\n  service_endpoints = [\n    \"Microsoft.AzureCosmosDB\",\n    \"Microsoft.Web\"\n  ]\n\n  delegation {\n    name = \"app-delegation\"\n\n    service_delegation {\n      name    = \"Microsoft.Web/serverFarms\"\n      actions = [\"Microsoft.Network/virtualNetworks/subnets/action\"]\n    }\n  }\n\n}\n\nresource \"azurerm_network_security_group\" \"default\" {\n  name                = \"ngs\"\n  location            = azurerm_resource_group.default.location\n  resource_group_name = azurerm_resource_group.default.name\n\n  security_rule {\n    name                       = \"DenyAllInbound\"\n    description                = \"\"\n    priority                   = 1000\n    direction                  = \"Inbound\"\n    access                     = \"Deny\"\n    protocol                   = \"*\"\n    source_port_range          = \"*\"\n    destination_port_range     = \"*\"\n    source_address_prefix      = \"*\"\n    destination_address_prefix = \"*\"\n  }\n\n  security_rule {\n    name                       = \"DenyAllOutbound\"\n    description                = \"\"\n    priority                   = 1000\n    direction                  = \"Outbound\"\n    access                     = \"Deny\"\n    protocol                   = \"*\"\n    source_port_range          = \"*\"\n    destination_port_range     = \"*\"\n    source_address_prefix      = \"*\"\n    destination_address_prefix = \"*\"\n  }\n\n  tags = local.tags\n\n}\n\nresource \"azurerm_subnet_network_security_group_association\" \"default\" {\n  subnet_id                 = azurerm_subnet.default.id\n  network_security_group_id = azurerm_network_security_group.default.id\n}\n\n# DNS\n\nresource \"azurerm_private_dns_zone\" \"cosmos\" {\n  name                = \"privatelink.mongo.cosmos.azure.com\"\n  resource_group_name = azurerm_resource_group.default.name\n}\n\nresource \"azurerm_private_dns_zone_virtual_network_link\" \"cosmos\" {\n  name                  = \"cosmoslink\"\n  resource_group_name   = azurerm_resource_group.default.name\n  private_dns_zone_name = azurerm_private_dns_zone.cosmos.name\n  virtual_network_id    = azurerm_virtual_network.default.id\n  registration_enabled  = true\n}\n\n# Database\n\nresource \"random_integer\" \"ri\" {\n  min = 10000\n  max = 99999\n}\n\nresource \"azurerm_cosmosdb_account\" \"default\" {\n  name                 = \"cosmos${random_integer.ri.result}\"\n  location             = azurerm_resource_group.default.location\n  resource_group_name  = azurerm_resource_group.default.name\n  offer_type           = \"Standard\"\n  kind                 = \"MongoDB\"\n  mongo_server_version = \"4.0\"\n\n  public_network_access_enabled     = false\n  is_virtual_network_filter_enabled = true\n  network_acl_bypass_ids            = []\n\n  enable_free_tier = var.cosmos_enable_free_tier\n\n  capabilities {\n    name = \"EnableMongo\"\n  }\n\n  capabilities {\n    name = \"EnableServerless\"\n  }\n\n  consistency_policy {\n    consistency_level = \"Session\"\n  }\n\n  geo_location {\n    location          = azurerm_resource_group.default.location\n    failover_priority = 0\n  }\n\n  virtual_network_rule {\n    id = azurerm_subnet.default.id\n  }\n\n  virtual_network_rule {\n    id = azurerm_subnet.apps.id\n  }\n\n  backup {\n    type = \"Continuous\"\n  }\n\n  tags = local.tags\n\n}\n\nresource \"azurerm_cosmosdb_mongo_database\" \"default\" {\n  name                = \"database\"\n  resource_group_name = azurerm_cosmosdb_account.default.resource_group_name\n  account_name        = azurerm_cosmosdb_account.default.name\n}\n\nresource \"azurerm_cosmosdb_mongo_collection\" \"employees\" {\n  name                = \"employees\"\n  resource_group_name = azurerm_cosmosdb_account.default.resource_group_name\n  account_name        = azurerm_cosmosdb_account.default.name\n  database_name       = azurerm_cosmosdb_mongo_database.default.name\n\n  shard_key = \"name\"\n\n  index {\n    keys = [\n      \"_id\"\n    ]\n\n    unique = true\n  }\n\n}\n\nresource \"azurerm_private_endpoint\" \"cosmos\" {\n  name                = \"pe-cosmos\"\n  location            = azurerm_resource_group.default.location\n  resource_group_name = azurerm_resource_group.default.name\n  subnet_id           = azurerm_subnet.default.id\n\n  private_dns_zone_group {\n    name = azurerm_private_dns_zone.cosmos.name\n    private_dns_zone_ids = [\n      azurerm_private_dns_zone.cosmos.id\n    ]\n  }\n\n  private_service_connection {\n    name                           = \"cosmos\"\n    private_connection_resource_id = azurerm_cosmosdb_account.default.id\n    is_manual_connection           = false\n    subresource_names              = [\"MongoDB\"]\n  }\n\n}\n\n\n# App Service\n\nresource \"azurerm_service_plan\" \"default\" {\n  name                = \"plan-${random_integer.ri.result}\"\n  resource_group_name = azurerm_resource_group.default.name\n  location            = azurerm_resource_group.default.location\n  os_type             = \"Linux\"\n  sku_name            = var.appservice_sku_name\n  tags                = local.tags\n}\n\nresource \"azurerm_linux_web_app\" \"default\" {\n  name                = \"app${random_integer.ri.result}\"\n  resource_group_name = azurerm_resource_group.default.name\n  location            = azurerm_resource_group.default.location\n  service_plan_id     = azurerm_service_plan.default.id\n  https_only          = true\n\n  site_config {\n    always_on = true\n\n    application_stack {\n      docker_image     = var.appservice_docker_image\n      docker_image_tag = var.appservice_docker_image_tag\n    }\n  }\n\n  app_settings = {\n    DOCKER_ENABLE_CI                   = true\n    DOCKER_REGISTRY_SERVER_URL         = var.appservice_docker_registry_server_url\n    COSMOS_PRIMARY_CONNECTION_STRING   = azurerm_cosmosdb_account.default.connection_strings[0]\n    COSMOS_SECONDARY_CONNECTION_STRING = azurerm_cosmosdb_account.default.connection_strings[1]\n    WEBSITES_PORT                      = 5000\n  }\n\n  tags = local.tags\n\n}\n\nresource \"azurerm_app_service_virtual_network_swift_connection\" \"default\" {\n  app_service_id = azurerm_linux_web_app.default.id\n  subnet_id      = azurerm_subnet.apps.id\n}\n\n# Log Analytics\n\nresource \"azurerm_log_analytics_workspace\" \"default\" {\n  name                = \"log${random_integer.ri.result}\"\n  location            = azurerm_resource_group.default.location\n  resource_group_name = azurerm_resource_group.default.name\n  sku                 = \"PerGB2018\"\n  retention_in_days   = 30\n}\n\nresource \"azurerm_monitor_diagnostic_setting\" \"default\" {\n  name                       = \"Python API Application Logs\"\n  target_resource_id         = azurerm_linux_web_app.default.id\n  log_analytics_workspace_id = azurerm_log_analytics_workspace.default.id\n\n  log {\n    category = \"AppServiceConsoleLogs\"\n    enabled  = true\n\n    retention_policy {\n      enabled = true\n    }\n  }\n\n  log {\n    category = \"AppServiceAppLogs\"\n    enabled  = true\n\n    retention_policy {\n      enabled = true\n    }\n  }\n\n  log {\n    category = \"AppServiceHTTPLogs\"\n    enabled  = true\n\n    retention_policy {\n      enabled = true\n    }\n  }\n\n}\n\n#File: outputs.tf\noutput \"cosmos_name\" {\n  description = \"Cosmos DB name dynamically generate.\"\n  value       = azurerm_cosmosdb_account.default.name\n}\n\n#File: variables.tf\nvariable \"resource_group_name\" {\n  description = \"Value of the resource group name\"\n  type        = string\n  default     = \"rg-showcase\"\n}\n\nvariable \"resource_group_location\" {\n  description = \"Value of the resource group location\"\n  type        = string\n  default     = \"eastus2\"\n}\n\nvariable \"cosmos_enable_free_tier\" {\n  description = \"Enable Free Tier for Cosmos DB\"\n  type        = bool\n  default     = true\n}\n\nvariable \"appservice_sku_name\" {\n  description = \"Tier for the App Service Plan\"\n  type        = string\n  default     = \"P1v3\"\n}\n\nvariable \"appservice_docker_image\" {\n  description = \"Docker image name\"\n  type        = string\n  default     = \"epomatti/big-azure-terraform-showcase\"\n}\n\nvariable \"appservice_docker_image_tag\" {\n  description = \"Docker image tag\"\n  type        = string\n  default     = \"latest\"\n}\n\nvariable \"appservice_docker_registry_server_url\" {\n  description = \"The URL of the docker registry\"\n  type        = string\n  default     = \"https://index.docker.io\"\n}\n"}]}
{"messages": [{"role": "user", "content": "Create a virtual network in Azure using the specified name, address space, location, and resource group. Set up a subnet within that virtual network, utilizing the defined subnet name and address prefixes. Define variables for the virtual network name, subnet name, address space, subnet address prefixes, resource group name, and location. Output the subnet ID and the virtual network name after creation. Ensure all configurations are parameterized for ease of deployment."}, {"role": "assistant", "content": "\n#File: main.tf\nresource \"azurerm_virtual_network\" \"Project-Aurora_vnet\" {\n  name                = var.vnet_name\n  address_space       = var.address_space\n  location            = var.location\n  resource_group_name = var.resource_group_name\n}\n\nresource \"azurerm_subnet\" \"Project-Aurora_subnet\" {\n  name                 = var.subnet_name\n  resource_group_name  = var.resource_group_name\n  virtual_network_name = azurerm_virtual_network.Project-Aurora_vnet.name\n  address_prefixes     = var.subnet_address_prefixes\n}\n\n#File: variable.tf\nvariable \"vnet_name\" {\n  description = \"The name of the virtual network.\"\n  type        = string\n}\n\nvariable \"subnet_name\" {\n  description = \"The name of the subnet.\"\n  type        = string\n}\n\nvariable \"address_space\" {\n  description = \"The address space of the virtual network.\"\n  type        = list(string)\n}\n\nvariable \"subnet_address_prefixes\" {\n  description = \"List of address prefixes for the subnet.\"\n  type        = list(string)\n}\n\nvariable \"resource_group_name\" {\n  description = \"The name of the resource group.\"\n  type        = string\n}\n\nvariable \"location\" {\n  description = \"The Azure region to deploy the resources.\"\n  type        = string\n}\n\n#File: output.tf\noutput \"subnet_id\" {\n  description = \"The ID of the created subnet.\"\n  value       = azurerm_subnet.Project-Aurora_subnet.id\n}\n\noutput \"vnet_name\" {\n  description = \"The name of the created virtual network.\"\n  value       = azurerm_virtual_network.Project-Aurora_vnet.name\n}\n"}]}
{"messages": [{"role": "user", "content": "Create an Azure provider configuration with necessary credentials. Define a resource group in Central India. Set up a virtual network with an address space of 10.0.0.0/16. Create a subnet named 'internal' with address prefixes of 10.0.2.0/24. Deploy an Azure virtual machine with Ubuntu Server, ensuring to configure the network interface and storage options."}, {"role": "assistant", "content": "\n#File: main.tf\n# Configure Azure Provider\nterraform {\n  required_providers {\n    azurerm = {\n      source = \"hashicorp/azurerm\"\n      version = \">= 3.59.0\"\n    } \n  }\n  required_version = \">= 0.14.9\"\n}\n\nprovider \"azurerm\" {\n  features {}\n\n  skip_provider_registration = \"true\"\n  \n  # Connection to Azure\n  subscription_id = var.subscription_id\n  client_id = var.client_id\n  client_secret = var.client_secret\n  tenant_id = var.tenant_id\n}\n\nvariable \"prefix\" {\n  default = \"terraform\"\n}\n\nresource \"azurerm_resource_group\" \"rg\" {\n  name     = \"${var.prefix}-ResourceGroup\"\n  location = \"Central India\"\n}\n\nresource \"azurerm_virtual_network\" \"vnet\" {\n  name                = \"${var.prefix}-VNet\"\n  address_space       = [\"10.0.0.0/16\"]\n  location            = azurerm_resource_group.rg.location\n  resource_group_name = azurerm_resource_group.rg.name\n}\n\nresource \"azurerm_subnet\" \"internal\" {\n  name                 = \"${var.prefix}-internal\"\n  resource_group_name  = azurerm_resource_group.rg.name\n  virtual_network_name = azurerm_virtual_network.vnet.name\n  address_prefixes     = [\"10.0.2.0/24\"]\n}\n\nresource \"azurerm_network_interface\" \"nic\" {\n  name                = \"${var.prefix}-NIC\"\n  location            = azurerm_resource_group.rg.location\n  resource_group_name = azurerm_resource_group.rg.name\n\n  ip_configuration {\n    name                          = \"tfconfiguration1\"\n    subnet_id                     = azurerm_subnet.internal.id\n    private_ip_address_allocation = \"Dynamic\"\n  }\n}\n\nresource \"azurerm_virtual_machine\" \"vm\" {\n  name                  = \"${var.prefix}-vm\"\n  location              = azurerm_resource_group.rg.location\n  resource_group_name   = azurerm_resource_group.rg.name\n  network_interface_ids = [azurerm_network_interface.nic.id]\n  vm_size               = \"Standard_DS1_v2\"\n\n  storage_image_reference {\n    publisher = \"Canonical\"\n    offer     = \"UbuntuServer\"\n    sku       = \"16.04-LTS\"\n    version   = \"latest\"\n  }\n  storage_os_disk {\n    name              = \"myosdisk1\"\n    caching           = \"ReadWrite\"\n    create_option     = \"FromImage\"\n    managed_disk_type = \"Standard_LRS\"\n  }\n  os_profile {\n    computer_name  = \"hostname\"\n    admin_username = \"tfadmin\"\n    admin_password = \"Password1234!\"\n  }\n  os_profile_linux_config {\n    disable_password_authentication = false\n  }\n  tags = {\n    environment = \"staging\"\n  }\n}\n\n\n#File: variables.tf\nvariable \"client_id\" {\n  type = string\n}\n\nvariable \"client_secret\" {\n  type = string\n}\n\nvariable \"subscription_id\" {\n  type = string\n}\n\nvariable \"tenant_id\" {\n  type = string\n}"}]}
{"messages": [{"role": "user", "content": "Create a VPC network using the name derived from the project variable. Configure a firewall rule for public ingress traffic on this network, allowing ICMP and TCP protocols with specified ports. Ensure that the firewall rule targets instances with the \"kathara\" tag. Define necessary input variables for zone, region, project name, and public firewall ports. Output the self-link of the created VPC network for reference."}, {"role": "assistant", "content": "\n#File: main.tf\n\nresource \"google_compute_network\" \"vpc_network\" {\n  name = \"${var.project}-network\"\n}\n\nresource \"google_compute_firewall\" \"firewall_pub_ingress_kathara\" {\n  name        = \"${var.project}-firewall-public-ingress\"\n  network     = google_compute_network.vpc_network.id\n  target_tags = [\"kathara\"]\n\n  allow {\n    protocol = \"icmp\"\n  }\n\n  allow {\n    protocol = \"tcp\"\n    ports    = var.port_firewall_public\n  }\n\n  depends_on = [google_compute_network.vpc_network]\n}\n\n#File: output.tf\noutput \"network\" {\n  description = \"VPC network\"\n  value       = google_compute_network.vpc_network.self_link\n}\n\n#File: variables.tf\nvariable \"zone\" {\n  type = string\n}\n\nvariable \"region\" {\n  type = string\n}\n\nvariable \"project\" {\n  type = string\n}\n\nvariable \"port_firewall_public\" {\n  type = list\n}\n\n"}]}
{"messages": [{"role": "user", "content": "Create a Google Cloud provider configuration with your credentials, project, and region. Set up a firewall rule that allows TCP traffic on port 22 and multiple UDP ports for a game server. Establish a Google Cloud Compute instance with a random ID in the specified zone and machine type; ensure it includes a public SSH key for access. Add a remote-exec provisioner to greet and configure the instance using Ansible. Finally, output the public IP and game connection address for easy access."}, {"role": "assistant", "content": "\n#File: main.tf\n// Configure the Google Cloud provider\nprovider \"google\" {\n  credentials = var.gcp_credentials_file\n  project     = var.gcp_project\n  region      = var.gcp_region\n}\n\n# Configure the gcp firewall\nresource \"google_compute_firewall\" \"default\" {\n  name    = \"l4d2-firewall\"\n  network = \"default\"\n\n  allow {\n    protocol = \"tcp\"\n    ports    = [\"22\"]\n  }\n\n  allow {\n    protocol = \"udp\"\n    ports    = [\"4380\"]\n  }\n\n  allow {\n    protocol = \"udp\"\n    ports    = [\"10999\"]\n  }\n\n  allow {\n    protocol = \"udp\"\n    ports    = [\"7777\"]\n  }\n\n  allow {\n    protocol = \"udp\"\n    ports    = [\"27015\"]\n  }\n\n  allow {\n    protocol = \"udp\"\n    ports    = [var.l4d2_port]\n  }\n\n  source_ranges = [\"0.0.0.0/0\"]\n  target_tags   = [\"l4d2\"]\n}\n\nresource \"google_compute_firewall\" \"default-deny\" {\n  name     = \"l4d2-firewall-deny\"\n  network  = \"default\"\n  priority = \"2000\"\n\n  deny {\n    protocol = \"all\"\n  }\n\n  source_ranges = [\"0.0.0.0/0\"]\n  target_tags   = [\"l4d2\"]\n}\n\n// Terraform plugin for creating random ids\nresource \"random_id\" \"instance_id\" {\n  byte_length = 8\n}\n\n// A single Google Cloud Engine instance\nresource \"google_compute_instance\" \"default\" {\n  name         = \"l4d2-vm-${random_id.instance_id.hex}\"\n  machine_type = var.gcp_machine_type\n  zone         = var.gcp_zone\n  tags         = [\"l4d2\", \"ssh\"]\n\n  boot_disk {\n    initialize_params {\n      image = var.gcp_image\n      size  = \"100\"\n    }\n  }\n\n  network_interface {\n    network = \"default\"\n\n    access_config {\n      // Include this section to give the VM an external ip address\n    }\n  }\n\n  metadata = {\n    ssh-keys = \"${var.ssh_user}:${file(var.public_key_path)}\"\n  }\n\n  # Ansible\n  provisioner \"remote-exec\" {\n    inline = [\"echo 'Hello World'\"]\n\n    connection {\n      type        = \"ssh\"\n      user        = var.ssh_user\n      host        = google_compute_instance.default.network_interface[0].access_config[0].nat_ip\n      private_key = file(var.private_key_path)\n    }\n  }\n\n  provisioner \"local-exec\" {\n    command = \"ansible-playbook -i '${google_compute_instance.default.network_interface[0].access_config[0].nat_ip},' -u '${var.ssh_user}' --private-key ${var.private_key_path} ../ansible/l4d2.yml --ssh-common-args='-o StrictHostKeyChecking=no'\"\n  }\n}\n\n\n#File: outputs.tf\noutput \"ip\" {\n  description = \"The public IP of the l4d2 server\"\n  value       = google_compute_instance.default.network_interface[0].access_config[0].nat_ip\n}\n\noutput \"game_address\" {\n  description = \"Run in Console to connect to game server\"\n  value       = \"connect ${google_compute_instance.default.network_interface[0].access_config[0].nat_ip}:${var.l4d2_port}\"\n}\n\n\n#File: variables.tf\n# GCP\nvariable \"gcp_region\" {\n  description = \"The GCP region to create things in\"\n  default     = \"europe-west4\"\n}\n\nvariable \"gcp_credentials_file\" {\n  description = \"The GCP credentials file to use\"\n  default     = \"~/.gcp/credentials.json\"\n}\n\nvariable \"gcp_project\" {\n  description = \"The GCP project to use.\"\n  default     = \"ageless-fire-244620\"\n}\n\nvariable \"gcp_machine_type\" {\n  description = \"The GCP machine type to use.\"\n  default     = \"n2-standard-2\"\n}\n\nvariable \"gcp_zone\" {\n  description = \"The GCP zone to use.\"\n  default     = \"europe-west4-a\"\n}\n\n# https://cloud.google.com/compute/docs/images\nvariable \"gcp_image\" {\n  description = \"The GCP image to use.\"\n  default     = \"ubuntu-2004-lts\"\n}\n\n# SSH\nvariable \"public_key_path\" {\n  description = \"Path to the public SSH key you want to bake into the instance.\"\n  default     = \"~/.ssh/steam.pub\"\n}\n\nvariable \"private_key_path\" {\n  description = \"Path to the private SSH key, used to access the instance.\"\n  default     = \"~/.ssh/steam.pem\"\n}\n\nvariable \"ssh_user\" {\n  description = \"SSH user name to connect to your instance.\"\n  default     = \"ubuntu\"\n}\n\n# L4D2\nvariable \"l4d2_port\" {\n  description = \"Port number to connect to L4D2 server.\"\n  default     = \"27020\"\n}\n\n\n#File: versions.tf\n\nterraform {\n  required_version = \">= 0.12\"\n}\n"}]}
{"messages": [{"role": "user", "content": "Create a Google VPC network named \"vpc-app\" with a custom MTU of 1460. Create two subnets, \"subnet-app-1\" and \"subnet-app-2\", using IP ranges \"10.100.0.0/21\" and \"10.100.8.0/21\", respectively. Set up a Google Kubernetes Engine (GKE) cluster named \"my-gke-cluster\" in the \"us-central1\" region, linking it to the created VPC and the first subnet. Allocate an external IP address named \"notesapp-external-ip\" for use with a load balancer. Output the public IP of the load balancer."}, {"role": "assistant", "content": "\n#File: main.tf\n# Networking resources\nresource \"google_compute_network\" \"default\" {\n  name                    = \"vpc-app\"\n  auto_create_subnetworks = false\n  mtu                     = 1460\n  description             = \"vpc for app\"\n  routing_mode            = \"REGIONAL\"\n}\n\nresource \"google_compute_subnetwork\" \"default_1\" {\n  name                     = \"subnet-app-1\"\n  ip_cidr_range            = \"10.100.0.0/21\"\n  network                  = google_compute_network.default.id\n  description              = \"subnet 1 for app\"\n  stack_type               = \"IPV4_ONLY\"\n  private_ip_google_access = true\n}\n\nresource \"google_compute_subnetwork\" \"default_2\" {\n  name                     = \"subnet-app-2\"\n  ip_cidr_range            = \"10.100.8.0/21\"\n  network                  = google_compute_network.default.id\n  description              = \"subnet 1 for app\"\n  stack_type               = \"IPV4_ONLY\"\n  private_ip_google_access = true\n}\n\n# GKE Cluster\n\nresource \"google_container_cluster\" \"primary\" {\n  name               = \"my-gke-cluster\"\n  location           = \"us-central1\"\n  network            = google_compute_network.default.name\n  subnetwork         = google_compute_subnetwork.default_1.name\n  initial_node_count = 1\n  networking_mode    = \"VPC_NATIVE\"\n\n  node_config {\n    service_account  = \"default\"\n    image_type       = \"COS_CONTAINERD\"\n    local_ssd_count  = 0\n    machine_type     = \"e2-medium\"\n    preemptible      = false\n\n    oauth_scopes = [\n      \"https://www.googleapis.com/auth/cloud-platform\"\n    ]\n    metadata = {\n      \"disable-legacy-endpoints\" = \"true\"\n    }\n\n    shielded_instance_config {\n      enable_integrity_monitoring = true\n      enable_secure_boot          = false\n    }\n  }\n\n  ip_allocation_policy {\n    cluster_ipv4_cidr_block  = \"10.191.0.0/17\"\n    services_ipv4_cidr_block = \"10.191.128.0/21\"\n  }\n}\n\nresource \"google_compute_global_address\" \"default\" {\n  name         = \"notesapp-external-ip\"\n  address_type = \"EXTERNAL\"\n}\n\n#File: outputs.tf\noutput \"load_balancer_public_ip\" {\n  value = google_compute_global_address.default.address\n  description = \"Global load balancer IP Address\"\n}\n\n#File: provider.tf\nterraform {\n  required_providers {\n    google = {\n      source  = \"hashicorp/google\"\n      version = \"4.32.0\"\n    }\n  }\n}\n\nprovider \"google\" {\n  project = \"agile-terra-359116\"\n  region  = \"us-central1\"\n}\n\n#File: variables.tf\n"}]}
{"messages": [{"role":"user","content":"Create an AWS infrastructure with Terraform that includes a VPC, subnet, internet gateway, routing, a security group allowing SSH access, and an EC2 instance based on a specified Ubuntu Docker AMI. Use variables for configurable parameters like region, key pair, CIDR blocks, and tags to allow flexible customization."},{"role":"assistant","content":"terraform {\r\n  required_providers {\r\n    aws = {\r\n      source  = \"hashicorp/aws\"\r\n      version = \"~> 5.0\"\r\n    }\r\n  }\r\n\r\n  required_version = \">= 1.0\"\r\n}\r\n\r\nprovider \"aws\" {\r\n  region = var.aws_region\r\n}\r\n\r\n# ========== VARIABLES ==========\r\nvariable \"aws_region\" {\r\n  description = \"AWS region\"\r\n  default     = \"us-west-2\"\r\n}\r\n\r\nvariable \"availability_zone\" {\r\n  description = \"Availability zone\"\r\n  default     = \"us-west-2a\"\r\n}\r\n\r\nvariable \"key_name\" {\r\n  description = \"SSH key pair name\"\r\n  type        = string\r\n}\r\n\r\nvariable \"vpc_cidr\" {\r\n  description = \"CIDR block for VPC\"\r\n  default     = \"10.0.0.0/16\"\r\n}\r\n\r\nvariable \"subnet_cidr\" {\r\n  description = \"CIDR block for subnet\"\r\n  default     = \"10.0.1.0/24\"\r\n}\r\n\r\nvariable \"ssh_cidr\" {\r\n  description = \"Allowed CIDR for SSH\"\r\n  default     = \"0.0.0.0/0\"\r\n}\r\n\r\nvariable \"ubuntu_docker_ami\" {\r\n  description = \"Ubuntu AMI ID with Docker preinstalled\"\r\n  type        = string\r\n}\r\n\r\nvariable \"instance_type\" {\r\n  description = \"EC2 instance type\"\r\n  default     = \"t3.micro\"\r\n}\r\n\r\nvariable \"tags\" {\r\n  description = \"Common tags\"\r\n  type        = map(string)\r\n  default     = {\r\n    Project = \"TerraformE2E\"\r\n    Env     = \"Dev\"\r\n  }\r\n}\r\n\r\n# ========== VPC ==========\r\nresource \"aws_vpc\" \"main\" {\r\n  cidr_block           = var.vpc_cidr\r\n  enable_dns_support   = true\r\n  enable_dns_hostnames = true\r\n  tags                 = var.tags\r\n}\r\n\r\n# ========== Subnet ==========\r\nresource \"aws_subnet\" \"public\" {\r\n  vpc_id                  = aws_vpc.main.id\r\n  cidr_block              = var.subnet_cidr\r\n  availability_zone       = var.availability_zone\r\n  map_public_ip_on_launch = true\r\n  tags                    = var.tags\r\n}\r\n\r\n# ========== Internet Gateway ==========\r\nresource \"aws_internet_gateway\" \"igw\" {\r\n  vpc_id = aws_vpc.main.id\r\n  tags   = var.tags\r\n}\r\n\r\n# ========== Route Table ==========\r\nresource \"aws_route_table\" \"public\" {\r\n  vpc_id = aws_vpc.main.id\r\n\r\n  route {\r\n    cidr_block = \"0.0.0.0/0\"\r\n    gateway_id = aws_internet_gateway.igw.id\r\n  }\r\n\r\n  tags = var.tags\r\n}\r\n\r\nresource \"aws_route_table_association\" \"public\" {\r\n  subnet_id      = aws_subnet.public.id\r\n  route_table_id = aws_route_table.public.id\r\n}\r\n\r\n# ========== Security Group ==========\r\nresource \"aws_security_group\" \"ssh\" {\r\n  name        = \"allow-ssh\"\r\n  description = \"Allow SSH access\"\r\n  vpc_id      = aws_vpc.main.id\r\n\r\n  ingress {\r\n    from_port   = 22\r\n    to_port     = 22\r\n    protocol    = \"tcp\"\r\n    cidr_blocks = [var.ssh_cidr]\r\n  }\r\n\r\n  egress {\r\n    from_port   = 0\r\n    to_port     = 0\r\n    protocol    = \"-1\"\r\n    cidr_blocks = [\"0.0.0.0/0\"]\r\n  }\r\n\r\n  tags = var.tags\r\n}\r\n\r\n# ========== EC2 Instance ==========\r\nresource \"aws_instance\" \"ubuntu\" {\r\n  ami                         = var.ubuntu_docker_ami\r\n  instance_type               = var.instance_type\r\n  subnet_id                   = aws_subnet.public.id\r\n  vpc_security_group_ids      = [aws_security_group.ssh.id]\r\n  key_name                    = var.key_name\r\n  associate_public_ip_address = true\r\n\r\n  tags = merge(var.tags, {\r\n    Name = \"ubuntu-docker\"\r\n  })\r\n}\r\n\r\n# ========== OUTPUTS ==========\r\noutput \"instance_public_ip\" {\r\n  value = aws_instance.ubuntu.public_ip\r\n}\r\n\r\noutput \"ssh_connection_string\" {\r\n  value = \"ssh -i ~/.ssh/YOUR_PRIVATE_KEY.pem ubuntu@${aws_instance.ubuntu.public_ip}\"\r\n  description = \"SSH command to connect (replace key path)\"\r\n}\r\n"}]}
{"messages": [{"role":"user","content":"Create a CloudWatch log group to collect application logs. Set retention to 14 days. Name it /app/my-service."},{"role":"assistant","content":"provider \"aws\" {\r\n  region = \"us-east-1\"\r\n}\r\n\r\nresource \"aws_cloudwatch_log_group\" \"app_logs\" {\r\n  name              = \"/app/my-service\"\r\n  retention_in_days = 14\r\n}\r\n"}]}
{"messages": [{"role":"user","content":"Set up an AWS environment to deploy an EKS (Elastic Kubernetes Service) cluster with a custom VPC containing both public and private subnets, NAT gateway, and tagged for Kubernetes usage. Creates a security group allowing ingress traffic from common private network CIDR blocks and unrestricted egress traffic for worker nodes. The EKS module provisions a Kubernetes cluster with managed node groups running on t3.medium instances, with IRSA (IAM Roles for Service Accounts) enabled for fine-grained permissions."},{"role":"assistant","content":"\r\nprovider \"aws\" {\r\n  region = var.aws_region\r\n}\r\n\r\ndata \"aws_availability_zones\" \"available\" {}\r\n\r\nlocals {\r\n  cluster_name = \"abhi-eks-${random_string.suffix.result}\"\r\n}\r\n\r\nresource \"random_string\" \"suffix\" {\r\n  length  = 8\r\n  special = false\r\n}\r\n\r\nmodule \"vpc\" {\r\n  source  = \"terraform-aws-modules/vpc/aws\"\r\n  version = \"5.7.0\"\r\n\r\n  name                 = \"abhi-eks-vpc\"\r\n  cidr                 = var.vpc_cidr\r\n  azs                  = data.aws_availability_zones.available.names\r\n  private_subnets      = [\"10.0.1.0/24\", \"10.0.2.0/24\"]\r\n  public_subnets       = [\"10.0.4.0/24\", \"10.0.5.0/24\"]\r\n  enable_nat_gateway   = true\r\n  single_nat_gateway   = true\r\n  enable_dns_hostnames = true\r\n  enable_dns_support   = true\r\n\r\n  tags = {\r\n    \"kubernetes.io/cluster/${local.cluster_name}\" = \"shared\"\r\n  }\r\n\r\n  public_subnet_tags = {\r\n    \"kubernetes.io/cluster/${local.cluster_name}\" = \"shared\"\r\n    \"kubernetes.io/role/elb\"                      = \"1\"\r\n  }\r\n\r\n  private_subnet_tags = {\r\n    \"kubernetes.io/cluster/${local.cluster_name}\" = \"shared\"\r\n    \"kubernetes.io/role/internal-elb\"             = \"1\"\r\n  }\r\n}\r\n\r\nvariable \"kubernetes_version\" {\r\n  default     = 1.27\r\n  description = \"kubernetes version\"\r\n}\r\n\r\nvariable \"vpc_cidr\" {\r\n  default     = \"10.0.0.0/16\"\r\n  description = \"default CIDR range of the VPC\"\r\n}\r\nvariable \"aws_region\" {\r\n  default = \"us-west-1\"\r\n  description = \"aws region\"\r\n}\r\n\r\n\r\nresource \"aws_security_group\" \"all_worker_mgmt\" {\r\n  name_prefix = \"all_worker_management\"\r\n  vpc_id      = module.vpc.vpc_id\r\n}\r\n\r\nresource \"aws_security_group_rule\" \"all_worker_mgmt_ingress\" {\r\n  description       = \"allow inbound traffic from eks\"\r\n  from_port         = 0\r\n  protocol          = \"-1\"\r\n  to_port           = 0\r\n  security_group_id = aws_security_group.all_worker_mgmt.id\r\n  type              = \"ingress\"\r\n  cidr_blocks = [\r\n    \"10.0.0.0/8\",\r\n    \"172.16.0.0/12\",\r\n    \"192.168.0.0/16\",\r\n  ]\r\n}\r\n\r\nresource \"aws_security_group_rule\" \"all_worker_mgmt_egress\" {\r\n  description       = \"allow outbound traffic to anywhere\"\r\n  from_port         = 0\r\n  protocol          = \"-1\"\r\n  security_group_id = aws_security_group.all_worker_mgmt.id\r\n  to_port           = 0\r\n  type              = \"egress\"\r\n  cidr_blocks       = [\"0.0.0.0/0\"]\r\n}\r\nmodule \"eks\" {\r\n  source          = \"terraform-aws-modules/eks/aws\"\r\n  version         = \"20.8.4\"\r\n  cluster_name    = local.cluster_name\r\n  cluster_version = var.kubernetes_version\r\n  subnet_ids      = module.vpc.private_subnets\r\n\r\n  enable_irsa = true\r\n\r\n  tags = {\r\n    cluster = \"demo\"\r\n  }\r\n\r\n  vpc_id = module.vpc.vpc_id\r\n\r\n  eks_managed_node_group_defaults = {\r\n    ami_type               = \"AL2_x86_64\"\r\n    instance_types         = [\"t3.medium\"]\r\n    vpc_security_group_ids = [aws_security_group.all_worker_mgmt.id]\r\n  }\r\n\r\n  eks_managed_node_groups = {\r\n\r\n    node_group = {\r\n      min_size     = 2\r\n      max_size     = 6\r\n      desired_size = 2\r\n    }\r\n  }\r\n}\r\n\r\n"}]}
{"messages": [{"role": "user", "content": "Create a Google Cloud VPC network using the specified name. Provision a VM instance with the given settings, including operating system and SSH keys. Set up firewall rules to allow traffic for SSH, HTTP, HTTPS, and port 3000. Reserve a static IP address for the instance. Create a DNS record pointing to the VM's external IP address."}, {"role": "assistant", "content": "\n#File: main.tf\nterraform {\n  required_providers {\n    google = {\n      source  = \"hashicorp/google\"\n      version = \"4.51.0\"\n    }\n  }\n}\n\nprovider \"google\" {\n  project = var.project_id\n  region  = var.region\n  zone    = var.zone\n}\n\n# Create VPC Network\nresource \"google_compute_network\" \"vpc_network\" {\n  name = var.vpc_network\n}\n\n# Create VM Instance\nresource \"google_compute_instance\" \"vm_instance\" {\n  name         = var.vm_instance\n  machine_type = var.machine_type\n  tags = [\n    \"allow-ssh\",\n    \"allow-http\",\n    \"allow-https\",\n    \"allow-3000\"\n  ]\n\n  # Add ssh keys\n  metadata = {\n    ssh-keys = \"${var.ssh_username}:${var.ssh_pub_key}\"\n  }\n\n  # Operating System\n  boot_disk {\n    initialize_params {\n      image = var.boot_disk\n    }\n  }\n\n  # Network setting\n  network_interface {\n    network = google_compute_network.vpc_network.name\n    access_config {\n      nat_ip = google_compute_address.static.address\n    }\n  }\n}\n\n# Create Firewall Rules\nresource \"google_compute_firewall\" \"ssh-rule\" {\n  name    = \"allow-ssh\"\n  network = google_compute_network.vpc_network.name\n  allow {\n    protocol = \"tcp\"\n    ports    = [\"22\"]\n  }\n  target_tags   = [\"allow-ssh\"]\n  source_ranges = [\"0.0.0.0/0\"]\n}\nresource \"google_compute_firewall\" \"http-rule\" {\n  name    = \"allow-http\"\n  network = google_compute_network.vpc_network.name\n  allow {\n    protocol = \"tcp\"\n    ports    = [\"80\"]\n  }\n  target_tags   = [\"allow-http\"]\n  source_ranges = [\"0.0.0.0/0\"]\n}\nresource \"google_compute_firewall\" \"https-rule\" {\n  name    = \"allow-https\"\n  network = google_compute_network.vpc_network.name\n  allow {\n    protocol = \"tcp\"\n    ports    = [\"443\"]\n  }\n  target_tags   = [\"allow-https\"]\n  source_ranges = [\"0.0.0.0/0\"]\n}\nresource \"google_compute_firewall\" \"port-3000-rule\" {\n  name    = \"allow-3000\"\n  network = google_compute_network.vpc_network.name\n  allow {\n    protocol = \"tcp\"\n    ports    = [\"3000\"]\n  }\n  target_tags   = [\"allow-3000\"]\n  source_ranges = [\"0.0.0.0/0\"]\n}\n\n# Reserve Static IP Address\nresource \"google_compute_address\" \"static\" {\n  name = \"ipv4-address\"\n}\n\n# Create DNS Record\nresource \"google_dns_record_set\" \"terraform-learn\" {\n  name = \"${var.dns_record_name}.${var.domain_name}\"\n  type = \"A\"\n  ttl  = 300\n\n  managed_zone = var.managed_zone_name\n\n  rrdatas = [google_compute_instance.vm_instance.network_interface[0].access_config[0].nat_ip]\n}\n#File: outputs.tf\noutput \"vm_internal_ip\" {\n  value = google_compute_instance.vm_instance.network_interface.0.network_ip\n}\n\noutput \"vm_external_ip\" {\n  value = google_compute_instance.vm_instance.network_interface.0.access_config.0.nat_ip\n}\n#File: variables.tf\nvariable \"project_id\" {\n  type = string\n}\n\nvariable \"region\" {\n  type    = string\n  default = \"us-west1\"\n}\n\nvariable \"zone\" {\n  type    = string\n  default = \"us-west1-a\"\n}\n\nvariable \"vpc_network\" {\n  type    = string\n  default = \"terraform-network-template\"\n}\n\nvariable \"vm_instance\" {\n  type    = string\n  default = \"terraform-instance-template\"\n}\n\nvariable \"machine_type\" {\n  type    = string\n  default = \"f1-micro\"\n}\n\nvariable \"ssh_username\" {\n  type = string\n}\n\nvariable \"ssh_pub_key\" {\n  type = string\n}\n\nvariable \"boot_disk\" {\n  type    = string\n  default = \"cos-cloud/cos-113-lts\"\n}\n\nvariable \"domain_name\" {\n  type = string\n}\n\nvariable \"dns_record_name\" {\n  type = string\n}\n\nvariable \"managed_zone_name\" {\n  type = string\n}"}]}
{"messages": [{"role": "user", "content": "Create a Google Cloud Storage bucket named \"infratf-bucket-1\" in the US. Upload the file \"index.html\" from \"../website/index.html\" to the bucket and set its access control to allow public read access. Reserve a static external IP address named \"website-lb-ip\" and configure a DNS A record for the website. Establish a backend bucket for the website with CDN enabled and create a managed SSL certificate for HTTPS access. Set up an HTTP proxy and configure a global forwarding rule for routing traffic to the backend."}, {"role": "assistant", "content": "\n#File: main.tf\n#Bucket\n\nresource \"google_storage_bucket\" \"website\" {\n    name = \"infratf-bucket-1\"\n    location = \"US\"\n}\n\n#make new object public\nresource \"google_storage_object_access_control\" \"public_rule\" {\n    object = google_storage_bucket_object.static_site_src.name\n    bucket = google_storage_bucket.website.name\n    role = \"READER\"\n    entity = \"allUsers\"\n\n}\n\n#Upload index.html to bucket\nresource \"google_storage_bucket_object\" \"static_site_src\" {\n    name = \"index.html\"\n    source = \"../website/index.html\"\n    bucket = google_storage_bucket.website.name\n}\n\n# Reserve a static external IP address\nresource \"google_compute_global_address\" \"website_ip\" {\n    name = \"website-lb-ip\"\n}\n\n#Get the managed DNS Zone\ndata \"google_dns_managed_zone\" \"dns_zone\" {\n    name = \"infratf\"\n}\n\n#Add the IP to the DNS\nresource \"google_dns_record_set\" \"website\"{\n\n    name = \"website.${data.google_dns_managed_zone.dns_zone.dns_name}\"\n    type = \"A\"\n    ttl = 300\n    managed_zone = data.google_dns_managed_zone.dns_zone.name\n    rrdatas = [google_compute_global_address.website_ip.address]\n}\n\n#Add the bucket as a CDN backend\nresource \"google_compute_backend_bucket\" \"website-backend\" {\n    name = \"website-bucket\"\n    bucket_name = google_storage_bucket.website.name\n    description = \"website files...\"\n    enable_cdn = true\n}\n\n# Create HTTPS certificate\nresource \"google_compute_managed_ssl_certificate\" \"website\" {\n  provider = google-beta\n  name     = \"website-cert\"\n  managed {\n    domains = [google_dns_record_set.website.name]\n  }\n}\n\n#GCP URL MAP\nresource \"google_compute_url_map\" \"website\" {\n    name = \"website-url-map\"\n    default_service = google_compute_backend_bucket.website-backend.self_link\n    host_rule {\n      hosts = [\"*\"]\n      path_matcher = \"allpaths\"\n    }\n    path_matcher {\n      name = \"allpaths\"\n      default_service = google_compute_backend_bucket.website-backend.self_link\n    }\n}\n\n#GCP HTTP Proxy\n\nresource \"google_compute_target_http_proxy\" \"website\" {\n    name = \"website-target-proxy\"\n    url_map = google_compute_url_map.website.self_link\n  \n}\n\n#GCP forwarding rule\nresource \"google_compute_global_forwarding_rule\" \"default\" {\n    name = \"website-forwarding-rule\"\n    load_balancing_scheme = \"EXTERNAL\"\n    ip_address = google_compute_global_address.website_ip.address\n    ip_protocol = \"TCP\"\n    port_range = \"80\"\n    target = google_compute_target_http_proxy.website.self_link\n}\n#File: provider.tf\n#GCP Provider\n\nprovider \"google\" {\n    credentials = file(var.gcp_svc_key)\n    project = var.gcp_project\n    region = var.gcp_region\n}\n\n# GCP beta provider\nprovider \"google-beta\" {\n  credentials  = file(var.gcp_svc_key)\n  project      = var.gcp_project\n  region       = var.gcp_region\n}\n\n#File: variables.tf\nvariable \"gcp_svc_key\" {\n\n}\n\nvariable \"gcp_project\" {\n\n}\n\nvariable \"gcp_region\" {\n\n}"}]}
{"messages": [{"role": "user", "content": "Create a Google Cloud provider configuration using specified project and region. Define a VPC network named \"terraform-network.\" Launch a Google Compute Engine VM instance called \"terraform-instance\" with an f1-micro machine type and specified boot disk image. Connect the VM instance to the VPC network you created earlier. Output the internal IP address of the VM instance."}, {"role": "assistant", "content": "\n#File: main.tf\nterraform {\n  required_providers {\n    google = {\n      source  = \"hashicorp/google\"\n      version = \"4.51.0\"\n    }\n  }\n}\n\nprovider \"google\" {\n  credentials = file(var.credentials_file)\n\n  project = var.project\n  region  = var.region\n  zone    = var.zone\n}\n\nresource \"google_compute_network\" \"vpc_network\" {\n  name = \"terraform-network\"\n}\n\nresource \"google_compute_instance\" \"vm_instance\" {\n  name         = \"terraform-instance\"\n  machine_type = \"f1-micro\"\n  tags         = [\"web\", \"dev\"]\n\n  boot_disk {\n    initialize_params {\n      image = \"cos-cloud/cos-stable\"\n    }\n  }\n\n  network_interface {\n    network = google_compute_network.vpc_network.name\n    access_config {\n    }\n  }\n}\n\n#File: outputs.tf\noutput \"ip\" {\n  value = google_compute_instance.vm_instance.network_interface.0.network_ip\n}\n#File: variables.tf\nvariable \"project\" {}\n\nvariable \"credentials_file\" {}\n\nvariable \"region\" {\n  default = \"us-central1\"\n}\n\nvariable \"zone\" {\n  default = \"us-central1-c\"\n}"}]}
{"messages": [{"role": "user", "content": "Create a Google Cloud provider configuration for the region 'northamerica-northeast1' and zone 'northamerica-northeast1-c'. Create a custom VPC network named 'tf-trial-net' without auto-generating subnetworks. Create a subnetwork within that VPC named 'tf-trial-subnet' using the CIDR range '10.0.0.0/24'. Assign the subnetwork to the previously created network. Ensure that the naming convention utilizes the local variable 'name_suffix'."}, {"role": "assistant", "content": "\n#File: main.tf\nresource \"google_compute_subnetwork\" \"my-subnet\" {\n  name          = \"${local.name_suffix}-subnet\"\n  ip_cidr_range = \"10.0.0.0/24\"\n  region        = \"northamerica-northeast1\"\n  network       = google_compute_network.my-net.id\n}\n\nresource \"google_compute_network\" \"my-net\" {\n  name                    = \"${local.name_suffix}-net\"\n  auto_create_subnetworks = false\n}\n#File: variables.tf\nlocals {\n  name_suffix = \"tf-trial\"\n}\n\nprovider \"google\" {\n  region = \"northamerica-northeast1\"\n  zone   = \"northamerica-northeast1-c\"\n}\n"}]}
{"messages": [{"role": "user", "content": "Create a Google Cloud provider configuration for the region \"australia-southeast1\" and zone \"australia-southeast1-a\". Build a Google Compute network named \"nginx-nodes.\" Configure a Google Compute firewall rule to allow HTTP traffic on port 80 for instances tagged with \"nginx-node.\" Launch a Google Compute instance named \"nginx-node\" with the machine type \"n1-standard-2,\" and set up a startup script to install Docker and run an Nginx container, while also logging metrics. Output the public address of the deployed instance."}, {"role": "assistant", "content": "\n#File: _provider.tf\nprovider \"google\" {\n  region = \"australia-southeast1\"\n  zone   = \"australia-southeast1-a\"\n}\n\n#File: main.tf\nresource \"google_compute_firewall\" \"allow-http-nginx-node\" {\n  name    = \"allow-http-nginx-node\"\n  network = \"${google_compute_network.nginx-nodes.name}\"\n\n  allow {\n    protocol = \"tcp\"\n    ports    = [\"80\"]\n  }\n  target_tags = [\"nginx-node\"]\n}\n\nresource \"google_compute_network\" \"nginx-nodes\" {\n  name = \"nginx-nodes\"\n}\n\nresource \"google_compute_instance\" \"nginx-node\" {\n  name         = \"nginx-node\"\n  machine_type = \"n1-standard-2\"\n  tags         = [\"nginx-node\"]\n  boot_disk {\n    initialize_params {\n      image = \"debian-cloud/debian-9\"\n    }\n  }\n  # run bootstrap and installer script when machine is started will carry out the following actions\n  # 1. upgrade operating system with latest packages\n  # 2. install dependencies for docker-de install\n  # 3. install docker-de\n  # 4. start a default nginx container and expose on port 80\n  # 5. count the frequency of words in the default index.html\n  # 6. inject a custom index.html which contains the highest occuring word and count\n  # 7. uses systemd to run a basic metric collection command which logs to /var/log/nginx-metrics.log every 10seconds in csv \n  #    format. could then be ingested by more \"production-grade\" monitoring/logging solutions\n  metadata_startup_script = <<SCRIPT\nsudo apt-get -y update\nsudo apt-get -y upgrade\nsudo apt-get -y install \\\n    apt-transport-https \\\n    ca-certificates \\\n    curl \\\n    gnupg2 \\\n    software-properties-common\ncurl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add -\nsudo add-apt-repository \\\n   \"deb [arch=amd64] https://download.docker.com/linux/debian \\\n   $(lsb_release -cs) \\\n   stable\"\nsudo apt-get -y update\nsudo apt-get install -y docker-ce docker-ce-cli containerd.io\nsudo systemctl enable docker\nsudo systemctl start docker\nwhile (! sudo docker stats --no-stream ); do\n  echo \"Waiting for Docker to launch...\"\n  sleep 1\ndone\nsleep 30\nsudo docker run -d --name nginx -p 80:80 nginx  \nwhile [ $(curl -sL -o /dev/null -w \"%%{http_code}\" http://localhost) != \"200\" ]; do printf \".\"; sleep 5; done\nmkdir -p html\necho $(curl localhost | sed -e 's/[^[:alpha:]]/ /g' | tr '\\n' \" \" |  tr -s \" \" | tr \" \" '\\n'| tr 'A-Z' 'a-z' | sort | uniq -c | sort -nr | nl | head -1 | awk '{print $3,$2}') > html/index.html\nsudo docker rm -f nginx\nsudo docker run -d --name nginx -v $pwd/html:/usr/share/nginx/html -p 80:80 nginx \n\ncat << EOF > /etc/systemd/system/docker-metrics.service\n[Unit]\nDescription=Log Metrics\n[Service]\nRestart=always\nRestartSec=10s\nExecStart=/bin/bash -c '/usr/bin/docker stats nginx --no-stream --format {{.MemPerc}},{{.CPUPerc}},{{.MemUsage}},{{.Name}} >> /var/log/nginx-metrics.log 2>&1'\n[Install]\nWantedBy=multi-user.target\nEOF\nsystemctl enable docker-metrics\nsystemctl start docker-metrics\nSCRIPT\n\n  network_interface {\n    # A default network is created for all GCP projects\n    network = \"${google_compute_network.nginx-nodes.name}\"\n    access_config {\n    }\n  }\n}\n#File: outputs.tf\noutput \"public_address\" {\n  value       = \"${google_compute_instance.nginx-node.network_interface[0].access_config[0].nat_ip}\"\n  description = \"Public address the deployed instance is available on\"\n  sensitive   = false\n}\n"}]}
{"messages": [{"role":"user","content":"Create a public S3 bucket configured for static website hosting, including routing rules and a custom bucket policy to allow public read access. Provide an IAM user named gabe with permissions to read from and write to the bucket"},{"role":"assistant","content":"provider \"aws\"{\r\n  \r\n}\r\n\r\nvariable \"acctid\" {\r\n  description = \"The AWS Account ID for which this is meant to be deployed to\"\r\n  type        = string\r\n}\r\n\r\nresource \"aws_s3_bucket\" \"website\" {\r\n  bucket = \"tktk-service-website\"\r\n\r\n  tags = {\r\n    component = \"website\"\r\n  }\r\n}\r\n\r\nresource \"aws_s3_bucket_website_configuration\" \"website_config\" {\r\n  bucket = aws_s3_bucket.website.id\r\n\r\n  index_document {\r\n    suffix = \"index.html\"\r\n  }\r\n\r\n  error_document {\r\n    key = \"error.html\"\r\n  }\r\n\r\n  routing_rule {\r\n    condition {\r\n      key_prefix_equals = \"src/\"\r\n    }\r\n\r\n    redirect {\r\n      replace_key_prefix_with = \"source/\"\r\n    }\r\n  }\r\n}\r\n\r\nresource \"aws_s3_bucket_policy\" \"public_read_policy\" {\r\n  bucket = aws_s3_bucket.website.id\r\n\r\n  policy = jsonencode({\r\n    Statement = [\r\n      {\r\n        Sid       = \"PublicReadGetObject\"\r\n        Effect    = \"Allow\"\r\n        Principal = \"*\"\r\n        Action    = \"s3:GetObject\"\r\n        Resource  = \"arn:aws:s3:::${aws_s3_bucket.website.bucket}/*\"\r\n      }\r\n    ]\r\n  })\r\n}\r\n\r\nresource \"aws_iam_user\" \"website_user_gabe\" {\r\n  name = \"gabe\"\r\n  tags = {\r\n    dept      = \"developers\"\r\n    component = \"website\"\r\n  }\r\n}\r\n\r\nresource \"aws_iam_user_policy\" \"gabe_readonly_policy\" {\r\n  name = \"website-readonly\"\r\n  user = aws_iam_user.website_user_gabe.name\r\n\r\n  policy = jsonencode({\r\n    Version = \"2012-10-17\"\r\n    Statement = [\r\n      {\r\n        Effect   = \"Allow\"\r\n        Action   = [\"s3:GetObject\"]\r\n        Resource = \"arn:aws:s3:::${aws_s3_bucket.website.bucket}/*\"\r\n      }\r\n    ]\r\n  })\r\n}\r\n"}]}
{"messages": [{"role":"user","content":"Define two AWS providers with different profiles and the same region, representing a source and a destination AWS account. It retrieves the source account's identity and the AmazonEC2FullAccess policy from the destination account, then creates an IAM role in the destination account. This role’s assume role policy allows the source account’s root user to assume the role with permissions to fully manage EC2 resources in the destination account"},{"role":"assistant","content":"provider \"aws\" {\r\n  alias   = \"source\"\r\n  profile = \"source\"\r\n  region  = \"us-east-2\"\r\n}\r\n\r\nprovider \"aws\" {\r\n  alias   = \"destination\"\r\n  profile = \"destination\"\r\n  region  = \"us-east-2\"\r\n}\r\n\r\ndata \"aws_caller_identity\" \"source\" {\r\n  provider = aws.source\r\n}\r\n\r\ndata \"aws_iam_policy\" \"ec2\" {\r\n  provider = aws.destination\r\n  name     = \"AmazonEC2FullAccess\"\r\n}\r\n\r\ndata \"aws_iam_policy_document\" \"assume_role\" {\r\n  provider = aws.destination\r\n  statement {\r\n    actions = [\r\n      \"sts:AssumeRole\",\r\n      \"sts:TagSession\",\r\n      \"sts:SetSourceIdentity\"\r\n    ]\r\n    principals {\r\n      type        = \"AWS\"\r\n      identifiers = [\"arn:aws:iam::${data.aws_caller_identity.source.account_id}:root\"]\r\n    }\r\n  }\r\n}\r\n\r\nresource \"aws_iam_role\" \"assume_role\" {\r\n  provider            = aws.destination\r\n  name                = \"assume_role\"\r\n  assume_role_policy  = data.aws_iam_policy_document.assume_role.json\r\n  managed_policy_arns = [data.aws_iam_policy.ec2.arn]\r\n  tags                = {}\r\n}\r\n\r\n"}]}
{"messages": [{"role": "user", "content": "Create a Google Kubernetes Engine (GKE) cluster using the provided project ID and region. Define a default node pool with one initial node and immediately remove it to manage node pools separately. Set up a separate node pool with a specified number of nodes based on the input variable. Configure the node pool with defined OAuth scopes, labels, machine type, and metadata. Output the cluster details, including the region, project ID, cluster name, and cluster host."}, {"role": "assistant", "content": "\n#File: gke.tf\nvariable \"gke_num_nodes\" {\n  default     = 2\n  description = \"number of gke nodes\"\n}\n\n# GKE cluster\nresource \"google_container_cluster\" \"primary\" {\n  name     = \"${var.project_id}-gke\"\n  location = var.region\n  \n  # We can't create a cluster with no node pool defined, but we want to only use\n  # separately managed node pools. So we create the smallest possible default\n  # node pool and immediately delete it.\n  remove_default_node_pool = true\n  initial_node_count       = 1\n\n  network    = google_compute_network.vpc.name\n  subnetwork = google_compute_subnetwork.subnet.name\n}\n\n# Separately Managed Node Pool\nresource \"google_container_node_pool\" \"primary_nodes\" {\n  name       = \"${google_container_cluster.primary.name}-node-pool\"\n  location   = var.region\n  cluster    = google_container_cluster.primary.name\n  node_count = var.gke_num_nodes\n\n  node_config {\n    oauth_scopes = [\n      \"https://www.googleapis.com/auth/logging.write\",\n      \"https://www.googleapis.com/auth/monitoring\",\n    ]\n\n    labels = {\n      env = var.project_id\n    }\n\n    # preemptible  = true\n    machine_type = \"e2-medium\"\n    tags         = [\"gke-node\", \"${var.project_id}-gke\"]\n    metadata = {\n      disable-legacy-endpoints = \"true\"\n    }\n  }\n}\n\n#File: outputs.tf\noutput \"region\" {\n  value       = var.region\n  description = \"GCloud Region\"\n}\n\noutput \"project_id\" {\n  value       = var.project_id\n  description = \"GCloud Project ID\"\n}\n\noutput \"kubernetes_cluster_name\" {\n  value       = google_container_cluster.primary.name\n  description = \"GKE Cluster Name\"\n}\n\noutput \"kubernetes_cluster_host\" {\n  value       = google_container_cluster.primary.endpoint\n  description = \"GKE Cluster Host\"\n}\n\n#File: versions.tf\nterraform {\n  required_providers {\n    google = {\n      source  = \"hashicorp/google\"\n      version = \"3.52.0\"\n    }\n  }\n\n  required_version = \">= 0.14\"\n}\n\n\n#File: vpc.tf\nvariable \"project_id\" {\n  description = \"project id\"\n}\n\nvariable \"region\" {\n  description = \"region\"\n}\n\nprovider \"google\" {\n  project = var.project_id\n  region  = var.region\n}\n\n# VPC\nresource \"google_compute_network\" \"vpc\" {\n  name                    = \"${var.project_id}-vpc\"\n  auto_create_subnetworks = \"false\"\n}\n\n# Subnet\nresource \"google_compute_subnetwork\" \"subnet\" {\n  name          = \"${var.project_id}-subnet\"\n  region        = var.region\n  network       = google_compute_network.vpc.name\n  ip_cidr_range = \"10.10.0.0/24\"\n}\n"}]}
{"messages": [{"role": "user", "content": "Create an Azure resource group named \"kubernetes-rg\" in \"Central India\" with appropriate tags. Set up a virtual network called \"kubernetes-vnet\" within the resource group and specify address space based on the environment. Create four subnets under the virtual network designated for bastion hosts and AKS nodes. Configure a network security group named \"kubernetes-bastion-nsg\" with SSH access rules. Finally, deploy an Azure Kubernetes Service cluster named \"kubernetes-aks-ct\" with a defined node pool configuration."}, {"role": "assistant", "content": "\n#File: main.tf\nprovider \"azurerm\" {\n  subscription_id = var.subscription_id\n  resource_provider_registrations = \"none\"\n  features {}\n}\n\nresource \"azurerm_resource_group\" \"kubernetes_rg\" {\n  name = \"kubernetes-rg\"\n  location = \"Central India\"\n  tags = {\n    Name = \"kubernetes-rg\"\n    Environment = var.environment\n    Stack = \"kubernetes\"\n    Region = \"centralindia\"\n    Organization = \"sloopstash\"\n  }\n}\nresource \"azurerm_virtual_network\" \"kubernetes_vnet\" {\n  depends_on = [azurerm_resource_group.kubernetes_rg]\n  name = \"kubernetes-vnet\"\n  resource_group_name = azurerm_resource_group.kubernetes_rg.name\n  location = azurerm_resource_group.kubernetes_rg.location\n  address_space = [var.environment == \"prd\" ? \"11.11.0.0/16\" : \"12.11.0.0/16\"]\n  encryption {\n    enforcement = \"AllowUnencrypted\"\n  }\n  tags = {\n    Name = \"kubernetes-vnet\"\n    Environment = var.environment\n    Stack = \"kubernetes\"\n    Region = \"centralindia\"\n    Organization = \"sloopstash\"\n  }\n}\nresource \"azurerm_subnet\" \"kubernetes_vnet_bastion_sn_1\" {\n  depends_on = [\n    azurerm_resource_group.kubernetes_rg,\n    azurerm_virtual_network.kubernetes_vnet\n  ]\n  name = \"kubernetes-vnet-bastion-sn-1\"\n  resource_group_name = azurerm_resource_group.kubernetes_rg.name\n  virtual_network_name = azurerm_virtual_network.kubernetes_vnet.name\n  address_prefixes = [var.environment == \"prd\" ? \"11.11.1.0/24\" : \"12.11.1.0/24\"]\n}\nresource \"azurerm_subnet\" \"kubernetes_vnet_bastion_sn_2\" {\n  depends_on = [\n    azurerm_resource_group.kubernetes_rg,\n    azurerm_virtual_network.kubernetes_vnet\n  ]\n  name = \"kubernetes-vnet-bastion-sn-2\"\n  resource_group_name = azurerm_resource_group.kubernetes_rg.name\n  virtual_network_name = azurerm_virtual_network.kubernetes_vnet.name\n  address_prefixes = [var.environment == \"prd\" ? \"11.11.2.0/24\" : \"12.11.2.0/24\"]\n}\nresource \"azurerm_subnet\" \"kubernetes_vnet_aks_nd_sn_1\" {\n  depends_on = [\n    azurerm_resource_group.kubernetes_rg,\n    azurerm_virtual_network.kubernetes_vnet\n  ]\n  name = \"kubernetes-vnet-aks-nd-sn-1\"\n  resource_group_name = azurerm_resource_group.kubernetes_rg.name\n  virtual_network_name = azurerm_virtual_network.kubernetes_vnet.name\n  address_prefixes = [var.environment == \"prd\" ? \"11.11.9.0/24\" : \"12.11.9.0/24\"]\n}\nresource \"azurerm_subnet\" \"kubernetes_vnet_aks_nd_sn_2\" {\n  depends_on = [\n    azurerm_resource_group.kubernetes_rg,\n    azurerm_virtual_network.kubernetes_vnet\n  ]\n  name = \"kubernetes-vnet-aks-nd-sn-2\"\n  resource_group_name = azurerm_resource_group.kubernetes_rg.name\n  virtual_network_name = azurerm_virtual_network.kubernetes_vnet.name\n  address_prefixes = [var.environment == \"prd\" ? \"11.11.10.0/24\" : \"12.11.10.0/24\"]\n}\nresource \"azurerm_network_security_group\" \"kubernetes_bastion_nsg\" {\n  depends_on = [azurerm_resource_group.kubernetes_rg]\n  name = \"kubernetes-bastion-nsg\"\n  resource_group_name = azurerm_resource_group.kubernetes_rg.name\n  location = azurerm_resource_group.kubernetes_rg.location\n  security_rule {\n    name = \"AllowAnySSHInbound\"\n    direction = \"Inbound\"\n    access = \"Allow\"\n    priority = 110\n    protocol = \"Tcp\"\n    source_address_prefix = \"*\"\n    source_port_range = \"*\"\n    destination_address_prefix = \"*\"\n    destination_port_range = 22\n  }\n  tags = {\n    Name = \"kubernetes-bastion-nsg\"\n    Environment = var.environment\n    Stack = \"kubernetes\"\n    Region = \"centralindia\"\n    Organization = \"sloopstash\"\n  }\n}\nresource \"azurerm_kubernetes_cluster\" \"kubernetes_aks_ct\" {\n  depends_on = [\n    azurerm_resource_group.kubernetes_rg,\n    azurerm_subnet.kubernetes_vnet_aks_nd_sn_1,\n    azurerm_subnet.kubernetes_vnet_aks_nd_sn_2\n  ]\n  name = \"kubernetes-aks-ct\"\n  resource_group_name = azurerm_resource_group.kubernetes_rg.name\n  location = azurerm_resource_group.kubernetes_rg.location\n  kubernetes_version = \"1.28.15\"\n  sku_tier = \"Free\"\n  identity {\n    type = \"SystemAssigned\"\n  }\n  open_service_mesh_enabled = false\n  private_cluster_enabled = false\n  dns_prefix = \"kubernetes-aks-ct-api-endpoint\"\n  api_server_access_profile {\n    authorized_ip_ranges = [\"0.0.0.0/0\"]\n  }\n  network_profile {\n    network_plugin = \"kubenet\"\n    network_policy = \"calico\"\n    ip_versions = [\"IPv4\"]\n    load_balancer_sku = \"standard\"\n  }\n  node_resource_group = \"kubernetes-aks-ct-rg\"\n  default_node_pool {\n    name = \"nodepool1\"\n    vm_size = \"Standard_D2as_v4\"\n    type = \"VirtualMachineScaleSets\"\n    os_sku = \"AzureLinux\"\n    vnet_subnet_id = azurerm_subnet.kubernetes_vnet_aks_nd_sn_1.id\n    node_public_ip_enabled = false\n    ultra_ssd_enabled = false\n    host_encryption_enabled = false\n    orchestrator_version = \"1.28.15\"\n    workload_runtime = \"OCIContainer\"\n    auto_scaling_enabled = true\n    max_count = 1\n    min_count = 1\n    node_count = 1\n    max_pods = 50\n  }\n  automatic_upgrade_channel = \"patch\"\n  node_os_upgrade_channel = \"NodeImage\"\n  maintenance_window {\n    allowed {\n      day = \"Sunday\"\n      hours = [1,2]\n    }\n  }\n  role_based_access_control_enabled = true\n  azure_policy_enabled = false\n  image_cleaner_enabled = false\n  oidc_issuer_enabled = false\n  run_command_enabled = true\n  tags = {\n    Name = \"kubernetes-aks-ct\"\n    Environment = var.environment\n    Stack = \"kubernetes\"\n    Region = \"centralindia\"\n    Organization = \"sloopstash\"\n  }\n}\n\n#File: outputs.tf\noutput \"kubernetes_eks_ct_fqdn\" {\n  depends_on = [azurerm_kubernetes_cluster.kubernetes_aks_ct]\n  value = azurerm_kubernetes_cluster.kubernetes_aks_ct.fqdn\n}\n\n#File: variables.tf\nvariable \"environment\" {\n  type = string\n  description = \"Environment.\"\n}\nvariable \"ssh_public_key\" {\n  type = string\n  description = \"SSH public key.\"\n}\nvariable \"subscription_id\" {\n  type = string\n  description = \"Subscription identifier.\"\n}\n"}]}
{"messages": [{"role":"user","content":"Create an AWS Cognito user pool with custom password policies and email-based username attributes, alongside a Cognito user pool client. It provisions a KMS key for encrypting Lambda trigger data and deploys a Node.js Lambda function that integrates with Cognito for custom email sending, using the SendGrid API key stored securely as a sensitive variable. Finally, update the Cognito user pool configuration to link the Lambda function and KMS key via a local-exec provisioner that runs an AWS CLI command with a JSON config file"},{"role":"assistant","content":"variable sendgrid_api_key {\r\n  type = string\r\n  sensitive = true\r\n}\r\n\r\nvariable project {\r\n    type = string\r\n}\r\n\r\nvariable region {\r\n    type = string\r\n    default = \"us-east-1\"\r\n}\r\n\r\nvariable update_user_pool_config_file {\r\n    type = string\r\n}\r\n\r\n\r\nprovider \"aws\" {\r\n}\r\n\r\nprovider \"archive\" {}\r\n\r\ndata \"aws_caller_identity\" \"current\" {}\r\n\r\nresource \"aws_cognito_user_pool\" \"cognito_user_pool\" {\r\n  name = \"${var.project}-cognito-user-pool\"\r\n  \r\n  account_recovery_setting {\r\n    recovery_mechanism {\r\n      name     = \"verified_email\"\r\n      priority = 1\r\n    }\r\n  }\r\n\r\n  auto_verified_attributes = [\"email\"]\r\n  \r\n  password_policy {\r\n    minimum_length = 10\r\n    temporary_password_validity_days = 7\r\n    require_lowercase = false\r\n    require_numbers                  = false\r\n    require_symbols                  = false\r\n    require_uppercase                = false\r\n  }\r\n\r\n  schema {\r\n    attribute_data_type = \"String\"\r\n    developer_only_attribute = false\r\n    mutable             = true\r\n    name                = \"email\"\r\n    required            = true\r\n    \r\n    string_attribute_constraints {\r\n              max_length = \"2048\"\r\n              min_length = \"0\"\r\n            }\r\n  }\r\n  \r\n  schema {\r\n    attribute_data_type = \"String\"\r\n    developer_only_attribute = false\r\n        mutable             = true\r\n    name                = \"name\"\r\n    required            = true\r\n\r\n    string_attribute_constraints {\r\n              max_length = \"2048\"\r\n              min_length = \"0\"\r\n            }\r\n  }\r\n\r\n  username_attributes = [\"email\"]\r\n  username_configuration {\r\n    case_sensitive = false\r\n  }\r\n}\r\n\r\nresource \"aws_cognito_user_pool_client\" \"cognito_user_pool_client\" {\r\n  user_pool_id = aws_cognito_user_pool.cognito_user_pool.id\r\n  name = \"${var.project}-cognito-user-pool-client\"\r\n\r\n  generate_secret = false\r\n  prevent_user_existence_errors = \"ENABLED\"\r\n  supported_identity_providers = [\"COGNITO\"]\r\n}\r\n\r\nresource \"aws_kms_key\" \"kms_key\" {\r\n  description             = \"KMS key for Cognito Lambda trigger\"\r\n  policy = <<EOF\r\n{\r\n    \"Statement\": [\r\n        {\r\n            \"Effect\": \"Allow\",\r\n            \"Principal\": {\r\n                \"AWS\": \"arn:aws:iam::${data.aws_caller_identity.current.account_id}:root\"\r\n            },\r\n            \"Action\": \"kms:*\",\r\n            \"Resource\": \"*\"\r\n        },\r\n        {\r\n            \"Effect\": \"Allow\",\r\n            \"Principal\": {\r\n                \"AWS\": \"${data.aws_caller_identity.current.arn}\"\r\n            },\r\n            \"Action\": [\r\n                \"kms:Create*\",\r\n                \"kms:Describe*\",\r\n                \"kms:Enable*\",\r\n                \"kms:List*\",\r\n                \"kms:Put*\",\r\n                \"kms:Update*\",\r\n                \"kms:Revoke*\",\r\n                \"kms:Disable*\",\r\n                \"kms:Get*\",\r\n                \"kms:Delete*\",\r\n                \"kms:TagResource\",\r\n                \"kms:UntagResource\",\r\n                \"kms:ScheduleKeyDeletion\",\r\n                \"kms:CancelKeyDeletion\"\r\n            ],\r\n            \"Resource\": \"*\"\r\n        }\r\n    ]\r\n}\r\nEOF\r\n}\r\n\r\ndata \"aws_iam_policy_document\" \"AWSLambdaTrustPolicy\" {\r\n  statement {\r\n    actions    = [\"sts:AssumeRole\"]\r\n    effect     = \"Allow\"\r\n    principals {\r\n      type        = \"Service\"\r\n      identifiers = [\"lambda.amazonaws.com\"]\r\n    }\r\n  }\r\n}\r\n\r\nresource \"aws_iam_role\" \"iam_role\" {\r\n  assume_role_policy = data.aws_iam_policy_document.AWSLambdaTrustPolicy.json\r\n  name = \"${var.project}-iam-role-lambda-trigger\"\r\n}\r\n\r\nresource \"aws_iam_role_policy_attachment\" \"iam_role_policy_attachment_lambda_basic_execution\" {\r\n  role       = aws_iam_role.iam_role.name\r\n  policy_arn = \"arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole\"\r\n}\r\n\r\ndata \"aws_iam_policy_document\" \"iam_policy_document_lambda_kms\" {\r\n  statement {\r\n    actions    = [\"kms:Decrypt\"]\r\n    effect     = \"Allow\"\r\n    resources = [\r\n        aws_kms_key.kms_key.arn\r\n    ]\r\n  }\r\n}\r\n\r\nresource \"aws_iam_role_policy\" \"iam_role_policy_lambda_kms\" {\r\n  name = \"${var.project}-iam-role-policy-lambda-kms\"\r\n  role       = aws_iam_role.iam_role.name\r\n  policy = data.aws_iam_policy_document.iam_policy_document_lambda_kms.json\r\n}\r\n\r\ndata \"archive_file\" \"lambda\" {\r\n  type        = \"zip\"\r\n  source_dir  = \"../lambda\"\r\n  output_path = \"lambda.zip\"\r\n}\r\n\r\nresource \"aws_lambda_function\" \"lambda_function_trigger\" {\r\n  environment {\r\n    variables = {\r\n      KEY_ID = aws_kms_key.kms_key.arn\r\n      SENDGRID_API_KEY = var.sendgrid_api_key\r\n    }\r\n  }\r\n  code_signing_config_arn = \"\"\r\n  description = \"\"\r\n  filename         = data.archive_file.lambda.output_path\r\n  function_name    = \"${var.project}-lambda-function-trigger\"\r\n  role             = aws_iam_role.iam_role.arn\r\n  handler          = \"index.handler\"\r\n  runtime          = \"nodejs12.x\"\r\n  source_code_hash = filebase64sha256(data.archive_file.lambda.output_path)\r\n}\r\n\r\nresource \"aws_lambda_permission\" \"lambda_permission_cognito\" {\r\n  action        = \"lambda:InvokeFunction\"\r\n  function_name = aws_lambda_function.lambda_function_trigger.function_name\r\n  principal     = \"cognito-idp.amazonaws.com\"\r\n  source_arn = aws_cognito_user_pool.cognito_user_pool.arn\r\n}\r\n\r\nlocals {\r\n    update_user_pool_command = \"aws cognito-idp update-user-pool --user-pool-id ${aws_cognito_user_pool.cognito_user_pool.id} --cli-input-json file://${var.update_user_pool_config_file} --lambda-config \\\"CustomEmailSender={LambdaVersion=V1_0,LambdaArn=${aws_lambda_function.lambda_function_trigger.arn}},KMSKeyID=${aws_kms_key.kms_key.arn}\\\"\"\r\n}\r\n\r\nresource \"null_resource\" \"cognito_user_pool_lambda_config\" {\r\n  provisioner \"local-exec\" {\r\n    command = local.update_user_pool_command\r\n  }\r\n  depends_on = [local.update_user_pool_command]\r\n  triggers = {\r\n    input_json = filemd5(var.update_user_pool_config_file)\r\n    update_user_pool_command = local.update_user_pool_command\r\n  }\r\n}\r\n"}]}
{"messages": [{"role": "user", "content": "Create a Google Cloud provider configuration with specified credentials and project details. Establish a VPC network named \"terraform-network\". Allocate a static IP with the name \"www-static-ip\". Set up firewall rules to allow SSH, HTTP, and MySQL traffic based on appropriate tags. Spin up two Google Compute Engine instances: one for a MySQL database and another for a web server, each configured with the necessary boot disk and SSH keys."}, {"role": "assistant", "content": "\n#File: main.tf\nprovider \"google\" {\n  credentials = file(var.credentials_file)\n  project = var.project\n  region  = \"us-central1\"\n  zone    = \"us-central1-c\"\n}\n\nresource \"google_compute_network\" \"vpc_network\" {\n  name = \"terraform-network\"\n}\n\nresource \"google_compute_address\" \"vm_static_ip\" {\n  name = \"www-static-ip\"\n}\n\nresource \"google_compute_firewall\" \"allow-ssh\" {\n  name    = \"ssh-firewall\"\n  network =  \"terraform-network\"\n  depends_on = [\"google_compute_network.vpc_network\"]\n\n  allow {\n    protocol = \"tcp\"\n    ports    = [\"22\"]\n  }\n    allow {\n    protocol = \"icmp\"\n  }\n}\n\nresource \"google_compute_firewall\" \"allow-www\" {\n  name    = \"www-firewall\"\n  network =  \"terraform-network\"\n  depends_on = [\"google_compute_network.vpc_network\"]\n\n  target_tags = [\"web\"]\n\n  allow {\n    protocol = \"tcp\"\n    ports    = [\"80\"]\n  }\n}\n\nresource \"google_compute_firewall\" \"allow-mysql\" {\n  name    = \"mysql-firewall\"\n  network =  \"terraform-network\"\n  depends_on = [\"google_compute_network.vpc_network\"]\n\n  target_tags = [\"mysql\"]\n\n  allow {\n    protocol = \"tcp\"\n    ports    = [\"3306\"]\n  }\n}\n\n\n\n#File: outputs.tf\n\noutput \"ip_static\" {\n  value = google_compute_address.vm_static_ip.address\n}\noutput \"ip_www\" {\n  value = google_compute_instance.vm_www.network_interface.0.access_config.0.nat_ip\n}\n\noutput \"ip_db\" {\n  value = google_compute_instance.vm_db.network_interface.0.access_config.0.nat_ip\n}\n\n#File: variables.tf\nvariable \"project\" {\n  default     = \"teraform-start\"\n}\nvariable \"credentials_file\" { \n  default     = \"./.ssh/teraform-start-8d9cc76eff88.json\"\n}\n\nvariable \"public_key_path\" {\n  description = \"Path to the ssh public key of user TERR\"\n  default     = \"./.ssh/terr_pub\"\n}\n\nvariable \"private_key_path\" {\n  description = \"Path to the ssh private key of user TERR\"\n  default     = \"./.ssh/terr_priv\"\n}\n\n#File: vm_db.tf\n\nresource \"google_compute_instance\" \"vm_db\" {\n  name         = \"vm-db-mysql\"\n  machine_type = \"f1-micro\"\n  tags         = [\"mysql\"]\n  depends_on = [\"google_compute_network.vpc_network\"]\n\n  metadata = {\n   ssh-keys = \"terr:${file(var.public_key_path)}\"\n  }\n  boot_disk {\n    initialize_params {\n      image = \"centos-7-v20191014\"\n    }\n  }\n  network_interface {\n    network = google_compute_network.vpc_network.self_link\n    access_config {\n    }\n  }\n  provisioner \"local-exec\" {\n    command = \"echo ${google_compute_instance.vm_db.name}:  ${google_compute_instance.vm_db.network_interface[0].access_config[0].nat_ip} >> ip_address.txt\"\n  }\n}\nresource \"null_resource\" \"prov_db\" {\n  depends_on = [\"google_compute_instance.vm_db\"]\n  connection {\n      type = \"ssh\"\n      user = \"terr\"\n      host =  \"${google_compute_instance.vm_db.network_interface.0.access_config.0.nat_ip}\"\n      private_key = \"${file(var.private_key_path)}\"\n      agent = false   \n  } \n  provisioner \"file\" {\n    source      = \"scenario_db.sh\"\n    destination = \"~/scenario_db.sh\"\n  }\n  provisioner \"remote-exec\" {\n    inline = [\n      \"chmod +x ~/scenario_db.sh\",\n      \"sudo -E ~/scenario_db.sh\",\n    ]\n  }\n}\n\n\n#File: vm_www.tf\nresource \"google_compute_instance\" \"vm_www\" {\n  name         = \"vm-www\"\n  machine_type = \"f1-micro\"\n  tags         = [\"web\", \"wordpress\"]\n  depends_on = [\"google_compute_address.vm_static_ip\", \"google_compute_network.vpc_network\"]\n\n  metadata = {\n   ssh-keys = \"terr:${file(var.public_key_path)}\"\n  }\n  boot_disk {\n    initialize_params {\n      image = \"centos-7-v20191014\"\n    }\n  }\n  network_interface {\n    network = google_compute_network.vpc_network.self_link\n    access_config {\n       nat_ip = google_compute_address.vm_static_ip.address\n    }\n  }\n}\nresource \"null_resource\" \"prov_wp_conf\" {\n  depends_on = [\"google_compute_instance.vm_www\"]\n  connection {\n      type = \"ssh\"\n      user = \"terr\"\n      host =  \"${google_compute_instance.vm_www.network_interface.0.access_config.0.nat_ip}\"\n      private_key = \"${file(var.private_key_path)}\"\n      agent = false   \n  } \n  provisioner \"file\" {\n    source      = \"./wp-config.php\"\n    destination = \"/tmp/wp-config.php\" \n  }\n}\nresource \"null_resource\" \"prov_www\" {\n  depends_on = [\"google_compute_instance.vm_www\", \"null_resource.prov_wp_conf\"]\n  connection {\n      type = \"ssh\"\n      user = \"terr\"\n      host =  \"${google_compute_instance.vm_www.network_interface.0.access_config.0.nat_ip}\"\n      private_key = \"${file(var.private_key_path)}\"\n      agent = false   \n  } \n  provisioner \"file\" {\n    source      = \"scenario_www.sh\"\n    destination = \"~/scenario_www.sh\"\n  }\n  provisioner \"remote-exec\" {\n    inline = [\n      \"chmod +x ~/scenario_www.sh\",\n      \"sudo -E ~/scenario_www.sh\",\n    ]\n  }\n}\n"}]}
{"messages": [{"role":"user","content":"Provide an AWS environment tailored for Ansible automation, including a VPC, subnet, internet gateway, route, and a security group that allows SSH (22), HTTP (80), and HTTPS (443) access. Create three EC2 instances (Debian 12, Ubuntu 22.04, and RHEL 9), each with the necessary Python packages installed via user_data to support Ansible operations. AMIs are dynamically fetched for each OS using AWS AMI data sources filtered by name, architecture, and virtualization type."},{"role":"assistant","content":"provider \"aws\" {\r\n  region = var.region\r\n}\r\n\r\nvariable \"region\" {\r\n  description = \"Your target AWS region\"\r\n  default     = \"us-west-1\"\r\n  type        = string\r\n}\r\n\r\nvariable \"machine_type\" {\r\n  description = \"The machine type of the AWS instance\"\r\n  default     = \"t2.medium\"\r\n  type        = string\r\n}\r\n\r\nvariable \"key_name\" {\r\n  description = \"The key name used to ssh into your AWS instance\"\r\n  # default     = \"johndoe\"\r\n  type = string\r\n}\r\n\r\nvariable \"owner\" {\r\n  description = \"Owner of resources\"\r\n  default     = \"ansible-demo\"\r\n  type        = string\r\n}\r\n\r\ndata \"aws_ami\" \"debian\" {\r\n  most_recent = true\r\n\r\n  filter {\r\n    name   = \"name\"\r\n    values = [\"debian-12-amd64-*\"]\r\n  }\r\n  filter {\r\n    name   = \"virtualization-type\"\r\n    values = [\"hvm\"]\r\n  }\r\n  filter {\r\n    name   = \"architecture\"\r\n    values = [\"x86_64\"]\r\n  }\r\n\r\n  owners = [\"136693071363\"]\r\n}\r\n\r\ndata \"aws_ami\" \"ubuntu\" {\r\n  most_recent = true\r\n\r\n  filter {\r\n    name   = \"name\"\r\n    values = [\"ubuntu/images/hvm-ssd/ubuntu-jammy-22.04-amd64-server*\"]\r\n  }\r\n  filter {\r\n    name   = \"virtualization-type\"\r\n    values = [\"hvm\"]\r\n  }\r\n  filter {\r\n    name   = \"architecture\"\r\n    values = [\"x86_64\"]\r\n  }\r\n\r\n  owners = [\"099720109477\"]\r\n}\r\n\r\ndata \"aws_ami\" \"rhel\" {\r\n  most_recent = true\r\n\r\n  filter {\r\n    name   = \"name\"\r\n    values = [\"RHEL-9.4.0_HVM-*\"]\r\n  }\r\n  filter {\r\n    name   = \"virtualization-type\"\r\n    values = [\"hvm\"]\r\n  }\r\n  filter {\r\n    name   = \"architecture\"\r\n    values = [\"x86_64\"]\r\n  }\r\n\r\n  owners = [\"309956199498\"]\r\n}\r\nresource \"aws_vpc\" \"main\" {\r\n  cidr_block           = \"10.0.0.0/16\"\r\n  enable_dns_hostnames = true\r\n  tags = {\r\n    Name  = \"aws-vpc-ansible\"\r\n    Owner = var.owner\r\n  }\r\n}\r\n\r\nresource \"aws_subnet\" \"main\" {\r\n  vpc_id                  = aws_vpc.main.id\r\n  cidr_block              = \"10.0.0.0/24\"\r\n  map_public_ip_on_launch = true\r\n  tags = {\r\n    Name  = \"aws-subnet-ansible\"\r\n    Owner = var.owner\r\n  }\r\n}\r\n\r\nresource \"aws_security_group\" \"main\" {\r\n  name        = \"aws-sec-grp\"\r\n  description = \"Security group for AWS NLB\"\r\n  vpc_id      = aws_vpc.main.id\r\n  tags = {\r\n    Name  = \"aws-sec-grp-ansible\"\r\n    Owner = var.owner\r\n  }\r\n\r\n  ingress {\r\n    from_port = 22\r\n    to_port   = 22\r\n    protocol  = \"tcp\"\r\n    cidr_blocks = [\r\n      \"0.0.0.0/0\",\r\n    ]\r\n  }\r\n\r\n  ingress {\r\n    from_port = 80\r\n    to_port   = 80\r\n    protocol  = \"tcp\"\r\n    cidr_blocks = [\r\n      \"0.0.0.0/0\",\r\n    ]\r\n  }\r\n\r\n  ingress {\r\n    from_port = 443\r\n    to_port   = 443\r\n    protocol  = \"tcp\"\r\n    cidr_blocks = [\r\n      \"0.0.0.0/0\",\r\n    ]\r\n  }\r\n\r\n  egress {\r\n    from_port = 80\r\n    to_port   = 80\r\n    protocol  = \"tcp\"\r\n    cidr_blocks = [\r\n      \"0.0.0.0/0\",\r\n    ]\r\n  }\r\n\r\n  egress {\r\n    from_port = 443\r\n    to_port   = 443\r\n    protocol  = \"tcp\"\r\n    cidr_blocks = [\r\n      \"0.0.0.0/0\",\r\n    ]\r\n  }\r\n}\r\n\r\nresource \"aws_internet_gateway\" \"main\" {\r\n  vpc_id = aws_vpc.main.id\r\n  tags = {\r\n    Name  = \"aws-gtwy-ansible\"\r\n    Owner = var.owner\r\n  }\r\n}\r\n\r\nresource \"aws_route\" \"main\" {\r\n  route_table_id         = aws_vpc.main.main_route_table_id\r\n  destination_cidr_block = \"0.0.0.0/0\"\r\n  gateway_id             = aws_internet_gateway.main.id\r\n}\r\nresource \"aws_instance\" \"debian_12\" {\r\n  ami           = data.aws_ami.debian.id\r\n  instance_type = var.machine_type\r\n  key_name      = var.key_name\r\n  vpc_security_group_ids = [\r\n    aws_security_group.main.id\r\n  ]\r\n  subnet_id = aws_subnet.main.id\r\n  user_data = <<EOF\r\n#! /bin/bash\r\napt update\r\napt install -y python3 python3-apt python-apt\r\nEOF\r\n  tags = {\r\n    Name  = \"debian_12\"\r\n    Owner = var.owner\r\n    user  = \"admin\"\r\n    type  = \"ansible\"\r\n  }\r\n}\r\n\r\nresource \"aws_instance\" \"ubuntu_22\" {\r\n  ami           = data.aws_ami.ubuntu.id\r\n  instance_type = var.machine_type\r\n  key_name      = var.key_name\r\n  vpc_security_group_ids = [\r\n    aws_security_group.main.id\r\n  ]\r\n  subnet_id = aws_subnet.main.id\r\n  user_data = <<EOF\r\n#! /bin/bash\r\napt update\r\napt install -y python3 python3-apt python-apt\r\nEOF\r\n  tags = {\r\n    Name  = \"ubuntu_22\"\r\n    Owner = var.owner\r\n    user  = \"ubuntu\"\r\n    type  = \"ansible\"\r\n  }\r\n}\r\n\r\nresource \"aws_instance\" \"rhel_9\" {\r\n  ami           = data.aws_ami.rhel.id\r\n  instance_type = var.machine_type\r\n  key_name      = var.key_name\r\n  vpc_security_group_ids = [\r\n    aws_security_group.main.id\r\n  ]\r\n  subnet_id = aws_subnet.main.id\r\n  user_data = <<EOF\r\n#! /bin/bash\r\nyum update\r\nyum install -y python3\r\nEOF\r\n  tags = {\r\n    Name  = \"rhel_9\"\r\n    Owner = var.key_name\r\n    user  = \"ec2-user\"\r\n    type  = \"ansible\"\r\n  }\r\n}\r\n"}]}
{"messages": [{"role": "user", "content": "Create a local variable for the application service name and common tags. Set up an Azure resource group named after the project in a specified location. Deploy a PostgreSQL Flexible Server with defined configurations and a firewall rule allowing access from the Azure App Service. Create an Azure App Service within a service plan, configure it with a Docker container, and include necessary environment variables. Output the URL of the deployed application service."}, {"role": "assistant", "content": "\n#File: locals.tf\nlocals {\n  langtrace_app_service_name = \"${var.langtrace_project}-app\"\n\n  # Common tags to be assigned to all resources\n  common_tags = {\n    deployer          = \"azd\"\n    project_name      = var.langtrace_project\n    project           = \"langtrace\"\n    created_using     = \"terraform\"\n    langtrace_release = var.github_release_tag\n  }\n}\n\n#File: main.tf\nresource \"azurerm_resource_group\" \"langtrace_resource_group\" {\n  name     = \"${var.langtrace_project}-rg\"\n  location = var.region\n  tags     = local.common_tags\n}\n\n\nresource \"azurerm_postgresql_flexible_server\" \"langtrace_postgresql_server\" {\n  name                = \"${var.langtrace_project}-pg\"\n  resource_group_name = azurerm_resource_group.langtrace_resource_group.name\n  location            = var.region\n\n  sku_name                     = var.postgresql_server_sku\n  version                      = var.postgres_version\n  storage_mb                   = var.postgres_disk_size\n  backup_retention_days        = 7\n  geo_redundant_backup_enabled = false\n  auto_grow_enabled            = true\n  zone                         = 1\n\n  administrator_login    = var.postgres_admin_username\n  administrator_password = var.postgres_admin_password\n\n  tags = local.common_tags\n}\n\nresource \"azurerm_postgresql_flexible_server_database\" \"langtrace_postgresql_database\" {\n  name      = var.postgres_database_name\n  server_id = azurerm_postgresql_flexible_server.langtrace_postgresql_server.id\n  collation = \"en_US.utf8\"\n  charset   = \"utf8\"\n\n  lifecycle {\n    prevent_destroy = false\n  }\n}\n\n# Allow only the Azure App Service to access the PostgreSQL Flexible Server\nresource \"azurerm_postgresql_flexible_server_firewall_rule\" \"langtrace_postgresql_database_firewall_rule\" {\n  name             = \"${azurerm_postgresql_flexible_server.langtrace_postgresql_server.name}-fw\"\n  server_id        = azurerm_postgresql_flexible_server.langtrace_postgresql_server.id\n  start_ip_address = \"0.0.0.0\"\n  end_ip_address   = \"0.0.0.0\"\n}\n\n# Azure App Service\nresource \"azurerm_service_plan\" \"langtrace_service_plan\" {\n  name                = \"${var.langtrace_project}-sp\"\n  resource_group_name = azurerm_resource_group.langtrace_resource_group.name\n  location            = var.region\n  os_type             = \"Linux\"\n  sku_name            = var.app_service_sku\n\n  tags = local.common_tags\n}\n\nresource \"azurerm_linux_web_app\" \"langtrace_app_service\" {\n  name                = local.langtrace_app_service_name\n  resource_group_name = azurerm_resource_group.langtrace_resource_group.name\n  location            = var.region\n  service_plan_id     = azurerm_service_plan.langtrace_service_plan.id\n\n  site_config {\n    http2_enabled = true\n    application_stack {\n      docker_image_name   = \"${var.docker_image_name}:${var.github_release_tag}\"\n      docker_registry_url = \"https://docker.io\"\n    }\n  }\n\n  logs {\n    detailed_error_messages = false\n    failed_request_tracing  = false\n\n    http_logs {\n      file_system {\n        retention_in_days = 7\n        retention_in_mb   = 35\n      }\n    }\n  }\n\n  app_settings = merge(var.static_env_variables,\n    {\n      # Postgres Variables\n      POSTGRES_HOST            = \"${azurerm_postgresql_flexible_server.langtrace_postgresql_server.fqdn}:5432\"\n      POSTGRES_USER            = var.postgres_admin_username\n      POSTGRES_PASSWORD        = var.postgres_admin_password\n      POSTGRES_DATABASE        = var.postgres_database_name\n      POSTGRES_URL             = \"postgres://${var.postgres_admin_username}:${var.postgres_admin_password}@${azurerm_postgresql_flexible_server.langtrace_postgresql_server.fqdn}:${var.postgres_port}/${var.postgres_database_name}?sslmode=require\"\n      POSTGRES_PRISMA_URL      = \"postgres://${var.postgres_admin_username}:${var.postgres_admin_password}@${azurerm_postgresql_flexible_server.langtrace_postgresql_server.fqdn}:${var.postgres_port}/${var.postgres_database_name}?sslmode=require&pgbouncer=true&connect_timeout=15\"\n      POSTGRES_URL_NO_SSL      = \"postgres://${var.postgres_admin_username}:${var.postgres_admin_password}@${azurerm_postgresql_flexible_server.langtrace_postgresql_server.fqdn}:${var.postgres_port}/${var.postgres_database_name}\"\n      POSTGRES_URL_NON_POOLING = \"postgres://${var.postgres_admin_username}:${var.postgres_admin_password}@${azurerm_postgresql_flexible_server.langtrace_postgresql_server.fqdn}:${var.postgres_port}/${var.postgres_database_name}?sslmode=require&pool_max_size=0\"\n\n      # Application Variables\n      NEXT_PUBLIC_HOST = \"https://${local.langtrace_app_service_name}.azurewebsites.net\"\n\n      NEXTAUTH_URL          = \"https://${local.langtrace_app_service_name}.azurewebsites.net\"\n      NEXTAUTH_URL_INTERNAL = \"https://${local.langtrace_app_service_name}.azurewebsites.net\"\n\n      # Clickhouse Variables\n      CLICK_HOUSE_HOST          = var.clickhouse_host\n      CLICK_HOUSE_USER          = var.clickhouse_user\n      CLICK_HOUSE_PASSWORD      = var.clickhouse_password\n      CLICK_HOUSE_DATABASE_NAME = \"langtrace_traces\"\n\n      # Admin login\n      ADMIN_EMAIL                    = var.admin_email\n      ADMIN_PASSWORD                 = var.admin_password\n      NEXT_PUBLIC_ENABLE_ADMIN_LOGIN = true\n\n      # Azure AD Variables\n      AZURE_AD_CLIENT_ID     = var.azure_ad_client_id\n      AZURE_AD_CLIENT_SECRET = var.azure_ad_client_secret\n      AZURE_AD_TENANT_ID     = var.azure_ad_tenant_id\n    }\n  )\n\n  tags = local.common_tags\n\n  depends_on = [\n    azurerm_postgresql_flexible_server_firewall_rule.langtrace_postgresql_database_firewall_rule\n  ]\n}\n\n#File: outputs.tf\noutput \"langtrace_url\" {\n  value = \"https://${azurerm_linux_web_app.langtrace_app_service.name}.azurewebsites.net\"\n}\n\n#File: providers.tf\nterraform {\n  required_providers {\n    azurerm = {\n      source  = \"hashicorp/azurerm\"\n      version = \"4.27.0\"\n    }\n  }\n  required_version = \"~> 1.11.4\"\n}\n\nprovider \"azurerm\" {\n  features {}\n}\n\n#File: variables.tf\n\nvariable \"langtrace_project\" {\n  description = \"Name of the project (should be unique)\"\n}\n\nvariable \"region\" {\n  description = \"Location of the resources to be created\"\n}\n\nvariable \"docker_image_name\" {\n  description = \"Docker image to be deployed\"\n  default     = \"scale3labs/langtrace-client\"\n}\n\nvariable \"github_release_tag\" {\n  description = \"Docker image tag\"\n  default     = \"latest\"\n}\n\n\n# Azure PostgreSQL Flexible Server\nvariable \"postgresql_server_sku\" {\n  description = \"The SKU of the PostgreSQL Flexible Server\"\n  default     = \"B_Standard_B1ms\"\n}\n\nvariable \"postgres_version\" {\n  description = \"The version of the PostgreSQL Flexible Server\"\n  default     = \"16\"\n}\n\nvariable \"postgres_disk_size\" {\n  description = \"The disk size of the PostgreSQL Flexible Server in MB\"\n  default     = 32768 # 32GB\n}\n\nvariable \"postgres_admin_username\" {\n  description = \"The admin username of the PostgreSQL Flexible Server\"\n  sensitive   = true\n}\n\nvariable \"postgres_admin_password\" {\n  description = \"The admin password of the PostgreSQL Flexible Server\"\n  sensitive   = true\n}\n\nvariable \"postgres_port\" {\n  description = \"The port of the PostgreSQL Flexible Server\"\n  default     = 5432\n}\n\nvariable \"postgres_database_name\" {\n  description = \"The name of the PostgreSQL Flexible Server database\"\n  default     = \"langtracedb\"\n}\n\n# Azure App Service\nvariable \"app_service_sku\" {\n  description = \"The SKU of the App Service\"\n  default     = \"S2\"\n}\n\nvariable \"admin_email\" {\n  description = \"Admin Email\"\n}\n\nvariable \"admin_password\" {\n  description = \"Admin Password\"\n  sensitive   = true\n}\n\n# Azure AD Variables\nvariable \"azure_ad_client_id\" {\n  description = \"Azure AD Client ID\"\n}\n\nvariable \"azure_ad_client_secret\" {\n  description = \"Azure AD Client Secret\"\n  sensitive   = true\n}\n\nvariable \"azure_ad_tenant_id\" {\n  description = \"Azure AD Tenant ID\"\n}\n\nvariable \"clickhouse_host\" {\n  description = \"Clickhouse Host URL eg: https://clickhouse-server.com:<port>\"\n}\n\nvariable \"clickhouse_user\" {\n  description = \"Clickhouse User\"\n}\n\nvariable \"clickhouse_password\" {\n  description = \"Clickhouse Password\"\n  sensitive   = true\n}\n\nvariable \"static_env_variables\" {\n  description = \"default environment variables for app service\"\n  default = {\n    WEBSITES_ENABLE_APP_SERVICE_STORAGE : \"false\"\n    WEBSITES_PORT : \"3000\"\n    NEXT_PUBLIC_APP_NAME : \"Langtrace AI\"\n    NEXT_PUBLIC_ENVIRONMENT : \"production\"\n    HOSTING_PLATFORM : \"Azure\"\n    NEXTAUTH_SECRET : \"difficultsecret\"\n  }\n}\n"}]}
{"messages": [{"role": "user", "content": "Create an Azure virtual network with a specified address space and location. Build an associated subnet within the virtual network, ensuring it has a defined address prefix. Establish a network security group for the subnet, then associate the security group with the subnet. Define an inbound security rule for the network security group, allowing traffic from specified IP subnets. Output the IDs of the virtual network and the subnet for use in other modules."}, {"role": "assistant", "content": "\n#File: main.tf\n# You can make subnets via the virtual network but if you create subnet resources\n# terraform is unable to track the two and can / will create clashes so it will be clearer\n# to create subnet resources\nresource \"azurerm_virtual_network\" \"pe\" {\n name                = \"pe-${var.id}\"\n address_space       = [\"10.138.0.0/16\"]\n location            = var.region\n resource_group_name = var.resourcegroup.name\n tags                = var.tags\n}\n\nresource \"azurerm_subnet\" \"pe_subnet\" {\n  name                 = \"pe-${var.id}\"\n  resource_group_name  = var.resourcegroup.name\n  virtual_network_name = azurerm_virtual_network.pe.name\n  address_prefixes     = [\"10.138.1.0/24\"]\n}\n\n# You can make security rules via the security group but if you\n# then creates separate security rule resource terraform is unable \n# to track the two and will create clashes so I will use seperate rules\nresource \"azurerm_network_security_group\" \"pe_nsg\" {\n  name                = \"pe-${var.id}\"\n  location            = var.region\n  resource_group_name = var.resourcegroup.name\n  tags                = var.tags\n}\n\nresource \"azurerm_subnet_network_security_group_association\" \"pe_subnet_nsg\" {\n  subnet_id                 = azurerm_subnet.pe_subnet.id\n  network_security_group_id = azurerm_network_security_group.pe_nsg.id\n}\n\nresource \"azurerm_network_security_rule\" \"pe_ingressrule\" {\n  name                         = \"General_ingress_rule\"\n  count                        = length(var.allow) >= 1 ? 1 : 0\n  priority                     = 1000\n  direction                    = \"Inbound\"\n  access                       = \"Allow\"\n  protocol                     = \"*\"\n  source_port_range            = \"*\"\n  destination_port_range       = \"*\"\n  source_address_prefixes      = var.allow\n  destination_address_prefix   = \"*\"\n  resource_group_name          = var.resourcegroup.name\n  network_security_group_name  = azurerm_network_security_group.pe_nsg.name\n}\n\n#File: outputs.tf\n# Output data that will be used by other submodules to build other parts of the\n# stack to support defined architecture\noutput \"virtual_network_id\" {\n  value       = azurerm_virtual_network.pe.id\n  description = \"Virtual network id\"\n}\n\noutput \"subnet_id\" {\n  value       = azurerm_subnet.pe_subnet.id\n  description = \"subnet id\"\n}\n#File: variables.tf\n# These are the variables required for the networking submodule to function\n# properly and do not have any defaults set because this submodule should never\n# be called from anything else expect the main module where values for all these\n# variables will always be passed in\nvariable id {\n  description = \"Randomly generated value used to produce unique names for everything to prevent collisions and visually link resources together\"\n  type        = string\n}\nvariable allow {\n  description = \"List of permitted IP subnets\"\n  type        = list(string)\n}\nvariable resourcegroup {\n  description = \"Resource group for network resources\"\n}\nvariable \"tags\" {\n  description = \"A set of tags that will be assigned to resources along with required\"\n  type        = map\n}\nvariable region {\n  description = \"Region to create networking resources in\"\n}\n#File: versions.tf\nterraform {\n  required_version = \">= 0.13\"\n}\n"}]}
{"messages": [{"role": "user", "content": "Create a Google Cloud provider configuration using Terraform. Define variables for the snapshot name and project ID. Create a compute disk that uses a snapshot if provided or defaults to an OS image. Launch a Google Compute Engine instance and include the boot disk configuration, network interface, and startup script for Docker installation. Set up firewall rules to allow traffic on specified ports and output the instance's public IP address."}, {"role": "assistant", "content": "\n#File: vm.tf\nterraform {\n  required_providers {\n    google = {\n      source  = \"hashicorp/google\"\n      version = \"~> 4.0\"\n    }\n  }\n}\n\n# Variables\nvariable \"snapshot_name\" {\n  description = \"Name of the snapshot to restore from. Leave empty for fresh install.\"\n  type        = string\n  default     = \"\"\n}\n\nvariable \"project_id\" {\n  description = \"GCP Project ID\"\n  type        = string\n  default     = \"your-gcp-project-name\"\n}\n\n# Provider\nprovider \"google\" {\n  project = var.project_id\n  region  = \"us-central1\"\n}\n\n# Data source for snapshot (if it exists)\ndata \"google_compute_snapshot\" \"decidim_snapshot\" {\n  count   = var.snapshot_name != \"\" ? 1 : 0\n  name    = var.snapshot_name\n  project = var.project_id\n}\n\nresource \"google_compute_disk\" \"boot_disk\" {\n  name    = \"decidim-boot-disk\"\n  zone    = \"us-central1-a\"\n  type    = \"pd-ssd\"\n  size    = 50\n\n  snapshot = var.snapshot_name != \"\" ? var.snapshot_name : null\n  image    = var.snapshot_name == \"\" ? \"ubuntu-os-cloud/ubuntu-2204-lts\" : null\n}\n\n# VM Instance\nresource \"google_compute_instance\" \"decidim_vm\" {\n  name         = \"decidim-vm\"\n  machine_type = \"e2-standard-4\"\n  zone         = \"us-central1-a\"\n\n  boot_disk {\n    source = google_compute_disk.boot_disk.self_link\n  }\n\n  network_interface {\n    network = \"default\"\n    access_config {\n      # This empty block assigns a public IP\n    }\n  }\n\n    metadata_startup_script = var.snapshot_name == \"\" ? \"#!/bin/bash\\napt-get update\\napt-get install -y docker.io docker-compose\\nsystemctl start docker\\nsystemctl enable docker\" : \"\"\n\n  tags = [\"http-server\", \"https-server\"]\n}\n\n# Firewall rules\nresource \"google_compute_firewall\" \"decidim\" {\n  name    = \"decidim-firewall\"\n  network = \"default\"\n\n  allow {\n    protocol = \"tcp\"\n    ports    = [\"3000\", \"80\", \"443\"]\n  }\n\n  source_ranges = [\"0.0.0.0/0\"]\n  target_tags   = [\"http-server\", \"https-server\"]\n}\n\n# Outputs\noutput \"instance_ip\" {\n  description = \"The public IP of the VM instance\"\n  value       = google_compute_instance.decidim_vm.network_interface[0].access_config[0].nat_ip\n}\n"}]}
{"messages": [{"role":"user","content":"Set up AWS Config and GuardDuty security monitoring based on input variables, including an optional S3 bucket for configuration snapshots and customizable delivery frequency. Create necessary IAM roles, policies, and resources like AWS Config recorders, delivery channels, and a config rule to monitor restricted incoming ports. Additionally, it manages GuardDuty detectors and memberships for both master and member accounts, enabling security threat detection and centralized management."},{"role":"assistant","content":"provider \"aws\" {}\r\n\r\n\r\nvariable \"tags\" {\r\n  description = \"Specifies object tags key and value. This applies to all resources created by this module.\"\r\n  default = {\r\n    \"Terraform\" = true\r\n  }\r\n}\r\n\r\nvariable \"org_name\" {\r\n  description = \"Name for this organization\"\r\n}\r\n\r\nvariable \"enable_config_baseline\" {\r\n  description = \"If true, will create aws config\"\r\n  default     = true\r\n}\r\nvariable \"config_s3_bucket_name\" {\r\n  description = \"The name of the S3 bucket which will store configuration snapshots.\"\r\n  default     = \"\"\r\n}\r\nvariable \"config_delivery_frequency\" {\r\n  description = \"The frequency which AWS Config sends a snapshot into the S3 bucket.\"\r\n  default     = \"One_Hour\"\r\n}\r\nvariable \"config_include_global_resource_types\" {\r\n  description = \"Specifies whether AWS Config includes all supported types of global resources with the resources that it records.\"\r\n  default     = true\r\n}\r\n\r\nvariable \"account_email\" {\r\n  type        = string\r\n  description = \"AWS Account email to be used with Guardduty\"\r\n}\r\n\r\nvariable \"master_account_id\" {\r\n  description = \"Master account ID\"\r\n}\r\n\r\nvariable \"guardduty\" {\r\n  default     = true\r\n  description = \"Enable/Disables guardduty\"\r\n}\r\n\r\nvariable \"guardduty_detector_id\" {\r\n  default     = \"\"\r\n  description = \"GuardDuty detector ID in the master account\"\r\n}\r\n\r\nlocals {\r\n  config_s3_bucket_name = var.config_s3_bucket_name != \"\" ? var.config_s3_bucket_name : \"${var.org_name}-audit-config-${data.aws_region.current.name}-${data.aws_caller_identity.current.account_id}\"\r\n}\r\n# This file was created instead a sub module since we found an issue passing the provider to child submodules\r\n# AWS Config should be enabled into all accounts (master and sub accounts)\r\nresource \"aws_sns_topic\" \"config\" {\r\n  count = var.enable_config_baseline ? 1 : 0\r\n\r\n  name = \"ConfigChanges\"\r\n  tags = var.tags\r\n}\r\nresource \"aws_iam_role_policy_attachment\" \"config\" {\r\n  count      = var.enable_config_baseline ? 1 : 0\r\n  role       = aws_iam_role.config_role[0].name\r\n  policy_arn = \"arn:aws:iam::aws:policy/service-role/AWS_ConfigRole\"\r\n}\r\n\r\nresource \"aws_iam_role_policy\" \"config_s3\" {\r\n  count  = var.enable_config_baseline ? 1 : 0\r\n  name   = \"awsconfig-policy\"\r\n  policy = data.aws_iam_policy_document.config_s3[0].json\r\n  role   = aws_iam_role.config_role[0].name\r\n}\r\n\r\ndata \"aws_iam_policy_document\" \"config_s3\" {\r\n  count = var.enable_config_baseline ? 1 : 0\r\n  statement {\r\n    sid    = \"1\"\r\n    effect = \"Allow\"\r\n    actions = [\r\n      \"s3:PutObject\"\r\n    ]\r\n    resources = [\r\n      \"arn:aws:s3:::${local.config_s3_bucket_name}/prefix/AWSLogs/${data.aws_caller_identity.current.account_id}/*\",\r\n    ]\r\n    condition {\r\n      test     = \"StringLike\"\r\n      variable = \"s3:x-amz-acl\"\r\n\r\n      values = [\r\n        \"bucket-owner-full-control\"\r\n      ]\r\n    }\r\n  }\r\n  statement {\r\n    sid       = \"2\"\r\n    effect    = \"Allow\"\r\n    actions   = [\"s3:GetBucketAcl\"]\r\n    resources = [\"arn:aws:s3:::${local.config_s3_bucket_name}\"]\r\n  }\r\n}\r\n\r\nresource \"aws_iam_role\" \"config_role\" {\r\n  count = var.enable_config_baseline ? 1 : 0\r\n  name  = \"awsconfig-role-${data.aws_region.current.name}\"\r\n\r\n\r\n  assume_role_policy = <<POLICY\r\n{\r\n  \"Version\": \"2012-10-17\",\r\n  \"Statement\": [\r\n    {\r\n      \"Action\": \"sts:AssumeRole\",\r\n      \"Principal\": {\r\n        \"Service\": \"config.amazonaws.com\"\r\n      },\r\n      \"Effect\": \"Allow\",\r\n      \"Sid\": \"\"\r\n    }\r\n  ]\r\n}\r\nPOLICY\r\n}\r\nresource \"aws_config_configuration_recorder\" \"recorder\" {\r\n  count = var.enable_config_baseline ? 1 : 0\r\n\r\n  name = \"default\"\r\n\r\n  role_arn = aws_iam_role.config_role[0].arn\r\n\r\n  recording_group {\r\n    all_supported                 = true\r\n    include_global_resource_types = var.config_include_global_resource_types\r\n  }\r\n}\r\n\r\nresource \"aws_config_delivery_channel\" \"bucket\" {\r\n  count = var.enable_config_baseline ? 1 : 0\r\n\r\n  name = \"default\"\r\n\r\n  s3_bucket_name = local.config_s3_bucket_name\r\n  s3_key_prefix  = \"\"\r\n  sns_topic_arn  = aws_sns_topic.config[0].arn\r\n\r\n  snapshot_delivery_properties {\r\n    delivery_frequency = var.config_delivery_frequency\r\n  }\r\n\r\n  depends_on = [aws_config_configuration_recorder.recorder[0]]\r\n}\r\n\r\nresource \"aws_config_configuration_recorder_status\" \"recorder\" {\r\n  count = var.enable_config_baseline ? 1 : 0\r\n\r\n  name = aws_config_configuration_recorder.recorder[0].id\r\n\r\n  is_enabled = true\r\n  depends_on = [aws_config_delivery_channel.bucket[0]]\r\n}\r\n\r\n# --------------------------------------------------------------------------------------------------\r\n# A config rule to monitor open known ports.\r\n# --------------------------------------------------------------------------------------------------\r\n\r\nresource \"aws_config_config_rule\" \"restricted_ports\" {\r\n  count = var.enable_config_baseline ? 1 : 0\r\n\r\n  name = \"RestrictedIncomingTraffic\"\r\n\r\n  source {\r\n    owner             = \"AWS\"\r\n    source_identifier = \"RESTRICTED_INCOMING_TRAFFIC\"\r\n  }\r\n\r\n  input_parameters = <<JSON\r\n{\r\n  \"blockedPort1\": \"22\",\r\n  \"blockedPort2\": \"3389\"\r\n}\r\nJSON\r\n\r\n  tags       = var.tags\r\n  depends_on = [aws_config_configuration_recorder.recorder[0]]\r\n}\r\nresource \"aws_guardduty_detector\" \"primary\" {\r\n  enable = true\r\n}\r\n\r\nresource \"aws_guardduty_detector\" \"member\" {\r\n  count  = var.guardduty ? 1 : 0\r\n  enable = true\r\n}\r\n\r\nresource \"aws_guardduty_member\" \"member\" {\r\n  count    = var.guardduty ? 1 : 0\r\n  provider = aws.master\r\n\r\n  account_id                 = aws_guardduty_detector.member[0].account_id\r\n  detector_id                = try(var.guardduty_detector_id, aws_guardduty_detector.primary.id)\r\n  email                      = var.account_email\r\n  invite                     = true\r\n  disable_email_notification = true\r\n\r\n  lifecycle {\r\n    ignore_changes = [email]\r\n  }\r\n}\r\n\r\nresource \"aws_guardduty_invite_accepter\" \"member\" {\r\n  count = var.guardduty ? 1 : 0\r\n\r\n  depends_on = [aws_guardduty_member.member]\r\n\r\n  detector_id       = aws_guardduty_detector.member[0].id\r\n  master_account_id = var.master_account_id\r\n}\r\n\r\ndata \"aws_caller_identity\" \"current\" {}\r\ndata \"aws_region\" \"current\" {}\r\n"}]}
{"messages": [{"role": "user", "content": "Create a Google Compute Engine instance using the Ubuntu 22.04 LTS image. Configure the instance with the specified name based on the common name variable and assign it to the first zone in the zones variable. Attach a boot disk initialized with the Ubuntu image and set up the network interface with the provided subnetwork. Include SSH key metadata for the ubuntu user using the public key from the specified path. Finally, define output variables for the instance's username and public IP address."}, {"role": "assistant", "content": "\n#File: main.tf\ndata \"google_compute_image\" \"ubuntu\" {\n  family  = \"ubuntu-2204-lts\"\n  project = \"ubuntu-os-cloud\"\n}\n\nresource \"google_compute_instance\" \"main\" {\n  name         = \"${var.common_name}-vm\"\n  zone         = var.zones[0]\n  machine_type = \"e2-micro\"\n\n  boot_disk {\n    initialize_params {\n      image = data.google_compute_image.ubuntu.self_link\n    }\n  }\n\n  network_interface {\n    subnetwork = var.subnet_name\n    access_config {}\n  }\n\n  metadata = {\n    ssh-keys = \"ubuntu:${file(var.public_key_path)}\"\n  }\n\n  labels = var.tags\n}\n#File: outputs.tf\noutput \"username\" {\n  description = \"Username of the CE instance\"\n  value       = \"ubuntu\"\n}\n\noutput \"public_ip\" {\n  description = \"Public IP of the deployed VM\"\n  value       = google_compute_instance.main.network_interface[0].access_config[0].nat_ip\n}\n#File: variables.tf\nvariable \"zones\" {\n  description = \"Google physical data centers where resources will be located on current region.\"\n  type        = list(string)\n  default     = [\"us-central1-a\", \"us-central1-b\", \"us-central1-c\", \"us-central1-f\"]\n}\n\nvariable \"common_name\" {\n  description = \"Common name for cloud resources on project.\"\n  type        = string\n  default     = null\n}\n\nvariable \"tags\" {\n  description = \"Tags to apply to resources, such as Terraform metadata or organizational info.\"\n  type        = map(string)\n  default = {\n    Team  = \"devops\"\n    Owner = \"youraddress@gmail.com\"\n  }\n}\n\n\n\n/* Specific module VARIABLES */\n\nvariable \"subnet_name\" {\n  description = \"Name of the subnetwork created.\"\n  type        = string\n  default     = null\n}\n\nvariable \"public_key_path\" {\n  description = \"The public key path on current machine\"\n  type        = string\n  default     = null\n}\n\nvariable \"machine_type\" {\n  description = \"The type of virtual machine to create.\"\n  type        = string\n  default     = null\n}\n"}]}
{"messages": [{"role":"user","content":"Create a DynamoDB table named users. Use user_id as the primary key. Enable on-demand billing mode."},{"role":"assistant","content":"provider \"aws\" {\r\n  region = \"us-east-1\"\r\n}\r\n\r\nresource \"aws_dynamodb_table\" \"users\" {\r\n  name         = \"users\"\r\n  billing_mode = \"PAY_PER_REQUEST\"\r\n  hash_key     = \"user_id\"\r\n\r\n  attribute {\r\n    name = \"user_id\"\r\n    type = \"S\"\r\n  }\r\n}\r\n"}]}
{"messages": [{"role": "user", "content": "Create a network security group to allow inbound RDP and HTTPS traffic to the API VM. Associate the network security group with the subnet. Create a static public IP for the API VM and set up a network interface connected to it. Launch a new Windows virtual machine with the specified size and configurations, including automatic updates enabled. Add a custom script extension to run a setup script on the VM after deployment."}, {"role": "assistant", "content": "\n#File: api-vm-main.tf\n###################\n## API VM - Main ##\n###################\n\n# Create Network Security Group to Access the API VM from Internet\nresource \"azurerm_network_security_group\" \"api-vm-nsg\" {\n  name                = \"${var.app_name}-${var.environment}-vm-nsg\"\n  location            = azurerm_resource_group.network-rg.location\n  resource_group_name = azurerm_resource_group.network-rg.name\n\n  security_rule {\n    name                       = \"allow-rdp\"\n    description                = \"allow-rdp\"\n    priority                   = 100\n    direction                  = \"Inbound\"\n    access                     = \"Allow\"\n    protocol                   = \"Tcp\"\n    source_port_range          = \"*\"\n    destination_port_range     = \"3389\"\n    source_address_prefix      = \"Internet\"\n    destination_address_prefix = \"*\" \n  }\n\n  security_rule {\n    name                       = \"allow-https\"\n    description                = \"allow-https\"\n    priority                   = 110\n    direction                  = \"Inbound\"\n    access                     = \"Allow\"\n    protocol                   = \"Tcp\"\n    source_port_range          = \"*\"\n    destination_port_range     = \"443\"\n    source_address_prefix      = \"Internet\"\n    destination_address_prefix = \"*\"\n  }\n\n  tags = {\n    application = var.app_name\n    environment = var.environment \n  }\n}\n\n# Associate the NSG with the Subnet\nresource \"azurerm_subnet_network_security_group_association\" \"api-vm-nsg-association\" {\n  depends_on=[azurerm_network_security_group.api-vm-nsg]\n\n  subnet_id                 = azurerm_subnet.network-subnet.id\n  network_security_group_id = azurerm_network_security_group.api-vm-nsg.id\n}\n\n# Get a Static Public IP for the API VM\nresource \"azurerm_public_ip\" \"api-vm-ip\" {\n  name                = \"${var.app_name}-${var.environment}-vm-pip\"\n  location            = azurerm_resource_group.network-rg.location\n  resource_group_name = azurerm_resource_group.network-rg.name\n  allocation_method   = \"Static\"\n  \n  tags = { \n    application = var.app_name\n    environment = var.environment \n  }\n}\n\n# Create Network Card for the API VM\nresource \"azurerm_network_interface\" \"api-vm-nic\" {\n  depends_on=[azurerm_public_ip.api-vm-ip]\n\n  name                = \"${var.app_name}-${var.environment}-vm-nic\"\n  location            = azurerm_resource_group.network-rg.location\n  resource_group_name = azurerm_resource_group.network-rg.name\n\n  ip_configuration {\n    name                          = \"internal\"\n    subnet_id                     = azurerm_subnet.network-subnet.id\n    private_ip_address_allocation = \"Dynamic\"\n    public_ip_address_id          = azurerm_public_ip.api-vm-ip.id\n  }\n\n  tags = { \n    application = var.app_name\n    environment = var.environment \n  }\n}\n\n# Create API Server\nresource \"azurerm_windows_virtual_machine\" \"api-vm\" {\n  depends_on=[azurerm_network_interface.api-vm-nic]\n\n  name                  = \"${var.app_name}-${var.environment}-vm\"\n  location              = azurerm_resource_group.network-rg.location\n  resource_group_name   = azurerm_resource_group.network-rg.name\n  size                  = var.api_vm_size\n  network_interface_ids = [azurerm_network_interface.api-vm-nic.id]\n  \n  computer_name  = var.api_vm_name\n  admin_username = var.api_admin_username\n  admin_password = var.api_admin_password\n\n  os_disk {\n    name                 = \"${var.app_name}-${var.environment}-vm-os-disk\"\n    caching              = \"ReadWrite\"\n    storage_account_type = \"Standard_LRS\"\n  }\n\n  source_image_reference {\n    publisher = \"MicrosoftWindowsServer\"\n    offer     = \"WindowsServer\"\n    sku       = \"2022-Datacenter\"\n    version   = \"latest\"\n  }\n\n  enable_automatic_updates = true\n  provision_vm_agent       = true\n\n  tags = {\n    application = var.app_name\n    environment = var.environment \n  }\n}\n\n# Add Azure VM extension\nresource \"azurerm_virtual_machine_extension\" \"api-extension\" {\n  name                 = \"${var.app_name}-${var.environment}-vm-extension\"\n  virtual_machine_id   = azurerm_windows_virtual_machine.api-vm.id\n  publisher            = \"Microsoft.Compute\"\n  type                 = \"CustomScriptExtension\"\n  type_handler_version = \"1.10\"\n\n  settings = <<SETTINGS\n      {\n          \"fileUris\": [\"https://raw.githubusercontent.com/KopiCloud-AD-API/kopicloud-ad-api-setup-scripts/main/setup-win2022.ps1\"],\n          \"commandToExecute\": \"powershell -ExecutionPolicy Unrestricted -File setup-win2022.ps1\"\n      }\n  SETTINGS\n}\n#File: api-vm-output.tf\n#####################\n## API VM - Output ##\n#####################\n\n# API VM ID\noutput \"api_vm_id\" {\n  value = azurerm_windows_virtual_machine.api-vm.id\n}\n\n# API VM Name\noutput \"api_vm_name\" {\n  value = azurerm_windows_virtual_machine.api-vm.name\n}\n\n# API VM Admin Username\noutput \"api_vm_admin_username\" {\n  value = var.api_admin_username\n}\n\n# API VM Admin Password\noutput \"api_vm_admin_password\" {\n  value = var.api_admin_password\n}\n\n# API VM Public IP\noutput \"api_vm_public_ip\" {\n  value = azurerm_public_ip.api-vm-ip.ip_address\n}\n#File: api-vm-variables.tf\n########################\n## API VM - Variables ##\n########################\n\n# API VM Admin User\nvariable \"api_admin_username\" {\n  type        = string\n  description = \"API VM Admin User\"\n  default     = \"kopiadmin\"\n}\n\n# API VM Admin Password\nvariable \"api_admin_password\" {\n  type        = string\n  description = \"API VM Admin Password\"\n  default     = \"S3cr3ts24\"\n}\n\n# API Virtual Machine Name\nvariable \"api_vm_name\" {\n  type        = string\n  description = \"API VM Size\"\n  default     = \"kopiadapi01\"\n  validation {\n    condition     = length(var.api_vm_name) < 16\n    error_message = \"VM Name must be a 15 character long name or less\"\n  }\n}\n\n# API Virtual Machine Size\nvariable \"api_vm_size\" {\n  type        = string\n  description = \"API VM Size\"\n  default     = \"Standard_B2s\"\n}\n\n\n#File: app-variables.tf\n#############################\n## Application - Variables ##\n#############################\n\n# application name \nvariable \"app_name\" {\n  type        = string\n  description = \"This variable defines the application name used to build resources\"\n  default     = \"kopicloud-ad-api-2022\"\n}\n\n# environment\nvariable \"environment\" {\n  type        = string\n  description = \"This variable defines the environment to be built\"\n}\n\n# azure region\nvariable \"location\" {\n  type        = string\n  description = \"Azure region where the resource group will be created\"\n  default     = \"north europe\"\n}\n#File: network-main.tf\n####################\n## Network - Main ##\n####################\n\n# Create a resource group for network\nresource \"azurerm_resource_group\" \"network-rg\" {\n  name     = \"${var.app_name}-${var.environment}-rg\"\n  location = var.location\n  tags = {\n    application = var.app_name\n    environment = var.environment\n  }\n}\n\n# Create the network VNET\nresource \"azurerm_virtual_network\" \"network-vnet\" {\n  name                = \"${var.app_name}-${var.environment}-vnet\"\n  address_space       = [var.network-vnet-cidr]\n  resource_group_name = azurerm_resource_group.network-rg.name\n  location            = azurerm_resource_group.network-rg.location\n  tags = {\n    application = var.app_name\n    environment = var.environment\n  }\n}\n\n# Create a subnet for Network\nresource \"azurerm_subnet\" \"network-subnet\" {\n  name                 = \"${var.app_name}-${var.environment}-subnet\"\n  address_prefixes     = [var.network-subnet-cidr]\n  virtual_network_name = azurerm_virtual_network.network-vnet.name\n  resource_group_name  = azurerm_resource_group.network-rg.name\n}\n\n\n#File: network-output.tf\n######################\n## Network - Output ##\n######################\n\noutput \"network_resource_group_id\" {\n  value = azurerm_resource_group.network-rg.id\n}\n\noutput \"network_vnet_id\" {\n  value = azurerm_virtual_network.network-vnet.id\n}\n\noutput \"network_subnet_id\" {\n  value = azurerm_subnet.network-subnet.id\n}\n\n\n#File: network-variables.tf\n##############################\n## Core Network - Variables ##\n##############################\n\nvariable \"network-vnet-cidr\" {\n  type        = string\n  description = \"The CIDR of the network VNET\"\n}\n\nvariable \"network-subnet-cidr\" {\n  type        = string\n  description = \"The CIDR for the network subnet\"\n}\n\n#File: provider-main.tf\n###########################\n## Azure Provider - Main ##\n###########################\n\n# Define Terraform and Azure provider\nterraform {\n  required_providers {\n    azurerm = {\n      source  = \"hashicorp/azurerm\"\n      version = \"~> 3.5\"\n    }  \n  }\n  required_version = \">= 1.3\"\n}\n\n# Configure the Azure provider\nprovider \"azurerm\" { \n  features {}  \n  environment     = \"public\"\n  subscription_id = var.azure-subscription-id\n  client_id       = var.azure-client-id\n  client_secret   = var.azure-client-secret\n  tenant_id       = var.azure-tenant-id\n}\n\n#File: provider-variables.tf\n################################\n## Azure Provider - Variables ##\n################################\n\n# Azure authentication variables\n\nvariable \"azure-subscription-id\" {\n  type        = string\n  description = \"Azure Subscription ID\"\n}\n\nvariable \"azure-client-id\" {\n  type        = string\n  description = \"Azure Client ID\"\n}\n\nvariable \"azure-client-secret\" {\n  type        = string\n  description = \"Azure Client Secret\"\n}\n\nvariable \"azure-tenant-id\" {\n  type        = string\n  description = \"Azure Tenant ID\"\n}\n"}]}
{"messages": [{"role": "user", "content": "Create a Google Cloud VPC network named using the project variable. Configure the network to auto-create subnetworks. Establish a firewall rule for worker nodes that permits ICMP, TCP, and UDP traffic on specified ports. Set up an additional firewall rule that allows SSH access on port 22 from any IP address. Output the self-link of the created VPC network."}, {"role": "assistant", "content": "\n#File: main.tf\n\nresource \"google_compute_network\" \"vpc_network\" {\n  name                    = \"${var.project}-network\"\n  auto_create_subnetworks = \"true\"\n}\n\n\nresource \"google_compute_firewall\" \"worker\" {\n  name        = \"${var.project}-worker\"\n  network     = google_compute_network.vpc_network.id\n  target_tags = [\"worker\", \"manager\"]\n\n  allow {\n    protocol = \"icmp\"\n  }\n\n  allow {\n    protocol = \"tcp\"\n    ports    = var.firewall_port_TCP\n  }\n\n  allow {\n    protocol = \"udp\"\n    ports    = var.firewall_port_UDP\n  }\n\n  depends_on = [google_compute_network.vpc_network]\n}\n\nresource \"google_compute_firewall\" \"firewall_ssh\" {\n  name        = \"${var.project}-ssh\"\n  network     = google_compute_network.vpc_network.id\n  target_tags = [\"ssh\"]\n\n  allow {\n    protocol = \"tcp\"\n    ports    = [\"22\"]\n  }\n\n  source_ranges = [\"0.0.0.0/0\"]\n  depends_on    = [google_compute_network.vpc_network]\n}\n\n#File: output.tf\n\noutput \"vpc_network\" {\n  description = \"VPC network\"\n  value       = google_compute_network.vpc_network.self_link\n}\n\n#File: variables.tf\nvariable \"zone\" {\n  type = string\n}\n\nvariable \"region\" {\n  type = string\n}\n\nvariable \"project\" {\n  type = string\n}\n\nvariable \"firewall_port_UDP\" {\n  type = list\n}\n\nvariable \"firewall_port_TCP\" {\n  type = list\n}\n\n\n"}]}
{"messages": [{"role":"user","content":"Provide an AWS ECS Fargate cluster running a containerized application behind an Application Load Balancer, using configurable local variables for flexibility. Set up IAM roles and policies for ECS task execution and ECR repository access, and dynamically fetches subnet and VPC information based on user input or default VPC usage. The setup also includes an ECR repository for container images and integrates the load balancer with ECS services for seamless traffic routing."},{"role":"assistant","content":"# Configure the AWS Provider\r\nprovider \"aws\" {\r\n  region = local.region\r\n}\r\n\r\nlocals {\r\n  region = var.aws_region\r\n  ecr_defaults = {\r\n    repository_name = \"app-registry\"\r\n  }\r\n  ecr = merge(local.ecr_defaults, var.ecr_values)\r\n\r\n  ecs_defaults = {\r\n    cluster_name = \"ecs-cluster\"\r\n    service_name = \"ecs-service\"\r\n  }\r\n  ecs = merge(local.ecs_defaults, var.ecs_values)\r\n\r\n  lb_defaults = {\r\n    name     = \"tf-alb\"\r\n    internal = false\r\n    target_group = {\r\n      name     = \"tf-alb-tg\"\r\n      port     = 80\r\n      protocol = \"HTTP\"\r\n    }\r\n  }\r\n  lb = merge(local.lb_defaults, var.lb_values)\r\n\r\n  vpc_defaults = {\r\n    id = \"\"\r\n  }\r\n  vpc             = merge(local.vpc_defaults, var.vpc)\r\n  use_default_vpc = local.vpc.id == \"\"\r\n\r\n  container_defaults = {\r\n    name  = \"application\"\r\n    image = \"particule/helloworld\"\r\n    ports = [80]\r\n  }\r\n  container = merge(local.container_defaults, var.container)\r\n}\r\nresource \"aws_lb\" \"alb\" {\r\n  name               = local.lb[\"name\"]\r\n  internal           = local.lb[\"internal\"]\r\n  load_balancer_type = \"application\"\r\n  subnets            = [for s in data.aws_subnet.subnets : s.id]\r\n}\r\n\r\nresource \"aws_lb_target_group\" \"group\" {\r\n  name        = local.lb.target_group[\"name\"]\r\n  port        = local.lb.target_group[\"port\"]\r\n  protocol    = local.lb.target_group[\"protocol\"]\r\n  vpc_id      = data.aws_vpc.vpc.id\r\n  target_type = \"ip\"\r\n\r\n  depends_on = [aws_lb.alb]\r\n}\r\n\r\nresource \"aws_lb_listener\" \"front_end\" {\r\n  load_balancer_arn = aws_lb.alb.arn\r\n  port              = \"80\"\r\n  protocol          = \"HTTP\"\r\n\r\n  default_action {\r\n    type             = \"forward\"\r\n    target_group_arn = aws_lb_target_group.group.arn\r\n  }\r\n}\r\nresource \"aws_iam_user\" \"publisher\" {\r\n  name = \"ecr-publisher\"\r\n  path = \"/serviceaccounts/\"\r\n}\r\n\r\nresource \"aws_iam_role\" \"fargate\" {\r\n  name = \"fargate-role\"\r\n  path = \"/serviceaccounts/\"\r\n  assume_role_policy = jsonencode({\r\n    Version = \"2012-10-17\"\r\n    Statement = [\r\n      {\r\n        Action = \"sts:AssumeRole\"\r\n        Effect = \"Allow\"\r\n        Sid    = \"\"\r\n        Principal = {\r\n          Service = [\r\n            \"ecs.amazonaws.com\",\r\n            \"ecs-tasks.amazonaws.com\"\r\n          ]\r\n        }\r\n      },\r\n    ]\r\n  })\r\n}\r\n\r\n\r\nresource \"aws_iam_user_policy\" \"publisher\" {\r\n  name = \"ecr-publisher\"\r\n  user = aws_iam_user.publisher.name\r\n\r\n  policy = <<EOF\r\n{\r\n  \"Version\": \"2012-10-17\",\r\n  \"Statement\": [\r\n    {\r\n      \"Action\": [\r\n        \"iam:PassRole\",\r\n        \"iam:GetRole\",\r\n        \"ecs:DescribeTaskDefinition\",\r\n        \"ecs:DescribeServices\",\r\n        \"ecs:UpdateService\",\r\n        \"ecs:RegisterTaskDefinition\",\r\n        \"ecr:CompleteLayerUpload\",\r\n        \"ecr:DescribeRepositories\",\r\n        \"ecr:ListImages\",\r\n        \"ecr:DescribeImages\",\r\n        \"ecr:GetAuthorizationToken\",\r\n        \"ecr:GetDownloadUrlForLayer\",\r\n        \"ecr:GetLifecyclePolicy\",\r\n        \"ecr:InitiateLayerUpload\",\r\n        \"ecr:PutImage\",\r\n        \"ecr:UploadLayerPart\"\r\n      ],\r\n      \"Effect\": \"Allow\",\r\n      \"Resource\": \"*\"\r\n    }\r\n  ]\r\n}\r\nEOF\r\n}\r\n\r\nresource \"aws_iam_access_key\" \"publisher\" {\r\n  user = aws_iam_user.publisher.name\r\n}\r\n\r\nresource \"aws_iam_role_policy\" \"fargate\" {\r\n  name = \"fargate-execution-role\"\r\n  role = aws_iam_role.fargate.id\r\n\r\n  policy = <<EOF\r\n{\r\n  \"Version\": \"2012-10-17\",\r\n  \"Statement\": [\r\n    {\r\n      \"Action\": [\r\n        \"ecr:CompleteLayerUpload\",\r\n        \"ecr:DescribeRepositories\",\r\n        \"ecr:ListImages\",\r\n        \"ecr:DescribeImages\",\r\n        \"ecr:GetAuthorizationToken\",\r\n        \"ecr:GetDownloadUrlForLayer\",\r\n        \"ecr:GetLifecyclePolicy\"\r\n      ],\r\n      \"Effect\": \"Allow\",\r\n      \"Resource\": \"*\"\r\n    }\r\n  ]\r\n}\r\nEOF\r\n}\r\nresource \"aws_ecs_cluster\" \"cluster\" {\r\n  name               = local.ecs[\"cluster_name\"]\r\n  capacity_providers = [\"FARGATE\"]\r\n\r\n  default_capacity_provider_strategy {\r\n    capacity_provider = \"FARGATE\"\r\n    weight            = \"100\"\r\n  }\r\n}\r\n\r\nresource \"aws_ecs_task_definition\" \"task\" {\r\n  family = \"service\"\r\n  requires_compatibilities = [\r\n    \"FARGATE\",\r\n  ]\r\n  execution_role_arn = aws_iam_role.fargate.arn\r\n  network_mode       = \"awsvpc\"\r\n  cpu                = 256\r\n  memory             = 512\r\n  container_definitions = jsonencode([\r\n    {\r\n      name      = local.container.name\r\n      image     = local.container.image\r\n      essential = true\r\n      portMappings = [\r\n        for port in local.container.ports :\r\n        {\r\n          containerPort = port\r\n          hostPort      = port\r\n        }\r\n      ]\r\n    }\r\n  ])\r\n}\r\n\r\nresource \"aws_ecs_service\" \"service\" {\r\n  name            = local.ecs.service_name\r\n  cluster         = aws_ecs_cluster.cluster.id\r\n  task_definition = aws_ecs_task_definition.task.arn\r\n  desired_count   = 1\r\n\r\n  network_configuration {\r\n    subnets          = [for s in data.aws_subnet.subnets : s.id]\r\n    assign_public_ip = true\r\n  }\r\n\r\n  load_balancer {\r\n    target_group_arn = aws_lb_target_group.group.arn\r\n    container_name   = local.container.name\r\n    container_port   = 80\r\n  }\r\n  deployment_controller {\r\n    type = \"ECS\"\r\n  }\r\n  capacity_provider_strategy {\r\n    base              = 0\r\n    capacity_provider = \"FARGATE\"\r\n    weight            = 100\r\n  }\r\n}\r\nresource \"aws_ecr_repository\" \"repository\" {\r\n  name                 = local.ecr[\"repository_name\"]\r\n  image_tag_mutability = \"MUTABLE\"\r\n}\r\n\r\nresource \"aws_ecr_repository_policy\" \"policy\" {\r\n  repository = aws_ecr_repository.repository.name\r\n  policy     = <<EOF\r\n  {\r\n    \"Version\": \"2008-10-17\",\r\n    \"Statement\": [\r\n      {\r\n        \"Sid\": \"adds full ecr access to the ${local.ecr[\"repository_name\"]} repository\",\r\n        \"Effect\": \"Allow\",\r\n        \"Principal\": \"*\",\r\n        \"Action\": [\r\n          \"ecr:BatchCheckLayerAvailability\",\r\n          \"ecr:BatchGetImage\",\r\n          \"ecr:CompleteLayerUpload\",\r\n          \"ecr:GetDownloadUrlForLayer\",\r\n          \"ecr:GetLifecyclePolicy\",\r\n          \"ecr:InitiateLayerUpload\",\r\n          \"ecr:PutImage\",\r\n          \"ecr:UploadLayerPart\"\r\n        ]\r\n      }\r\n    ]\r\n  }\r\n  EOF\r\n}\r\ndata \"aws_vpc\" \"vpc\" {\r\n  id      = local.use_default_vpc ? null : local.vpc[\"id\"]\r\n  default = local.use_default_vpc\r\n}\r\n\r\ndata \"aws_subnet_ids\" \"subnets\" {\r\n  vpc_id = data.aws_vpc.vpc.id\r\n}\r\n\r\ndata \"aws_subnet\" \"subnets\" {\r\n  for_each = data.aws_subnet_ids.subnets.ids\r\n  vpc_id   = data.aws_vpc.vpc.id\r\n  id       = each.value\r\n  # availability_zone = each.value\r\n}\r\nvariable \"aws_region\" {\r\n  type        = string\r\n  default     = \"eu-west-3\"\r\n  description = \"AWS region\"\r\n}\r\n\r\nvariable \"ecr_values\" {\r\n  type        = any\r\n  default     = {}\r\n  description = \"AWS ECR configuration\"\r\n}\r\n\r\nvariable \"ecs_values\" {\r\n  type        = any\r\n  default     = {}\r\n  description = \"AWS ECS configuration\"\r\n}\r\n\r\nvariable \"lb_values\" {\r\n  type        = any\r\n  default     = {}\r\n  description = \"AWS Load Balancer configuration\"\r\n}\r\n\r\nvariable \"vpc\" {\r\n  type        = any\r\n  default     = {}\r\n  description = \"AWS VPC configuration\"\r\n}\r\n\r\nvariable \"container\" {\r\n  type        = any\r\n  default     = {}\r\n  description = \"Container configuration to deploy\"\r\n}\r\n"}]}
{"messages": [{"role": "user", "content": "Create a Terraform configuration file to set up Azure resources. Define a provider for Azure Resource Manager. Create an Azure Resource Group in the specified location with the provided tags. Create an Azure Container Registry within the resource group, ensuring to assign roles to user-assigned identities. Finally, set up an Azure Key Vault, enabling disk encryption and specifying appropriate settings."}, {"role": "assistant", "content": "\n#File: main.tf\nterraform {\n  required_providers {\n    azurerm = {\n      source  = \"hashicorp/azurerm\"\n      version = \"~>2.52.0\"\n    }\n  }\n}\n\nprovider \"azurerm\" {\n  features {}\n}\n\ndata \"azurerm_client_config\" \"current\" {}\n\nlocals {\n  name          = var.name\n  name_squished = replace(local.name, \"-\", \"\")\n}\n\n# Resource Group\n# --------------\n\nresource \"azurerm_resource_group\" \"rg\" {\n  name     = \"${local.name}-rg\"\n  location = \"centralus\"\n  tags     = var.tags\n}\n\n# Container Registry\n# ------------------\n\n# Registry\n\nresource \"azurerm_container_registry\" \"cr\" {\n  name                = \"${local.name_squished}cr\"\n  location            = azurerm_resource_group.rg.location\n  resource_group_name = azurerm_resource_group.rg.name\n  sku                 = \"Standard\"\n  tags                = var.tags\n}\n\n# Assignments\n\ndata \"azurerm_user_assigned_identity\" \"acr_principals\" {\n  for_each            = var.acr_identities\n  name                = each.value.user_mi_name\n  resource_group_name = each.value.user_mi_rg\n}\n\nresource \"azurerm_role_assignment\" \"acr_assignments\" {\n  for_each             = var.acr_identities\n  scope                = azurerm_container_registry.cr.id\n  role_definition_name = var.acr_identities[each.key].user_mi_role\n  principal_id         = data.azurerm_user_assigned_identity.acr_principals[each.key].principal_id\n}\n\n# Key Vault\n# ---------\n\nresource \"azurerm_key_vault\" \"kv\" {\n  name                        = \"${local.name}-kv\"\n  location                    = azurerm_resource_group.rg.location\n  resource_group_name         = azurerm_resource_group.rg.name\n  sku_name                    = \"standard\"\n  enabled_for_disk_encryption = true\n  tenant_id                   = data.azurerm_client_config.current.tenant_id\n  soft_delete_retention_days  = 7\n  purge_protection_enabled    = false\n  enable_rbac_authorization   = true\n  tags                        = var.tags\n}\n\n#File: outputs.tf\n# Outputs\n# -------\n\noutput \"summary\" {\n  value = {\n    resource_group = {\n      name     = azurerm_resource_group.rg.name\n      location = azurerm_resource_group.rg.location\n    }\n    container_registry = {\n      id            = azurerm_container_registry.cr.id\n      name          = azurerm_container_registry.cr.name\n      admin_enabled = azurerm_container_registry.cr.admin_enabled\n      login_server  = azurerm_container_registry.cr.login_server\n    }\n    key_vault = {\n      id                        = azurerm_key_vault.kv.id\n      name                      = azurerm_key_vault.kv.name\n      vault_uri                 = azurerm_key_vault.kv.vault_uri\n      enable_rbac_authorization = azurerm_key_vault.kv.enable_rbac_authorization\n    }\n  }\n}\n\noutput \"acr_role_assginments\" {\n  value = [\n    for k, v in zipmap( # needed to combine resource and data sources\n      keys(azurerm_role_assignment.acr_assignments),\n    values(azurerm_role_assignment.acr_assignments)) :\n    {\n      tostring(k) = {\n        id                   = v.id\n        scope                = v.scope\n        role_definition_name = v.role_definition_name\n        principal_id         = v.principal_id\n        principal_type       = v.principal_type\n        principal_name       = data.azurerm_user_assigned_identity.acr_principals[k].name\n        principal_rg         = data.azurerm_user_assigned_identity.acr_principals[k].resource_group_name\n      }\n    }\n  ]\n}\n#File: variables.tf\nvariable \"name\" {\n  type = string\n}\n\nvariable \"tags\" {\n  type = map(string)\n}\n\nvariable \"acr_identities\" {\n  type = map(map(string))\n}"}]}
{"messages": [{"role": "user", "content": "Create a Google Cloud provider configuration with the specified project, region, and zone. Set up a VPC network named \"terraform-network\" with auto-created subnetworks. Allow SSH and HTTP traffic through firewall rules targeting webserver instances. Launch a Google Compute instance named \"webserver\" using the specified machine type and disk image, and configure it with SSH access. Output the NAT IP address of the webserver instance for further use."}, {"role": "assistant", "content": "\n#File: main.tf\n# Provider description\nprovider \"google\" {\n  version = \"~> 2.12\"\n  project = var.project\n  region  = var.region\n  zone    = var.zone\n}\n\n# VPC description\nresource \"google_compute_network\" \"vpc_network\" {\n  name                    = \"terraform-network\"\n  auto_create_subnetworks = \"true\"\n}\n\nresource \"google_compute_firewall\" \"firewall_ssh\" {\n  name        = \"terraform-network-allow-ssh\"\n  network     = google_compute_network.vpc_network.self_link\n  description = \"Allow SSH for webservers\"\n\n  allow {\n    protocol = \"tcp\"\n    ports    = [\"22\"]\n  }\n\n  source_ranges = [var.source_ip]\n\n  target_tags = [\"webserver\"]\n}\n\nresource \"google_compute_firewall\" \"firewall_http\" {\n  name        = \"terraform-network-allow-http\"\n  network     = google_compute_network.vpc_network.self_link\n  description = \"Allow HTTP for webservers\"\n\n  allow {\n    protocol = \"tcp\"\n    ports    = [\"80\"]\n  }\n\n  source_ranges = [var.source_ip]\n\n  target_tags = [\"webserver\"]\n}\n\n# VM instance description\nresource \"google_compute_instance\" \"webserver\" {\n  name         = \"webserver\"\n  machine_type = var.machine_type\n  zone         = var.zone\n\n  metadata = {\n    sshKeys = \"${var.remote_user}:${file(var.public_key_path)}\"\n  }\n\n  boot_disk {\n    initialize_params {\n      image = var.disk_image\n    }\n  }\n\n  network_interface {\n    # A default network is created for all GCP projects\n    network = google_compute_network.vpc_network.self_link\n    access_config {\n    }\n  }\n\n  tags = [\"webserver\"]\n\n  # Provisioners description\n  provisioner \"remote-exec\" {\n    inline = [\"echo 'Connected!'\"]\n\n    connection {\n      host        = google_compute_instance.webserver.network_interface[0].access_config[0].nat_ip\n      type        = \"ssh\"\n      user        = var.remote_user\n      private_key = file(var.private_key_path)\n    }\n  }\n\n  provisioner \"local-exec\" {\n    command = \"cd ../ansible; ansible-playbook -u ${var.remote_user} -i '${self.network_interface.0.access_config.0.nat_ip},' --private-key ${var.private_key_path} provision_inline.yml --vault-password-file .vault_pass\"\n  }\n}\n\n\n#File: outputs.tf\n# Output variables\noutput \"webserver_nat_ip\" {\n  value = google_compute_instance.webserver.network_interface[0].access_config[0].nat_ip\n}\n\n\n#File: variables.tf\n# Variables for main.tf\nvariable \"project\" {\n  description = \"Project ID\"\n}\n\nvariable \"region\" {\n  description = \"Region\"\n  default     = \"europe-west1\"\n}\n\nvariable \"zone\" {\n  description = \"Zone\"\n  default     = \"europe-west1-b\"\n}\n\nvariable \"public_key_path\" {\n  description = \"Path to the public key used for ssh access\"\n}\n\nvariable \"private_key_path\" {\n  description = \"Path to the private key used for ssh access\"\n}\n\nvariable \"remote_user\" {\n  description = \"Remote user for provisioners\"\n}\n\nvariable \"disk_image\" {\n  description = \"Disk image\"\n  default     = \"centos-cloud/centos-7\"\n}\n\nvariable \"machine_type\" {\n  description = \"Instance type\"\n  default     = \"g1-small\"\n}\n\nvariable \"source_ip\" {\n  default = \"0.0.0.0/0\"\n}\n\n\n#File: versions.tf\n\nterraform {\n  required_version = \">= 0.12\"\n}\n"}]}
{"messages": [{"role": "user", "content": "Create an Azure Key Vault with a random name generated from a string length of 6, ensuring it does not include special characters. Set the location and resource group by utilizing the provided variables. Configure access policies to allow key creation and retrieval, as well as secret listing, setting, getting, deleting, purging, and recovering. Add a secret named \"secret-sauce\" to the Key Vault using the specified password variable. Ensure the Key Vault has a premium SKU and soft delete retention set to 7 days."}, {"role": "assistant", "content": "\n#File: main.tf\nterraform {\n  required_providers {\n    azurerm = {\n      source  = \"hashicorp/azurerm\"\n      version = \">= 2.26\"\n    }\n  }\n}\n\nprovider \"azurerm\" {\n  features {}\n}\n\ndata \"azurerm_client_config\" \"current\" {}\n\nresource \"random_string\" \"vault_name\" {\n  length  = 6\n  special = false\n  upper   = false\n  number  = true\n}\n\nresource \"azurerm_key_vault\" \"elkvault\" {\n  name                            = random_string.vault_name.result\n  location                        = var.location\n  resource_group_name             = var.rg\n  tenant_id                       = data.azurerm_client_config.current.tenant_id\n  sku_name                        = \"premium\"\n  soft_delete_retention_days      = 7\n  enabled_for_deployment          = true\n  enabled_for_template_deployment = true\n\n  access_policy {\n    tenant_id = data.azurerm_client_config.current.tenant_id\n    object_id = data.azurerm_client_config.current.object_id\n\n    key_permissions = [\n      \"create\",\n      \"get\",\n    ]\n\n    secret_permissions = [\n      \"list\",\n      \"set\",\n      \"get\",\n      \"delete\",\n      \"purge\",\n      \"recover\"\n    ]\n  }\n}\n\nresource \"azurerm_key_vault_secret\" \"elk_secret\" {\n  name         = \"secret-sauce\"\n  value        = var.password\n  key_vault_id = azurerm_key_vault.elkvault.id\n}\n#File: outputs.tf\n# output \"elk_vnet_name\" {\n#   value = azurerm_virtual_network.elk_vnet.name\n# }\n\n#File: variables.tf\nvariable \"rg\" {\n  type        = string\n  description = \"Resource Group\"\n}\n\nvariable \"location\" {\n  type        = string\n  description = \"RG location\"\n}\n\nvariable \"password\" {\n  description = \"Global Password\"\n  type        = string\n  sensitive   = true\n}"}]}
{"messages": [{"role": "user", "content": "Create an Azure resource group with a specified location and name. Establish a virtual network with a defined address space within the resource group. Set up a subnet in the virtual network and allocate a public IP address for the future virtual machine. Configure a network security group that allows SSH access and associate it with a network interface. Finally, create a Linux virtual machine with the desired specifications, using generated SSH keys for secure access."}, {"role": "assistant", "content": "\n#File: main.tf\nresource \"azurerm_resource_group\" \"rg\" {\n  location = var.varResourceGroupLocation\n  name     = var.varResourceGroupName\n}\n\n# Cria a Virtual Network do Azure\nresource \"azurerm_virtual_network\" \"my_terraform_network\" {\n  name                = var.varItemVirtualNetwork\n  address_space       = [\"10.0.0.0/16\"]\n  location            = azurerm_resource_group.rg.location\n  resource_group_name = azurerm_resource_group.rg.name\n}\n\n# Cria a subnet no Virtual Network\nresource \"azurerm_subnet\" \"my_terraform_subnet\" {\n  name                 = var.varItemSubnetName\n  resource_group_name  = azurerm_resource_group.rg.name\n  virtual_network_name = azurerm_virtual_network.my_terraform_network.name\n  address_prefixes     = [\"10.0.1.0/24\"]\n}\n\n# Cria o endereço IP público que será alocado na Virtual Machine\nresource \"azurerm_public_ip\" \"my_terraform_public_ip\" {\n  name                = var.varItemPublicIPName\n  location            = azurerm_resource_group.rg.location\n  resource_group_name = azurerm_resource_group.rg.name\n  allocation_method   = \"Dynamic\"\n}\n\n# Cria o Grupo de segurança e libera a porta 22 para acesso remoto via SSH\nresource \"azurerm_network_security_group\" \"my_terraform_nsg\" {\n  name                = var.varItemNetworkGroupName\n  location            = azurerm_resource_group.rg.location\n  resource_group_name = azurerm_resource_group.rg.name\n\n  security_rule {\n    name                       = \"SSH\"\n    priority                   = 1001\n    direction                  = \"Inbound\"\n    access                     = \"Allow\"\n    protocol                   = \"Tcp\"\n    source_port_range          = \"*\"\n    destination_port_range     = \"22\"\n    source_address_prefix      = \"*\"\n    destination_address_prefix = \"*\"\n  }\n}\n\n# Cria a Interface de Rede\nresource \"azurerm_network_interface\" \"my_terraform_nic\" {\n  name                = var.varItemNICName\n  location            = azurerm_resource_group.rg.location\n  resource_group_name = azurerm_resource_group.rg.name\n\n  ip_configuration {\n    name                          = \"conde_nic_configuration\"\n    subnet_id                     = azurerm_subnet.my_terraform_subnet.id\n    private_ip_address_allocation = \"Dynamic\"\n    public_ip_address_id          = azurerm_public_ip.my_terraform_public_ip.id\n  }\n}\n\n# Conecta o grupo de segurança com a Interface de Rede\nresource \"azurerm_network_interface_security_group_association\" \"example\" {\n  network_interface_id      = azurerm_network_interface.my_terraform_nic.id\n  network_security_group_id = azurerm_network_security_group.my_terraform_nsg.id\n}\n\n# Generate random text for a unique storage account name\nresource \"random_id\" \"random_id\" {\n  keepers = {\n    # Generate a new ID only when a new resource group is defined\n    resource_group = azurerm_resource_group.rg.name\n  }\n\n  byte_length = 8\n}\n\n# Create a conta de armazenamento\nresource \"azurerm_storage_account\" \"my_storage_account\" {\n  name                     = var.varStorageAccountName\n  location                 = azurerm_resource_group.rg.location\n  resource_group_name      = azurerm_resource_group.rg.name\n  account_tier             = \"Standard\"\n  account_replication_type = \"LRS\"\n}\n\n# Cria e mostra a chave SSH\nresource \"tls_private_key\" \"example_ssh\" {\n  algorithm = \"RSA\"\n  rsa_bits  = 4096\n}\n\n# Cria a Maquina Virtual\nresource \"azurerm_linux_virtual_machine\" \"my_terraform_vm\" {\n  name                  = var.varItemVMName\n  location              = azurerm_resource_group.rg.location\n  resource_group_name   = azurerm_resource_group.rg.name\n  network_interface_ids = [azurerm_network_interface.my_terraform_nic.id]\n  size                  = \"Standard_DS1_v2\"\n\n  os_disk {\n    name                 = var.varItemVMOSDiskName\n    caching              = \"ReadWrite\"\n    storage_account_type = \"Premium_LRS\"\n  }\n\n  source_image_reference {\n    publisher = \"Canonical\"\n    offer     = \"UbuntuServer\"\n    sku       = \"18.04-LTS\"\n    version   = \"latest\"\n  }\n\n  computer_name                   = var.varItemVMComputerName\n  admin_username                  = var.varItemVMUserName\n  disable_password_authentication = true\n\n  admin_ssh_key {\n    username   = var.varItemVMUserName\n    public_key = tls_private_key.example_ssh.public_key_openssh\n  }\n\n  boot_diagnostics {\n    storage_account_uri = azurerm_storage_account.my_storage_account.primary_blob_endpoint\n  }\n}\n#File: outputs.tf\noutput \"resource_group_name\" {\n  value = azurerm_resource_group.rg.name\n}\n\noutput \"public_ip_address\" {\n  value = azurerm_linux_virtual_machine.my_terraform_vm.public_ip_address\n}\n\noutput \"tls_private_key\" {\n  value     = tls_private_key.example_ssh.private_key_pem\n  sensitive = true\n}\n#File: providers.tf\nterraform {\n  required_version = \">=0.12\"\n\n  required_providers {\n    azurerm = {\n      source  = \"hashicorp/azurerm\"\n      version = \"~>2.0\"\n    }\n    random = {\n      source  = \"hashicorp/random\"\n      version = \"~>3.0\"\n    }\n    tls = {\n      source = \"hashicorp/tls\"\n      version = \"~>4.0\"\n    }\n  }\n}\n\nprovider \"azurerm\" {\n  features {}\n}\n#File: variables.tf\n#\n# Variaveis de uso mais geral\n#\nvariable \"varResourceGroupLocation\" {\n  default     = \"eastus\"\n  description = \"Região onde ficaram os recursos.\"\n}\n\nvariable \"varResourceGroupName\" {\n  default = \"cc-demoterraformrg\"\n  description = \"Nome do Resource Group\"\n}\n\nvariable \"varStorageAccountName\" {\n  default = \"condestorageaccount\"\n  description = \"Nome da Conta de Armazenamento\"\n}\n\n#\n# Variaveis para Questoes de Rede\n#\nvariable \"varItemVirtualNetwork\" {\n  default = \"condeVNet\"\n  description = \"Nome da Rede Virtual do Azure\"\n}\n\nvariable \"varItemSubnetName\" {\n  default = \"condeSubNet\"\n  description = \"Nome para identificar a Subnet\"\n}\n\nvariable \"varItemPublicIPName\" {\n  default = \"condeIPPublic\"\n  description = \"Nome para Identificar o recurso de IP Publico\"\n}\n\nvariable \"varItemNetworkGroupName\" {\n  default = \"condeNetworkSecurityGroup\"\n  description = \"Nome para Identificar o grupo\"\n}\n\nvariable \"varItemNICName\" {\n  default = \"condeNIC\"\n  description = \"Nome para Identificar a Interface de Rede\"\n}\n\nvariable \"varItemNIConfigurationName\" {\n  default = \"conde_nic_configuration\"\n  description = \"Nome para Identificar a configuracao de IP para a Interface de Rede\"\n}\n\n#\n# Variaveis para a Maquina Virtual\n#\nvariable \"varItemVMName\" {\n  default = \"condeVM\"\n  description = \"Nome para Identificar o Recurso como Virtual Machine\"\n}\n\nvariable \"varItemVMOSDiskName\" {\n  default = \"condeOSDisk\"\n  description = \"Nome para Identificar o recurso de Disk Boot\"\n}\n\nvariable \"varItemVMComputerName\" {\n  default = \"CondeVMComputerName\"\n  description = \"Nome para o Computer\"\n}\n\nvariable \"varItemVMUserName\" {\n  default = \"azureuser\"\n  description = \"Nome do Usuario para acessar via Admin\"\n}"}]}
{"messages": [{"role":"user","content":"Create a simple AWS setup with one EC2 instance and one S3 bucket. The EC2 instance uses a specified AMI and runs as a t2.micro instance with a name tag, while the S3 bucket is created with a fixed bucket name. The configuration also outputs the EC2 instances public IP address and the S3 buckets domain name, and it uses variables to provide AWS credentials and region settings."},{"role":"assistant","content":"provider \"aws\" {\r\n  region     = var.region\r\n  access_key = var.access_key\r\n  secret_key = var.secret_key\r\n}\r\n\r\nresource \"aws_instance\" \"sample_ec2\" {\r\n  # Amazon Machine Images\r\n  # Navigate to the AWS Console, go to EC2, and find the AMI in the Images section.\r\n  ami           = \"ami-0287a05f0ef0e9d9a\"\r\n  instance_type = \"t2.micro\"\r\n  tags = {\r\n    Name : \"sample_ec2\"\r\n  }\r\n}\r\n\r\nresource \"aws_s3_bucket\" \"sample_s3\" {\r\n  bucket = \"sample-name-s3\"\r\n}\r\n\r\noutput \"EC2_Public_IP_Address\" {\r\n  value = aws_instance.sample_ec2.public_ip\r\n}\r\n\r\noutput \"S3_Bucket_Domain\" {\r\n  value = aws_s3_bucket.sample_s3.bucket_domain_name\r\n}\r\n\r\nvariable \"access_key\" {\r\n  description = \"AWS Access Key ID\"\r\n}\r\n\r\nvariable \"secret_key\" {\r\n  description = \"AWS Secret Key\"\r\n}\r\n\r\nvariable \"region\" {\r\n  description = \"AWS Region\"\r\n  default     = \"ap-south-1\"\r\n}\r\n"}]}
{"messages": [{"role":"user","content":"Provide an AWS infrastructure for a Cloud Custodian mailer, including an SQS queue for message handling and an S3 bucket for log storage with encryption and lifecycle management. Also set up an IAM role and policy that grants a Lambda function permissions to interact with SQS and send emails via SES. The resources are secured with AWS KMS and scoped to the current AWS account and region, incorporating environment-based naming conventions."},{"role":"assistant","content":"provider \"aws\"{\r\n\r\n}\r\n\r\ndata \"aws_caller_identity\" \"current\" {}\r\ndata \"aws_region\" \"current\" {}\r\n\r\nresource \"aws_sqs_queue\" \"c7n_mailer\" {\r\n  name                      = \"c7n-mailer\"\r\n  delay_seconds             = 30\r\n  max_message_size          = 262144\r\n  message_retention_seconds = 86400\r\n  receive_wait_time_seconds = 10\r\n\r\n  kms_master_key_id                 = \"alias/aws/sqs\"\r\n  kms_data_key_reuse_period_seconds = 300\r\n\r\n}\r\n\r\nresource \"aws_s3_bucket\" \"c7n_logs\" {\r\n  bucket = \"c7n-logs-${data.aws_caller_identity.current.account_id}-${data.aws_region.current.name}-${var.env}\"\r\n  acl    = \"private\"\r\n\r\n  server_side_encryption_configuration {\r\n    rule {\r\n      apply_server_side_encryption_by_default {\r\n        kms_master_key_id = \"alias/aws/s3\"\r\n        sse_algorithm     = \"aws:kms\"\r\n      }\r\n    }\r\n  }\r\n\r\n  lifecycle_rule {\r\n    id      = \"base_prefix\"\r\n    enabled = true\r\n\r\n    prefix = \"/\"\r\n\r\n    tags = {\r\n      \"rule\"      = \"base_prefix\"\r\n      \"autoclean\" = \"true\"\r\n    }\r\n\r\n    transition {\r\n      days          = 60\r\n      storage_class = \"STANDARD_IA\"\r\n    }\r\n\r\n    transition {\r\n      days          = 120\r\n      storage_class = \"GLACIER\"\r\n    }\r\n\r\n    expiration {\r\n      days = 180\r\n    }\r\n  }\r\n}\r\n\r\nresource \"aws_iam_role\" \"c7n_mailer\" {\r\n  name = \"c7n-mailer\"\r\n  path = \"/c7n/\"\r\n\r\n  assume_role_policy = <<EOF\r\n{\r\n  \"Statement\": [\r\n    {\r\n      \"Action\": \"sts:AssumeRole\",\r\n      \"Principal\": {\r\n        \"Service\": \"lambda.amazonaws.com\"\r\n      },\r\n      \"Effect\": \"Allow\",\r\n      \"Sid\": \"\"\r\n    }\r\n  ]\r\n}\r\nEOF\r\n}\r\n\r\nresource \"aws_iam_policy\" \"c7n_mailer\" {\r\n  name        = \"c7n-mailer-policy\"\r\n  path        = \"/c7n/\"\r\n  description = \"c7n (Cloud Custodian) Policy\"\r\n\r\n  policy = <<EOF\r\n{\r\n  \"Statement\": [\r\n    {\r\n      \"Action\": [\r\n        \"sqs:ReceiveMessage\",\r\n        \"sqs:SendMessage\",\r\n        \"sqs:DeleteMessage\",\r\n        \"sqs:ChangeMessageVisibility\"\r\n\r\n      ],\r\n      \"Effect\": \"Allow\",\r\n      \"Resource\": \"${aws_sqs_queue.c7n_mailer.arn}\"\r\n    },\r\n    {\r\n      \"Action\": [\r\n        \"ses:SendRawEmail\"\r\n      ],\r\n      \"Effect\": \"Allow\",\r\n      \"Resource\": \"arn:aws:ses:${data.aws_region.current.name}:${data.aws_caller_identity.current.account_id}:identity/${var.mail_from}\"\r\n    }\r\n  ]\r\n}\r\nEOF\r\n}\r\n\r\nresource \"aws_iam_role_policy_attachment\" \"c7n_mailer\" {\r\n  role       = \"${aws_iam_role.c7n_mailer.name}\"\r\n  policy_arn = \"${aws_iam_policy.c7n_mailer.arn}\"\r\n}\r\n"}]}
{"messages": [{"role": "user", "content": "Create an Azure network security group for Active Directory clients with the specified name and location. Define inbound rules for various protocols such as UDP for DNS on port 53, TCP for Kerberos on port 88, and others up to port 65535. Define outbound rules for the same protocols and ports to ensure full communication. Include appropriate tagging to easily identify the security group and provide clear descriptions for each rule. Utilize variables for streamlined configuration, including application name and environment settings."}, {"role": "assistant", "content": "\n#File: active-directory-nsg-client.tf\n######################################\n## Active Directory NSG for Clients ##\n######################################\n\n# Create the security group for AD Users\nresource \"azurerm_network_security_group\" \"active-directory-client-nsg\" {\n  name                = \"${replace(lower(var.app_name), \" \", \"-\")}-${var.environment}-client-nsg\"\n  location            = data.azurerm_resource_group.network-rg.location\n  resource_group_name = data.azurerm_resource_group.network-rg.name\n\n  tags = {\n    Name        = \"${lower(var.app_name)}-${var.environment}-client-sg\"\n    description = \"NSG for AD Clients\"\n    Environment = var.environment\n  }\n}\n\n###################\n## Inbound Rules ##\n###################\n\n# Port 53 DNS UDP\nresource \"azurerm_network_security_rule\" \"udp_53_client_inbound\" {\n  depends_on = [data.azurerm_resource_group.network-rg]\n\n  count = length(local.dns_servers)\n\n  network_security_group_name = azurerm_network_security_group.active-directory-client-nsg.name\n  resource_group_name         = data.azurerm_resource_group.network-rg.name\n  name                        = \"AD 53 DNS UDP - DC${count.index+1} Inbound\"\n  description                 = \"AD 53 DNS UDP - DC${count.index+1} Inbound\"\n  priority                    = (150 + count.index)\n  direction                   = \"Inbound\"\n  access                      = \"Allow\"\n  protocol                    = \"Udp\"\n  source_port_range           = \"*\"\n  destination_port_range      = \"53\"\n  source_address_prefix       = local.dns_servers[count.index]\n  destination_address_prefix  = \"*\"\n}\n\n# Port 88 Kerberos TCP\nresource \"azurerm_network_security_rule\" \"tcp_88_client_inbound\" {\n  depends_on = [data.azurerm_resource_group.network-rg]\n\n  count = length(local.dns_servers)\n\n  network_security_group_name = azurerm_network_security_group.active-directory-client-nsg.name\n  resource_group_name         = data.azurerm_resource_group.network-rg.name\n  name                        = \"AD 88 Kerberos TCP - DC${count.index+1} Inbound\"\n  description                 = \"AD 88 Kerberos TCP - DC${count.index+1} Inbound\"\n  priority                    = (160 + count.index)\n  direction                   = \"Inbound\"\n  access                      = \"Allow\"\n  protocol                    = \"Tcp\"\n  source_port_range           = \"*\"\n  destination_port_range      = \"88\"\n  source_address_prefix       = local.dns_servers[count.index]\n  destination_address_prefix  = \"*\"\n}\n\n# Port 135 RPC TCP\nresource \"azurerm_network_security_rule\" \"tcp_135_client_inbound\" {\n  depends_on = [data.azurerm_resource_group.network-rg]\n\n  count = length(local.dns_servers)\n\n  network_security_group_name = azurerm_network_security_group.active-directory-client-nsg.name\n  resource_group_name         = data.azurerm_resource_group.network-rg.name\n  name                        = \"AD 135 RPC TCP - DC${count.index+1} Inbound\"\n  description                 = \"AD 135 RPC TCP - DC${count.index+1} Inbound\"\n  priority                    = (170 + count.index)\n  direction                   = \"Inbound\"\n  access                      = \"Allow\"\n  protocol                    = \"Tcp\"\n  source_port_range           = \"*\"\n  destination_port_range      = \"135\"\n  source_address_prefix       = local.dns_servers[count.index]\n  destination_address_prefix  = \"*\"\n}\n\n# Port 389 LDAP TCP\nresource \"azurerm_network_security_rule\" \"tcp_389_client_inbound\" {\n  depends_on = [data.azurerm_resource_group.network-rg]\n\n  count = length(local.dns_servers)\n\n  network_security_group_name = azurerm_network_security_group.active-directory-client-nsg.name\n  resource_group_name         = data.azurerm_resource_group.network-rg.name\n  name                        = \"AD 389 LDAP TCP - DC${count.index+1} Inbound\"\n  description                 = \"AD 389 LDAP TCP - DC${count.index+1} Inbound\"\n  priority                    = (180 + count.index)\n  direction                   = \"Inbound\"\n  access                      = \"Allow\"\n  protocol                    = \"Tcp\"\n  source_port_range           = \"*\"\n  destination_port_range      = \"389\"\n  source_address_prefix       = local.dns_servers[count.index]\n  destination_address_prefix  = \"*\"\n}\n\n# Port 445 SMB TCP\nresource \"azurerm_network_security_rule\" \"tcp_445_client_inbound\" {\n  depends_on = [data.azurerm_resource_group.network-rg]\n\n  count = length(local.dns_servers)\n\n  network_security_group_name = azurerm_network_security_group.active-directory-client-nsg.name\n  resource_group_name         = data.azurerm_resource_group.network-rg.name\n  name                        = \"AD 445 SMB TCP - DC${count.index+1} Inbound\"\n  description                 = \"AD 445 SMB TCP - DC${count.index+1} Inbound\"\n  priority                    = (190 + count.index)\n  direction                   = \"Inbound\"\n  access                      = \"Allow\"\n  protocol                    = \"Tcp\"\n  source_port_range           = \"*\"\n  destination_port_range      = \"445\"\n  source_address_prefix       = local.dns_servers[count.index]\n  destination_address_prefix  = \"*\"\n}\n\n# Port 49152-65535 TCP\nresource \"azurerm_network_security_rule\" \"tcp_49152-65535_client_inbound\" {\n  depends_on = [data.azurerm_resource_group.network-rg]\n\n  count = length(local.dns_servers)\n\n  network_security_group_name = azurerm_network_security_group.active-directory-client-nsg.name\n  resource_group_name         = data.azurerm_resource_group.network-rg.name\n  name                        = \"AD 49152-65535 TCP - DC${count.index+1} Inbound\"\n  description                 = \"AD 49152-65535 TCP - DC${count.index+1} Inbound\"\n  priority                    = (200 + count.index)\n  direction                   = \"Inbound\"\n  access                      = \"Allow\"\n  protocol                    = \"Tcp\"\n  source_port_range           = \"*\"\n  destination_port_range      = \"49152-65535\"\n  source_address_prefix       = local.dns_servers[count.index]\n  destination_address_prefix  = \"*\"\n}\n\n# Port 49152-65535 UDP\nresource \"azurerm_network_security_rule\" \"udp_49152-65535_client_inbound\" {\n  depends_on = [data.azurerm_resource_group.network-rg]\n\n  count = length(local.dns_servers)\n\n  network_security_group_name = azurerm_network_security_group.active-directory-client-nsg.name\n  resource_group_name         = data.azurerm_resource_group.network-rg.name\n  name                        = \"AD 49152-65535 UDP - DC${count.index+1} Inbound\"\n  description                 = \"AD 49152-65535 UDP - DC${count.index+1} Inbound\"\n  priority                    = (210 + count.index)\n  direction                   = \"Inbound\"\n  access                      = \"Allow\"\n  protocol                    = \"Udp\"\n  source_port_range           = \"*\"\n  destination_port_range      = \"49152-65535\"\n  source_address_prefix       = local.dns_servers[count.index]\n  destination_address_prefix  = \"*\"\n}\n\n# Allow ping AD Domain Controllers\nresource \"azurerm_network_security_rule\" \"icmp_client_inbound\" {\n  depends_on = [data.azurerm_resource_group.network-rg]\n\n  count = length(local.dns_servers)\n\n  network_security_group_name = azurerm_network_security_group.active-directory-client-nsg.name\n  resource_group_name         = data.azurerm_resource_group.network-rg.name\n  name                        = \"AD Ping to DC${count.index+1} Inbound\"\n  description                 = \"AD Ping to DC${count.index+1} Inbound\"\n  priority                    = (220 + count.index)\n  direction                   = \"Inbound\"\n  access                      = \"Allow\"\n  protocol                    = \"Icmp\"\n  source_port_range           = \"*\"\n  destination_port_range      = \"*\"\n  source_address_prefix       = local.dns_servers[count.index]\n  destination_address_prefix  = \"*\"\n}\n\n####################\n## Outbound Rules ##\n####################\n\n# Port 53 DNS UDP\nresource \"azurerm_network_security_rule\" \"udp_53_client_outbound\" {\n  depends_on = [data.azurerm_resource_group.network-rg]\n\n  count = length(local.dns_servers)\n\n  network_security_group_name = azurerm_network_security_group.active-directory-client-nsg.name\n  resource_group_name         = data.azurerm_resource_group.network-rg.name\n  name                        = \"AD 53 DNS UDP - DC${count.index+1} Outbound\"\n  description                 = \"AD 53 DNS UDP - DC${count.index+1} Outbound\"\n  priority                    = (150 + count.index)\n  direction                   = \"Outbound\"\n  access                      = \"Allow\"\n  protocol                    = \"Udp\"\n  source_port_range           = \"*\"\n  destination_port_range      = \"53\"\n  source_address_prefix       = \"*\"\n  destination_address_prefix  = local.dns_servers[count.index]\n}\n\n# Port 88 Kerberos TCP\nresource \"azurerm_network_security_rule\" \"tcp_88_client_outbound\" {\n  depends_on = [data.azurerm_resource_group.network-rg]\n\n  count = length(local.dns_servers)\n\n  network_security_group_name = azurerm_network_security_group.active-directory-client-nsg.name\n  resource_group_name         = data.azurerm_resource_group.network-rg.name\n  name                        = \"AD 88 Kerberos TCP - DC${count.index+1} Outbound\"\n  description                 = \"AD 88 Kerberos TCP - DC${count.index+1} Outbound\"\n  priority                    = (160 + count.index)\n  direction                   = \"Outbound\"\n  access                      = \"Allow\"\n  protocol                    = \"Tcp\"\n  source_port_range           = \"*\"\n  destination_port_range      = \"88\"\n  source_address_prefix       = \"*\"\n  destination_address_prefix  = local.dns_servers[count.index]\n}\n\n# Port 135 RPC TCP\nresource \"azurerm_network_security_rule\" \"tcp_135_client_outbound\" {\n  depends_on = [data.azurerm_resource_group.network-rg]\n\n  count = length(local.dns_servers)\n\n  network_security_group_name = azurerm_network_security_group.active-directory-client-nsg.name\n  resource_group_name         = data.azurerm_resource_group.network-rg.name\n  name                        = \"AD 135 RPC TCP - DC${count.index+1} Outbound\"\n  description                 = \"AD 135 RPC TCP - DC${count.index+1} Outbound\"\n  priority                    = (170 + count.index)\n  direction                   = \"Outbound\"\n  access                      = \"Allow\"\n  protocol                    = \"Tcp\"\n  source_port_range           = \"*\"\n  destination_port_range      = \"135\"\n  source_address_prefix       = \"*\"\n  destination_address_prefix  = local.dns_servers[count.index]\n}\n\n# Port 389 LDAP TCP\nresource \"azurerm_network_security_rule\" \"tcp_389_client_outbound\" {\n  depends_on = [data.azurerm_resource_group.network-rg]\n\n  count = length(local.dns_servers)\n\n  network_security_group_name = azurerm_network_security_group.active-directory-client-nsg.name\n  resource_group_name         = data.azurerm_resource_group.network-rg.name\n  name                        = \"AD 389 LDAP TCP - DC${count.index+1} Outbound\"\n  description                 = \"AD 389 LDAP TCP - DC${count.index+1} Outbound\"\n  priority                    = (180 + count.index)\n  direction                   = \"Outbound\"\n  access                      = \"Allow\"\n  protocol                    = \"Tcp\"\n  source_port_range           = \"*\"\n  destination_port_range      = \"389\"\n  source_address_prefix       = \"*\"\n  destination_address_prefix  = local.dns_servers[count.index]\n}\n\n# Port 445 SMB TCP\nresource \"azurerm_network_security_rule\" \"tcp_445_client_outbound\" {\n  depends_on = [data.azurerm_resource_group.network-rg]\n\n  count = length(local.dns_servers)\n\n  network_security_group_name = azurerm_network_security_group.active-directory-client-nsg.name\n  resource_group_name         = data.azurerm_resource_group.network-rg.name\n  name                        = \"AD 445 SMB TCP - DC${count.index+1} Outbound\"\n  description                 = \"AD 445 SMB TCP - DC${count.index+1} Outbound\"\n  priority                    = (190 + count.index)\n  direction                   = \"Outbound\"\n  access                      = \"Allow\"\n  protocol                    = \"Tcp\"\n  source_port_range           = \"*\"\n  destination_port_range      = \"445\"\n  source_address_prefix       = \"*\"\n  destination_address_prefix  = local.dns_servers[count.index]\n}\n\n# Port 49152-65535 TCP\nresource \"azurerm_network_security_rule\" \"tcp_49152-65535_client_outbound\" {\n  depends_on = [data.azurerm_resource_group.network-rg]\n\n  count = length(local.dns_servers)\n\n  network_security_group_name = azurerm_network_security_group.active-directory-client-nsg.name\n  resource_group_name         = data.azurerm_resource_group.network-rg.name\n  name                        = \"AD 49152-65535 TCP - DC${count.index+1} Outbound\"\n  description                 = \"AD 49152-65535 TCP - DC${count.index+1} Outbound\"\n  priority                    = (200 + count.index)\n  direction                   = \"Outbound\"\n  access                      = \"Allow\"\n  protocol                    = \"Tcp\"\n  source_port_range           = \"*\"\n  destination_port_range      = \"49152-65535\"\n  source_address_prefix       = \"*\"\n  destination_address_prefix  = local.dns_servers[count.index]\n}\n\n# Port 49152-65535 UDP\nresource \"azurerm_network_security_rule\" \"udp_49152-65535_client_outbound\" {\n  depends_on = [data.azurerm_resource_group.network-rg]\n\n  count = length(local.dns_servers)\n\n  network_security_group_name = azurerm_network_security_group.active-directory-client-nsg.name\n  resource_group_name         = data.azurerm_resource_group.network-rg.name\n  name                        = \"AD 49152-65535 UDP - DC${count.index+1} Outbound\"\n  description                 = \"AD 49152-65535 UDP - DC${count.index+1} Outbound\"\n  priority                    = (210 + count.index)\n  direction                   = \"Outbound\"\n  access                      = \"Allow\"\n  protocol                    = \"Udp\"\n  source_port_range           = \"*\"\n  destination_port_range      = \"49152-65535\"\n  source_address_prefix       = \"*\"\n  destination_address_prefix  = local.dns_servers[count.index]\n}\n\n# Allow ping AD Domain Controllers\nresource \"azurerm_network_security_rule\" \"icmp_client_outbound\" {\n  depends_on = [data.azurerm_resource_group.network-rg]\n\n  count = length(local.dns_servers)\n\n  network_security_group_name = azurerm_network_security_group.active-directory-client-nsg.name\n  resource_group_name         = data.azurerm_resource_group.network-rg.name\n  name                        = \"AD Ping to DC${count.index+1} Outbound\"\n  description                 = \"AD Ping to DC${count.index+1} Outbound\"\n  priority                    = (220 + count.index)\n  direction                   = \"Outbound\"\n  access                      = \"Allow\"\n  protocol                    = \"Icmp\"\n  source_port_range           = \"*\"\n  destination_port_range      = \"*\"\n  source_address_prefix       = \"*\"\n  destination_address_prefix  = local.dns_servers[count.index]\n}\n\n#File: active-directory-nsg-dc.tf\n#################################################\n## Active Directory NSG for Domain Controllers ##\n#################################################\n\n# Create the security group for AD Domain Controllers\nresource \"azurerm_network_security_group\" \"active-directory-dc-nsg\" {\n  name                = \"${replace(lower(var.app_name), \" \", \"-\")}-${var.environment}-dc-nsg\"\n  location            = data.azurerm_resource_group.network-rg.location\n  resource_group_name = data.azurerm_resource_group.network-rg.name\n\n  tags = {\n    Name = \"${lower(var.app_name)}-${var.environment}-dc-sg\"\n    description = \"NSG For AD Domain Controllers\"\n    Environment = var.environment\n  }\n}\n\n###################\n## Inbound Rules ##\n###################\n\n# Port 53 DNS TCP\nresource \"azurerm_network_security_rule\" \"tcp_53_dc_inbound\" {\n  depends_on = [data.azurerm_resource_group.network-rg]\n\n  count = length(local.dns_servers)\n\n  network_security_group_name = azurerm_network_security_group.active-directory-dc-nsg.name\n  resource_group_name         = data.azurerm_resource_group.network-rg.name\n  name                        = \"AD 53 DNS TCP - DC${count.index+1} Inbound\"\n  description                 = \"AD 53 DNS TCP - DC${count.index+1} Inbound\"\n  priority                    = (100 + count.index)\n  direction                   = \"Inbound\"\n  access                      = \"Allow\"\n  protocol                    = \"Tcp\"\n  source_port_range           = \"*\"\n  destination_port_range      = \"53\"\n  source_address_prefix       = local.dns_servers[count.index]\n  destination_address_prefix  = \"*\"\n}\n\n# Port 53 DNS UDP\nresource \"azurerm_network_security_rule\" \"udp_53_dc_inbound\" {\n  depends_on = [data.azurerm_resource_group.network-rg]\n\n  count = length(local.dns_servers)\n\n  network_security_group_name = azurerm_network_security_group.active-directory-dc-nsg.name\n  resource_group_name         = data.azurerm_resource_group.network-rg.name\n  name                        = \"AD 53 DNS UDP - DC${count.index+1} Inbound\"\n  description                 = \"AD 53 DNS UDP - DC${count.index+1} Inbound\"\n  priority                    = (110 + count.index)\n  direction                   = \"Inbound\"\n  access                      = \"Allow\"\n  protocol                    = \"Udp\"\n  source_port_range           = \"*\"\n  destination_port_range      = \"53\"\n  source_address_prefix       = local.dns_servers[count.index]\n  destination_address_prefix  = \"*\"\n}\n\n# Port 88 Kerberos TCP\nresource \"azurerm_network_security_rule\" \"tcp_88_dc_inbound\" {\n  depends_on = [data.azurerm_resource_group.network-rg]\n\n  count = length(local.dns_servers)\n\n  network_security_group_name = azurerm_network_security_group.active-directory-dc-nsg.name\n  resource_group_name         = data.azurerm_resource_group.network-rg.name\n  name                        = \"AD 88 Kerberos TCP - DC${count.index+1} Inbound\"\n  description                 = \"AD 88 Kerberos TCP - DC${count.index+1} Inbound\"\n  priority                    = (120 + count.index)\n  direction                   = \"Inbound\"\n  access                      = \"Allow\"\n  protocol                    = \"Tcp\"\n  source_port_range           = \"*\"\n  destination_port_range      = \"88\"\n  source_address_prefix       = local.dns_servers[count.index]\n  destination_address_prefix  = \"*\"\n}\n\n# Port 88 Kerberos UDP\nresource \"azurerm_network_security_rule\" \"udp_88_dc_inbound\" {\n  depends_on = [data.azurerm_resource_group.network-rg]\n\n  count = length(local.dns_servers)\n\n  network_security_group_name = azurerm_network_security_group.active-directory-dc-nsg.name\n  resource_group_name         = data.azurerm_resource_group.network-rg.name\n  name                        = \"AD 88 Kerberos UDP - DC${count.index+1} Inbound\"\n  description                 = \"AD 88 Kerberos UDP - DC${count.index+1} Inbound\"\n  priority                    = (130 + count.index)\n  direction                   = \"Inbound\"\n  access                      = \"Allow\"\n  protocol                    = \"Udp\"\n  source_port_range           = \"*\"\n  destination_port_range      = \"88\"\n  source_address_prefix       = local.dns_servers[count.index]\n  destination_address_prefix  = \"*\"\n}\n\n# Port 123 W32Time UDP\nresource \"azurerm_network_security_rule\" \"udp_123_dc_inbound\" {\n  depends_on = [data.azurerm_resource_group.network-rg]\n\n  count = length(local.dns_servers)\n\n  network_security_group_name = azurerm_network_security_group.active-directory-dc-nsg.name\n  resource_group_name         = data.azurerm_resource_group.network-rg.name\n  name                        = \"AD 123 W32Time UDP - DC${count.index+1} Inbound\"\n  description                 = \"AD 123 W32Time UDP - DC${count.index+1} Inbound\"\n  priority                    = (140 + count.index)\n  direction                   = \"Inbound\"\n  access                      = \"Allow\"\n  protocol                    = \"Udp\"\n  source_port_range           = \"*\"\n  destination_port_range      = \"123\"\n  source_address_prefix       = local.dns_servers[count.index]\n  destination_address_prefix  = \"*\"\n}\n\n# Port 135 RPC TCP\nresource \"azurerm_network_security_rule\" \"tcp_135_dc_inbound\" {\n  depends_on = [data.azurerm_resource_group.network-rg]\n\n  count = length(local.dns_servers)\n\n  network_security_group_name = azurerm_network_security_group.active-directory-dc-nsg.name\n  resource_group_name         = data.azurerm_resource_group.network-rg.name\n  name                        = \"AD 135 RPC TCP - DC${count.index+1} Inbound\"\n  description                 = \"AD 135 RPC TCP - DC${count.index+1} Inbound\"\n  priority                    = (150 + count.index)\n  direction                   = \"Inbound\"\n  access                      = \"Allow\"\n  protocol                    = \"Tcp\"\n  source_port_range           = \"*\"\n  destination_port_range      = \"135\"\n  source_address_prefix       = local.dns_servers[count.index]\n  destination_address_prefix  = \"*\"\n}\n\n# Port 137-138 NetLogon UDP\nresource \"azurerm_network_security_rule\" \"udp_137-138_dc_inbound\" {\n  depends_on = [data.azurerm_resource_group.network-rg]\n\n  count = length(local.dns_servers)\n\n  network_security_group_name = azurerm_network_security_group.active-directory-dc-nsg.name\n  resource_group_name         = data.azurerm_resource_group.network-rg.name\n  name                        = \"AD 137-138 NetLogon UDP - DC${count.index+1} Inbound\"\n  description                 = \"AD 137-138 NetLogon UDP - DC${count.index+1} Inbound\"\n  priority                    = (160 + count.index)\n  direction                   = \"Inbound\"\n  access                      = \"Allow\"\n  protocol                    = \"Udp\"\n  source_port_range           = \"*\"\n  destination_port_range      = \"137-138\"\n  source_address_prefix       = local.dns_servers[count.index]\n  destination_address_prefix  = \"*\"\n}\n\n# Port 139 NetLogon TCP\nresource \"azurerm_network_security_rule\" \"tcp_139_dc_inbound\" {\n  depends_on = [data.azurerm_resource_group.network-rg]\n\n  count = length(local.dns_servers)\n\n  network_security_group_name = azurerm_network_security_group.active-directory-dc-nsg.name\n  resource_group_name         = data.azurerm_resource_group.network-rg.name\n  name                        = \"AD 139 NetLogon TCP - DC${count.index+1} Inbound\"\n  description                 = \"AD 139 NetLogon TCP - DC${count.index+1} Inbound\"\n  priority                    = (170 + count.index)\n  direction                   = \"Inbound\"\n  access                      = \"Allow\"\n  protocol                    = \"Udp\"\n  source_port_range           = \"*\"\n  destination_port_range      = \"139\"\n  source_address_prefix       = local.dns_servers[count.index]\n  destination_address_prefix  = \"*\"\n}\n\n# Port 389 LDAP TCP\nresource \"azurerm_network_security_rule\" \"tcp_389_dc_inbound\" {\n  depends_on = [data.azurerm_resource_group.network-rg]\n\n  count = length(local.dns_servers)\n\n  network_security_group_name = azurerm_network_security_group.active-directory-dc-nsg.name\n  resource_group_name         = data.azurerm_resource_group.network-rg.name\n  name                        = \"AD 389 LDAP TCP - DC${count.index+1} Inbound\"\n  description                 = \"AD 389 LDAP TCP - DC${count.index+1} Inbound\"\n  priority                    = (180 + count.index)\n  direction                   = \"Inbound\"\n  access                      = \"Allow\"\n  protocol                    = \"Tcp\"\n  source_port_range           = \"*\"\n  destination_port_range      = \"389\"\n  source_address_prefix       = local.dns_servers[count.index]\n  destination_address_prefix  = \"*\"\n}\n\n# Port 389 LDAP UDP\nresource \"azurerm_network_security_rule\" \"udp_389_dc_inbound\" {\n  depends_on = [data.azurerm_resource_group.network-rg]\n\n  count = length(local.dns_servers)\n\n  network_security_group_name = azurerm_network_security_group.active-directory-dc-nsg.name\n  resource_group_name         = data.azurerm_resource_group.network-rg.name\n  name                        = \"AD 389 LDAP UDP - DC${count.index+1} Inbound\"\n  description                 = \"AD 389 LDAP UDP - DC${count.index+1} Inbound\"\n  priority                    = (190 + count.index)\n  direction                   = \"Inbound\"\n  access                      = \"Allow\"\n  protocol                    = \"Udp\"\n  source_port_range           = \"*\"\n  destination_port_range      = \"389\"\n  source_address_prefix       = local.dns_servers[count.index]\n  destination_address_prefix  = \"*\"\n}\n\n# Port 445 SMB TCP\nresource \"azurerm_network_security_rule\" \"tcp_445_dc_inbound\" {\n  depends_on = [data.azurerm_resource_group.network-rg]\n\n  count = length(local.dns_servers)\n\n  network_security_group_name = azurerm_network_security_group.active-directory-dc-nsg.name\n  resource_group_name         = data.azurerm_resource_group.network-rg.name\n  name                        = \"AD 445 SMB TCP - DC${count.index+1} Inbound\"\n  description                 = \"AD 445 SMB TCP - DC${count.index+1} Inbound\"\n  priority                    = (200 + count.index)\n  direction                   = \"Inbound\"\n  access                      = \"Allow\"\n  protocol                    = \"Tcp\"\n  source_port_range           = \"*\"\n  destination_port_range      = \"445\"\n  source_address_prefix       = local.dns_servers[count.index]\n  destination_address_prefix  = \"*\"\n}\n\n# Port 464 Kerberos Authentication TCP\nresource \"azurerm_network_security_rule\" \"tcp_464_dc_inbound\" {\n  depends_on = [data.azurerm_resource_group.network-rg]\n\n  count = length(local.dns_servers)\n\n  network_security_group_name = azurerm_network_security_group.active-directory-dc-nsg.name\n  resource_group_name         = data.azurerm_resource_group.network-rg.name\n  name                        = \"AD 464 Kerberos Authentication TCP - DC${count.index+1} Inbound\"\n  description                 = \"AD 464 Kerberos Authentication TCP - DC${count.index+1} Inbound\"\n  priority                    = (210 + count.index)\n  direction                   = \"Inbound\"\n  access                      = \"Allow\"\n  protocol                    = \"Tcp\"\n  source_port_range           = \"*\"\n  destination_port_range      = \"464\"\n  source_address_prefix       = local.dns_servers[count.index]\n  destination_address_prefix  = \"*\"\n}\n\n# Port 464 Kerberos Authentication UDP\nresource \"azurerm_network_security_rule\" \"udp_464_dc_inbound\" {\n  depends_on = [data.azurerm_resource_group.network-rg]\n\n  count = length(local.dns_servers)\n\n  network_security_group_name = azurerm_network_security_group.active-directory-dc-nsg.name\n  resource_group_name         = data.azurerm_resource_group.network-rg.name\n  name                        = \"AD 464 Kerberos Authentication UDP - DC${count.index+1} Inbound\"\n  description                 = \"AD 464 Kerberos Authentication UDP - DC${count.index+1} Inbound\"\n  priority                    = (220 + count.index)\n  direction                   = \"Inbound\"\n  access                      = \"Allow\"\n  protocol                    = \"Udp\"\n  source_port_range           = \"*\"\n  destination_port_range      = \"464\"\n  source_address_prefix       = local.dns_servers[count.index]\n  destination_address_prefix  = \"*\"\n}\n\n# Port 636 LDAP SSL TCP\nresource \"azurerm_network_security_rule\" \"tcp_636_dc_inbound\" {\n  depends_on = [data.azurerm_resource_group.network-rg]\n\n  count = length(local.dns_servers)\n\n  network_security_group_name = azurerm_network_security_group.active-directory-dc-nsg.name\n  resource_group_name         = data.azurerm_resource_group.network-rg.name\n  name                        = \"AD 636 LDAP SSL TCP - DC${count.index+1} Inbound\"\n  description                 = \"AD 636 LDAP SSL TCP - DC${count.index+1} Inbound\"\n  priority                    = (230 + count.index)\n  direction                   = \"Inbound\"\n  access                      = \"Allow\"\n  protocol                    = \"Tcp\"\n  source_port_range           = \"*\"\n  destination_port_range      = \"636\"\n  source_address_prefix       = local.dns_servers[count.index]\n  destination_address_prefix  = \"*\"\n}\n\n# Port 3268-3269 LDAP GC TCP\nresource \"azurerm_network_security_rule\" \"tcp_3268-3269_dc_inbound\" {\n  depends_on = [data.azurerm_resource_group.network-rg]\n\n  count = length(local.dns_servers)\n\n  network_security_group_name = azurerm_network_security_group.active-directory-dc-nsg.name\n  resource_group_name         = data.azurerm_resource_group.network-rg.name\n  name                        = \"AD 3268-3269 LDAP GC TCP - DC${count.index+1} Inbound\"\n  description                 = \"AD 3268-3269 LDAP GC TCP - DC${count.index+1} Inbound\"\n  priority                    = (240 + count.index)\n  direction                   = \"Inbound\"\n  access                      = \"Allow\"\n  protocol                    = \"Tcp\"\n  source_port_range           = \"*\"\n  destination_port_range      = \"3268-3269\"\n  source_address_prefix       = local.dns_servers[count.index]\n  destination_address_prefix  = \"*\"\n}\n\n# Port 49152-65535 TCP\nresource \"azurerm_network_security_rule\" \"tcp_49152-65535_dc_inbound\" {\n  depends_on = [data.azurerm_resource_group.network-rg]\n\n  count = length(local.dns_servers)\n\n  network_security_group_name = azurerm_network_security_group.active-directory-dc-nsg.name\n  resource_group_name         = data.azurerm_resource_group.network-rg.name\n  name                        = \"AD 49152-65535 TCP - DC${count.index+1} Inbound\"\n  description                 = \"AD 49152-65535 TCP - DC${count.index+1} Inbound\"\n  priority                    = (250 + count.index)\n  direction                   = \"Inbound\"\n  access                      = \"Allow\"\n  protocol                    = \"Tcp\"\n  source_port_range           = \"*\"\n  destination_port_range      = \"49152-65535\"\n  source_address_prefix       = local.dns_servers[count.index]\n  destination_address_prefix  = \"*\"\n}\n\n# Port 49152-65535 UDP\nresource \"azurerm_network_security_rule\" \"udp_49152-65535_dc_inbound\" {\n  depends_on = [data.azurerm_resource_group.network-rg]\n\n  count = length(local.dns_servers)\n\n  network_security_group_name = azurerm_network_security_group.active-directory-dc-nsg.name\n  resource_group_name         = data.azurerm_resource_group.network-rg.name\n  name                        = \"AD 49152-65535 UDP - DC${count.index+1} Inbound\"\n  description                 = \"AD 49152-65535 UDP - DC${count.index+1} Inbound\"\n  priority                    = (260 + count.index)\n  direction                   = \"Inbound\"\n  access                      = \"Allow\"\n  protocol                    = \"Udp\"\n  source_port_range           = \"*\"\n  destination_port_range      = \"49152-65535\"\n  source_address_prefix       = local.dns_servers[count.index]\n  destination_address_prefix  = \"*\"\n}\n\n# Allow ping AD Domain Controllers\nresource \"azurerm_network_security_rule\" \"icmp_dc_inbound\" {\n  depends_on = [data.azurerm_resource_group.network-rg]\n\n  count = length(local.dns_servers)\n\n  network_security_group_name = azurerm_network_security_group.active-directory-dc-nsg.name\n  resource_group_name         = data.azurerm_resource_group.network-rg.name\n  name                        = \"AD Ping to DC${count.index+1} Inbound\"\n  description                 = \"AD Ping to DC${count.index+1} Inbound\"\n  priority                    = (270 + count.index)\n  direction                   = \"Inbound\"\n  access                      = \"Allow\"\n  protocol                    = \"Icmp\"\n  source_port_range           = \"*\"\n  destination_port_range      = \"*\"\n  source_address_prefix       = local.dns_servers[count.index]\n  destination_address_prefix  = \"*\"\n}\n\n####################\n## Outbound Rules ##\n####################\n\n# Port 53 DNS TCP\nresource \"azurerm_network_security_rule\" \"tcp_53_dc_outbound\" {\n  depends_on = [data.azurerm_resource_group.network-rg]\n\n  count = length(local.dns_servers)\n\n  network_security_group_name = azurerm_network_security_group.active-directory-dc-nsg.name\n  resource_group_name         = data.azurerm_resource_group.network-rg.name\n  name                        = \"AD 53 DNS TCP - DC${count.index+1} Outbound\"\n  description                 = \"AD 53 DNS TCP - DC${count.index+1} Outbound\"\n  priority                    = (100 + count.index)\n  direction                   = \"Outbound\"\n  access                      = \"Allow\"\n  protocol                    = \"Tcp\"\n  source_port_range           = \"*\"\n  destination_port_range      = \"53\"\n  source_address_prefix       = \"*\"\n  destination_address_prefix  = local.dns_servers[count.index]\n}\n\n# Port 53 DNS UDP\nresource \"azurerm_network_security_rule\" \"udp_53_dc_outbound\" {\n  depends_on = [data.azurerm_resource_group.network-rg]\n\n  count = length(local.dns_servers)\n\n  network_security_group_name = azurerm_network_security_group.active-directory-dc-nsg.name\n  resource_group_name         = data.azurerm_resource_group.network-rg.name\n  name                        = \"AD 53 DNS UDP - DC${count.index+1} Outbound\"\n  description                 = \"AD 53 DNS UDP - DC${count.index+1} Outbound\"\n  priority                    = (110 + count.index)\n  direction                   = \"Outbound\"\n  access                      = \"Allow\"\n  protocol                    = \"Udp\"\n  source_port_range           = \"*\"\n  destination_port_range      = \"53\"\n  source_address_prefix       = \"*\"\n  destination_address_prefix  = local.dns_servers[count.index]\n}\n\n# Port 88 Kerberos TCP\nresource \"azurerm_network_security_rule\" \"tcp_88_dc_outbound\" {\n  depends_on = [data.azurerm_resource_group.network-rg]\n\n  count = length(local.dns_servers)\n\n  network_security_group_name = azurerm_network_security_group.active-directory-dc-nsg.name\n  resource_group_name         = data.azurerm_resource_group.network-rg.name\n  name                        = \"AD 88 Kerberos TCP - DC${count.index+1} Outbound\"\n  description                 = \"AD 88 Kerberos TCP - DC${count.index+1} Outbound\"\n  priority                    = (120 + count.index)\n  direction                   = \"Outbound\"\n  access                      = \"Allow\"\n  protocol                    = \"Tcp\"\n  source_port_range           = \"*\"\n  destination_port_range      = \"88\"\n  source_address_prefix       = \"*\"\n  destination_address_prefix  = local.dns_servers[count.index]\n}\n\n# Port 88 Kerberos UDP\nresource \"azurerm_network_security_rule\" \"udp_88_dc_outbound\" {\n  depends_on = [data.azurerm_resource_group.network-rg]\n\n  count = length(local.dns_servers)\n\n  network_security_group_name = azurerm_network_security_group.active-directory-dc-nsg.name\n  resource_group_name         = data.azurerm_resource_group.network-rg.name\n  name                        = \"AD 88 Kerberos UDP - DC${count.index+1} Outbound\"\n  description                 = \"AD 88 Kerberos UDP - DC${count.index+1} Outbound\"\n  priority                    = (130 + count.index)\n  direction                   = \"Outbound\"\n  access                      = \"Allow\"\n  protocol                    = \"Udp\"\n  source_port_range           = \"*\"\n  destination_port_range      = \"88\"\n  source_address_prefix       = \"*\"\n  destination_address_prefix  = local.dns_servers[count.index]\n}\n\n# Port 123 W32Time UDP\nresource \"azurerm_network_security_rule\" \"udp_123_dc_outbound\" {\n  depends_on = [data.azurerm_resource_group.network-rg]\n\n  count = length(local.dns_servers)\n\n  network_security_group_name = azurerm_network_security_group.active-directory-dc-nsg.name\n  resource_group_name         = data.azurerm_resource_group.network-rg.name\n  name                        = \"AD 123 W32Time UDP - DC${count.index+1} Outbound\"\n  description                 = \"AD 123 W32Time UDP - DC${count.index+1} Outbound\"\n  priority                    = (140 + count.index)\n  direction                   = \"Outbound\"\n  access                      = \"Allow\"\n  protocol                    = \"Udp\"\n  source_port_range           = \"*\"\n  destination_port_range      = \"123\"\n  source_address_prefix       = \"*\"\n  destination_address_prefix  = local.dns_servers[count.index]\n}\n\n# Port 135 RPC TCP\nresource \"azurerm_network_security_rule\" \"tcp_135_dc_outbound\" {\n  depends_on = [data.azurerm_resource_group.network-rg]\n\n  count = length(local.dns_servers)\n\n  network_security_group_name = azurerm_network_security_group.active-directory-dc-nsg.name\n  resource_group_name         = data.azurerm_resource_group.network-rg.name\n  name                        = \"AD 135 RPC TCP - DC${count.index+1} Outbound\"\n  description                 = \"AD 135 RPC TCP - DC${count.index+1} Outbound\"\n  priority                    = (150 + count.index)\n  direction                   = \"Outbound\"\n  access                      = \"Allow\"\n  protocol                    = \"Tcp\"\n  source_port_range           = \"*\"\n  destination_port_range      = \"135\"\n  source_address_prefix       = \"*\"\n  destination_address_prefix  = local.dns_servers[count.index]\n}\n\n# Port 137-138 NetLogon UDP\nresource \"azurerm_network_security_rule\" \"udp_137-138_dc_outbound\" {\n  depends_on = [data.azurerm_resource_group.network-rg]\n\n  count = length(local.dns_servers)\n\n  network_security_group_name = azurerm_network_security_group.active-directory-dc-nsg.name\n  resource_group_name         = data.azurerm_resource_group.network-rg.name\n  name                        = \"AD 137-138 NetLogon UDP - DC${count.index+1} Outbound\"\n  description                 = \"AD 137-138 NetLogon UDP - DC${count.index+1} Outbound\"\n  priority                    = (160 + count.index)\n  direction                   = \"Outbound\"\n  access                      = \"Allow\"\n  protocol                    = \"Udp\"\n  source_port_range           = \"*\"\n  destination_port_range      = \"137-138\"\n  source_address_prefix       = \"*\"\n  destination_address_prefix  = local.dns_servers[count.index]\n}\n\n# Port 139 NetLogon TCP\nresource \"azurerm_network_security_rule\" \"tcp_139_dc_outbound\" {\n  depends_on = [data.azurerm_resource_group.network-rg]\n\n  count = length(local.dns_servers)\n\n  network_security_group_name = azurerm_network_security_group.active-directory-dc-nsg.name\n  resource_group_name         = data.azurerm_resource_group.network-rg.name\n  name                        = \"AD 139 NetLogon TCP - DC${count.index+1} Outbound\"\n  description                 = \"AD 139 NetLogon TCP - DC${count.index+1} Outbound\"\n  priority                    = (170 + count.index)\n  direction                   = \"Outbound\"\n  access                      = \"Allow\"\n  protocol                    = \"Udp\"\n  source_port_range           = \"*\"\n  destination_port_range      = \"139\"\n  source_address_prefix       = \"*\"\n  destination_address_prefix  = local.dns_servers[count.index]\n}\n\n# Port 389 LDAP TCP\nresource \"azurerm_network_security_rule\" \"tcp_389_dc_outbound\" {\n  depends_on = [data.azurerm_resource_group.network-rg]\n\n  count = length(local.dns_servers)\n\n  network_security_group_name = azurerm_network_security_group.active-directory-dc-nsg.name\n  resource_group_name         = data.azurerm_resource_group.network-rg.name\n  name                        = \"AD 389 LDAP TCP - DC${count.index+1} Outbound\"\n  description                 = \"AD 389 LDAP TCP - DC${count.index+1} Outbound\"\n  priority                    = (180 + count.index)\n  direction                   = \"Outbound\"\n  access                      = \"Allow\"\n  protocol                    = \"Tcp\"\n  source_port_range           = \"*\"\n  destination_port_range      = \"389\"\n  source_address_prefix       = \"*\"\n  destination_address_prefix  = local.dns_servers[count.index]\n}\n\n# Port 389 LDAP UDP\nresource \"azurerm_network_security_rule\" \"udp_389_dc_outbound\" {\n  depends_on = [data.azurerm_resource_group.network-rg]\n\n  count = length(local.dns_servers)\n\n  network_security_group_name = azurerm_network_security_group.active-directory-dc-nsg.name\n  resource_group_name         = data.azurerm_resource_group.network-rg.name\n  name                        = \"AD 389 LDAP UDP - DC${count.index+1} Outbound\"\n  description                 = \"AD 389 LDAP UDP - DC${count.index+1} Outbound\"\n  priority                    = (190 + count.index)\n  direction                   = \"Outbound\"\n  access                      = \"Allow\"\n  protocol                    = \"Udp\"\n  source_port_range           = \"*\"\n  destination_port_range      = \"389\"\n  source_address_prefix       = \"*\"\n  destination_address_prefix  = local.dns_servers[count.index]\n}\n\n# Port 445 SMB TCP\nresource \"azurerm_network_security_rule\" \"tcp_445_dc_outbound\" {\n  depends_on = [data.azurerm_resource_group.network-rg]\n\n  count = length(local.dns_servers)\n\n  network_security_group_name = azurerm_network_security_group.active-directory-dc-nsg.name\n  resource_group_name         = data.azurerm_resource_group.network-rg.name\n  name                        = \"AD 445 SMB TCP - DC${count.index+1} Outbound\"\n  description                 = \"AD 445 SMB TCP - DC${count.index+1} Outbound\"\n  priority                    = (200 + count.index)\n  direction                   = \"Outbound\"\n  access                      = \"Allow\"\n  protocol                    = \"Tcp\"\n  source_port_range           = \"*\"\n  destination_port_range      = \"445\"\n  source_address_prefix       = \"*\"\n  destination_address_prefix  = local.dns_servers[count.index]\n}\n\n# Port 464 Kerberos Authentication TCP\nresource \"azurerm_network_security_rule\" \"tcp_464_dc_outbound\" {\n  depends_on = [data.azurerm_resource_group.network-rg]\n\n  count = length(local.dns_servers)\n\n  network_security_group_name = azurerm_network_security_group.active-directory-dc-nsg.name\n  resource_group_name         = data.azurerm_resource_group.network-rg.name\n  name                        = \"AD 464 Kerberos Authentication TCP - DC${count.index+1} Outbound\"\n  description                 = \"AD 464 Kerberos Authentication TCP - DC${count.index+1} Outbound\"\n  priority                    = (210 + count.index)\n  direction                   = \"Outbound\"\n  access                      = \"Allow\"\n  protocol                    = \"Tcp\"\n  source_port_range           = \"*\"\n  destination_port_range      = \"464\"\n  source_address_prefix       = \"*\"\n  destination_address_prefix  = local.dns_servers[count.index]\n}\n\n# Port 464 Kerberos Authentication UDP\nresource \"azurerm_network_security_rule\" \"udp_464_dc_outbound\" {\n  depends_on = [data.azurerm_resource_group.network-rg]\n\n  count = length(local.dns_servers)\n\n  network_security_group_name = azurerm_network_security_group.active-directory-dc-nsg.name\n  resource_group_name         = data.azurerm_resource_group.network-rg.name\n  name                        = \"AD 464 Kerberos Authentication UDP - DC${count.index+1} Outbound\"\n  description                 = \"AD 464 Kerberos Authentication UDP - DC${count.index+1} Outbound\"\n  priority                    = (220 + count.index)\n  direction                   = \"Outbound\"\n  access                      = \"Allow\"\n  protocol                    = \"Udp\"\n  source_port_range           = \"*\"\n  destination_port_range      = \"464\"\n  source_address_prefix       = \"*\"\n  destination_address_prefix  = local.dns_servers[count.index]\n}\n\n# Port 636 LDAP SSL TCP\nresource \"azurerm_network_security_rule\" \"tcp_636_dc_outbound\" {\n  depends_on = [data.azurerm_resource_group.network-rg]\n\n  count = length(local.dns_servers)\n\n  network_security_group_name = azurerm_network_security_group.active-directory-dc-nsg.name\n  resource_group_name         = data.azurerm_resource_group.network-rg.name\n  name                        = \"AD 636 LDAP SSL TCP - DC${count.index+1} Outbound\"\n  description                 = \"AD 636 LDAP SSL TCP - DC${count.index+1} Outbound\"\n  priority                    = (230 + count.index)\n  direction                   = \"Outbound\"\n  access                      = \"Allow\"\n  protocol                    = \"Tcp\"\n  source_port_range           = \"*\"\n  destination_port_range      = \"636\"\n  source_address_prefix       = \"*\"\n  destination_address_prefix  = local.dns_servers[count.index]\n}\n\n\n#File: active-directory-references.tf\n#############################\n## Active Directory - Main ##\n#############################\n\n# Locals\nlocals {\n  dns_servers = [ \"10.10.10.10\", \"10.10.10.11\", ]\n  dc_servers = [ \"10.20.20.11\", \"10.20.30.11\" ]\n  ad_resource_group = \"test-rg\"  \n}\n\n# Reference to existing resource group\ndata \"azurerm_resource_group\" \"network-rg\" {\n  name = local.ad_resource_group\n}\n#File: app-variables.tf\n#############################\n## Application - Variables ##\n#############################\n\n# company name \nvariable \"company\" {\n  type        = string\n  description = \"This variable defines thecompany name used to build resources\"\n}\n\n# application name \nvariable \"app_name\" {\n  type        = string\n  description = \"This variable defines the application name used to build resources\"\n}\n\n# application or company environment\nvariable \"environment\" {\n  type        = string\n  description = \"This variable defines the environment to be built\"\n}\n\n# azure region\nvariable \"location\" {\n  type        = string\n  description = \"Azure region where the resource group will be created\"\n  default     = \"north europe\"\n}\n#File: provider-main.tf\n###########################\n## Azure Provider - Main ##\n###########################\n\n# Define Terraform provider\nterraform {\n  required_version = \">= 1.3\"\n}\n\n# Configure the Azure provider\nprovider \"azurerm\" { \n  environment     = \"public\"\n  features {}\n  subscription_id = var.azure-subscription-id\n  client_id       = var.azure-client-id\n  client_secret   = var.azure-client-secret\n  tenant_id       = var.azure-tenant-id\n}\n\n#File: provider-variables.tf\n################################\n## Azure Provider - Variables ##\n################################\n\n# Azure authentication variables\n\nvariable \"azure-subscription-id\" {\n  type        = string\n  description = \"Azure Subscription ID\"\n}\n\nvariable \"azure-client-id\" {\n  type        = string\n  description = \"Azure Client ID\"\n}\n\nvariable \"azure-client-secret\" {\n  type        = string\n  description = \"Azure Client Secret\"\n}\n\nvariable \"azure-tenant-id\" {\n  type        = string\n  description = \"Azure Tenant ID\"\n}\n"}]}
{"messages": [{"role": "user", "content": "Create a new Azure Active Directory B2C directory using Terraform. Define the country code, data residency location, display name, domain name, resource group name, and SKU name using input variables. Ensure to specify the required providers for Azure Resource Manager and Azure Active Directory. Configure the Azure provider with the appropriate features, and set `skip_provider_registration` to true. Utilize the variables defined in the `variables.tf` file to pass the necessary values."}, {"role": "assistant", "content": "\n#File: b2c.tf\n## AAD B2C:-\nresource \"azurerm_aadb2c_directory\" \"Az_B2c\" {\n  country_code            = var.b2c-country-code\n  data_residency_location = var.b2c-data-loc\n  display_name            = var.b2c-name\n  domain_name            = \"${var.b2c-name}.onmicrosoft.com\"\n  resource_group_name     = var.b2c-rg\n  sku_name                = var.b2c-sku\n}\n\n\n\n#File: main.tf\nterraform {\n  required_providers {\n    azurerm = {\n      source  = \"hashicorp/azurerm\"\n      version = \"~> 3.2\"\n    }\n    azuread = {\n      source  = \"hashicorp/azuread\"\n      version = \"~> 2.20.0\"\n    }\n    \n  }\n}\nprovider \"azurerm\" {\n  features {}\n  skip_provider_registration = true\n}\n#File: variables.tf\nvariable \"b2c-name\" {\n  type        = string\n  description = \"Name of the B2C Tenant\"\n}\n\nvariable \"b2c-country-code\" {\n  type        = string\n  description = \"Country Code of B2C\"\n}\n\nvariable \"b2c-data-loc\" {\n  type        = string\n  description = \"Data Residency Location of B2C\"\n}\n\nvariable \"b2c-rg\" {\n  type        = string\n  description = \"Resource Group of B2C\"\n}\n\nvariable \"b2c-sku\" {\n  type        = string\n  description = \"Resource Group of B2C\"\n}"}]}
{"messages": [{"role": "user", "content": "Create a GKE cluster using the `google_container_cluster` resource with the specified project ID and region. Configure the cluster to remove the default node pool and define a separately managed node pool with a specified number of nodes. Set up a VPC using the `google_compute_network` resource, and create a subnet within that VPC. Implement a firewall rule to deny access based on specified IPv4 ranges. Output the master endpoint for the created GKE cluster."}, {"role": "assistant", "content": "\n#File: gke.tf\nvariable \"gke_num_nodes\" {\n  default     = 2\n  description = \"number of gke nodes\"\n}\n\n# GKE cluster\nresource \"google_container_cluster\" \"primary\" {\n  name     = \"${var.project_id}-gke\"\n  location = \"${var.region}-${var.zone}\" # Single zone\n\n  # We can't create a cluster with no node pool defined, but we want to only use\n  # separately managed node pools. So we create the smallest possible default\n  # node pool and immediately delete it.\n  remove_default_node_pool = true\n  initial_node_count       = 1\n\n  network    = google_compute_network.vpc.name\n  subnetwork = google_compute_subnetwork.subnet.name\n\n  node_config {\n    tags = [\"gke-cluster\"] # Apply the same tag as in the firewall rule\n  }\n}\n\n# Separately Managed Node Pool\nresource \"google_container_node_pool\" \"primary_nodes\" {\n  name     = google_container_cluster.primary.name\n  location = \"${var.region}-${var.zone}\" # Single zone\n  cluster  = google_container_cluster.primary.name\n\n  node_count = var.gke_num_nodes\n\n  node_config {\n    oauth_scopes = [\n      \"https://www.googleapis.com/auth/logging.write\",\n      \"https://www.googleapis.com/auth/monitoring\",\n    ]\n\n    labels = {\n      env = var.project_id\n    }\n\n    # preemptible  = true\n    machine_type = \"n1-standard-1\"\n    tags         = [\"gke-node\", \"${var.project_id}-gke\"]\n    metadata = {\n      disable-legacy-endpoints = \"true\"\n    }\n  }\n}\n\n#File: outputs.tf\noutput \"gke_endpoint\" {\n  description = \"The GKE master endpoint\"\n  value       = google_container_cluster.primary.endpoint\n}\n\n#File: variables.tf\nvariable \"project_id\" {\n  description = \"The project ID to deploy to\"\n  type        = string\n}\n\nvariable \"region\" {\n  description = \"The region to deploy the resources\"\n  type        = string\n}\n\nvariable \"zone\" {\n  description = \"The zone to deploy the resources\"\n  type        = string\n}\n\nvariable \"deny_ip_ranges_ipv4\" {\n  description = \"List of IPv4 ranges to deny\"\n  type        = list(string)\n}\n\n#File: versions.tf\nterraform {\n  required_providers {\n    google = {\n      source  = \"hashicorp/google\"\n      version = \"~> 4.0\" # Or the latest version\n    }\n  }\n}\n\n#File: vpc.tf\nprovider \"google\" {\n  project = var.project_id\n  region  = var.region\n}\n\n# VPC\nresource \"google_compute_network\" \"vpc\" {\n  name                    = \"${var.project_id}-vpc\"\n  auto_create_subnetworks = \"false\"\n}\n\n# Subnet\nresource \"google_compute_subnetwork\" \"subnet\" {\n  name          = \"${var.project_id}-subnet\"\n  region        = var.region\n  network       = google_compute_network.vpc.name\n  ip_cidr_range = \"10.10.0.0/24\"\n}\n\n# Deny access\nresource \"google_compute_firewall\" \"deny_all_other_access\" {\n  name     = \"${var.project_id}-deny-all-other-access\"\n  network  = google_compute_network.vpc.name\n  priority = 1000 # Priority for deny rules\n\n  deny {\n    protocol = \"tcp\"\n    ports    = [\"80\"]\n  }\n\n  source_ranges = var.deny_ip_ranges_ipv4 # Deny traffic from IP addresses\n\n  target_tags = [\"gke-node\"]\n}\n"}]}
{"messages": [{"role": "user", "content": "Create a local variable to hold a randomly generated secret. Flatten the VPN configuration to extract tunnel names and configurations. Create a Google Cloud HA VPN gateway with specified project, region, and network attributes. Set up a Google Cloud Router with configurable BGP settings, including advertise mode and IP ranges. Establish VPN tunnels and external VPN gateways based on the defined configurations to facilitate connectivity."}, {"role": "assistant", "content": "\n#File: main.tf\nlocals {\n  secret = random_id.secret.b64_url\n\n  tunnels_tmp = flatten([\n    for vpn_instance_name, vpn_instance_config in var.vpn_config.instances : [\n      for tunnel_name, tunnel_config in vpn_instance_config.tunnels : {\n        tunnel_name = \"${vpn_instance_name}-${tunnel_name}\"\n        tunnel_config = merge(\n          tunnel_config,\n          {\n            vpn_instance_name     = vpn_instance_name\n            peer_external_gateway = try(vpn_instance_config.peer_external_gateway, null)\n            peer_gcp_gateway      = try(vpn_instance_config.peer_gcp_gateway, null)\n          }\n        )\n      }\n    ]\n  ])\n\n  tunnels = {\n    for k, v in local.tunnels_tmp : v.tunnel_name => v.tunnel_config\n  }\n}\n\nresource \"google_compute_ha_vpn_gateway\" \"ha_gateway\" {\n  name    = var.vpn_gateway_name\n  project = var.project\n  region  = var.region\n  network = var.network\n}\n\nresource \"google_compute_router\" \"router\" {\n  name    = coalesce(var.router_name, \"${var.vpn_gateway_name}-rtr\")\n  project = var.project\n  region  = var.region\n  network = var.network\n  bgp {\n    advertise_mode = (\n      var.vpn_config.router_advertise_config == null\n      ? null\n      : var.vpn_config.router_advertise_config.mode\n    )\n    advertised_groups = (\n      var.vpn_config.router_advertise_config == null ? null : (\n        var.vpn_config.router_advertise_config.mode != \"CUSTOM\"\n        ? null\n        : var.vpn_config.router_advertise_config.groups\n      )\n    )\n    dynamic \"advertised_ip_ranges\" {\n      for_each = (\n        var.vpn_config.router_advertise_config == null ? {} : (\n          var.vpn_config.router_advertise_config.mode != \"CUSTOM\"\n          ? {}\n          : var.vpn_config.router_advertise_config.ip_ranges\n        )\n      )\n      iterator = range\n      content {\n        range       = range.key\n        description = range.value\n      }\n    }\n    asn                = var.vpn_config.router_asn\n    keepalive_interval = try(var.vpn_config.keepalive_interval, 20)\n  }\n}\n\n# Represents a VPN gateway managed outside of GCP\nresource \"google_compute_external_vpn_gateway\" \"external_gateway\" {\n  for_each = { for k, v in var.vpn_config.instances : k => v if try(v.peer_external_gateway, null) != null }\n\n  name            = try(each.value.peer_external_gateway.name, null) != null ? each.value.peer_external_gateway.name : \"${each.value.name}-external-gw\"\n  project         = var.project\n  redundancy_type = each.value.peer_external_gateway.redundancy_type\n  description     = try(each.value.external_vpn_gateway_description, null)\n  labels          = var.labels\n  dynamic \"interface\" {\n    for_each = each.value.peer_external_gateway.interfaces\n    content {\n      id         = interface.value.id\n      ip_address = interface.value.ip_address\n    }\n  }\n}\n\nresource \"google_compute_router_peer\" \"bgp_peer\" {\n  for_each        = local.tunnels\n  region          = var.region\n  project         = var.project\n  name            = try(each.value.bgp_session_name, null) != null ? each.value.bgp_session_name : \"${var.vpn_gateway_name}-${each.key}\"\n  router          = google_compute_router.router.name\n  peer_ip_address = each.value.bgp_peer.address\n  peer_asn        = each.value.bgp_peer.asn\n  ip_address      = each.value.bgp_peer_options == null ? null : each.value.bgp_peer_options.ip_address\n  advertised_route_priority = (\n    each.value.bgp_peer_options == null ? try(each.value.route_priority, 1000) : (\n      each.value.bgp_peer_options.route_priority == null\n      ? each.value.route_priority\n      : each.value.bgp_peer_options.route_priority\n    )\n  )\n  advertise_mode = (\n    each.value.bgp_peer_options == null ? null : each.value.bgp_peer_options.advertise_mode\n  )\n  advertised_groups = (\n    each.value.bgp_peer_options == null ? null : (\n      each.value.bgp_peer_options.advertise_mode != \"CUSTOM\"\n      ? null\n      : each.value.bgp_peer_options.advertise_groups\n    )\n  )\n  dynamic \"advertised_ip_ranges\" {\n    for_each = (\n      each.value.bgp_peer_options == null ? {} : (\n        each.value.bgp_peer_options.advertise_mode != \"CUSTOM\"\n        ? {}\n        : each.value.bgp_peer_options.advertise_ip_ranges\n      )\n    )\n    iterator = range\n    content {\n      range       = range.key\n      description = range.value\n    }\n  }\n  interface = google_compute_router_interface.router_interface[each.key].name\n}\n\nresource \"google_compute_router_interface\" \"router_interface\" {\n  for_each   = local.tunnels\n  project    = var.project\n  region     = var.region\n  name       = try(each.value.bgp_session_name, null) != null ? each.value.bgp_session_name : each.key\n  router     = google_compute_router.router.name\n  ip_range   = each.value.bgp_session_range == \"\" ? null : each.value.bgp_session_range\n  vpn_tunnel = google_compute_vpn_tunnel.tunnels[each.key].name\n}\n\nresource \"google_compute_vpn_tunnel\" \"tunnels\" {\n  provider                        = google-beta\n  for_each                        = local.tunnels\n  project                         = var.project\n  region                          = var.region\n  name                            = \"${var.vpn_gateway_name}-${each.key}\"\n  router                          = google_compute_router.router.name\n  peer_external_gateway           = try(google_compute_external_vpn_gateway.external_gateway[each.value.vpn_instance_name].self_link, null)\n  peer_external_gateway_interface = each.value.peer_external_gateway_interface\n  peer_gcp_gateway                = each.value.peer_gcp_gateway\n  vpn_gateway_interface           = each.value.vpn_gateway_interface\n  ike_version                     = each.value.ike_version\n  shared_secret                   = each.value.shared_secret == \"\" ? local.secret : each.value.shared_secret\n  vpn_gateway                     = google_compute_ha_vpn_gateway.ha_gateway.self_link\n  labels                          = var.labels\n}\n\nresource \"random_id\" \"secret\" {\n  byte_length = 16\n}\n\n#File: outputs.tf\noutput \"vpn_gw_name\" {\n  value       = google_compute_ha_vpn_gateway.ha_gateway.name\n  description = \"HA VPN gateway name\"\n}\n\noutput \"vpn_gw_self_link\" {\n  value       = google_compute_ha_vpn_gateway.ha_gateway.self_link\n  description = \"HA VPN gateway self_link\"\n}\n\noutput \"vpn_gw_local_address_1\" {\n  value       = google_compute_ha_vpn_gateway.ha_gateway.vpn_interfaces[0].ip_address\n  description = \"HA VPN gateway IP address 1\"\n}\n\noutput \"vpn_gw_local_address_2\" {\n  value       = google_compute_ha_vpn_gateway.ha_gateway.vpn_interfaces[1].ip_address\n  description = \"HA VPN gateway IP address 2\"\n}\n\noutput \"random_secret\" {\n  value       = local.secret\n  sensitive   = true\n  description = \"HA VPN IPsec tunnels secret that has been randomly generated\"\n}\n#File: variables.tf\nvariable \"project\" {\n  default = null\n  type    = string\n}\n\nvariable \"region\" {\n  description = \"Region to deploy VPN gateway in\"\n  type        = string\n}\n\nvariable \"vpn_gateway_name\" {\n  description = \"VPN gateway name. Gateway created by the module\"\n  type        = string\n}\n\nvariable \"router_name\" {\n  description = \"Cloud router name. The router is created by the module\"\n  type        = string\n  default     = null\n}\n\nvariable \"network\" {\n  description = \"VPC network ID that should be used for deployment\"\n  type        = string\n}\n\nvariable \"labels\" {\n  description = \"Labels for VPN components\"\n  type        = map(string)\n  default     = {}\n}\n\nvariable \"vpn_config\" {\n  type        = any\n  description = <<-EOF\n  VPN configuration from GCP to on-prem or from GCP to GCP.\n  If you'd like secrets to be randomly generated set `shared_secret` to empty string (\"\").\n\n  Example:\n\n  ```\n  vpn_config = {\n    router_asn    = 65000\n    local_network = \"vpc-vpn\"\n\n    router_advertise_config = {\n      ip_ranges = {\n        \"10.10.0.0/16\" : \"GCP range 1\"\n      }\n      mode   = \"CUSTOM\"\n      groups = null\n    }\n\n    instances = {\n      vpn-to-onprem = {\n        name = \"vpn-to-onprem\",\n        peer_external_gateway = {\n          redundancy_type = \"TWO_IPS_REDUNDANCY\"\n          interfaces = [{\n            id         = 0\n            ip_address = \"1.1.1.1\"\n            }, {\n            id         = 1\n            ip_address = \"2.2.2.2\"\n          }]\n        },\n        tunnels = {\n          remote0 = {\n            bgp_peer = {\n              address = \"169.254.1.2\"\n              asn     = 65001\n            }\n            bgp_peer_options                = null\n            bgp_session_range               = \"169.254.1.1/30\"\n            ike_version                     = 2\n            vpn_gateway_interface           = 0\n            peer_external_gateway_interface = 0\n            shared_secret                   = \"secret\"\n          }\n          remote1 = {\n            bgp_peer = {\n              address = \"169.254.1.6\"\n              asn     = 65001\n            }\n            bgp_peer_options                = null\n            bgp_session_range               = \"169.254.1.5/30\"\n            ike_version                     = 2\n            vpn_gateway_interface           = 1\n            peer_external_gateway_interface = 1\n            shared_secret                   = \"secret\"\n          }\n        }\n      }\n    }\n  }\n  ```\n  EOF\n}\n#File: versions.tf\nterraform {\n  required_version = \">= 1.3, < 2.0\"\n  required_providers {\n    google = {\n      version = \">= 4.58\"\n    }\n  }\n}\n"}]}
